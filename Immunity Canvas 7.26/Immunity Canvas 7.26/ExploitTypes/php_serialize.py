#!/usr/bin/python
"""
Version 0.2 serial-piez
Python implementation of PHP's serialize. Kinda rough and ready
and needs some perfecting.

Implements serialization of:
	- PHP strings, ints, bools
	- PHP objects
		- class variables
		- private variables
		- protected variables
	- PHP Arrays
	- PHP hashes

Coded specifically to aid exploitation and improve exploit clarity
of PHP's "magic" methods(http://php.net/manual/en/language.oop5.magic.php).

TODO:
	- Implement a better way to access priv/prot variables
	- More extensive testing
	- Error checking/more robust

FIXED:
	0.2 - Fixed bug in phpArray
	<   msg += 'i:' + str(i) + ';' + self.translate(element)
	>   msg += 'i:' + str(i) + ';' + php.translate(self,element)
	

jh Nov 2009
"""
class php_ize:
	def translate(self, variable):
		msg = ""
		if type(variable).__name__ == 'int':
			msg += 'i:' + str(variable) + ';'
		elif type(variable).__name__ == 'str':
			msg += 's:' + str(len(variable) - variable.count("\\0")) + ':"' + variable + '";'
		elif type(variable).__name__ == 'bool':
			msg += 'b:' + str(int(variable)) + ';'
		elif type(variable).__name__ == 'instance':
			msg += str(variable) 
		return msg


class ize_phpObject(php_ize):
	def __init__(self, obj_name):
		self.name = obj_name
		self.class_vars = {}

	def add_classvar(self,name, value):
		self.class_vars[name] = value

	def add_priv_var(self, name, value):
		self.class_vars["\\0" + self.name + "\\0" + name] = value

	def add_prot_var(self, name, value):
		self.class_vars["\\0*\\0" + name] = value

	def add_object(self, var_name, obj_name):
		self.class_vars[var_name] = ize_phpObject(obj_name)
		
	def __str__(self):
		msg = 'O:' + str(len(self.name) - self.name.count("\\0")) + ':"' + self.name + '":' + str(len(self.class_vars)) + ':{'
		for key, val in self.class_vars.iteritems():
			if(type(val).__name__ == 'instance'):
				msg += self.translate(key) + str(val)
			else:
				msg += self.translate(key) + self.translate(val)
		msg += '}'
		return msg

class ize_phpArray(php_ize):
	def __init__(self, elements_add):
		self.elements = elements_add
		self.objects = {}
	# add single element
	def add_element(self,element):
		self.elements.append(element)
	# join an array to your array
	def add_array(self,array):
		self.elements.extend(array)
	# add an object to your array
	def add_object(self,name):
		# use dict to allow easy access to
		# your objects methods
		self.objects[name] = ize_phpObject(name)
		self.elements.append(self.objects[name])
	def add_hash(self, data_in):
		self.elements.append(ize_phpHash(data_in))
	
	# serialize all elements of an array	
	def __str__(self):
		msg = "a:" + str(len(self.elements)) + ":{"
		for i, element in enumerate(self.elements):
			msg += 'i:' + str(i) + ';' + self.translate(element)
		msg += '}'
		return msg


# hashes get serialized into
# type array, with lack of 
# element number prefix
class ize_phpHash(php_ize):
	def __init__(self, data_in):
		self.elements = data_in
	def add_element(self, name, value):
		self.elements[name] = value
	
	def __str__(self):
		msg = "a:" + str(len(self.elements)) + ":{"
		for key, val in self.elements.iteritems():
			msg += self.translate(key) + self.translate(val)
		msg += "}"
		return msg
