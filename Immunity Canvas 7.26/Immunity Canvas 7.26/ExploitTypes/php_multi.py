#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

"""
php_multi.py
more advanced php exploits require multiple requests (Login / Exploit String / trigger)
update: just imports all the functions from phpexploit class and uses a new run function.
"""

import sys
if "." not in sys.path: sys.path.append(".")
from ExploitTypes.phpexploit import *

class php_multi(phpexploit):
    """
    Base class for all php exploits
    """
    def __init__(self):
        phpexploit.__init__(self)
        #hostname="http://google.com"
        #self.hostname=hostname
        self.ua=spkproxy.UserAgent("") #placeholder
        self.name=""
        self.webserverport=0 #set to non-zero to make it an RFI exploit

    def run(self):
        self.getargs()

        self.setInfo("%s attacking %s:%d (in progress)"%(self.name,self.host,self.port))
        self.log("Using version: %s"%self.version)
        if self.version==0:
            ret=self.test()
            if not ret:
                self.setInfo("%s against %s:%d (failed: didn't find vulnerable target!)"%(self.name,self.host,self.port))
                self.log("Testing didn't find vulnerable target")
                return 0
        if not self.hostname:
            self.hostname = self.host

        self.log("Attacking %s:%d"%(self.host,self.port))
        self.log("Basic Auth User: %s"%self.basicauth_user)
        self.log("VHost: %s"%self.hostname)

        #setup our UA first
        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        #If we have to do basic-auth, let's get an object from spkproxy here
        if self.basicauth_user:
            auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
        else:
            auth=None

        UA=spkproxy.UserAgent(protocol+"://"+self.host+"/"+self.basepath, auth=auth, hostname=self.hostname, exploit=self)

        #define this for the request1..N functions
        self.UA=UA
        self.UA.addHeader("User-Agent", "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT;)")
        done=False 
        i=0
        while not done:
            i+=1
            if hasattr(self, "request%d"%i):
                f=getattr(self, "request%d"%i)
                ret=f()
                if not ret:
                    break 
            else:
                done=True 

        ret=self.ISucceeded()

        return ret 

