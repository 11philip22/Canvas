#! /usr/bin/env python


#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002
#http://www.immunityinc.com/CANVAS/ for more information


import sys
import gtk
if "." not in sys.path: sys.path.append(".")
from toolbar import VisualToolbar
import exploitutils


class Toolobject(VisualToolbar):
    NAME = "Binary"
    GLADE_DIALOG = "dialog.glade2"
    filexpm = "binary.ico"
    button_label = "Add Binary"
    button_tooltip = "Add a Binary to the fuzzer packet"
    button_private_tooltip = "Private"
    button_signal = None
    color = "#b89afe"
    size = 55
    NumberofXp =1
    objsize = 0
    objectcomments = None  
    link=False

    def __init__(self):
        VisualToolbar.__init__(self)


    def setSize(self, size):
        self.size = size

    def setArg(self,args):
        self.string = args['checkbadchar']
        try:
            tmp=self.string.decode('string_escape')
        except ValueError:
            tmp="Error parsing string!"
        self.objsize = len(exploitutils.binstring(tmp))
        print self.xpacketlist



    def setDialog(self,dialog,xpacket,badchars,arch):
        string=dialog.get_widget('checkbadchar')
        string.set_text(self.string)


    def createPython(self):
        return ["spk.s_binary(%r)\n" % self.string.decode('string_escape')]  


    def Show(self):
        try:
            buf = "Binary: %s\nLength: %d bytes" % (self.string, int(self.objsize))
        except:
            buf = "Binary: None Length: None"

        return buf


    def preparedialog(self,dialog,argb,argc,badchars,arch):
        pass
    


    def Help(self):
        return "The Binary option allows you to place a binary string into your fuzzer\n\
        buffer. This will be transformed into the binary representation.  \"\\r\\n\\r\\n\""


    def getSize(self):
        self.objsize = len( exploitutils.binstring(self.string.decode('string_escape') ) )
        return int(self.objsize)

    def save(self):
        savedic={}
        savedic['string']=self.string
        savedic['objsize']=str(self.getSize())
        if self.objectcomments:
            savedic['comment']=self.objectcomments.replace("\n","\\n")
        return savedic
        #f.write("+++"+self.NAME+"\n")
        #f.write("**string="+"\""+str(self.string)+"\""+"\n")
        #f.write("**objsize="+"\""+str(self.objsize)+"\""+"\n")

    def load(self,args):
        if args.has_key('string'):
            self.string = args['string']

        if args.has_key('objsize'):
            self.objsize = args['objsize']

        if args.has_key('comment'):
            tmp = args['comment']
            self.objectcomments=tmp.replace("\\n","\n")

