#! /usr/bin/env python


#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002
#http://www.immunityinc.com/CANVAS/ for more information


import gtk
from toolbar import VisualToolbar
from MOSDEF import mosdef


class Toolobject(VisualToolbar):
  NAME = "Assembly"
  GLADE_DIALOG = "dialog.glade2"
  filexpm = "assembly.ico"
  button_label = "Add Assembly"
  button_tooltip = "Add Assembly to exploit packet"
  button_private_tooltip = "Private"
  button_signal = None
  color = "#21cfe2"
  size = 35
  type = "random"
  boxargs={}
  plataform=None
  objsize=0
  #need it local also, to preparedialog for editing
  buf=[]
  arch=None
  NumberofXp =1
  objectcomments = None
  link=False
  
  
  def __init__(self):
    VisualToolbar.__init__(self)
  
  def setSize(self, size):
    self.size =size
    
  def setArg(self,args):
    
    if args.has_key('asmcode'):
      self.asmcode = args['asmcode']
      
    if args.has_key('plataform'):
      self.arch = args['plataform']
    try:
      self.objsize = len(mosdef.assemble(self.asmcode, self.getMOSDEFPlatform() ))
    except:
      print "MOSDEF failed: Couldn't assemble code"    
    
  def Show(self):
    if self.arch != None:
      return "Arch: %s ObjSize: %s" % (self.arch, self.objsize)
    else:
      return "No Arch selected"
  
  def Help(self):
    return "The assembly option allows you to insert custom assembly code in your buffer.\n\
The cpu type will be set from the platform/arch combination you\n\
selected previously. VisualSploit supports X86 (AT&T) / SPARC / PPC."
  
  def setDialog(self,dialog,xpacket,badchars,arch):
    self.arch = arch
    asmcode=dialog.get_widget('asmcode')
    asmbuffer=gtk.TextBuffer()
    asmbuffer.set_text(self.asmcode)
    asmcode.set_buffer(asmbuffer)
    hboxprepareplat = dialog.get_widget("hbox1") 
    prepareplat = gtk.combo_box_new_text()
    hboxprepareplat.pack_start(prepareplat,expand=True, padding=0)

    prepareplat.show()
    #prepareplat.append_text('Change Arch?')
    #for a in self.platlist:
    #  prepareplat.append_text(a)
     
    #try:
    #  prepareplat.set_active(self.platlist.index(self.boxargs['plataform'])+1)
    #except:
    #  prepareplat.set_active(0)
    
    try:
      self.objsize = len(mosdef.assemble(self.asmcode, self.getMOSDEFPlatform()))
    except:
      print "Mosdef failed: Couldn't assemble code"
      
    prepareplat.connect('changed', self.changeplat)
    
      
  def preparedialog(self,widget,platlist,xpacket,badchars,arch):
    self.arch=arch
    hboxprepareplat = widget.get_widget("hbox1") 
    prepareplat = gtk.combo_box_new_text()
    hboxprepareplat.pack_start(prepareplat,expand=True, padding=0)
    #for now, we take the plat/arch for asm directly from the project
    #prepareplat.show()
    prepareplat.append_text('Select Arch:')
    
    for a in platlist:
      prepareplat.append_text(a)
    prepareplat.set_active(0)
    prepareplat.connect('changed', self.changeplat)
  
  def changeplat(self, combobox):
        model = combobox.get_model()
        index = combobox.get_active()
        
        self.boxargs['plataform']=model[index][0]
        self.setArg(self.boxargs)
        return

   
  def createPython(self):
    if self.arch == "Win32": 
      self.arch ="X86"  #quick nasty fix
    self.buf=[]
    self.buf.append('code = """ %s """ \n'% self.asmcode)
    self.buf.append("buf+=mosdef.assemble(code, '%s')\n" % self.arch)
    return  self.buf
    
  def save(self):
    savedic={}
    savedic['asmcode']=self.asmcode.replace("\n","\\n")
    savedic['arch']=self.arch
    savedic['objsize']=self.objsize
    if self.objectcomments:
      savedic['comment']=self.objectcomments.replace("\n","\\n")
    return savedic
   
  
  def load(self,args):
    if args.has_key('asmcode'):
      tmp = args['asmcode']
      self.asmcode = tmp.replace("\\n","\n")
      
      
    if args.has_key('arch'):
      self.arch = args['arch']
      
      
    if args.has_key('objsize'):
      self.objsize = args['objsize']
    
    if args.has_key('comment'):
      tmp = args['comment']
      self.objectcomments=tmp.replace("\\n","\n")


  
