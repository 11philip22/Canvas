import sys
if '.' not in sys.path: sys.path.append('.')

import socket
import mysqllib
import timeoutsocket

from exploitutils import standard_callback_commandline
from tcpexploit import tcpexploit


DESCRIPTION             = "MySQL version detection"
VERSION                 = "1.0"
NAME                    = "mysql_version_detection"
PROPERTY                = {}
PROPERTY['TYPE']        = "Recon"
PROPERTY['SITE']        = "Remote"
DOCUMENTATION           = {}
DOCUMENTATION['Notes'] = """

Will scan target for MySQL version information.

"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name         = NAME
        self.host         = ''
        self.port         = 3306
        self.timeout      = 20

    def getargs(self):
        self.getarg("port")
        self.getarg("timeout")

    def test(self):
        self.getargs()
        self.host = self.target.interface

        s = self.gettcpsock()

        try:
            s.connect((self.host, self.port))
            self.target.add_knowledge("mysql_version_port", self.port, 100)
        except (socket.error, timeoutsocket.Timeout):
            return 0
        finally:
            s.close()

        return 1

    def run(self):
        self.getargs()
        self.host = self.target.interface

        self.setInfo("%s running against %s:%d (in progress)" % (NAME, self.host, self.port))
        version = None

        try:
            m = mysqllib.MySQL(timeout=self.timeout)
            m.connect((self.host, self.port))
            version = m.getServerVersion()
            self.log('MySQL version: %s' % version)
            self.target.add_knowledge("mysql_version", version, 100)
            m.close()
        except Exception, ex:
            self.log('Error: %s' % ex)

        if not version:
            self.setInfo("%s running against %s:%d - done (failure)" % (NAME, self.host, self.port))
            return 0

        self.setInfo("%s running against %s:%d - done (success!)" % (NAME, self.host, self.port))
        return 1

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
