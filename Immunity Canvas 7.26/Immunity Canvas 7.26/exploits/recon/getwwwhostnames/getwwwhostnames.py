#! /usr/bin/env python

"""
getwwwhostnames.py (Gather up hostnames for an IP address)

"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import socket
import sys
import re

if "." not in sys.path:
    sys.path.append(".")

from canvasexploit import canvasexploit
from exploitutils import *
import canvasengine

DOCUMENTATION={}
DOCUMENTATION["Notes"]="""
This goes to some public databases that have lists of IP->hostname matchups
and then adds these to the www_hostname knowledge for that target.

This knowledge is then used by PHP include exploits who will iterate
through them looking for a vulnerable virtual host.
"""

DESCRIPTION         = "Gathers WWW hostnames for an IP address"
VERSION             = "2.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Recon"
PROPERTY['SITE']    = "Remote"

NAME                = "Get WWW Hostnames"

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)

        self.name     = NAME
        self.host     = None
        self.verify   = False
        self.pattern0 = "<div><h3><span id=\"shared_ma\">(.*?)</span></h3><ol class=\"xbul\">(.*?)</ol></div>"
        self.pattern1 = "<li><i>(.*?)</i></li>"

    def getArgs(self):
        self.getarg("verify")

    def run(self):
        """
        runs the attempt to grab information
        """
        self.getArgs()
        self.host = self.target.interface
        self.setInfo("Running %s against %s" % (NAME, self.host)) #check message
        if self.verify:
           logging.info("Verification enabled")

        ret = set([])
        import libs.spkproxy as spkproxy
        shost = self.host.replace(".","/")
        url = "https://www.robtex.com/en/advisory/ip/%s/"%shost
        (res, responsecode) = spkproxy.urlopen(url, exploit=self, entireresponse=True, return_response_code=True, auth=None,verb="GET")

        if responsecode == 200:
            response = res.read()
            if response:
                results  = re.search(self.pattern0, response)
                if results:
                    pre_res   = results.group(2)
                    hostnames = re.findall(self.pattern1,pre_res)

                    if hostnames:
                       for h in hostnames:
                           if h not in ret and h != self.host:
                              if self.verify:
                                 try:
                                     if self.host == socket.gethostbyname(h): ret.add(h)
                                 except Exception:
                                     pass
                              else:
                                 ret.add(h)
        else:
            logging.error("Something went wrong while querying public database")

        if ret:
            logging.warning("Found %d total hostnames for %s: %s" % (len(ret), self.host, list(ret)))
            self.target.add_knowledge("vhosts", list(ret), 100)
            self.setInfo("%s for %s - done (success)" % (NAME, self.host))
            return 1

        logging.error("%s - found no hostnames!" % self.name)
        self.setInfo("%s - found no hostnames!" % self.name)
        return 0


if __name__ == '__main__':
    app = theexploit()
    ret = standard_callback_commandline(app)
