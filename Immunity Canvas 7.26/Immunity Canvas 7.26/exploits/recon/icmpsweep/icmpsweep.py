#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information


# CANVAS ICMP Sweep module
#
# Bug class: Recon
# 

import sys
if "." not in sys.path: sys.path.append(".")

import socket
import timeoutsocket
import time
import select
import localsniffer

# CANVAS modules
from exploitutils import *
from canvasexploit import canvasexploit
from sniffer import sender
from sniffer import packetConstructor
from sniffer import get_ethernet_header
from sniffer import get_iface_from_target

# GUI info
NAME                   = "ICMP Sweep"
DESCRIPTION            = "Checks for ICMP messages against remote hosts"
DOCUMENTATION          = {}
DOCUMENTATION["Notes"] = """
This module requires sniffer capabilities (i.e. root on Linux).

"""
VERSION                = "0.1"
PROPERTY               = {}
PROPERTY['TYPE']       = "Recon"
PROPERTY['SITE']       = "Remote"


class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        # used for done flag from commandline
        self.done = 0
        self.port=53 
        self.fromport=53 #if fromport is 0 we randomize it
        self.closedhosts=[]
        self.openhosts=[]
        self.name=NAME
        self.covertness = 0
        self.setVersions()
        self.timeout=60
        self.result=self.openhosts
        #source=self.engine.get_callback_interface().ip
        self.source="127.0.0.1"
        self.netmask="32"
        self.sleeptime=0.1
        self.maxthreads=1
        return

    def setVersions(self):
        self.versions={}
        self.versions[0]=("Fast ICMP Scan (requires root)", None)

    def snooze(self, seconds):
        self.log("Snoozing (%d seconds)"% seconds)
        while seconds:
            self.log("%.2d seconds left in snooze"% seconds)
            time.sleep(1)
            seconds = seconds - 1 
        return 1

    def port_callback(self,parser):
        host=parser.attribs["ipsource"]
        self.log("Found host: %s"%host)
        self.foundhosts+=[host]
        return


    def run_on_host(self,target):
        """
        runs once on each host that is alive in the netrange
        """
        host=target.interface

        if self.state==self.HALT:
            return 
        mpacker=packetConstructor()
        mysender=sender(iface=self.iface, target=self.host)

        if self.doscanrand:
            devlog("icmpsweep", "Scanning %s from %s"%(host, self.source))
            mpacker.ICMP_ECHO_REQUEST(self.source,host,0,0,"")


            # XXX: this inits it's own sender() doesn't use self.mysender
            self.eth_header = get_ethernet_header(self.host, self.iface)
            if self.eth_header=="":
                self.log("Ethernet header did not get displayed properly - exiting")
                return 0


            data=self.eth_header + mpacker.get()
            mysender.send(data,"IP")
            #if you don't sleep, you'll miss some ports. 
            time.sleep(self.sleeptime)

        return

    def getargs(self):
        self.host=self.target.interface
        self.timeout=float(self.argsDict.get("timeout",self.timeout))
        self.source=self.argsDict.get("source",self.engine.get_callback_interface(self.host))
        self.netmask=self.argsDict.get("netmask",self.netmask)
        self.maxthreads=int(self.argsDict.get("maxthreads",self.maxthreads))
        self.iface      = self.argsDict.get("iface", None)            

        return 

    def start_sniffer(self, func, filterstr):

        if hasattr(self, "engine") and hasattr(self.engine, "localsniffer") and hasattr(self.engine.localsniffer, "running") and self.engine.localsniffer.running():
            ssnif = self.engine.localsniffer
        else:
            ssnif = localsniffer.localsniffer()
            ssnif.start()

        ssnif.registercallback(func, filterstr)
        return ssnif


    def stop_sniffer(self, snif, func):
        snif.unregistercallback(func)
        if self.argsDict.get("silica",False):
            snif.shutdown()
            del(snif) 
        return

    def run(self):        
        self.getargs()

        if isinstance(self.netmask, str):
            self.netmask=int(self.netmask.replace("/",""))

        self.setInfo("ICMP sweeping %s/%s"%(self.host,self.netmask))
        self.log("ICMP sweeping %s/%s"%(self.host,self.netmask))
        self.node=self.argsDict["passednodes"][0]
        self.log("Timeout=%s"%self.timeout)
        self.doscanrand=0

        self.foundhosts=[]

        # XXX
        ssnif = None
        if self.can_scanrand(target = self.host):
            if not self.engine.sniffer_isactive():
                self.log("sniffer not active")
                self.setInfo("Portsweep: Not running as root - sniffer not active")
                return 0
            else:
                self.doscanrand = 1
                openfs="icmptype(0)"
                #print "self.port_callback=%s"%self.port_callback
                ssnif = self.start_sniffer(self.port_callback, openfs)
                #self.engine.register_sniffer_callback(self.port_callback,openfs)
        else:
            self.log("Currently this module only supports hosts with sniffer support")
            self.setInfo("ICMP Sweeper failed (not on sniffer host)")
            if ssnif:
                self.stop_sniffer(ssnif, self.port_callback)
            return 0

        #we don't do threads if we're a silica
        if self.argsDict.get("silica",False):
            dothreads=True

        dothreads = 'threads' in self.node.capabilities
        self.run_on_all_possible_hosts(threads=dothreads)
        if dothreads:
            self.log("Recovering from threads")
            time.sleep(2)
        self.foundhosts=uniquelist(self.foundhosts)
        self.foundhosts.sort()
        for host in self.foundhosts:
            if(host != self.host):
                self.node.add_host(host)
        self.result=self.foundhosts
        self.log("Found hosts: %s"%self.foundhosts)

        #self.engine.unregister_sniffer_callback(self.port_callback)
        self.stop_sniffer(ssnif, self.port_callback)
        self.log("All done")            
        return 1

if __name__== '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)

