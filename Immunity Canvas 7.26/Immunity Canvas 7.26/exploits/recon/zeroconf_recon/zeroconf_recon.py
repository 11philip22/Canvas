#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2009
#http://www.immunityinc.com/CANVAS/ for more information


import sys
if "." not in sys.path:
    sys.path.append(".")

import socket

# CANVAS modules
from tcpexploit import *

##Uses my modified zeroconf.py library
from libs.Zeroconf import Zeroconf
from libs.Zeroconf import ServiceBrowser

# GUI info
NAME="Bonjour/ZeroConf service discovery"
DESCRIPTION="Discovers services on the .local. domain advertised over zeroconf"
DOCUMENTATION={}
DOCUMENTATION["Notes"] = """Find all advertised services and then followup info on each host offering that service.

NOTE: For this to function correctly you must allow incomming UDP packets on port 5353 otherwise we don't see the responses to our probes. 

This may differ from the standard expected behaviour of your firewall which will likely allow 'related/established' packets to packets you send back into your system, however we are using UDP which has no notion of state so such firewall rules are meaningless in this context."""

VERSION="0.1"

PROPERTY = {}
PROPERTY['TYPE'] = "Recon"
PROPERTY['SITE'] = "Remote"

NOTES="""
"""

CHANGELOG="""
"""

class CanvasListener(object):
    """
    Call back used by the Zeroconf library which is called when a
    new service is found - allows us to take whatever action we want
    on discovery
    """
    def __init__(self):
        self.timeout = 5

    def removeService(self, zeroconf, stype, name):
        sprint(zeroconf, "Service %s removed"%(name))

    def addService(self, zeroconf, stype, name):

        if stype != "_services._dns-sd._udp.local.":
            
            buf = ""

            buf += "Service: %s \n"%(name)
            buf += "Type: %s\n"%(stype)
            info = zeroconf.getServiceInfo(stype, name, 1000)
            if info:
                buf+="Address: %s\n"%(str(socket.inet_ntoa(info.getAddress())) )
                buf+="Port: %s\n"%(info.getPort() )
                buf+="Weight: %s\n"%(info.getWeight() )
                buf+="Priority: %s\n"%(info.getPriority() )
                buf+="Name: %s\n"%(info.getServer() )
                txt = info.getText()

                if len(txt) > 1:
                    buf+="Text: %s\n"%(txt )
                props = info.getProperties()
                if len(props) > 0:
                    buf+="Properties are: \n"
                    for p in props.keys():
                        buf+="\t%s : %s\n"%(p, props[p])
                        
            self.sprint(zeroconf, buf)
            
    def sprint(self, zeroconf, *things_to_print):
        """
        Wrapper to safely print both ASCII and UTF-8 objects
        """
        for thing in things_to_print:
    
            if type(thing) == types.StringType:
                #print thing,
                zeroconf.log(thing)
            else:
                #print thing.encode('utf-8'),
                zeroconf.log(thing.encode('utf-8'))
    
            print ""


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.name=NAME
        self.covertness = 0
        # used for done flag from commandline
        self.done = 0

        return

    def test(self):
        """All targets can be zeroconf scanned"""
        return 1


    def run(self):

        self.host=self.target.interface

        self.setInfo("Scanning for ZeroConf services visible to host %s.."%(self.host))
        self.node=self.argsDict["passednodes"][0]
        #self.log("Timout=%s"%self.timeout)

        if self.node.nodetype == "LocalNode":
            #self.sock = self.getudpsock()
            #self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            #print self.sock
            zc = Zeroconf(self.log)
            self.log("Requesting services...")

            service_type    = "_services._dns-sd._udp.local."
            listener = CanvasListener()
            browser  = ServiceBrowser(zc, service_type, listener)
            browser.start()
            browser.join()
            self.log( "Found services: ")
            if len(browser.services.keys()) == 0:
                self.log("\t No services found")
            else:
                for fs in browser.services.keys():
                    self.log( "\t %s"%fs)
                
                self.log("")
                self.log("Service details: \n")
            
                ##Percent progress depends roughly on the number of
                ## service found. +1 for the discovery phase
                chunk = 100.0/(len(browser.services) + 1)
                self.setProgress(self.getProgress()+chunk)
                for s in browser.services.keys():
                    if self.state == self.HALT:
                        break
                    browser = ServiceBrowser(zc, s, listener)
                    browser.start()
                    browser.join()
                    
                    self.setProgress(self.getProgress()+chunk)
                

            zc.exit()
            self.setInfo("ZeroConf scan complete ")
            return 1
        else:
            self.log("Unsupported nodetype %s for this module"%(self.node.nodetype))
            self.setInfo("ZeroConf scan failed - unsupported node ")
            return 0


if __name__== '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)

