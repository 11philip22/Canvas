#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2005
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append("../../encoder")
sys.path.append("./encoder")
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")

import os,getopt
import socket
import time

from exploitutils import *
import addencoder

from ExploitTypes.localcommand import LocalCommand
import canvasengine
from canvasengine import socket_save_list
import shellcodeGenerator
import mosdef
from shelllistener import *

import unixShellNode

NAME                         = "switch_user"
DESCRIPTION                  = "Switch our user context to another user with a username/password combo."
DOCUMENTATION                = {}
DOCUMENTATION["Date public"] = "5/1/2006"
DOCUMENTATION["Notes"]       = "On Unix this will use the su command and spawn a UnixShell node"
VERSION                      = "1.0"
GTK2_DIALOG                  = "dialog.glade2"
PROPERTY                     = {}
PROPERTY['TYPE']             = "Commands"
PROPERTY['SITE']             = "Local"
PROPERTY['ARCH']             = [ ["Linux", "all"] ]
PROPERTY['VERSION']          = [ "9.3" ] #example - please fill in yourself

NOTES                        = """
TODO:
Add dictionary brute force option
For Win32, we need to CreateTokenAsUser() and setthreadtoken(that)
"""

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name = NAME
        self.user="vmuser"
        self.password="vmpass"

    def getargs(self):
        self.user=self.argsDict.get("user",self.user)
        self.password=self.argsDict.get("password",self.password)
        return 
    
    def run(self):
        """
        This run happens on all nodes selected
        """
        self.setInfo("%s (in progress)"%(NAME))
        self.getargs()
        self.log("Trying to switch user to %s:%s on all selected nodes"%(self.user,self.password))
        for node in self.argsDict["passednodes"]:            
            type = node.nodetype
            nodename=node.getname()
            caps= node.capabilities
            if "linux" not in caps:
                self.log("Node %s not a Linux node..."%nodename)
                continue
            #we need to check if we're already running as root
            #because there's no point if we are...and the password
            #prompt doesn't show up
            self.log("Node %s is a linux node, continuing"%nodename)
            (uid,euid,gid,egid)=node.shell.ids()
            self.log("ID -a result: %d %d %d %d"%(uid,euid,gid,egid))
            alreadyroot=0
            if uid==0 or euid==0:
                #users may want to do this anyways
                self.log("We are already uid or euid 0, so we don't need to do this on node %s..."%nodename)
                self.log("But continuing in any case, in case you really wanted to")
                alreadyroot=1
            master,slave=node.shell.findpts()
            self.log("Findpts=%x:%s"%(master,slave))
            self.log("Running sh_tty_child")
            node.shell.sh_tty_child(master,slave)
            self.log("Now trying to log in via su")
            node.shell.write(master,"su - %s\r\n"%self.user)
            data=node.shell.readall(master)
            if "Password:" not in data:
                self.log("No password prompt from remote side via SU!")
                if not alreadyroot:
                    self.log("Not already root - so this is a fatal error")
                    continue
                else:
                    self.log("Already root, so continuing, since you clearly meant to do so")
            else:
                self.log("Writing password....")
                node.shell.write(master,self.password+"\r\n")
                self.log("Sleeping two seconds to give shell time to answer us")
                time.sleep(2)
                self.log("Reading from our new shell.")
                data=node.shell.readall(master)
            self.log("Got: %s"%data)
            if "#" in data or self.user in data or "bash" in data:
                self.log("Shell as new user gathered . . . transforming into unixshellnode")
                shell = shelllistener(shellfromtty(node,master))
                newnode = unixShellNode.unixShellNode()
                newnode.parentnode = node
                newnode.shell = shell
                return newnode
            else:
                self.log("Closing master tty since we failed on node %s"%nodename)
                node.shell.close(master)


        return 0

if __name__=="__main__":
    print "This module is meant to be run only within CANVAS"
    print "If you're trying this on Unix, just type 'su'"
    
