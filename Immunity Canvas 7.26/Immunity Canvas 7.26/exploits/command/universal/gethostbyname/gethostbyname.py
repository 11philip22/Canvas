#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

import socket
import logging
# logging.getLogger()

from exploitutils import *

from ExploitTypes.localcommand import LocalCommand

NAME                   = "gethostbyname"
DESCRIPTION            = "resolves a host to an ip"
DOCUMENTATION          = {}
DOCUMENTATION["Notes"] = """Gets the ip address from a hostname
To use from the commandline, use:

runmodule gethostbyname -O host:www.cnn.com
"""

VERSION                = "1.0"
GTK2_DIALOG            = "dialog.glade2"
PROPERTY               = {}
PROPERTY['TYPE']       = "Commands"
PROPERTY['SITE']       = "Local"
PROPERTY['ARCH']       = [ ["Linux"], ["Mac OS X"], ["Windows"] ]
PROPERTY['VERSION']    = [ "All" ]

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result = ""
        self.name   = NAME
        self.host   = "www.immunityinc.com"

    def safegethostbyname(self, host):
        resolved = False
        try:
            self.result = socket.gethostbyname(host)
            resolved = True
        except socket.gaierror, err_tuple:
            self.result = "%s: %s" % (host, err_tuple[1])
        except:
            self.result = "unknown reason"
        return resolved

    def getargs(self):
        self.host=self.argsDict.get("host",self.host)

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        #print "self.argsDict: %s"%self.argsDict
        self.getargs()
        host=self.host
        node=self.argsDict["passednodes"][0]
        #todo: pull win32Node out of this list.
        host=host.strip()
        # self.log("Getting name for %s"%host)
        logging.info("Getting name for %s" % host)
        if node.nodetype in ["LocalNode"]:
            resolved = self.safegethostbyname(host)
        elif node.nodetype in ["win32Node"]:
            result, value = node.shell.gethostbyname(host)
            if result == 0:
                # XXX: on ip address this used to also return 0,<ip>
                # XXX: so on IP adding this would break.
                error = value
                if error == 0x2af9:
                    error = "Unknown host"
                logging.error("Error while getting host %s: %s" % (host, error))
                resolved = False
            else:
                #we pick the first IP address it returned
                logging.info("Host returned %d values for that hostname" % len(value))
                self.result = value[0]
                resolved = True
        elif node.nodetype in ["UnixShellNode"]:

            self.result=node.shell.runcommand("host %s"%host).split(" ")[-1].strip()
            if self.result=="":
                resolved = self.safegethostbyname(host)
            else:
                resolved = True

        elif node.nodetype in ["linuxNode","solarisNode","bsdNode"]:
            logging.warning("selfhostbyname is a stub currently for %s " % node.nodetype)
            resolved = self.safegethostbyname(host)
        else:
            logging.warning("selfhostbyname is a stub currently for %s " % node.nodetype)
            resolved = self.safegethostbyname(host)

        logging.info("Get host by name result: %s" % self.result)
        if resolved:
            self.setInfo("%s - done (success: %s)"%(NAME,self.result.strip()))
        else:
            self.setInfo("%s - done (failed: %s)" % (NAME, self.result.strip()))

        return resolved

