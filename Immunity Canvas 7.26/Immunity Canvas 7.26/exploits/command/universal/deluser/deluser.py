#! /usr/bin/env python

"""
Remove a local user account to the target system
"""
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import os
import sys
if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

NAME                = "Delete a user"
DESCRIPTION         = "Calls popen2() or equivalent to issue local command to remove a user. Uses first selected node."
DOCUMENTATION       = {}
DOCUMENTATION["Notes"]= """
Obviously you need the appropriate permissions to remove users on the sytems you are on for this to work correctly."""
VERSION             = "1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Local"
PROPERTY['ARCH']    = [ ["Linux"], ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result     = ""
        self.name       = NAME
        self.alternativecommands = ""
        self.username   = "canvas"

    def getargs(self):
        self.username    = self.argsDict.get("username", self.username)
        ##If we are on a non UNIX/Win32 system and want to use different commands
        self.alternativecommands    = self.argsDict.get("alternativecommands", self.alternativecommands)

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        self.getargs()
        node = self.argsDict["passednodes"][0]

        for node in self.argsDict["passednodes"]:

            ##If the user has not specified a set of commands to add a user we use the default set
            if len(self.alternativecommands) == 0:
                self.commands=""

                if node.nodetype in ["win32Node", "win64Node"]:
                    self.commands+="net user %s /del"%(self.username)
                elif "linuxNode" in node.nodetype:
                    self.commands+="userdel %s"%(self.username)
                else:
                    msg="UNSUPPOORTED NODE TYPE %s"%(node)
                    self.log(msg)
                    self.setInfo("%s - \"%s\" (failed)" % (NAME,msg))
                    return 0
            else:
                self.commands=self.alternativecommands

            self.log("Removing user with command: %s" % self.commands)
            if hasattr(node, 'runcommand'):
                self.result = node.runcommand(self.commands)
            else:
                self.log("Defaulting to os.popen2()")
                self.result = os.popen2(self.commands)[1].read()

            self.log("Command output for: %s" % self.commands)
            self.log("%s" % self.result)

        self.setInfo("%s - \"%s\" (finished)" % (NAME,self.commands))
        return 1
