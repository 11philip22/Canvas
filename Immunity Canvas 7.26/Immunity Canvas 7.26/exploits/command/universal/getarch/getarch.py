#!/usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path:
    sys.path.append('.')

# from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
import logging


NAME                    = "getarch"
DESCRIPTION             = "Architecture Information Detection"
VERSION                 = "1.0"
DOCUMENTATION           = {}

PROPERTY                = {}
PROPERTY['TYPE']        = "Commands"
PROPERTY['ARCH']        = [ ["Linux"], ["Mac OS X"], ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name = NAME
        self.node = None

    def run(self):
        for node in self.argsDict['passednodes']:
            self.node = node
            self.summary[node] = 0
            # if self.node.nodetype in ["PowerShellNode", "ScriptNode", "JavaNode", "SMBNode", "VFSNode", "UnixShellNode" ]:
            if self.node.nodetype not in ["win32Node", "win64Node", "linuxNode", "osxNode"]:
                logging.warning("%s does not support getarch" % self.node.nodetype)
                continue

            if self.node.nodetype == "linuxNode" and self.node.proctype == 'ARM9':
                logging.warning("linuxNode [%s] does not support getarch" % self.node.proctype)
                continue

            _var = {}
            code = """
            #import "local", "sendint" as "sendint"
            #import "local", "_cpuid_proc" as "_cpuid_proc"
            #import "local", "_cpuid_features" as "_cpuid_features"

            void
            main()
            {
                int proc;
                int features;
                proc = _cpuid_proc();
                features = _cpuid_features();
                sendint(proc);
                sendint(features);
            }
            """

            node.shell.clearfunctioncache()
            request = node.shell.compile(code, _var)
            node.shell.sendrequest(request)
            proc     = node.shell.readint()
            features = node.shell.readint()
            node.shell.leave()

            NX      = 0x100000
            LM      = 0x20000000

            logging.warning("Architecture summary for target")
            logging.info("-"*50)
            if proc & LM:
                logging.info("Arch: 64bit")
            else:
                logging.info("Arch: 32bit")

            if proc & NX:
                logging.info("NX: present")
            else:
                logging.info("NX: not present")

            SMEP    = 0x80
            SMAP    = 0x100000

            if features & SMEP:
                logging.info("SMEP: present")
            else:
                logging.info("SMEP: not present")

            if features & SMAP:
                logging.info("SMAP: present")
            else:
                logging.info("SMAP: not present")

            logging.info("-"*50)

            self.summary[node] = 1

        return 1
