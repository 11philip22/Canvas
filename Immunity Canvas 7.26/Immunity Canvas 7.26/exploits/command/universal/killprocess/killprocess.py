#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")

import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from canvasexploit import canvasexploit
import canvasengine
from canvasengine import socket_save_list
from ExploitTypes.localcommand import LocalCommand

import time
import shellcodeGenerator

NAME                      = "killprocess"
DESCRIPTION               = "Sends a terminate signal to the process identified by a PID"
DOCUMENTATION             = {}
DOCUMENTATION["TUTORIAL"] = "A free online tutorial is available for this module: http://forum.immunityinc.com/index.php?topic=346.0"
#QO44056 fixes this?
VERSION                   = "1.0"
GTK2_DIALOG               = "dialog.glade2"

PROPERTY                  = {}
PROPERTY['TYPE']          = "Commands"
PROPERTY['SITE']          = "Local"
PROPERTY['ARCH']          = [ ["Unix"], ["Windows"] ]

runAnExploit_gtk2         = canvasengine.runAnExploit_gtk2
runExploit                = canvasengine.runExploit


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result = ""
        self.name   = NAME
        self.pid    = 0

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.result = []
        self.pid = dInt( self.argsDict.get("pid",self.pid) )
        if self.pid == 0:
            self.log("Need to specify a pid")
            return 0
        self.log("Killing PID %d (0x%x)"% ( self.pid, self.pid ) )

        for node in self.argsDict["passednodes"]:
            if "win32api" in node.capabilities:
                self.result = node.shell.dokillprocess( self.pid )
                if self.result == -2:
                    self.log("Unable to OpenProcess")
                elif self.result == -1:
                    self.log("Unable to TerminateProcess")
            elif "Unixshell" in node.capabilities:
                self.result = node.runcommand("kill -9 %d"% self.pid)
            else:
                self.log("%s node type not supported" % node.nodetype)
                return 0
        if self.result == 1:
            self.log("Successfully killed process %s"%self.pid)
            self.setInfo("%s - done (Successfully killed PID %s)"%(NAME,self.pid))
        else:
            self.log("Unable to kill process %s"%self.pid)
            self.setInfo("%s - done (Unable to kill PID %s)"%(NAME,self.pid))
        return 1
