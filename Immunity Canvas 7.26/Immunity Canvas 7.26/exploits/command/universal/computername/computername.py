#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

import os,getopt
import socket
from exploitutils import *

from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

import canvasengine
import time

NAME="computername"
DESCRIPTION="Get the computer name"
DOCUMENTATION={}
DOCUMENTATION["Warning"]="Use on a UnixNode may trigger snort!"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Unix"], ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result = {}
        self.name   = NAME

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        self.result = {}
        result      = ""

        for node in self.argsDict["passednodes"]:
            nodetype    = node.nodetype
            nodename    = node.getname()
            target      = node.get_known_host("127.0.0.1")

            if nodetype == "LocalNode":
                logging.info('LocalNode is not supported, skipping node.')
                continue

            # first check to see if we have a cached computername - this never changes
            ret = target.get_knowledge("ComputerName")
            if ret:
                result = ret.known
            else:
                if nodetype in ["UnixShellNode", "linuxNode"]:
                    # XXX: this is going to trigger snort!
                    result = node.runcommand("uname -n")
                #elif "linux" in node.capabilities:
                #    uid,euid,gid,egid=node.shell.ids() #0 for success in some cases...
                #    self.result="UID=%d EUID=%d GID=%d EGID=%d"%(uid,euid,gid,egid)
                #    self.log("Result: %s"%self.result)
                elif "win32api" in node.capabilities:
                    result = node.shell.getComputerName()
                    # self.log("Computer Name: %s" % self.result)
                else:
                    logging.info("Node of type %s is not supported yet" % nodetype)
                    pass

            logging.info("Computer name: %s" % result)
            self.result[nodename] = result
            target.add_knowledge("ComputerName", result, 100)

        self.setInfo("%s - done (success)" % (NAME))
        return 1
