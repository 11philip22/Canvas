#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from ExploitTypes.localcommand import LocalCommand
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator


NAME             = "tcphostfind"
DESCRIPTION      = "Finds all the hosts on the local network interfaces"
DOCUMENTATION    = {}
VERSION          = "1.0"
GTK2_DIALOG      = "dialog.glade2"

PROPERTY         = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Unix"], ["Windows"] ]

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result=""
        self.name=NAME

    def connect_to_host(self, t_host, t_port):
        s=self.gettcpsock()
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.set_timeout(0.1)
        try:
            if self.socknode.nodetype in ["win32Node"]:
                s.set_timeout(0)
                ret=s.connect_timeout((t_host, t_port))
            else:
                ret=s.connect((t_host, t_port))
        except Exception:
            import traceback
            #traceback.print_exc(file=sys.stdout)
            return 0

        if ret == -1: return 0
        return s

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.socknode=self.argsDict["passednodes"][0]
        type=self.socknode.nodetype
        app=self.engine.getModuleExploit("addhost")
        app.link(self)
        portlist=[25,80,443,445,139,23,22]
        pgresstep=100/len(self.socknode.interfaces.children)
        pgress=0
        for ifc in self.socknode.interfaces.children:
            name=ifc.interface
            ip=ifc.ip
            netmask=bits(ifc.netmask)
            if netmask<24:
                self.log("netmask is %d, so we'll cut it down to a class C"%netmask)
                netmask=24
            self.log("Doing: %s (%s/%d)"%(ifc.interface,ifc.ip,ifc.netmask))
            if ip=="127.0.0.1":
                self.log("Not scanning localhost")
                continue
            hl=IPList(ip,netmask)
            self.log("After IPList")
            for host in hl:
                for port in portlist:
                    if self.state==self.HALT:
                        return 0
                    self.log("Testing %s:%d"%(host,port))
                    s = self.connect_to_host(host,port)
                    if s:
                        app.argsDict["host"]=host
                        app.run() #add this host to our list
                        s.close()
                        break
            pgress+=pgresstep
            self.setProgress(pgress)
        self.setInfo("%s - done (success: %s)"%(NAME,self.result))
        return 1



if __name__ == '__main__':

    app = theexploit()
    ret=standard_callback_commandline(app)

