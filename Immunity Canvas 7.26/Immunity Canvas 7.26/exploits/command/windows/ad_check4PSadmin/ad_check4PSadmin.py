#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2015
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

import os, getopt, string
import socket
import locale
from tempfile import NamedTemporaryFile
from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

import logging
import canvasengine

NAME                            = "ad_check4PSadmin"
DESCRIPTION                     = "Check a system for PowerShell Remoting Admin privs using PowerShell node"
VERSION                         = "1.0"

DOCUMENTATION                   = {}
DOCUMENTATION["Notes"]          = ""
DOCUMENTATION["Commandline"]    = "runmodule ad_check4PSadmin"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Commands"
PROPERTY['SITE']                = "Local"
PROPERTY['ARCH']                = [ ["Windows"] ]

DOCUMENTATION["Notes"]          = """
Use an non-empty value in the computer textfield to search all network interfaces in the computer.

Previous version of this module needs that provide values for username and computer in "".

"""

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result         = ""
        self.computer       = ""
        return
    
    def getargs(self):
        self.computer     = self.argsDict.get("computer", self.computer)

    def replaceValuesInScript(self, filedata):
        filedata = filedata.replace("HELLOCOMPUTER", '"%s"' % self.computer)
        return filedata

    def run(self):
        self.getargs()
        self.setInfo("%s (in progress)" % (NAME))
        ret = False
        # runpowershellscript need a file to upload, it doesn't receive a buffer yet. So we have to comply with a tmp file
        for node in self.argsDict["passednodes"]:
            ntype = node.nodetype
            shell = node.shell
            if ntype == "PowerShellNode" or ntype in ['win32Node', 'win64Node']:
                tfile  = file_utf8_encoding( open( os.path.abspath(os.path.join(os.path.dirname(__file__), "Resources/", "check4PSadmin.ps1")), "rb").read() )
                tfile  = self.replaceValuesInScript(tfile)
                runpow = canvasengine.getModuleExploit("runpowershellscript")
                runpow.link(self)
                runpow.argsDict["PSBuffer"]   = tfile
                runpow.argsDict["copytodisk"] = False
                ret = runpow.run()
                users = []
                for a in runpow.result.replace("\r\n", "").split("***"):
                    a = string.strip(a)
                    if a:
                        users += [ a.split("@##@") ]   
                self.result = users
                self.setInfo("%s - done (success)" % NAME)
                return True
        else:
            logging.info("Node (%s) not supported" % ntype)
            self.setInfo("%s - done (failed)" % NAME)
            
        return ret
    
