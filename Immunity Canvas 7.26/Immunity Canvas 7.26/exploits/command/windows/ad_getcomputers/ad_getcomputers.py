#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2015
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

import os, getopt, string
import socket
import locale
from exploitutils import *

from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
import logging
import canvasengine

NAME                            = "ad_getcomputers"
DESCRIPTION                     = "Obtain computers on an Active Directory Network through a PowerShell node"
VERSION                         = "1.0"

DOCUMENTATION                   = {}
DOCUMENTATION["Commandline"]    = "runmodule ad_getcomputers"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Commands"
PROPERTY['SITE']                = "Local"
PROPERTY['ARCH']                = [ ["Windows"] ]

DOCUMENTATION["Notes"]          = """

If the module is executed in a node that is not part of a domain it will return correctly without any output data.

"""

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result         = ""
        self.MaxSize        = 200
        return
    
    def getargs(self):
        self.MaxSize      = self.argsDict.get("MaxSize", self.MaxSize)
    

    def run(self):
        self.getargs()
        self.setInfo("%s (in progress)" % (NAME))
        ret = False
                
        for node in self.argsDict["passednodes"]:
            ntype = node.nodetype
            shell = node.shell
            if ntype == "PowerShellNode" or ntype in ['win32Node', 'win64Node']:
                fps1   = file_utf8_encoding( open( os.path.abspath(os.path.join(os.path.dirname(__file__), "Resources/", "getAllSystem.ps1")), "rb").read() )
                fps1   = fps1.replace("ARGSIZELIMIT", str(self.MaxSize))
                
                runpow = canvasengine.getModuleExploit("runpowershellscript")
                runpow.link(self)
                runpow.argsDict["PSBuffer"]   = fps1
                runpow.argsDict["copytodisk"] = False
                ret = runpow.run()
                computers = []
                
                for a in runpow.result.replace("\r\n", "").split("***"):
                    a = string.strip(a)
                    if a:
                        computers += [ a.split("@##@") ]   
                self.result = computers
                
                self.setInfo("%s - done (success)" % NAME)
                return True
            else:
                logging.info("Node (%s) not supported" % ntype)
                self.setInfo("%s - done (failed)" % NAME)
            
        return ret

