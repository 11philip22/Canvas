#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2015
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

import os, getopt, string, time
import socket
import locale
from tempfile import NamedTemporaryFile
from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
import logging
import canvasengine

NAME                            = "ad_getuserdetails"
DESCRIPTION                     = "Obtain Users details from Active Directory through a PowerShell node"
VERSION                         = "1.0"

DOCUMENTATION                   = {}
DOCUMENTATION["Notes"]          = "This module will only work on a PowerShell Node"
DOCUMENTATION["Commandline"]    = "runmodule ad_getuserdetails"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Commands"
PROPERTY['SITE']                = "Local"
PROPERTY['ARCH']                = [ ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result         = ""
        self.user           = ""
        return

    def getargs(self):
        self.user     = self.argsDict.get("user", self.user)

    def run(self):
        self.getargs()
        self.setInfo("%s (in progress)" % (NAME))
        ret = False
      
        for node in self.argsDict["passednodes"]:
            ntype = node.nodetype
            shell = node.shell
            if ntype == "PowerShellNode" or ntype in ['win32Node', 'win64Node']:
                tfile  = file_utf8_encoding( open( os.path.abspath(os.path.join(os.path.dirname(__file__), "Resources/", "getUserDetails.ps1")), "rb").read() )
                tfile  = tfile.replace("HELLOUSER", str(self.user.strip()))
                runpow = canvasengine.getModuleExploit("runpowershellscript")
                runpow.link(self)
                runpow.argsDict["PSBuffer"]   = tfile
                runpow.argsDict["copytodisk"] = False
                runpow.argsDict["showresults"] = True
                ret = runpow.run()
                users = []
                for a in runpow.result.replace("\r\n", "").split("***"):
                    a = string.strip(a)
                    if a:
                        users += [ a.split("@##@") ]
                self.result = users
                self.setInfo("%s - done (success)" % NAME)
                return True
            else:
                logging.info("Node (%s) not supported" % ntype)
                self.setInfo("%s - done (failed)" % NAME)

        return ret    