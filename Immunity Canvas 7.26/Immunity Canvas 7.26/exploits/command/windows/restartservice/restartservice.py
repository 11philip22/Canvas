#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from ExploitTypes.localcommand import LocalCommand
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator
from internal import *

NAME                  = "restartservice"
DESCRIPTION           = "Restarts a service on all selected nodes"
DOCUMENTATION         = {}
DOCUMENTATION["Note"] = "This module restarts a service on all selected nodes. If a service is stuck, you can use the halt function to stop waiting."
VERSION               = "1.0"
GTK2_DIALOG           = "dialog.glade2"
PROPERTY              = {}
PROPERTY['TYPE']      = "Commands"
PROPERTY['SITE']      = "Local"
PROPERTY['ARCH']      = [ ["Windows"] ]


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result={}
        self.name=NAME
        self.serviceName=""
        self.result=[] #names of nodes we restarted

    def run(self):
        self.result=[]
        self.setInfo("%s (in progress)"%(NAME))
        self.serviceName=self.argsDict.get("serviceName",self.serviceName)
        self.log("Restarting service: %s"%self.serviceName)
        getpid=self.engine.getModuleExploit("getpid")
        getpid.link(self)
        getpid.run()
        pids=getpid.result # a list of the pids in our nodes
        #get the service list
        servicelist=self.engine.getModuleExploit("enumservices")
        servicelist.link(self)
        servicelist.run()
        services=servicelist.result
        getprocname=self.engine.getModuleExploit("getprocessname")
        getprocname.link(self)
        getprocname.run()
        procnames=getprocname.result

        i=0
        for node in self.argsDict["passednodes"]:
            nodename=node.getname()
            self.log("Testing node %s"%nodename)
            #services for our node
            myservices=services.get(nodename,[])
            for serv in myservices:
                #devlog("Testing service %s"%str(serv))
                #all the services are enumerated in a list, so we traverse that list
                #here looking for our service name, so we can get the pid
                if serv[0].lower()==self.serviceName.lower():
                    #found the servicename, get the pid
                    pid=serv[3]
                    self.log("Services pid is %d"%pid)
                    if pid==pids[i] and procnames[i].lower() not in ["svchost.exe","services.exe"]:
                        self.log("Cowardly refusing to restart the service I run inside of on node %s"%node.getname())
                    else:
                        app=self
                        e=self.engine
                        #it's ok to restart this service
                        self.log("Node %s is not within service - restarting"%nodename)
                        stop=e.getModuleExploit("stopservice")
                        stop.link(app)
                        stop.argsDict["passednodes"]=[node]
                        start=e.getModuleExploit("startservice")
                        start.link(app)
                        start.argsDict["passednodes"]=[node]
                        stop.run()
                        self.log("Service stopped")
                        time.sleep(5)
                        start.run()
                        self.log("Service started")
                        self.result+=[nodename]
                    break #found the service, so stop either way
            i+=1


        self.log("Restarted service %s on nodes %s"%(self.serviceName,self.result))
        self.setInfo("%s - done"%(NAME))
        return 1



