#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2018
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path:
    sys.path.append(".")

import os
from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
from win32MosdefShellServer import *

NAME                   = "domainname"
DESCRIPTION            = "Get the domain if the computer is part of one."
DOCUMENTATION          = {}
DOCUMENTATION["Notes"] = """
    TODO.
"""
VERSION                = "1.0"
GTK2_DIALOG            = "dialog.glade2"

PROPERTY               = {}
PROPERTY['TYPE']       = "Commands"
PROPERTY['SITE']       = "Local"
PROPERTY['ARCH']       = [ ["Windows"] ]

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result = {}
        self.name   = NAME

    def get_role_as_string(self, machine_role):
        """
        Returns the role of the server as a string.
        """

        if machine_role == 0:
            return "workstation that is not a member of a domain"
        elif machine_role == 1:
            return "workstation that is a member of a domain"
        elif machine_role == 2:
            return "server that is not a member of a domain"
        elif machine_role == 3:
            return "server that is a member of a domain"
        elif machine_role == 4:
            return "backup domain controller"
        elif machine_role == 5:
            return "backup domain controller"
        else:
            return "<unknown role>"

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        self.result = {}

        for node in self.argsDict["passednodes"]:

            target = node.get_known_host("127.0.0.1")

            if "win32api" not in node.capabilities:
                logging.error("Node of type %s is not supported yet" % node.nodetype)
                continue

            node_name = node.getname()
            node_domain = node.shell.getdomain()

            if not node_domain:
                logging.warn('getdomain() failed')
            else:
                ips = [ ip for ip in node.getallips() if ip != '127.0.0.1' ]
                logging.info("%s: IP: %s, forest name: %s" % (node_name, ips[0], node_domain['DomainForestName']))
                logging.info("%s: IP: %s, domain name: %s" % (node_name, ips[0], node_domain['DomainNameDns']))
                logging.info("%s: IP: %s, role: %s" % (node_name, ips[0], self.get_role_as_string(node_domain['MachineRole'])))
                target.add_knowledge("SMBDomain", {node_name: node_domain['DomainNameFlat']}, 100)

        self.setInfo("%s - done (success)" % (NAME))
        return 1
