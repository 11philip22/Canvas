#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path:
    sys.path.append('.')

import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from canvasexploit import canvasexploit
import canvasengine
from canvasengine import socket_save_list
from ExploitTypes.localcommand import LocalCommand
import time
import shellcodeGenerator

VERSION                 = "1.0"
NAME                    = "deleteservice"
DESCRIPTION             = "Deletes a service on all selected nodes"
DOCUMENTATION           = {}
DOCUMENTATION["Note"]   = "This module deletes a service on all selected nodes"

PROPERTY                = {}
PROPERTY['TYPE']        = "Commands"
PROPERTY['SITE']        = "Local"
PROPERTY['ARCH']        = [ ["Windows"] ]

from win32MosdefShellServer import SC_MANAGER_CREATE_SERVICE
from win32MosdefShellServer import SERVICE_WIN32_OWN_PROCESS
from win32MosdefShellServer import SERVICE_AUTO_START
from win32MosdefShellServer import SERVICE_ERROR_IGNORE
from win32MosdefShellServer import GENERIC_ALL
from win32MosdefShellServer import SERVICE_ALL_ACCESS
from win32MosdefShellServer import SC_MANAGER_ALL_ACCESS

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result         = {}
        self.name           = NAME
        self.serviceName    = ""
        self.displayName    = ""
        self.access         = SC_MANAGER_ALL_ACCESS
        self.serviceType    = SERVICE_WIN32_OWN_PROCESS
        self.startType      = SERVICE_AUTO_START
        self.errorControl   = SERVICE_ERROR_IGNORE

        return

    def getargs(self):
        self.serviceName = self.argsDict.get("serviceName", self.serviceName)
        return

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        self.getargs()

        self.log("Removing service: %s" % self.serviceName)

        for node in self.argsDict["passednodes"]:            
            self.result[node.getname()]=0
            type = node.nodetype
            if "win32api" in node.capabilities:
                manager = node.shell.OpenSCManager(access=self.access)
                if manager == 0:
                    self.log("Couldn't open the SC Manager!")
                else:
                    self.log("SCManager handle=%x" % manager)
                    ret,error = node.shell.OpenService(manager, self.serviceName, access=SERVICE_ALL_ACCESS)
                    if ret == 0:
                        self.log("Error opening service: %x"%error)
                        if error == 0x424:
                            self.log("That service does not exist")
                        if error == 0x430:
                            self.log("The service has been marked for deletion...")
                    else:
                        hService    = ret
                        ret,err     = node.shell.DeleteService(hService)
                        if ret == 0:
                            self.log("Failed to delete service: Error %x" % err)
                        else:
                            self.log("Deleted service on node %s" % node.getname())
                            
                        node.shell.CloseServiceHandle(hService)
                    #Close the handle to the service control manager on this node
                    node.shell.CloseServiceHandle(manager)

            elif node.nodetype == "LocalNode" and os.name == "nt":
                try:
                    import win32service
                    ws      = win32service
                    hSCM    = ws.OpenSCManager(None, None, ws.SC_MANAGER_ALL_ACCESS)
                    hS      = ws.OpenService(hSCM, self.serviceName, ws.SERVICE_ALL_ACCESS)
                    ws.DeleteService(hS, None)
                    ws.CloseServiceHandle(hS)
                    ws.CloseServiceHandle(hSCM)
                except:
                    self.log("Could not import win32service and start the service")
            else:
                self.log("Node of type %s not supported yet." % type)
                pass
            
        self.setInfo("%s - (finished)" % (NAME))
        return 1

    

