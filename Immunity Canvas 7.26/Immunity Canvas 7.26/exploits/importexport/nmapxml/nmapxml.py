#! /usr/bin/env python

NOTES="""
Import remote 
"""

import sys
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os
import getopt
import socket
import sys
import struct
import time
import xml.sax

from exploitutils import *
from tcpexploit import *
from shelllistener import shelllistener
from shelllistener import shellfromtelnet
import addencoder
import canvasengine
import shellcodeGenerator
import linuxshell
from libs.ctelnetlib import Telnet

import mosdef
from linuxNode import linuxNode
import linuxMosdefShellServer
import re

from libs.libnmapxml import nmapxml
from ExploitTypes.localcommand import LocalCommand

# GUI info
NAME                           = "nmapxml"
DESCRIPTION                    = "Imports a port scan from an nmap xml output"
DOCUMENTATION                  = {}
DOCUMENTATION["Repeatability"] = "Infinite"

VERSION                        = "0.1"
PROPERTY                       = {}
PROPERTY['TYPE']               = "ImportExport"
PROPERTY['SITE']               = "Local"

runAnExploit_gtk2              = canvasengine.runAnExploit_gtk2
runExploit                     = canvasengine.runExploit

# VULNERABLE VERSION LIST (Server: )
GTK2_DIALOG                    = "dialog.glade2"

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name=NAME
        self.filename="/nofile"
        self.options=["-O filename:<filename to import>"]

    def test(self):
        self.filename = self.argsDict.get("filename",self.filename)
        self.log("Importing scan from file %s"%self.filename)
        self.log("Making sure it is XML NMAP")
        
        try:
                header=file(self.filename,"r").read(5000)
        except Exception:
                header=""
                self.log("Unable to read file %s"%self.filename)
                return 0
        
        self.log("Header=%s"%header[:23])

        return 1
                        
    def parseNmapxml(self):
        """
        Parse the greppable file into CANVAS's host knowledge tree
        """
        parser = xml.sax.make_parser()
        handler = nmapxml()
        parser.setContentHandler(handler)
        
        if self.filename == "":
           self.log("No Filename specified")
           return 0
        
        parser.parse(self.filename)
        node=self.argsDict["passednodes"][0]

        self.log("Loading scan into node %s"%node.getname())

        for i in handler.mapping:
            hostip = handler.mapping[i]['address']
            hostname = handler.mapping[i]['hostname']
            self.log("Adding host %s: %s"%(hostip,hostname))
            host=node.new_host(hostip)
            if hostname:
                host.add_knowledge("DNSName",hostname,100)

            for port in handler.mapping[i]['ports']:
                     host.add_to_knowledge("Port/Service",[port['port'],port['service']])
                     
        return 1
    
    def run(self):
        self.filename = self.argsDict.get("source",self.filename)
        self.log("Importing scan from file %s"%self.filename)
        self.test()
        self.parseNmapxml()
        
        return 1

    

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
        
                
                  


    
        
    
    
