#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

"""
This module will let you run SPIKE Proxy, pretending you are on a remote box.
Being able to browse as if you were on a remote box is cool in and of itself,
but the real goal is being able to hack web applications as if you were on that
box.
"""

import sys
import time
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from libs import spkproxy
from ExploitTypes.localcommand import LocalCommand

NAME             = "spikeproxy"
DESCRIPTION      = "Run a web proxy as if you were on a remote box, with specialized attack functionality"
DOCUMENTATION    = {}
VERSION          ="1.0"
PROPERTY         = {}
PROPERTY['TYPE'] = "Servers"

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result      = ""
        self.name        = NAME
        self.port        = 8080        
        self.listen_host = "127.0.0.1"
        self.proxyhost   = None
        self.proxyport   = None
        self.options     = ["Use HTTP://spike/ to view the online interface and Ctrl-C to exit"]
        self.proxy       = None
        self.cacert_file = None
        self.cakey_file  = None
        self.store       = True    # Enable filesystem storage of requests/responses
        # Set of callback functions to execute for every request generated by the proxy
        # We need to expose this functionality here, in order to support adding
        # callback functions before run() is called (spkproxy is not yet instantiated)
        self.callbacks   = set([])

    def add_callback(self, callback):
        """
        Add a callback function that is going to be executed for every request
        generated by the proxy. The function should accept three arguments:
        url, headers, data.
        Also see addCallback/sendRequest in spkproxy.py
        """
        self.callbacks.add(callback)
        if self.proxy != None:
            self.proxy.addCallback(callback)

    def remove_callback(self, callback):
        """
        Remove callback function.
        """
        self.callbacks.remove(callback)
        if self.proxy != None:
            self.proxy.removeCallback(callback)
    
    def get_proxy(self):
        """
        Return the spike proxy instance that we use.
        """
        return self.proxy

    def getargs(self):
        """
        Get the arguments for this exploit
        """
        self.port      = int(self.argsDict.get("port", self.port))
        self.proxyport = self.argsDict.get('proxyport', self.proxyport)
        if self.proxyport: self.proxyport = int(self.proxyport)
        map(self.getarg, ('proxyhost', 'store', 'listen_host', 'cacert_file', 'cakey_file'))
        
        
    def usage2(self):
        """
        Print a pretty usage statement - not pretty enough yet, so not used
        """
        self.log("Usage for this exploit:")
        self.log("By default SPIKE Proxy will listen on port 8080")
        self.log("use -p <some other port> to change this")
        self.log("Once SPIKE Proxy is running, use Control-C to exit and ")
        self.log("http://spike/ to view the online interface")
        return
        
    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.getargs()
        self.log("Listening on host %s port %d" % (self.listen_host,self.port))
        app = spkproxy.spkProxy()
        if not self.store: app.disableStore()
        map(app.addCallback, self.callbacks)
        self.proxy = app
        app.setPort(self.port)
        #listen on localhost
        app.setListenHost(self.listen_host)
        if self.proxyhost: app.setProxyHost(self.proxyhost)
        if self.proxyport: app.setProxyPort(self.proxyport)
        if self.cacert_file: app.setCACert(self.cacert_file)
        if self.cakey_file: app.setCAKey(self.cakey_file)
        app.exploit = self
        error = [False]
        def monitor():
            try:
                app.run()
            except Exception, ex:
                self.setState(self.HALT)
                self.log('SpikeProxy error: %s' % ex)
                error[0] = ex
        threading.Thread(target=monitor).start()
        
        while 1:
            time.sleep(1)
            if self.getState() == self.HALT:
                app.done = 1
                self.setInfo("%s - done (finished)" % (NAME))
                self.proxy = None
                return error[0] or False
            
def usage():
    app=theexploit()
    print "Usage: "+sys.argv[0]+" [-T (for test)] -t target [-p port:"+str(app.port)+"] [-v version:1] -l localip -d localport "
    app.displayVersions()
    sys.exit()

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
