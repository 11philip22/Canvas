#! /usr/bin/env python

#
# CANVAS Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

import socket
from exploitutils import *

from ExploitTypes.localcommand import LocalCommand

import time

NAME="HTTP Uploader"
DESCRIPTION="HTTP Server that uploads files for you"
DOCUMENTATION={}
DOCUMENTATION["Notes"]=""""
This is a simple utility that uploads a file when connected to by wget/curl/etc
From the commandline you can use it like this:
dave@ubuntu:~/new/CANVAS$ exploits/httpuploader/httpuploader.py -O source:/etc/passwd
"""
VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Servers"

NOTES="""
"""

CHANGELOG="""
"""

from libs.spkproxy import header, body
#import zlib #Python 2.3 or >
from canvasengine import WIN32MOSDEF,JAVASERVER,HTTPMOSDEF,HTTPSMOSDEF
from exploitutils import gzipBuffer


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)

        self.port     = 8080
        self.version  = 1

        # force engine to use hand selected callback interface .. can't use autofind
        self.autoFind = False

        self.name     = NAME        
        self.bindip   = "0.0.0.0"
        self.source   = ""
        self.datatype = "binary/octet-stream"


    def getargs(self):
        self.port =int(self.argsDict.get("port",self.port))
        self.bindip = self.argsDict.get("bindip",self.bindip)
        self.getarg("source")
        self.getarg("datatype")


    def run(self):
        # check if we're a node type that supports the httpserver module
        node = self.argsDict['passednodes'][0]
        if node.nodetype not in ['LocalNode', 'win32Node']:
            self.log('[X] Sorry, you can not start a HTTP Server on that nodeType')
            return 0

        self.getargs()
        
        try:
            file(self.source,"rb")
        except:
            self.log("Could not open source file: %s"%self.source)
            return 0
            

        self.argsDict["singleexploit"]="upload"
        self.argsDict["datatype"]=self.datatype
        self.argsDict["port"]=self.port
        self.exploitnodes("httpserver",args=self.argsDict)
        
        self.setInfo("%s on %s:%d - done "%(NAME,self.bindip,self.port))
        return 1

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)

