#!/usr/bin/env python
##ImmunityHeader v1
################################################################################
## File       :  test_libvboxmanage_52.py
## Description:
##            :
## Created_On :  Mon Feb 11 2019
## Created_By :  X.
##
## (c) Copyright 2010, Immunity, Inc. all rights reserved.
################################################################################

import os
import sys
import logging

if '.' not in sys.path:
    sys.path.append('.')

import libs.virtualization.virtualbox.libvboxmanage as vboxmanage
import libs.virtualization.virtualbox.rpc as vboxrpc
from libs.virtualization.virtualbox.ipc import ipcPayload

###
# test #1 - vboxmanage list runningvms (virtualbox v5.2.x)
###

t0 = [0 for i in xrange(35) ]

t0[0] = " \0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\3\0\0\1\1\0\0\0"
t0[1] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\2\1\0\0\0\210\0\0\0"
t0[2] = "0\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\6\0\0\1\2\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237"
t0[3] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\2\0\0\0\0\0\0\0"
t0[4] = "6\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\10\0\0\1\3\0\0\0VBoxSVC-5.2.18_Ubuntu\0"
t0[5] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\2\3\0\0\0\2\0\0\0"
t0[6] = "d\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\4\0\0\0\2\0\0\0@\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\1\1\0\0\1\0\0\0\325\271p\225\241\361\212D\20\305\341/R\205\255\255\362\244\247\261\271G\36J\202\262\7\314\3252<?"
t0[7] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\4\0\0\0\0\0\0\0P\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\367f\355\0\2\0\0\0,\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\4\0\0\0\1\0\0\0\220`\0\260\352\177\0\0\0\0\0\0"
t0[8] = "N\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\5\0\0\0\2\0\0\0*\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\2\0\0\0\220`\0\260\352\177\0\0\5\0"
t0[9] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\5\0\0\0\0\0\0\0L\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\371f\355\0\2\0\0\0(\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\2\0\0\0\0\0\0\0a\343\1\0"
t0[10] = "\\\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\6\0\0\0\2\0\0\0008\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\1\5\0\0\3\0\0\0\325\271p\225\241\361\212D\20\305\341/R\205\255\255\220`\0\260\352\177\0\0"
t0[11] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\6\0\0\0\0\0\0\0P\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\373f\355\0\2\0\0\0,\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\4\0\0\0\3\0\0\0\220`\0\260\352\177\0\0\0\0\0\0"
t0[12] = "L\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\7\0\0\0\2\0\0\0(\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\2\0\0\0\0\0\0\0\220`\0\260\352\177\0\0"
t0[13] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\7\0\0\0\0\0\0\0"
t0[14] = "N\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\10\0\0\0\2\0\0\0*\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\4\0\0\0\220`\0\260\352\177\0\0\r\0"
t0[15] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\10\0\0\0\0\0\0\0]\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\376f\355\0\2\0\0\0009\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\4\0\0\0\0\0\0\0\2\0\0\0\1\2010\0\260\352\177\0\0qK\0\260\352\177\0\0"
t0[16] = "c\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\t\0\0\0\2\0\0\0?\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\5\0\0\0\220`\0\260\352\177\0\0.\0\2\0\0\0\1\2000\0\260\352\177\0\0pK\0\260\352\177\0\0"
t0[17] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\t\0\0\0\0\0\0\0U\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\0g\355\0\2\0\0\0001\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\5\0\0\0\0\0\0\0\2\0\0\0\1\5\0\0\0\5\0\0\0"
t0[18] = "N\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\n\0\0\0\2\0\0\0*\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\6\0\0\0\2000\0\260\352\177\0\0\6\0"
t0[19] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\n\0\0\0\0\0\0\0L\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\2g\355\0\2\0\0\0(\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\6\0\0\0\0\0\0\0\1\0\0\0"
t0[20] = "N\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\v\0\0\0\2\0\0\0*\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\7\0\0\0\2000\0\260\352\177\0\0\10\0"
t0[21] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\v\0\0\0\0\0\0\0T\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\4g\355\0\2\0\0\0000\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\7\0\0\0\0\0\0\0\10\0\0\0T\0E\0S\0T\0"
t0[22] = "N\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\f\0\0\0\2\0\0\0*\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\10\0\0\0\2000\0\260\352\177\0\0\f\0"
t0[23] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\f\0\0\0\0\0\0\0\224\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\6g\355\0\2\0\0\0p\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\10\0\0\0\0\0\0\0H\0\0\0a\0001\0000\0001\0004\0f\0002\0007\0-\0000\0000\0000\0e\0-\0004\0001\0007\0003\0-\0008\0001\0a\0b\0-\0e\0c\0e\0a\0d\0005\0004\0001\0c\0a\0000\0006\0"
t0[24] = "N\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\r\0\0\0\2\0\0\0*\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\t\0\0\0pK\0\260\352\177\0\0\6\0"
t0[25] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\r\0\0\0\0\0\0\0L\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\10g\355\0\2\0\0\0(\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\t\0\0\0\0\0\0\0\1\0\0\0"
t0[26] = "N\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\16\0\0\0\2\0\0\0*\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\n\0\0\0pK\0\260\352\177\0\0\10\0"
t0[27] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\16\0\0\0\0\0\0\0X\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\ng\355\0\2\0\0\0004\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\n\0\0\0\0\0\0\0\f\0\0\0t\0e\0s\0t\0#\0002\0"
t0[28] = "N\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\17\0\0\0\2\0\0\0*\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\3\0\0\0\v\0\0\0pK\0\260\352\177\0\0\f\0"
t0[29] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\17\0\0\0\0\0\0\0\224\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\4\fg\355\0\2\0\0\0p\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\5\0\0\0\v\0\0\0\0\0\0\0H\0\0\0009\0004\0001\0009\0002\0d\0c\0006\0-\0005\0a\0009\0000\0-\0004\0a\0000\0009\0-\0008\0003\0f\0b\0-\0c\0f\0a\0005\0001\0e\0a\0d\0a\0e\0003\0f\0"
t0[30] = "L\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\20\0\0\0\2\0\0\0(\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\2\0\0\0\0\0\0\0\2000\0\260\352\177\0\0"
t0[31] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\20\0\0\0\0\0\0\0"
t0[32] = "L\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\21\0\0\0\2\0\0\0(\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\2\0\0\0\0\0\0\0pK\0\260\352\177\0\0"
t0[33] = "$\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\1\0\0\2\21\0\0\0\0\0\0\0"
t0[34] = "L\0\0\0\1\0\0\0\377\250<u\302\310\1F\261\25\214)D\332\21P\2\0\0\1\22\0\0\0\2\0\0\0(\0\0\0\1\0\0\0\357G\312C\310\353\242G\226y\244p2\30\10\237\2\0\0\0\0\0\0\0\220`\0\260\352\177\0\0"


def test_serialize():

    print "-------- test_serialize() ---------"

    # 1
    print "=== TEST #1 ==="
    req1 = t0[0]
    clienthello = vboxmanage.ipcmMessageClientHello(request_index=1)
    logging.debug(req1.encode('hex'))
    logging.debug(clienthello.pack().encode('hex'))
    if clienthello.pack() != req1:
        print "[-] ipcmMessageClientHello failed!"
        print clienthello.pack().encode('hex')
        print req1.encode('hex')

    # 2
    print "=== TEST #2 ==="
    req2 = t0[2]
    addtarget = vboxmanage.ipcmMessageClientAddTarget(request_index=2, target=vboxmanage.DCONNECT_IPC_TARGETID)
    logging.debug(req2.encode('hex'))
    logging.debug(addtarget.pack().encode('hex'))
    if addtarget.pack() != req2:
        print "[-] ipcmMessageClientAddTarget failed!"
        print addtarget.pack().encode('hex')
        print req2.encode('hex')

    # 3
    print "=== TEST #3 ==="
    req3 = t0[4]
    queryclient = vboxmanage.ipcmMessageQueryClientByName(request_index=3, client_name='VBoxSVC-5.2.18_Ubuntu')
    logging.debug(req3.encode('hex'))
    logging.debug(queryclient.pack().encode('hex'))
    if queryclient.pack() != req3:
        print "[-] ipcmMessageQueryClientByName failed!"
        print queryclient.pack().encode('hex')
        print req3.encode('hex')

    # 4
    print "=== TEST #4 ==="
    req4 = t0[6]
    forward = vboxmanage.ipcmMessageReqForward(request_index=4,
                                               client_id=2,
                                               ipcm_target=vboxmanage.DCONNECT_IPC_TARGETID,
                                               payload=ipcPayload('0101000001000000d5b97095a1f18a4410c5e12f5285adadf2a4a7b1b9471e4a82b207ccd5323c3f'.decode('hex')))
    logging.debug(req4.encode('hex'))
    logging.debug(forward.pack().encode('hex'))
    if forward.pack() != req4:
        print "[-] ipcmMessageReqForward failed!"
        print forward.pack().encode('hex')
        print req4.encode('hex')


    # 4-bis: The same test but more layer oriented.
    print "=== TEST #4 (bis) ==="
    req4 = t0[6]
    # First we need to create the forward object
    forward = vboxmanage.ipcmMessageReqForward(request_index=4,
                                               client_id=2,
                                               ipcm_target=vboxmanage.DCONNECT_IPC_TARGETID)
    # Then we add DConnect headers
    decoobj = vboxmanage.DConnectOp(forward, request_index=1)
    # Finally, we can add the arguments from the DConnectSetupClassID
    iid = vboxmanage.ipcGuid(data='d5b97095a1f18a4410c5e12f5285adad'.decode('hex'))
    classid = vboxmanage.ipcGuid(data='f2a4a7b1b9471e4a82b207ccd5323c3f'.decode('hex'))
    setupclassidobj = vboxmanage.DConnectSetupClassID(decoobj, iid=iid, classid=classid)

    logging.debug(req4.encode('hex'))
    logging.debug(setupclassidobj.serialize().encode('hex'))
    if setupclassidobj.serialize() != req4:
        print "ipcmMessageReqForward failed!"
        print forward.pack().encode('hex'), req4.encode('hex')


if __name__ == "__main__":

    Log = logging.getLogger()
    Log.setLevel(logging.INFO)

    if len(sys.argv) >= 2 and sys.argv[1] == 'verbose':
        Log.setLevel(logging.DEBUG)

    test_serialize()
