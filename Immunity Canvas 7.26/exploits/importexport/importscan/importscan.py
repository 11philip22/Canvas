#! /usr/bin/env python

NOTES="""
Import remote 
"""

import sys
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")

import os
import getopt
import socket
import sys
import struct
import time

from exploitutils import *
from tcpexploit import *
from shelllistener import shelllistener
from shelllistener import shellfromtelnet
import addencoder
import canvasengine
import shellcodeGenerator
import linuxshell
from libs.ctelnetlib import Telnet

import mosdef
from linuxNode import linuxNode
import linuxMosdefShellServer
import re

from ExploitTypes.localcommand import LocalCommand

# GUI info
NAME="Import Scan"
DESCRIPTION="Imports a port/vulnerability scan from an external tool"
DOCUMENTATION={}
DOCUMENTATION["Repeatability"] = "Infinite"
VERSION="0.1"

PROPERTY = {}
PROPERTY['TYPE'] = "ImportExport"
PROPERTY['SITE'] = "Local"

                                                                                
runAnExploit_gtk2 = canvasengine.runAnExploit_gtk2
runExploit = canvasengine.runExploit

# VULNERABLE VERSION LIST (Server: )

GTK2_DIALOG="dialog.glade2"

TARGETS = {
    # name, delta, retloc, retaddr
    0 : ["Auto-detection of scan type"],
    1 : ["Nmap Grepable Scan"]
}

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name=NAME
        self.filename="/nofile"
        self.options=["-O filename:<filename to import>"]

    def test(self):
        self.filename = self.argsDict.get("filename",self.filename)
        self.log("Importing scan from file %s"%self.filename)
        if self.version==0:
            self.log("Autodetecting version for file %s"%self.filename)
            try:
                header=file(self.filename,"r").read(5000)
            except:
                header=""
                self.log("Unable to read file %s"%self.filename)
            self.log("Header=%s"%header[:6])
            if header[:6]=="# nmap":
                self.log("Nmap scan detected")
                if "-oG" in header:
                    self.log("Greppable scan detected")
                    self.version=1
                    return 1
            self.log("No support for this kind of file.")
            return 0
                
        return 1

    def parseNmapG(self):
        """
        Parse the greppable file into CANVAS's host knowledge tree
        """
        node=self.argsDict["passednodes"][0]
        self.log("Loading scan into node %s"%node.getname())
        infd=file(self.filename,"r")
        line=infd.readline()
        self.log("Header line: %s"%line)
        line=infd.readline()
        while line!="":
            #for each line in the file...
            devlog("inputscan","Line=%s"%line)
            if line[:6]=="# Nmap":
                self.log("End line found: %s"%line)
                break
            match = re.search(r'^Host:\s*(\S*)\s*(\S*)\s*Ports:\s+\d+/.*?/([ut]cp?)/.*?', line)
            if not match:
                line=infd.readline()                
                continue
            
            #print "match=%s"%match.group(0)
            hostip=match.group(1)
            hostname=match.group(2)[1:-1] #remove parens
            #print "host %s name %s"%(host,hostname)
            self.log("Adding host %s: %s"%(hostip,hostname))
            host=node.new_host(hostip)
            if hostname:
                host.add_knowledge("DNSName",hostname,100)

            ports = re.findall('(\d+)/open/([ut]cp?)//(.*?)//(.*?)/', line)
            #print "ports=%s"%ports
            for port in ports:
                if port[1]=="tcp":
                    self.log("Adding port: %s"%port[0])
                    host.add_to_knowledge("TCPPORTS",[int(port[0])])
            os = re.search('OS:\s+(.*?)\s*Seq Index', line)        
            if os!=None:
                os=os.group(1)
            #do next line
            line=infd.readline()
        return 1
    
    def run(self):
        self.filename = self.argsDict.get("source",self.filename)
        self.log("Importing scan from file %s"%self.filename)
        
        if self.version==0:
            self.test()
            if self.version==0:
                self.log("Could not determine scan type!")
                return 0
            
        self.log("Version set to: %s"%TARGETS[self.version])
        
        if self.version == 0:
            self.test()
            if self.version == 0:
                self.log("Sorry, autoversioning failed")
                return 0
            
        vername = TARGETS[self.version][0]
        self.log("Parsing %s as %s"%(self.filename,vername))
        ret=0
        if self.version==1:
            ret=self.parseNmapG()
        else:
            self.log("Unknown version %d"%self.version)
            
        return ret

    def displayVersions(self):
        i = 0
        for listline in TARGETS.values():
            print "%d : %s"% (i, listline[0])
            i += 1

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
        
                
                  


    
        
    
    
