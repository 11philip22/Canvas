"""
Create a report using the libs.reports package.
"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')
if 'libs' not in sys.path: sys.path.append('libs')

from exploitutils import *

from libs.reports import utils
from ExploitTypes.utility import Utility

NAME                           = 'canvas_report'
VERSION                        = '0.1'
DESCRIPTION                    = 'Creates a report from CANVAS event pickles.'

DOCUMENTATION                  = {}
DOCUMENTATION['Repeatability'] = 'Infinite'
DOCUMENTATION['Usage']         = """Select the type of report to generate and supply
the path to a data pickle."""

DOCUMENTATION['Notes']         = """This module is not backwards compatible
with reporting pickles created by previous versions of CANVAS.

It should also be noted that the new reporting pickle is not compatible with
with any of the previous CANVAS reporting modules, such as "report_timeline".
"""

NOTES                          = """This module is not backwards compatible
with reporting pickles created by previous versions of CANVAS.

It should also be noted that the new reporting pickle is not compatible with
with any of the previous CANVAS reporting modules, such as "report_timeline".
"""
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Reporting'
PROPERTY['SITE']               = 'Local'

DEFAULT_DATA_FILE              = 'report.pkl'
DEFAULT_DATA_PATH              = utils.get_reports_path(filename=DEFAULT_DATA_FILE)

class theexploit(Utility):
    def __init__(self):
        Utility.__init__(self)
        self.name = NAME
        
        self.report_type = 'canvas'
        self.data_file = DEFAULT_DATA_PATH
        self.template_file = None
        self.output_dir = None
        self.output_file = None
        self.output_generate = True
    
    def getargs(self):
        self.getarg('report_type')
        self.getarg('data_file')
        self.getarg('output_dir')
        self.output_dir = self.output_dir or utils.get_reports_path()
        self.getarg('output_file')
        self.getarg('output_generate')
        
        if self.output_generate:
            output_file = utils.generate_output_filename('canvas')
        else:
            output_file = self.output_file
        
        self.output_file = os.path.join(self.output_dir, output_file)
            
    def run(self):
        self.getargs()
        
        try:
            mod = utils.find_exploit_report(self.report_type)
        except utils.LoadError as e:
            self.log('[!] Could not load exploit: %s\n'
                'Make sure the name is correct.' % e)
            return 0
        
        msg = 'Generating report ...'
        self.log(msg)
        self.setInfo(msg)
        
        mod.generate(
            data_file=self.data_file,
            template_file=self.template_file,
            output_file=self.output_file,
            )
        
        msg = 'Done. Report resides at: %s' % self.output_file
        self.log(msg)
        self.setInfo(msg)
        
        return 1

def select_path(b, gtk, dialog, action, widget):
    dialog = gtk.FileChooserDialog('Select filename...', dialog, action,
        (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, gtk.STOCK_OPEN, gtk.RESPONSE_OK))
    try:
        dialog.set_filename(widget.get_text())
        
        if dialog.run() == gtk.RESPONSE_OK:
            fname = dialog.get_filename()
            widget.set_text(fname)
    finally:
        dialog.destroy()

def dialog_update(gtk, wtree):
    dialog = wtree.get_widget('exploit_dialog')
    signal_ids = []
    
    widget = wtree.get_widget('report_type')
    widget.set_active(0)
    
    widget = wtree.get_widget('data_file')
    widget.set_text(DEFAULT_DATA_PATH)
    button = wtree.get_widget('data_file_button')
    sig = button.connect('clicked', select_path, gtk, dialog,
        gtk.FILE_CHOOSER_ACTION_OPEN, widget)
    signal_ids.append((button, sig))
    
    widget = wtree.get_widget('output_file')
    fname = utils.generate_output_filename('canvas')
    outpath = utils.get_reports_path(filename=fname)
    widget.set_text(outpath)
    button = wtree.get_widget('output_file_button')
    sig = button.connect('clicked', select_path, gtk, dialog,
        gtk.FILE_CHOOSER_ACTION_SAVE, widget)
    signal_ids.append((button, sig))
    
    widget = wtree.get_widget('output_generate')
    def on_toggled(w):
        active = w.get_active()
        for name in ['_label', '', '_button']:
            wtree.get_widget('output_file' + name).set_sensitive(not active)
    widget.connect('toggled', on_toggled)
    
    def disconnect(w):
        for w, sig in signal_ids:
            w.disconnect(sig)
    sig = dialog.connect('hide', disconnect)
    signal_ids.append((dialog, sig))

if __name__ == '__main__':
    app = theexploit()
    ret = standard_callback_commandline(app)
