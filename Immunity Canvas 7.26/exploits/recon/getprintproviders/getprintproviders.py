#! /usr/bin/env python
"""
getprintproviders.py (Gets print providers installed on a remote Windows machine)

"""
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys

if "." not in sys.path:
    sys.path.append(".")

import socket
import getopt
from canvasexploit import canvasexploit
import canvasengine
import libs.canvasos as canvasos
from exploitutils import *

DOCUMENTATION                  = {}
DOCUMENTATION["Notes"]         = """ 
Gets print providers installed on a remote Windows machine. This works
on XP SP2 anonymously as well. It will work against Windows 2003 only
if it has been set up as a print server. Of course, it may also
work against Samba.
"""
DOCUMENTATION["Date public"]   = "10/1/2006"
DOCUMENTATION["Date partners"] = "9/28/2006"
DESCRIPTION                    = "Get the print providers on a remote Windows machine"
VERSION                        = "1.0"
PROPERTY                       = {}
PROPERTY['TYPE']               = "Recon"
PROPERTY['SITE']               = "Remote"
NAME                           = "get print providers"

from msrpcexploit import msrpcexploit
import libs.newsmb.libdcerpc as libdcerpc
import struct
from exploitutils import hexprint

def read_raw_unicode_string(buf):
    i=0 #this makes it so that if we never find a 00 00 we use the whole buffer, basically
    for i in range(0, len(buf)/2):
        if buf[i*2]=="\x00" and buf[i*2+1]=="\x00":
            #termination of string
            break
        
    result = buf[:i*2].decode('UTF-16LE')
    return result, i

class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.name                = NAME
        self.host                = ""
        self.user                = ""
        self.password            = ""
        self.knowledgestring     = "PrintProviders"
        self.UUID                = u"12345678-1234-abcd-ef00-0123456789ab"
        self.uuidversion         = u"1.0"
        self.namedpipe           = "\\spoolss"
        self.response            = 1
        self.parseResponse       = self.parse_packet
        self.autoversion         = True #always true, essentially :>
        self.buildConnectionList = self.buildTCPConnectionList
        self.port                = 445
        self.needsNoShellcode    = True
        self.targetfunction      = 0
        self.getcontexthandle    = self.get_pp_size
        #here's where we set the size to be something larger than zero
        #when we're doing it for real
        self.datasize            = 0
        self.sleeptime           = 0
        self.nouniresult         = []

    def getArgs(self):
        self.host = self.target.interface

    def createEnumPkt(self, size=None):
        """
        Creates an EnumPrinters packet formated to retrieved the list of Print Providers
        """
        data = ""
        if size == None:
            size = self.datasize
        format="""
        long  Function_00( [in]  long  element_1,
        [in] [unique]  [string] wchar_t * element_2,
        [in]  long  element_3,
        [size_is(element_5)] [in,out] [unique]  char * element_4,
        [in]  long  element_5, 
        [out]  long * element_6, //bytes needed
        [out]  long * element_7 //number of printers
        );
        """
        data += intel_order(8) # Flags = PRINTER_ENUM_NAME
        data += intel_order(0) # Name = NULL
        data += intel_order(1) # Level = 1
        if size == 0:
            data += intel_order(0) # pPinterEnun = NULL
        else:
            data += intel_order(1) # pPrinterEnum
            data += intel_order(size)
            data += "\x00"*(((size+3)>>2)<<2)
        data += intel_order(size) # cbBuf = size
        return data

    def parseEnumPkt(self, buf):
        self.log("parseEnumPkt: Buf length: %d" % len(buf))
        success = struct.unpack("<L", buf[-4:])[0]
        uniq = struct.unpack("<L", buf[:4])[0]
        data = ""
        if uniq != 0:
            size = struct.unpack("<L", buf[4:8])[0]
            data = buf[8:8+size]
        needed = struct.unpack("<L", buf[-12:-8])[0]
        self.log("parseEnumPkt: Needed: %d" % needed)
        returned = struct.unpack("<L", buf[-8:-4])[0]
        self.log("Number of print providers: %d" % returned)
        return (needed, returned, data)

    def neededListenerTypes(self):
        return []

    def buildDcePacket(self):
        return self.get_pp()

    def testOS(self):
        self.version = 1
        
    def get_pp_size(self):
        """
        This is called first, and we get the size of the data block we need to send
        and set it in self.datasize
        """
        self.log("Getting the size needed for our printer buffer")
        pkt = self.createEnumPkt(0)
        self.myDCE.call(0, pkt, response=True)
        if not self.myDCE.reassembled_data:
            return False

        needed, returned, data = self.parseEnumPkt(self.myDCE.reassembled_data)
        self.datasize=needed
        self.log("Set data size to %d" % self.datasize)
        self.setProgress(25)
        return True
    
    def parse_packet(self, response):
        if not response:
            return
        
        self.result = []
        
        needed, returned, data = self.parseEnumPkt(response)
        bodydata = data[returned*16:]
        pps = []
        loopdata = data[:16*returned]
        """
        # Neat hexadecimal dump
        for i in range(len(data)):
            if i != 0 and (i % 16) == 0:
                print 
            print "%02x" % (ord(data[i])),
        print
        """
        data = data[16*returned:]
        #let's do a sanity check here...long enough to try to parse?
        if len(loopdata) < 16*returned:
            self.log("Data not long enough to parse? %d" % len(loopdata))
            return 0

        for i in range(returned):
            #because we have an array of these, it becomes
            #complex array, or whatever they call it
            #and they pass us offsets into a data block
            #which we then unmarshall like so:
            offset = len(loopdata)
            flags,loopdata = getint(loopdata)
            description_offset,loopdata = getint(loopdata)
            description_offset -= offset
            description,ignore = read_raw_unicode_string(data[description_offset:])
            name_offset,loopdata = getint(loopdata)
            name_offset -= offset
            name,ignore = read_raw_unicode_string(data[name_offset:])
            comment_offset,loopdata = getint(loopdata)
            comment_offset -= offset
            comment,ignore = read_raw_unicode_string(data[comment_offset:])
            # if 0:
            #     print "name=binstring(\"",
            #     for i in range(len(name)):
            #         print "%02x" % (ord(name[i])),
            #     print "\")"
            #     print "description=binstring(\"",
            #     for i in range(len(description)):
            #         print "%02x" % (ord(description[i])),
            #     print "\")"
            #     print "comment=binstring(\"",
            #     for i in range(len(comment)):
            #         print "%02x" % (ord(comment[i])),
            #     print "\")"
            pps.append((name, description, comment))
        
        #data is <dword flags><char * description><char * name><char *comment>
        #[00][80][01][00][ac][01][00][00]l[01][00][00]6[01][00][00][00][c0][01][00][f2][00][00][00][ce][00][00][00][c0][00][00][00][00][80][01][01]v[00][00][00]<[00][00][00][10][00][00][00]
        
        self.result = pps
        #self.log("PPS: %s"%pps)
        #save off a readable version 
        self.target.add_knowledge("PrintProviders", pps, 100)
        
        for pp in pps:
            ret = ', '.join(pp)
            self.log(u"provider: %s" % ret)
        
        self.new_event("print providers", {
            "remote_ip": str(self.target.interface),
            "providers": pps,
            })
        
        if pps:
            self.success=1
    
    def get_pp(self):
        """
        Get the print providers of a remote host (self.host)
        """
        # First send a request with a NULL buffer to know how many bytes are needed
        return self.createEnumPkt()
        
if __name__ == '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)

'''
Language (Platform the fields were gathered from)

English (2000 Adv. Server SP4):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 52 00 65 00 6d 00 6f 00 74 00 65 00 20 00 50 00 72 00 69 00 6e 00 74 00 65 00 72 00 73 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" 52 00 65 00 6d 00 6f 00 74 00 65 00 20 00 50 00 72 00 69 00 6e 00 74 00 65 00 72 00 73 00 00 00 ")

French (2000 Pro. SP4):
name=binstring(" 49 00 6d 00 70 00 72 00 69 00 6d 00 61 00 6e 00 74 00 65 00 73 00 20 00 64 00 69 00 73 00 74 00 61 00 6e 00 74 00 65 00 73 00 20 00 70 00 6f 00 75 00 72 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 00 00 ")
description=binstring(" 52 00 e9 00 73 00 65 00 61 00 75 00 20 00 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 00 00 ")
comment=binstring(" 49 00 6d 00 70 00 72 00 69 00 6d 00 61 00 6e 00 74 00 65 00 73 00 20 00 64 00 69 00 73 00 74 00 61 00 6e 00 74 00 65 00 73 00 00 00 ")

Spanish (XP Pro. SP2):
name=binstring(" 49 00 6d 00 70 00 72 00 65 00 73 00 6f 00 72 00 61 00 73 00 20 00 72 00 65 00 6d 00 6f 00 74 00 61 00 73 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 00 00 ")
description=binstring(" 52 00 65 00 64 00 20 00 64 00 65 00 20 00 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 00 00 ")
comment=binstring(" 49 00 6d 00 70 00 72 00 65 00 73 00 6f 00 72 00 61 00 73 00 20 00 72 00 65 00 6d 00 6f 00 74 00 61 00 73 00 00 00 ")

Russian (XP Pro. SP0):
name=binstring(" 23 04 34 04 30 04 3b 04 35 04 3d 04 3d 04 4b 04 35 04 20 00 3f 04 40 04 38 04 3d 04 42 04 35 04 40 04 4b 04 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 00 00 ")
description=binstring(" 21 04 35 04 42 04 4c 04 20 00 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 00 00 ")
comment=binstring(" 1f 04 40 04 38 04 3d 04 42 04 35 04 40 04 4b 04 20 00 43 04 34 04 30 04 3b 04 35 04 3d 04 3d 04 3e 04 33 04 3e 04 20 00 34 04 3e 04 41 04 42 04 43 04 3f 04 30 04 00 00 ")

German (2000 Pro. SP0):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 2d 00 52 00 65 00 6d 00 6f 00 74 00 65 00 64 00 72 00 75 00 63 00 6b 00 65 00 72 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 2d 00 4e 00 65 00 74 00 7a 00 77 00 65 00 72 00 6b 00 00 00 ")
comment=binstring(" 52 00 65 00 6d 00 6f 00 74 00 65 00 64 00 72 00 75 00 63 00 6b 00 65 00 72 00 00 00 ")

Dutch (2000 Pro. SP0):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 65 00 78 00 74 00 65 00 72 00 6e 00 65 00 20 00 70 00 72 00 69 00 6e 00 74 00 65 00 72 00 73 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 2d 00 6e 00 65 00 74 00 77 00 65 00 72 00 6b 00 00 00 ")
comment=binstring(" 45 00 78 00 74 00 65 00 72 00 6e 00 65 00 20 00 70 00 72 00 69 00 6e 00 74 00 65 00 72 00 73 00 00 00 ")

Italian (2000 Pro. SP0):
name=binstring(" 53 00 74 00 61 00 6d 00 70 00 61 00 6e 00 74 00 69 00 20 00 72 00 65 00 6d 00 6f 00 74 00 65 00 20 00 64 00 69 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 00 00 ")
description=binstring(" 52 00 65 00 74 00 65 00 20 00 64 00 69 00 20 00 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 00 00 ")
comment=binstring(" 53 00 74 00 61 00 6d 00 70 00 61 00 6e 00 74 00 69 00 20 00 72 00 65 00 6d 00 6f 00 74 00 65 00 00 00 ")

Polish (2000 Pro. SP0):
name=binstring(" 5a 00 64 00 61 00 6c 00 6e 00 65 00 20 00 64 00 72 00 75 00 6b 00 61 00 72 00 6b 00 69 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 00 00 ")
description=binstring(" 53 00 69 00 65 00 07 01 20 00 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" 5a 00 64 00 61 00 6c 00 6e 00 65 00 20 00 64 00 72 00 75 00 6b 00 61 00 72 00 6b 00 69 00 00 00 ")

Japanese (2000 Pro. SP0): # description is identical to English
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 ea 30 e2 30 fc 30 c8 30 20 00 d7 30 ea 30 f3 30 bf 30 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" ea 30 e2 30 fc 30 c8 30 20 00 d7 30 ea 30 f3 30 bf 30 00 00 ")

Korean (2000 Pro. SP0): # description is identical to English
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 d0 c6 a9 ac 20 00 04 d5 b0 b9 30 d1 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" d0 c6 a9 ac 20 00 04 d5 b0 b9 30 d1 00 00 ")

Simplified Chinese (2000 Pro. SP0): # description is identical to English
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 dc 8f 0b 7a 53 62 70 53 3a 67 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" dc 8f 0b 7a 53 62 70 53 3a 67 00 00 ")

Traditional Chinese (2000 Pro. SP0):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 60 90 ef 7a 70 53 68 88 5f 6a 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" 60 90 ef 7a 70 53 68 88 5f 6a 00 00 ")

Turkish (2000 Pro. SP0):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 55 00 7a 00 61 00 6b 00 20 00 59 00 61 00 7a 00 31 01 63 00 31 01 6c 00 61 00 72 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 41 00 1f 01 31 01 00 00 ")
comment=binstring(" 55 00 7a 00 61 00 6b 00 20 00 59 00 61 00 7a 00 31 01 63 00 31 01 6c 00 61 00 72 00 00 00 ")

Hungarian (2000 Pro. SP0):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 74 00 e1 00 76 00 6f 00 6c 00 69 00 20 00 6e 00 79 00 6f 00 6d 00 74 00 61 00 74 00 f3 00 6b 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 68 00 e1 00 6c 00 f3 00 7a 00 61 00 74 00 00 00 ")
comment=binstring(" 54 00 e1 00 76 00 6f 00 6c 00 69 00 20 00 6e 00 79 00 6f 00 6d 00 74 00 61 00 74 00 f3 00 6b 00 00 00 ")

Arabic (XP Home SP0): # all fields are identical to English
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 52 00 65 00 6d 00 6f 00 74 00 65 00 20 00 50 00 72 00 69 00 6e 00 74 00 65 00 72 00 73 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" 52 00 65 00 6d 00 6f 00 74 00 65 00 20 00 50 00 72 00 69 00 6e 00 74 00 65 00 72 00 73 00 00 00 ")

Czech (2000 Pro. SP0):
name=binstring(" 56 00 7a 00 64 00 e1 00 6c 00 65 00 6e 00 e9 00 20 00 74 00 69 00 73 00 6b 00 e1 00 72 00 6e 00 79 00 20 00 73 00 79 00 73 00 74 00 e9 00 6d 00 75 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 00 00 ")
description=binstring(" 53 00 ed 00 65 01 20 00 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 00 00 ")
comment=binstring(" 56 00 7a 00 64 00 e1 00 6c 00 65 00 6e 00 e9 00 20 00 74 00 69 00 73 00 6b 00 e1 00 72 00 6e 00 79 00 00 00 ")

Norwegian (2000 Pro. SP0):
name=binstring(" 45 00 6b 00 73 00 74 00 65 00 72 00 6e 00 65 00 20 00 73 00 6b 00 72 00 69 00 76 00 65 00 72 00 65 00 20 00 66 00 6f 00 72 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 2d 00 6e 00 65 00 74 00 74 00 76 00 65 00 72 00 6b 00 00 00 ")
comment=binstring(" 45 00 6b 00 73 00 74 00 65 00 72 00 6e 00 65 00 20 00 73 00 6b 00 72 00 69 00 76 00 65 00 72 00 65 00 00 00 ")

Swedish (2000 Pro. SP0):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 2d 00 66 00 6a 00 e4 00 72 00 72 00 73 00 6b 00 72 00 69 00 76 00 61 00 72 00 65 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 2d 00 6e 00 e4 00 74 00 76 00 65 00 72 00 6b 00 00 00 ")
comment=binstring(" 46 00 6a 00 e4 00 72 00 72 00 73 00 6b 00 72 00 69 00 76 00 61 00 72 00 65 00 00 00 ")

Greek (2000 Pro. SP0):
name=binstring(" 91 03 c0 03 bf 03 bc 03 b1 03 ba 03 c1 03 c5 03 c3 03 bc 03 ad 03 bd 03 bf 03 b9 03 20 00 b5 03 ba 03 c4 03 c5 03 c0 03 c9 03 c4 03 ad 03 c2 03 20 00 c4 03 c9 03 bd 03 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 00 00 ")
description=binstring(" 94 03 af 03 ba 03 c4 03 c5 03 bf 03 20 00 c4 03 c9 03 bd 03 20 00 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 00 00 ")
comment=binstring(" 91 03 c0 03 bf 03 bc 03 b1 03 ba 03 c1 03 c5 03 c3 03 bc 03 ad 03 bd 03 bf 03 b9 03 20 00 b5 03 ba 03 c4 03 c5 03 c0 03 c9 03 c4 03 ad 03 c2 03 00 00 ")

Hebrew (XP Home SP0): # all fields are identical to English
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 52 00 65 00 6d 00 6f 00 74 00 65 00 20 00 50 00 72 00 69 00 6e 00 74 00 65 00 72 00 73 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" 52 00 65 00 6d 00 6f 00 74 00 65 00 20 00 50 00 72 00 69 00 6e 00 74 00 65 00 72 00 73 00 00 00 ")

Danish (XP Home SP2):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 2d 00 66 00 6a 00 65 00 72 00 6e 00 70 00 72 00 69 00 6e 00 74 00 65 00 72 00 65 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 2d 00 6e 00 65 00 74 00 76 00 e6 00 72 00 6b 00 00 00 ")
comment=binstring(" 46 00 6a 00 65 00 72 00 6e 00 70 00 72 00 69 00 6e 00 74 00 65 00 72 00 65 00 00 00 ")

Finnish (XP Home SP2):
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 2d 00 65 00 74 00 e4 00 74 00 75 00 6c 00 6f 00 73 00 74 00 69 00 6d 00 65 00 74 00 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 2d 00 76 00 65 00 72 00 6b 00 6b 00 6f 00 00 00 ")
comment=binstring(" 45 00 74 00 e4 00 74 00 75 00 6c 00 6f 00 73 00 74 00 69 00 6d 00 65 00 74 00 00 00 ")

Chinese-Hong Kong SAR (2000 Pro. SP0): # all fields are identical to Traditional Chinese
name=binstring(" 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 54 00 20 00 60 90 ef 7a 70 53 68 88 5f 6a 00 00 ")
description=binstring(" 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00 66 00 74 00 20 00 57 00 69 00 6e 00 64 00 6f 00 77 00 73 00 20 00 4e 00 65 00 74 00 77 00 6f 00 72 00 6b 00 00 00 ")
comment=binstring(" 60 90 ef 7a 70 53 68 88 5f 6a 00 00 ")
'''
