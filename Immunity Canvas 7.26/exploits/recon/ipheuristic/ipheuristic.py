#! /usr/bin/env python

"""
ipheuristic.py
Parse the results we get from OSDETECT/ipfingerpring to determine OS info
not really meant to be ran as an individual module. only from osdetect.
"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2009
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path: sys.path.append(".")

import canvasengine
import libs.canvasos as canvasos

from canvasexploit import canvasexploit
from exploitutils  import *

DOCUMENTATION    = {}
DESCRIPTION      = "Parse the results we get from OSDETECT/ipfingerpring to determine OS info"
VERSION          = "1.0"

PROPERTY         = {}
PROPERTY['TYPE'] = "Recon"
PROPERTY['SITE'] = "Remote"

NAME="ipheuristic"

NOTES="""
AIX 5.2:

{   'icmp_error_ip_total_length': 348, 
    'tcp_ecn':0, 
    'icmp_error_quote_len': 32, 
    'flagsandoffset': 16384, 
    'DSF': 0, 
    'tcp_ip_ttl': 60,
    'null_ip_checksum': 0, 
    'ip_id': 30600, 
    'syn_ack_window': 16384, 
    'start_ip_ttl': 255
}
"""

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)  
        self.name=NAME
        return
    
    def parse_results(self,results):
        """ 
        Parse the results of ipfingerprint
        """      
        ret = ""
        if not results:
            self.log("Did not get a valid ipfingerprint.")
            return ret 
        
        # Do we wanna move it to something like:
        #
        # OSDict = {}
        #
        # # populate heuristics dict ...
        # OSDict['AIX']     = { 'syn_ack_window' : [val1, val2, val3 ], 'start_ip_ttl' : [val1, val2] }
        # OSDict['Linux']   = { 'syn_ack_window' : [val1, val2, val3], 'start_ip_ttl' : [val1, val2] }
        #        
        # for os in OSDict:
        #   for window in OSDict[os]['syn_ack_window']:
        #       if results.get('syn_ack_window') == window:
        #           # match > ttl here
        #           ret = canvasos.new(os)
        #           
        
        if results.get("start_ip_ttl",-1) == -1 and results.get("syn_ack_window")==8192:
            ret=canvasos.new("Embedded")
            
        elif results.get('start_ip_ttl', -1) > 200 and results.get('syn_ack_window', -1) == 16384:
            ret=canvasos.new('AIX')
            
        elif results.get("syn_ack_window")==5840:
            ret=canvasos.new("Linux")
            
        elif results.get("start_ip_ttl", -1) >= 60 and results.get("start_ip_ttl") <= 128 and results.get("icmp_error_quote_len"): 
            """
Scan your gateway from a NAT'd VM, for example (this is a Linux host->Linux guest scan:
 Fri Apr 24 10:03:46 2009 ](192.168.103.2/32) Sending TCP ECN attempt to port 1025 from port 50208
[ Fri Apr 24 10:03:47 2009 ](192.168.103.2/32) Got tcp_ecn Reply back!
[ Fri Apr 24 10:03:47 2009 ](192.168.103.2/32) Got result: {'syn_ack_window': 64240, 'tcp_ip_ttl': 128, 'tcp_ecn':
0}
            """
            ret=canvasos.new("VMWare")
            ret.vm="VMware"
            
        elif results.get("start_ip_ttl", -1) > 0 and results.get("start_ip_ttl") < 70: 
            ret=canvasos.new("Linux")
             
        elif results.get("syn_ack_window")==8192:
            ret=canvasos.new("Windows")
            
        elif results.get("syn_ack_window")==16384 and results.get("tcp_ip_ttl")>64 and results.get("tcp_ecn")==0:
            ret=canvasos.new("Windows")
            ret.version="2003"
            #this is probably SP1 or SP2 (figure that out later)
        
        elif results.get("icmp_error_quote_len", -1) > 0 and results.get("icmp_error_quote_len") < 40:
            ret=canvasos.new("Embedded")
        
        elif results.get("tcp_ip_ttl", -1) > 0 and results.get("tcp_ip_ttl") > 120:
            ret=canvasos.new("Windows")
          
            
        elif results.get("syn_ack_window")==16384 and results.get("tcp_ip_ttl")<=64 and results.get("tcp_ecn")==0:
            #this is probably an openBSD machine
            ret=canvasos.new("BSD")
            ret.version="OpenBSD"
         
        return ret

    def getargs(self):
        self.host=self.target.interface
        return 
    
    def run(self):
        self.getargs()
        app=self.engine.getModuleExploit("ipfingerprint")
        app.link(self)
        app.run()
        results=app.result
        ret=self.parse_results(results)
        
        # ret should be a canvasos instance if successful
        if ret:
            self.log("Found OS on host %s: %s"%(self.host,ret))
            self.result = 1
        else:
            self.log("No OS determination could be made for %s based on %s ."%(self.host,results))
            self.result = 0
   
        return 
    
        
if __name__ == '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
        
