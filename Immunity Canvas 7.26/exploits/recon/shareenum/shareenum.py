#!/usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path: sys.path.append(".")
import getopt
import socket
import logging
from canvasexploit import canvasexploit
import libs.newsmb.libdcerpc as libdcerpc
import libs.kerberos.ccache as cc
import libs.newsmb.srvsvc as srvsvc
from exploitutils import *

NAME="shareenum"
DESCRIPTION="Get a list of shares from the remote machine using srvsvc::NetrShareEnum"
DOCUMENTATION={}
DOCUMENTATION["Notes"]="""

This module will attempt to enumerate the SMB shares open on your currently
selected target. These will be stored into the knowledge tree, and you
may want to follow this up by using the smbclient built into CANVAS to attempt
to access the files on those file shares.

This module operates over the SMB ports (aka 139, 445).

"""
PROPERTY = {}
PROPERTY['TYPE'] = "Recon"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
TODO="""
"""
VERSION="1.0"

class share:
    """
    Used for share enumeration.
    """
    def __init__(self, sharename="", comment="", sharetype=0, sharepath=None):
        self.sharename = sharename
        self.comment   = comment
        self.sharetype = sharetype
        self.sharepath = sharepath

    def __str__(self):
        name = self.sharename.encode('ASCII', 'replace')
        comment = self.comment.encode('ASCII', 'replace')
        return "%s:%s" %(name, comment)

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result     = ""
        self.name       = NAME
        self.systemname = "\\\\127.0.0.1"
        self.user       = u''
        self.password   = u''
        self.domain     = u''
        self.ccache_file  = None
        self.use_kerberos = False

    def check_ccache_file(self):
        try:

            # Can we open the credential file?
            cc1 = cc.CCache()
            cc1.open(self.ccache_file, new=0)
            # Is the DB related to the username?
            principal = cc1.get_primary_principal()
            user_domain = '@'.join([self.user,self.domain]).lower()
            if user_domain != principal.lower():
                return False

            # Do we have credential information that is not only configuration?
            creds = cc1.get_credentials()
            found_valid_creds = 0
            for cred in creds:
                if not cred.is_config_credential():
                    found_valid_creds = 1
            if not found_valid_creds:
                return False
            else:
                return True
        except Exception as e:
            return False
        else:
            return True

    def getargs(self):
        # need to revise to use get_knowledge/set_knowledge
        systemname=self.argsDict.get("systemname",self.systemname)
        self.host = self.target.interface
        self.user = self.argsDict.get('user', self.user)
        self.password = self.argsDict.get('password', self.password)
        self.domain = self.argsDict.get('domain', self.domain)
        self.ccache_file = self.argsDict.get('krb5_ccache', self.ccache_file)

    def run(self):
        self.getargs()
        self.setInfo("%s" % NAME)
        logging.info("Running shareenum against %s with user:pass = %s:%s" % (self.host,
                                                                          self.user,
                                                                          self.password))
        node = self.argsDict["passednodes"][0]
        sharelist = []
        if node.islocal(self.target.interface) and "win32api" in node.capabilities:
            logging.info("Target is localhost on this Node")
            if "win32api" in node.capabilities:
                shell = node.shell
                sharenamelist = shell.NetShareEnum()
                #create a list of classes out of it
                for u in sharenamelist:
                    sharename, sharetype, shareremark, sharepath, sharepassword = u
                    try:
                        sharename = sharename.decode('UTF-16LE')
                        shareremark = shareremark.decode('UTF-16LE')
                    except:
                        pass

                    logging.info("Share found (unicode) %s : %s" % (sharename, shareremark))
                    newshare = share(sharename=sharename, sharetype=sharetype,
                                     comment=shareremark, sharepath=sharepath)
                    sharelist += [newshare]
            else:
                logging.error("%s node type not supported" % node.nodetype)
        else:
            #is a remote target to our node
            if 0:
                #commented out for now...
                osd = self.engine.getModuleExploit("osdetect")
                osd.link(self)
                osd.run()
                osstr = osd.result
                logging.info("OS Detected: %s" % osstr)
            if 1:
                logging.info("Using srvsvc to enumerate shares")
                #connect to named pipe
                #bind to RPC server
                if not self.has_named_pipes(self.target):
                    logging.info("No SMB ports open...")
                    return 0

                # Sanity check: the ccache credentials
                if self.ccache_file:
                    if not self.check_ccache_file():
                        logging.error('%s doesn\'t seem to be a valid ccache file for user %s' % (self.ccache_file, '@'.join([self.user,self.domain])))
                        return 0
                    else:
                        self.use_kerberos = True
                        logging.info("Using kerberos authentication with credentials %s" % self.ccache_file)
                else:
                    logging.info("Using NTLM authentication")

                ret, shares=srvsvc.srvsvc_share_enum(self.host,
                                                     self.user,
                                                     self.password,
                                                     self.domain,
                                                     kerberos_db=self.ccache_file,
                                                     use_krb5=self.use_kerberos,
                                                     with_comments=True)

                if not ret:
                    for elt in shares:
                        newshare=share()
                        newshare.sharename = elt['name']
                        newshare.sharetype =elt['type']
                        newshare.comment = elt['comment']
                        sharelist+=[newshare]

        self.result = sharelist
        logging.info("Total Shares: %s" % len(sharelist))

        for u in sharelist:
            logging.info(u'Share found: %s:%s' % (u.sharename, u.comment))

        self.target.replace_knowledge("SMBShares", sharelist, 100)

        mysharelist = ["%s:%s" % (s.sharename, s.comment) for s in sharelist]
        self.new_event("shares", {
            "remote_ip": str(self.target.interface),
            "shares": mysharelist,
            })

        self.setInfo("%s - done (success: %s)" % (NAME, "%d shares found" % len(sharelist)))
        return 1

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
