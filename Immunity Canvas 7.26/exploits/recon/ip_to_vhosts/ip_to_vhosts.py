#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

import re
import socket
import libs.spkproxy as spkproxy

from exploitutils import *
from canvasexploit import canvasexploit

import logging

NAME                   = "ip_to_vhosts"
DESCRIPTION            = "Grab VHosts for an IP"
DOCUMENTATION          = {}
DOCUMENTATION["Notes"] = """

This tool will grab virtual hosts given an IP.
Currently, we do this by querying Bing.

"""

VERSION                = "1.0"
PROPERTY               = {}
PROPERTY['TYPE']       = "Recon"
PROPERTY['SITE']       = "Remote"

class theexploit(canvasexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        self.result           = None
        self.name             = NAME
        self.host             = None
        self.verify           = False
        self.results_per_page = 50 # Maximum number we can use without being logged in
        self.pattern          = "<h[2-3]><a href=\"https?://(.*?)/"
        self.pattern_counter  = "<span class=\"sb_count\">([0-9]*)"
        self.query            = "/search?q=ip:%s&go=&count=%d&FORM=QBHL&qs=n&first=%s"
        self.morepages        = True
        self.total            = 0

    def getArgs(self):
        self.getarg("verify")

    def do_query(self, page):
        UA = spkproxy.UserAgent('http://www.bing.com', hostname='www.bing.com', exploit=self)
        UA.addHeader('Connection', 'Close')
        reply = UA.GET(self.query % (self.host, self.results_per_page, page))
        
        if 'No results found' in reply:
            raise Exception('No results found')

        #check amount of results
        results = re.search(self.pattern_counter,reply)
        if results:
           count   = results.group(1)
           if self.total == 0:
              self.total = int(count) 
              if self.total <= self.results_per_page:
                 self.morepages = False
           else:
                if int(count) + self.results_per_page >= self.total:
                    self.morepages = False

        return re.findall(self.pattern, reply)
        
    def run(self):
        ret = set([])
        self.getArgs()
        if not self.host: self.host = self.target.interface
        
        self.setInfo("Running %s against %s" % (NAME, self.host))
        if self.verify: logging.info("Result verification enabled")

        page = 0
        try:
            while True:
                vhosts = self.do_query(page)
                if not vhosts: break
                
                for v in vhosts:
                    if v not in ret and v != self.host:
                        if self.verify:
                            try:
                                if self.host == socket.gethostbyname(v): ret.add(v)
                            except Exception:
                                pass
                        else:
                            ret.add(v)
                            
                page += self.results_per_page
                
                if not self.morepages: break

        except Exception, ex:
            logging.error("Error: %s" % ex)

        if ret:
            logging.info("%d total vhosts for %s: %s" % (len(ret), self.host, list(ret)))
            self.target.add_knowledge("vhosts", list(ret), 100)
            self.setInfo("%s attacking %s - done (success)" % (NAME, self.host))
            return 1

        logging.info("No vhosts for %s" % self.host)
        self.setInfo("%s attacking %s - done (failed)" % (NAME, self.host))
        return 0

        
if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
