#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003-2007
#http://www.immunityinc.com/CANVAS/ for more information

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import os
import sys

if '.' not in sys.path: sys.path.append('.')
 
import socket

from exploitutils import *
from libs.canvasos import canvasos
import random

from tcpexploit import tcpexploit
from sunrpc import *
import libs.rpc as rpc
import timeoutsocket

NAME                              = 'SunRPC Port Mapper'
DESCRIPTION                       = 'SunRPC Port Mapper'
DOCUMENTATION                     = {}
DOCUMENTATION['Date public']      = ''
DOCUMENTATION['References']       = ''
DOCUMENTATION['Repeatability']    = ''
DOCUMENTATION['VersionsAffected'] = ''
DOCUMENTATION["Notes"]="""
Runs the equivalant of rpcinfo <Target>. Connects to
port 111/TCP and gets an information dump.

If given the OS detection heuristic option (i.e. -O osguess:1)
then it will also print out the operating system it thinks the
remote system is.

It will not set the OS in the knowledge tree, regardless of what
option it is given.

"""

VERSION          = '1.0'
PROPERTY         = {}
PROPERTY['TYPE'] = 'Recon'
PROPERTY['SITE'] = 'Remote'

TIMEOUT = 10

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port         = 111
        self.host         = ''
        self.version      = 1
        self.result       = ''
        self.resultList   = []
        self.name         = NAME
        self.osguess      = False
        
        self.rpcprog_dict = {
            '100000': 'rpcbind',
            '100001': 'rstatd',
            '100002': 'rusersd',
            '100003': 'nfs',
            '100004': 'ypserv',
            '100005': 'mountd',
            '100006': 'remote_dbx',
            '100007': 'ypbind',
            '100008': 'walld',
            '100009': 'yppasswdd',
            '100010': 'etherstatd',
            '100011': 'rquotad',
            '100012': 'sprayd',
            '100013': '3270_mapper',
            '100014': 'rje_mapper',
            '100015': 'selection_svc',
            '100016': 'database_svc',
            '100017': 'rexd',
            '100018': 'alis',
            '100019': 'sched',
            '100020': 'llockmgr',
            '100021': 'nlockmgr',
            '100022': 'x25.inr',
            '100023': 'statmon',
            '100024': 'statd',
            '100025': 'select_lib',
            '100026': 'bootparam',
            '100027': 'mazewars',
            '100028': 'ypupdated',
            '100029': 'keyserv',
            '100030': 'securelogin',
            '100031': 'nfs_fwdlnit',
            '100032': 'nfs_fwdtrns',
            '100033': 'sunlink_mapper',
            '100034': 'net_monitor',
            '100035': 'database',
            '100036': 'passwd_auth',
            '100037': 'tfsd',
            '100038': 'nsed',
            '100039': 'nsemntd',
            '100040': 'pfs_mountd',
            '100043': 'showfhd',
            '100044': 'mvsmount',
            '100055': 'ioadmd',
            '100059': 'showattrd',
            '100062': 'NETlicense',
            '100065': 'sunisamd',
            '100066': 'debug_svc',
            '100068': 'cmsd',
            '100069': 'ypxfrd',
            '100071': 'bugtraqd',
            '100078': 'kerbd',
            '100080': 'rpc.operd',
            '100083': 'ttdbserverd',
            '100087': 'admind',
            '100099': 'autofsd',
            '100101': 'event',
            '100102': 'logger',
            '100104': 'sync',
            '100105': 'diskinfo',
            '100106': 'iostat',
            '100107': 'hostperf',
            '100109': 'activity',
            '100110': 'db_mgr',
            '100111': 'lpstat',
            '100112': 'hostmem',
            '100113': 'sample',
            '100114': 'x25',
            '100115': 'ping',
            '100116': 'rpcnfs',
            '100117': 'hostif',
            '100118': 'etherif',
            '100119': 'ippath',
            '100120': 'iproutes',
            '100121': 'layers',
            '100122': 'snmp',
            '100123': 'traffic',
            '100124': 'DNInode',
            '100131': 'layers2',
            '100133': 'statd, nsm_addrand',
            '100134': 'ktkt_warnd',
            '100135': 'etherif2',
            '100136': 'hostmem2',
            '100137': 'iostat2',
            '100138': 'snmpv2',
            '100139': 'sender',
            '100146': 'amiserv',
            '100147': 'amiaux',
            '100150': 'ocfserv',
            '100221': 'kcms_server',
            '100227': 'nfs_acl',
            '100229': 'metad',
            '100230': 'metamhd',
            '100231': 'nfsauth',
            '100232': 'sadmind',
            '100233': 'ufsd',
            '100234': 'gssd',
            '100235': 'cachefsd',
            '100242': 'rpc.metamedd',
            '100244': 'sm_symond',
            '100248': 'rpc.pmfd',
            '100249': 'snmpXdmid',
            '100281': 'rpc.metacld',
            '100300': 'nisd',
            '100301': 'nis_cache',
            '100302': 'nis_callback',
            '100303': 'nispasswd',
            '100304': 'fnsypd',
            '100422': 'rpc.mdcommd', #solaris 10
            '105004': 'rpc.pts',
            '120100': 'swu_svr',
            '120126': 'nf_snmd',
            '120127': 'nf_snmd',
            '150001': 'pcnfsd',
            '200000': 'PyramidLock',
            '200001': 'PyramidSys5',
            '200002': 'CADDS_Image',
            '200005': 'pdbDA',
            '200020': 'SWG',
            '200023': 'exportmap',
            '200034': 'Gqsrv',
            '200035': 'Ppt',
            '200036': 'Pmt',
            '200037': 'Msgt',
            '200038': 'Walerts',
            '200039': 'Mgt',
            '200040': 'Pft',
            '200041': 'Msgq',
            '200042': 'Smpsrv',
            '200043': 'Dexsrv',
            '200044': 'Statussrv',
            '200046': 'SessionServer',
            '200047': 'SessionDaemon',
            '200048': 'Pmsgq',
            '200049': 'Filesrv',
            '200050': 'Magfetch',
            '200051': 'Optfetch',
            '200052': 'Securitysrv',
            '200201': 'ecodisc',
            '200202': 'ecolic',
            '200203': 'eamon',
            '200205': 'ecoad',
            '211637': 'rpc.dbserv',
            '217854': 'rpc.taped',
            '300001': 'ADTFileLock',
            '300004': 'rpc.frameusersd',
            '300006': 'fmclient',
            '300007': 'fmeditor',
            '300009': 'fmserver',
            '300019': 'amd',
            '300029': 'rpc.ldmd',
            '300030': 'UpdtAuditsS',
            '300091': 'Dbpass',
            '300214': 'fm_flb',
            '300215': 'fm_fls',
            '300301': 'acuserve',
            '300326': 'dr_daemon',
            '300375': 'rmd',
            '300376': 'agcd',
            '300433': 'bssd',
            '300434': 'drdd',
            '300473': 'ap_daemon',
            '300483': 'cnxmond',
            '300484': 'cnxagentd',
            '300516': 'mcserv',
            '300527': 'cluinfod',
            '300598': 'dmispd',
            '300632': 'prpasswd',
            '344444': 'sfs',
            '390100': 'prestoctl_svc',
            '390101': 'rap',
            '390102': 'rapserv',
            '390103': 'nsrd',
            '390104': 'nsrmmd',
            '390105': 'nsrindexd',
            '390107': 'nsrmmdbd',
            '390109': 'nsrstat',
            '390110': 'nsrjb',
            '390113': 'nsrexec',
            '390115': 'lgtolmd',
            '390400': 'nsrnotd',
            '390600': 'arserverd',
            '390601': 'ntserverd',
            '390602': 'ntclientd',
            '390603': 'aresclsrv',
            '390604': 'arservtcd',
            '390610': 'flashservd',
            '390619': 'arflashbd',
            '390620': 'arfastsrv',
            '390621': 'arfastsrv',
            '390622': 'arfastsrv',
            '390623': 'arfastsrv',
            '390624': 'arfastsrv',
            '390625': 'arfastsrv',
            '390626': 'arfastsrv',
            '390627': 'arfastsrv',
            '390628': 'arfastsrv',
            '390629': 'arfastsrv',
            '390630': 'arfastsrv',
            '390631': 'arfastsrv',
            '390632': 'arfastsrv',
            '390633': 'arfastsrv',
            '390634': 'arfastsrv',
            '390635': 'arlistsrv',
            '390636': 'arlistsrv',
            '390637': 'arlistsrv',
            '390638': 'arlistsrv',
            '390639': 'arlistsrv',
            '390640': 'arlistsrv',
            '390641': 'arlistsrv',
            '390642': 'arlistsrv',
            '390643': 'arlistsrv',
            '390644': 'arlistsrv',
            '390645': 'arlistsrv',
            '390646': 'arlistsrv',
            '390647': 'arlistsrv',
            '390648': 'arlistsrv',
            '390649': 'arlistsrv',
            '391000': 'sgi_snoopd',
            '391001': 'sgi_toolkitbus',
            '391002': 'sgi_fam',
            '391003': 'sgi_notepad',
            '391004': 'sgi_mountd',
            '391005': 'sgi_smtd',
            '391006': 'sgi_pcsd',
            '391007': 'sgi_nfs',
            '391008': 'sgi_rfind',
            '391009': 'sgi_pod',
            '391010': 'sgi_iphone',
            '391011': 'sgi_videod',
            '391012': 'sgi_testcd',
            '391013': 'sgi.ha_hbeat',
            '391014': 'sgi.ha_nc',
            '391015': 'sgi.ha_appmon',
            '391016': 'sgi_xfsmd',
            '391017': 'sgi_mediad',
            '391018': 'sgi.ha_orcl',
            '391019': 'sgi.ha_ifmx',
            '391020': 'sgi.ha_sybs',
            '391021': 'sgi.ha_ifa',
            '391022': 'sgi_reserved',
            '391023': 'sgi_reserved',
            '391024': 'sgi_reserved',
            '391025': 'sgi_reserved',
            '391026': 'sgi_reserved',
            '391027': 'sgi_reserved',
            '391028': 'sgi_reserved',
            '391029': 'sgi_espd',
            '391030': 'sgi_reserved',
            '391031': 'sgi_reserved',
            '391032': 'sgi_reserved',
            '391033': 'sgi_reserved',
            '391034': 'sgi_reserved',
            '391035': 'sgi_reserved',
            '391036': 'sgi_reserved',
            '391037': 'sgi_reserved',
            '391038': 'sgi_reserved',
            '391039': 'sgi_reserved',
            '391040': 'sgi_reserved',
            '391041': 'sgi_reserved',
            '391042': 'sgi_reserved',
            '391043': 'sgi_reserved',
            '391044': 'sgi_reserved',
            '391045': 'sgi_reserved',
            '391046': 'sgi_reserved',
            '391047': 'sgi_reserved',
            '391048': 'sgi_reserved',
            '391049': 'sgi_reserved',
            '391050': 'sgi_reserved',
            '391051': 'sgi_reserved',
            '391052': 'sgi_reserved',
            '391053': 'sgi_reserved',
            '391054': 'sgi_reserved',
            '391055': 'sgi_reserved',
            '391056': 'sgi_reserved',
            '391057': 'sgi_reserved',
            '391058': 'sgi_reserved',
            '391059': 'sgi_reserved',
            '391060': 'sgi_reserved',
            '391061': 'sgi_reserved',
            '391062': 'sgi_reserved',
            '391063': 'sgi_reserved',
            '391434': 'ingsqld',
            '391200': 'afsd',
            '391201': 'dhc',
            '391202': 'cmsd',
            '391203': 'xxx2trif',
            '391204': 'trif2xxx',
            '391205': 'dx',
            '391206': 'licd',
            '395175': 'asedirector',
            '395176': 'aseagent',
            '395177': 'asehsm',
            '395179': 'aselogger',
            '450000': 'EnsignAgent',
            '1000002': 'AdoIfServer',
            '2000004': 'notifServer',
            '20000000': 'retherif',
            '20000001': 'genagnt',
            '20000114': 'acedb',
            '20000115': 'aboutdb',
            '20000116': 'aatdb',
            '20000777': 'seagent',
            '21000023': 'dbsrvr',
            '28000205': 'egts',
            '28000220': 'ers',
            '28000230': 'sas',
            '200100001': 'netinfobind',
            '200100002': 'renderd',
            '536870913': 'SLSd_daemon',
            '536870915': 'uidd',
            '536870916': 'vtsk',
            '536870916': 'userd',
            '536870917': 'bondd',
            '536870918': 'staticd',
            '536870919': 'curved',
            '536870920': 'msglogd',
            '536870921': 'aliasd',
            '536870922': 'ticketd',
            '536870923': 'glossd',
            '536870924': 'futured',
            '536870928': 'priced',
            '536870929': 'ladderd',
            '536870937': 'optiond',
            '536870944': 'ndbportmgr',
            '536870945': 'ndbserver1',
            '536870946': 'ndbserver2',
            '536870947': 'ndbserver3',
            '536870948': 'ndbserver4',
            '536870949': 'ndbserver5',
            '536870950': 'ndbserver6',
            '536870951': 'ndbserver7',
            '536870952': 'ndbserver8',
            '536870953': 'ndbserver9',
            '536870954': 'ndbserver10',
            '536870955': 'ndbserver11',
            '536870956': 'ndbserver12',
            '536870957': 'ndbserver13',
            '536870958': 'ndbserver14',
            '536870959': 'ndbserver15',
            '536870960': 'ndbserver16',
            '536870961': 'ndbserver17',
            '536870962': 'ndbserver18',
            '536870963': 'ndbserver19',
            '536870964': 'ndbserver20',
            '536870965': 'ndbserver21',
            '536870966': 'ndbserver22',
            '536870967': 'ndbserver23',
            '536870968': 'ndbserver24',
            '536870969': 'ndbserver25',
            '536870970': 'ndbserver26',
            '536870971': 'ndbserver27',
            '536870972': 'ndbserver28',
            '536870973': 'ndbserver29',
            '536870974': 'ndbserver30',
            '536870975': 'ndbserver31',
            '536870976': 'ndbserver32',
            '536870977': 'ndbserver33',
            '536870978': 'ndbserver34',
            '536870979': 'ndbserver35',
            '536870980': 'ndbserver36',
            '536870981': 'ndbserver37',
            '536870982': 'ndbserver38',
            '536870983': 'ndbserver39',
            '536870984': 'ndbserver40',
            '536870985': 'ndbserver41',
            '536870986': 'ndbserver42',
            '536870987': 'ndbserver43',
            '536870988': 'ndbserver44',
            '536870989': 'ndbserver45',
            '536870990': 'ndbserver46',
            '536870991': 'ndbserver47',
            '536870992': 'ndbserver48',
            '536870993': 'ndbserver49',
            '536870994': 'ndbserver50',
            '536870995': 'ndbserver51',
            '536870996': 'ndbserver52',
            '536870997': 'ndbserver53',
            '536870998': 'ndbserver54',
            '536870999': 'ndbserver55',
            '536871000': 'ndbserver56',
            '536871001': 'ndbserver57',
            '536871002': 'ndbserver58',
            '536871003': 'ndbserver59',
            '536871004': 'ndbserver60',
            '536871005': 'ndbserver61',
            '536871006': 'ndbserver62',
            '536871007': 'ndbserver63',
            '536871008': 'ndbserver64',
            '536871009': 'ndbserver65',
            '536871010': 'ndbserver66',
            '536871011': 'ndbserver67',
            '536871012': 'ndbserver68',
            '536871013': 'ndbserver69',
            '536871014': 'ndbserver70',
            '536871015': 'ndbserver71',
            '536871016': 'ndbserver72',
            '536871017': 'ndbserver73',
            '536871018': 'ndbserver74',
            '536871019': 'ndbserver75',
            '536871020': 'ndbserver76',
            '536871021': 'ndbserver77',
            '536871022': 'ndbserver78',
            '536871023': 'ndbserver79',
            '536871024': 'ndbserver80',
            '536871025': 'ndbserver81',
            '536871026': 'ndbserver82',
            '536871027': 'ndbserver83',
            '536871028': 'ndbserver84',
            '536871029': 'ndbserver85',
            '536871030': 'ndbserver86',
            '536871031': 'ndbserver87',
            '536871032': 'ndbserver88',
            '536871033': 'ndbserver89',
            '536871034': 'ndbserver90',
            '536871035': 'ndbserver91',
            '536871036': 'ndbserver92',
            '536871037': 'ndbserver93',
            '536871038': 'ndbserver94',
            '536871039': 'ndbserver95',
            '536871040': 'ndbserver96',
            '536871041': 'ndbserver97',
            '536871042': 'ndbserver98',
            '536871043': 'ndbserver99',
            '536871044': 'ndbserver100',
            '541414217': 'fcagent',
            '591751041': 'pnmd',
            '545580417': 'ugidd',
            '555555554': 'inetray.start',
            '555555555': 'inetray',
            '555555556': 'inetray',
            '555555557': 'inetray',
            '555555558': 'inetray',
            '555555559': 'inetray',
            '555555560': 'inetray',
            '600100029': 'des_crypt',
            '600100069': 'fypxfrd',
            '611319808': 'rdbx',
            '630474513': 'bminrd',
            '788585389': 'bwnfsd',
            '805306368': 'dmispd',
            '805898569': 'rdict',
            '806422610': 'piktc_svc',
            '824395111': 'cfsd',
            '912680550': 'cns',
            '1073741824': 'fmproduct',
            '1092830567': 'cfsd',
            '1145324612': 'rdb',
            '1289637086': 'ttsession, dtcm',
            '1289637087': 'ttsession',
            '1342177279': 'ttsession',
            #CA BrigtStor ARCserve
            '351473': 'ASAlert.exe',
            '395644': 'caserved.exe',
            '395645': 'LQserver.exe',
            '395646': 'mediasvr.exe',
            '395647': 'LDBserver.exe',
            '395648': 'caauthd.exe',
            '395649': 'cadiscovd.exe',
            '395650': 'caloggerd.exe',
            }


    def gettcpsock(self, socknode=None, noipv6=0, AF_INET6=0):
        sock = tcpexploit.gettcpsock(self, socknode, noipv6, AF_INET6)
        sock.set_timeout(TIMEOUT)
        return sock
    
    def test(self):
        self.getargs()
        self.setInfo('%s %s:%d - testing'%(self.name,self.host,self.port))

        s = self.gettcpsock()

        try:
            s.connect((self.host, self.port))
        except (socket.error, timeoutsocket.Timeout):
            self.log('No connection could be established')
            return 0
        finally:
            s.close()

        self.setInfo('%s %s:%d - testing succeeded' % (self.name,self.host,self.port))
        return 1

    def getargs(self):
        self.host = self.target.interface
        self.port = int(self.argsDict.get('port',self.port))
        self.getarg("osguess")
    
    def run(self):
        self.getargs()
        self.setInfo('%s %s:%d - (running)'%(self.name,self.host,self.port))  
        try:
            client=rpc.TCPPortMapperClient(self.host,getsock=self)
        except socket.error:
            self.log("Could not connect")
            self.setInfo("rpcdump: failed to connect to %s"%self.host)
            return 0
        except timeoutsocket.Timeout:
            self.log('Timed out')
            return 0
            
        client.covertness=self.covertness
        if self.covertness>5:
            try:
                self.log('Sending camo-call_0')
                data=client.call_0()
            except timeoutsocket.Timeout:
                self.log('Socket call timed out')
                return 0
            except socket.error, ex:
                self.log('Socket error: %s' % ex)
                return 0
        try:
            data=client.Dump()
        except timeoutsocket.Timeout:
            self.log('Socket call timed out')
            return 0
        except socket.error, ex:
            self.log('Socket error: %s' % ex)
            return 0
        
        self.result = data
        self.parseResult()

        if not self.resultList:
            self.log('Did not receive any RPC information, aborting..')
            return 0

        self.printResult()        
        if self.osguess:
            guessed_os=self.get_os()
            self.log("Guessed os: %s"%str(guessed_os))
        return 1 

    def get_os(self):
        """
        Get the operating system (as a guess) from the 
        RPC information we just grabbed
        Now a member function of canvasos object
        """
        ret=canvasos("Unknown")
        ret.guess_from_rpcdump(self.resultList)
        return ret
    
    def parseResult(self):
        self.resultList = []
        reply = self.result
        i = 12
        nument = 5
        if self.result==False:
            return False
        for result in self.result:
            (programnumber,version,proto,port)=result
            try:
                programname=str(self.rpcprog_dict[str(programnumber)])
            except:
                programname='error!'
            if proto==0x6:
                proto='tcp'
            elif proto==17:
                proto='udp'
            else:
                proto='%d'%(proto)
            self.resultList.append((programnumber,programname,version,proto,port))
            i+=4*nument
        return True #success!

    def printResult(self):
        self.log('Program        Program Name      Vers      Proto     Port') 
        for l in self.resultList:
            self.log('%10.10s %15.15s %10.10s %10.10s %10.10s'%(l))
        
    def usage(self):
        print 'Usage: '+sys.argv[0]+' -t target [-p 111]'

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)

