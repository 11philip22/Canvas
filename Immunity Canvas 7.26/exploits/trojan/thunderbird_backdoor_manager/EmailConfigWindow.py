import os
import gtk
import operator

from tb_utils import *

class EmailConfigWindow(object):
    def __init__(self, parent=None, config=None, data=None):
        self.parent       = parent
        self.email_config = config
        self.email_data   = data
        
        self.setup_gui()
        if not parent: return
        window = self.ui.window
        window.set_transient_for(parent.ui.window)
        window.set_destroy_with_parent(True)
        window.set_position(gtk.WIN_POS_CENTER_ON_PARENT)
        window.connect('delete-event', self.on_delete)

    def on_delete(self, widget, event):
        widget.hide()
        return True

    def show(self):
        if not self.ui.window.props.visible:
            self.ui.window.show_all()   

    def setup_gui(self):
        self._wt = gtk.glade.XML(EMAIL_CONFIG_GLADE_FILE)
        self.ui = UI(self._wt.get_widget)
        
        self.ui.okbutton.connect('clicked', lambda w: (self.load_config(w), self.ui.window.hide()))
        self.ui.cancelbutton.connect('clicked', lambda w: self.ui.window.hide())
        self.ui.email_test_button.connect('clicked', self.send_test_email)
        self.ui.smtp_cred_checkbutton.connect('toggled', self.smtp_cred_toggled)

        state = self.email_config.incoming_type == SERVER_IMAP
        self.ui.imap_radiobutton.set_active(state)
        self.ui.pop3_radiobutton.set_active(not state)
        self.ui.in_server_entry.set_text(self.email_config.incoming_server)
        self.ui.in_port_entry.set_text(str(self.email_config.incoming_port))
        self.ui.in_username_entry.set_text(self.email_config.incoming_username)
        self.ui.in_password_entry.set_text(self.email_config.incoming_password)
        self.ui.use_ssl_checkbutton.set_active(self.email_config.use_ssl)
        self.ui.smtp_server_entry.set_text(self.email_config.smtp_server)
        self.ui.smtp_port_entry.set_text(str(self.email_config.smtp_port))
        
        if self.email_config.smtp_cred_equals_in_cred():
            self.ui.smtp_cred_checkbutton.set_active(True)
        else:
            self.ui.smtp_cred_checkbutton.set_active(False)
            self.ui.smtp_username_entry.set_text(self.email_config.smtp_username)
            self.ui.smtp_password_entry.set_text(self.email_config.smtp_password)
            
        self.ui.smtp_auth_combo.set_active(self.email_config.smtp_security) # values are the same as indexes

        self.ui.to_entry.set_text(self.email_data.To)
        self.ui.from_entry.set_text(self.email_data.From)
        self.ui.subject_entry.set_text(self.email_data.Subject)
        self.ui.set_textview_text(self.ui.body_textview, self.email_data.Body)

    def load_config(self, widget):
        # get all values from email config UI into email_config instance
        if self.ui.imap_radiobutton.get_active():
            self.email_config.incoming_type = SERVER_IMAP
        else:
            self.email_config.incoming_type = SERVER_POP3
        
        self.email_config.incoming_server = self.ui.in_server_entry.get_text()

        try:
            port = int(self.ui.in_port_entry.get_text())
        except:
            self.ui.in_port_entry.set_text('110')
            port = 110
            
        self.email_config.incoming_port = port
        
        self.email_config.incoming_username = self.ui.in_username_entry.get_text()
        self.email_config.incoming_password = self.ui.in_password_entry.get_text()
        self.email_config.use_ssl = self.ui.use_ssl_checkbutton.get_active()
        smtp_security = self.ui.smtp_auth_combo.get_active()
        self.email_config.smtp_security = SMTP_SEC_NONE if smtp_security is None else smtp_security
        self.email_config.smtp_server = self.ui.smtp_server_entry.get_text()

        try:
            smtp_port = int(self.ui.smtp_port_entry.get_text())
        except:
            self.ui.smtp_port_entry.set_text('25')
            smtp_port = 25
            
        self.email_config.smtp_port = smtp_port

        if not self.ui.smtp_cred_checkbutton.get_active():
            self.email_config.smtp_username = self.ui.smtp_username_entry.get_text()
            self.email_config.smtp_password = self.ui.smtp_password_entry.get_text()
        else:
            self.email_config.smtp_username = self.email_config.incoming_username
            self.email_config.smtp_password = self.email_config.incoming_password

        self.email_data.To      = self.ui.to_entry.get_text()
        self.email_data.From    = self.ui.from_entry.get_text()
        self.email_data.Subject = self.ui.subject_entry.get_text()
        self.email_data.Body    = self.ui.get_textview_text(self.ui.body_textview)
        self.email_data.save()

        if False in map(operator.truth, (self.email_config.incoming_username,
                                         self.email_config.incoming_password,
                                         self.email_config.incoming_server,
                                         self.email_config.smtp_server)):
            return

        if not self.ui.smtp_cred_checkbutton.get_active() and \
           False in map(operator.truth, (self.email_config.smtp_username,
                                         self.email_config.smtp_password)):
            return

        self.email_config.initialized = True
        self.email_config.save()        
        self.parent.update_server()

    def send_test_email(self, widget):
        self.load_config(None)
        
        if not self.email_data.To or not self.email_data.From or not self.email_data.Subject:
            self.ui.show_error("Email fields are not configured.\nPlease set them before sending emails.", self.ui.window)
            return
        
        if self.parent.sendEmail(self.ui.window):
            self.ui.show_message("Test email sent successfully", self.ui.window)
        
    def smtp_cred_toggled(self, widget):
        state = not widget.get_active()
        self.ui.smtp_username_entry.set_sensitive(state)
        self.ui.smtp_password_entry.set_sensitive(state)
        
