#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from ExploitTypes.localcommand import LocalCommand
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator


NAME="touch from file"
DESCRIPTION="Change file access and modification time srcfile->dstfile on selected node"
DOCUMENTATION={}
VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Windows"] ]

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result=""
        self.name=NAME
        self.srcfile = "."
        self.dstfile = "."
        return

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.srcfile = self.argsDict.get("srcfile", self.srcfile)
        self.dstfile = self.argsDict.get("dstfile", self.dstfile)


        for node in self.argsDict["passednodes"]:
            type=node.nodetype
            if "win32api" in node.capabilities:
                from win32MosdefShellServer import GENERIC_READ
                from win32MosdefShellServer import GENERIC_WRITE
                from win32MosdefShellServer import FILE_SHARE_READ
                from win32MosdefShellServer import OPEN_EXISTING
                from win32MosdefShellServer import FILE_ATTRIBUTE_NORMAL

                srcfd=node.shell.CreateFile(self.srcfile,GENERIC_READ,FILE_SHARE_READ,None,
                                            OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL)
                if srcfd in [0,-1]:
                    self.log("Failed to get fd for %s on node %s"%(self.srcfile,node.getname()))
                    continue
                else:
                    self.log("Srcfd: %x"%srcfd)

                ret,srctimes=node.shell.GetFileTime(srcfd)
                if ret==0:
                    error=srctimes
                    self.log("Failed to get times for %s on node %s. Error: %x"%(self.srcfile,node.getname(),error))
                    if error==6:
                        self.log("The handle was invalid somehow - a directory?")
                    node.shell.CloseHandle(srcfd)
                    continue

                dstfd=node.shell.CreateFile(self.dstfile,GENERIC_WRITE,FILE_SHARE_READ,None,
                                            OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL)
                if dstfd in [0,-1]:
                    self.log("Failed to get fd for %s on node %s"%(self.dstfile,node.getname()))
                else:
                    self.log("dstfd=%x"%dstfd)
                    ret=node.shell.SetFileTime(dstfd,srctimes)
                    if ret==0:
                        self.log("Failed to set times for %s on node %s"%(self.dstfile,node.getname()))
                    else:
                        self.log("Time set %s->%s on node %s" %(self.srcfile,self.dstfile,node.getname()))
                self.log("Closing handles")
                #close both handles
                for fd in [dstfd,srcfd]:
                    if fd not in [0,-1]:
                        node.shell.CloseHandle(fd)

            else:
                self.log("Node of type %s not supported yet."%type)
                pass

        self.setInfo("%s - done (success)"%(NAME))
        return 1



