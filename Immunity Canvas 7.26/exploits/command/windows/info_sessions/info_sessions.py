#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path: sys.path.append(".")

from exploitutils import *
from ExploitTypes.localcommand import LocalCommand

NAME                   = "Info Sessions"
DESCRIPTION            = "List information from all active sessions"
DOCUMENTATION          = {}
VERSION                = "1.0"

PROPERTY               ={}
PROPERTY['TYPE']       = "Commands"
PROPERTY['SITE']       = "Local"
PROPERTY['ARCH']       = [ ["Windows"] ]

DOCUMENTATION['Notes'] = """

This module will list information from all the sessions of the target machine.

The information listed is
 + LogonId
 + Username
 + Domain
 + Authentication Type
 + Logon Type
 + The time when the user last changed the password

Currently, this module only works on win32/win64 nodes.

"""

NOTES                  = """
"""

LOGON                  = {}
LOGON[0]               = 'Unknown'
LOGON[2]               = 'Interactive'
LOGON[3]               = 'Network'
LOGON[4]               = 'Batch'
LOGON[5]               = 'Service'
LOGON[6]               = 'Proxy'
LOGON[7]               = 'Unlock'
LOGON[8]               = 'NetworkClearText'
LOGON[9]               = 'NewCredentials'
LOGON[10]              = 'RemoteInteractive'
LOGON[11]              = 'CachedInteractive'
LOGON[12]              = 'CachedRemoteInteractive'
LOGON[13]              = 'CachedUnlock'

SERVICE                = 5

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name    = NAME
        self.pid     = 0
        self.term    = 0
        self.logfile = None

    def neededListenerTypes(self):
        return []

    def EnumSessions(self, node):
        self.setProgress(0)
        if node.nodetype not in ['win32Node', 'win64Node']:
            self.log_error('Unsupported nodetype: %s' % node.nodetype)
            return 0
        self.setProgress(20)
        ret, sessions = node.shell.EnumSessions()
        self.setProgress(80)

        if ret or not len(sessions):
            self.log_error('Something went wrong, error code: 0x%x' % ret)
            self.log_error('Aborting ...')
            self.setInfo("%s - done (failed)" % (NAME))
            self.setProgress(-1)
            return 0

        sessions_number = len(sessions)

        self.nlog('Total sessions: %s' % sessions_number)

        for i in range(0, sessions_number):
            if sessions[i]['logon_type'] == SERVICE: continue
            self.nlog('='*20 + ' Session: %d ' % i + '='*20)
            self.nlog('LogonID: %.8x:%.8x' % (sessions[i]['logonid'][1], sessions[i]['logonid'][0]))
            self.nlog('Username: %s' % sessions[i]['username'])
            self.nlog('Domain: %s' % sessions[i]['domain'])
            self.nlog('Authentication Type: %s' % sessions[i]['auth_type'])

            try:
                self.nlog('Logon Type: %s' % LOGON[sessions[i]['logon_type']])
            except Exception:
                self.nlog('Logon Type: %s' % LOGON[0])

        self.setInfo("%s - done (success)" % (NAME))
        self.setProgress(100)
        return 1

    def run(self):
        return any(map(self.EnumSessions, self.argsDict["passednodes"]))
