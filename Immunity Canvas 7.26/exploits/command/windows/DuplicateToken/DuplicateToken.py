#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys

if "." not in sys.path: 
    sys.path.append(".")

import os,getopt
import socket
import time

from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
import canvasengine
from shelllistener import *

NAME                = "DuplicateToken"
DESCRIPTION         = "Creates a primary token from another token"
DOCUMENTATION       = {}
VERSION             = "1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Local"
PROPERTY['ARCH']    = [ ["Windows"] ]

from win32MosdefShellServer import TokenPrimary, win32errs

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name   = NAME
        self.token  = 0

    def getargs(self):
        self.getarg("token")
    
    def run(self):
        """
        This run happens on all nodes selected
        """
        self.setInfo("%s (in progress)" % (NAME))
        self.getargs()

        node    = self.argsDict["passednodes"][0]
        token   = 0

        if "win32api" in node.capabilities:

            self.log("Running with token %s"%(self.token))

            ret,token = node.shell.DuplicateToken(int(self.token), TokenType=TokenPrimary)
            if ret != 0:
                self.log("DuplicateToken (%x) Worked! (RETVL: %X)" % (self.token, token))
            else:
                self.log("DuplicateToken (%x) Failed! (ERROR: %X)" % (self.token, token))
                self.setInfo("DuplicateToken finished (Failed with error %s) " % win32errs.get(token,token))
                return 0
 
        self.setInfo("%s (finished - tokens: %x->%x)" % (NAME, self.token,token))
        return 1

if __name__=="__main__":
    print "This win32 local module is meant to be run only within CANVAS"
    
