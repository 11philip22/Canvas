#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
import time

#covers both angles
if "." not in sys.path:
    sys.path.append(".")

import canvasengine
from exploitutils import *

from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
from canvasengine import socket_save_list

NAME                                 = "getpriv"
DESCRIPTION                          = "Enables a privilege"
DOCUMENTATION                        = {}
DOCUMENTATION["NOTES"]               = "Enables a privilege. Use this if you get -1 when using processinject."
DOCUMENTATION["Commandline Example"] = "runmodule getpriv -O privname:SeDebugPrivilege"
VERSION                              = "1.0"
GTK2_DIALOG                          = "dialog.glade2"

PROPERTY                             = {}
PROPERTY['TYPE']                     = "Commands"
PROPERTY['SITE']                     = "Local"
PROPERTY['ARCH']                     = [ ["Windows"] ]

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result   = ""
        self.name     = NAME
        self.privname = "SeDebugPrivilege"

    def getArgs(self):
        self.privname = self.argsDict.get("privname", self.privname)

    def run(self):
        self.setInfo("%s (running)" % NAME)
        self.getArgs()
        ret = 0

        for node in self.argsDict["passednodes"]:
            if node.nodetype in ("win32Node", "win64Node"):
                pid = node.shell.getpid()
                logging.info("Opening Process Token for pid %d" % pid)
                phandle = node.shell.openprocess(pid)
                if phandle == 0:
                    logging.error("OpenProcess failed")
                    continue

                token = node.shell.openprocesstoken(phandle,0x20|0x8) #default is TOKEN_ADJUST_PRIVILEGES (0x20) | TOKEN_QUERY (0x8)
                #SE_PRIVILEGE_ENABLED =0x2
                if token == -1:
                    node.shell.CloseHandle(phandle)
                    logging.warn("OpenProcessToken failed")
                    continue

                newprivname = self.privname + "\x00" #add terminating null
                #SeDebugPrivilege is a good example
                luid = node.shell.lookupprivilegevalue(newprivname)

                if luid == "":
                    node.shell.CloseHandle(phandle)
                    logging.warn("Lookup priv value failed")
                    continue

                logging.info("LUID for priv %s is %s"% (self.privname, hexprint(luid)))


                ##ZeroMemory (&tp, sizeof (tp));
                #tp.PrivilegeCount = 1;
                #tp.Privileges[0].Luid = luid;
                #tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

                #/* Adjust Token privileges */
                #if (!AdjustTokenPrivileges (hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES),
                #                           #&oldtp, &dwSize))
                #{
                #printf ("AdjustTokenPrivileges() failed with code %d\n", GetLastError());
                #CloseHandle (hToken);
                #return 1;
                #}


                ret,lasterror = node.shell.AdjustTokenPrivs(token, luid, 0x2) #enable it
                node.shell.CloseHandle(phandle)
                if ret==0 or (ret!=0 and lasterror==0x514):
                                         #ERROR_NOT_ALL_ASSIGNED
                    logging.warn("Could not adjust priv")
                    ##Nasty hack for being called by processinject
                    ret =0
                    continue
                else:
                    logging.info("Successfully adjusted priv")

            else:
                logging.info("%s node type not supported" % node.nodetype)

        self.result = ret
        self.setProgress(100)
        self.setInfo("%s - done (success: %s)" % (NAME, self.result))
        return 1

