#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os,getopt
import socket
from exploitutils import *

from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
import canvasengine
import time

NAME="startservice"
DESCRIPTION="Starts a service on all selected nodes"
DOCUMENTATION={}
DOCUMENTATION["Note"]="This module starts a service on all selected nodes. If a service is stuck, you can use the halt function to stop waiting."

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result={}
        self.name=NAME
        self.serviceName=""

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.serviceName=self.argsDict.get("serviceName",self.serviceName)
        self.log("Starting service: %s"%self.serviceName)

        for node in self.argsDict["passednodes"]:
            from win32MosdefShellServer import SC_MANAGER_CONNECT
            from win32MosdefShellServer import SERVICE_START
            from win32MosdefShellServer import SERVICE_QUERY_STATUS
            self.result[node.getname()]=0
            type=node.nodetype
            if "win32api" in node.capabilities:
                manager=node.shell.OpenSCManager(access=SC_MANAGER_CONNECT)
                if manager==0:
                    self.log("Couldn't open the SC Manager!")
                else:
                    self.log("SCManager handle=%x"%manager)
                    ret,error=node.shell.OpenService(manager,self.serviceName,access=SERVICE_START|SERVICE_QUERY_STATUS)
                    if ret==0:
                        self.log("Service Name: %s" % self.serviceName)
                        self.log("Manager handle: 0x%08x" % manager)
                        self.log("Error opening service: %x"%error)
                    else:
                        hService=ret
                        ret,err=node.shell.StartService(hService)
                        if ret==0:
                            if err!=1056:
                                self.log("Error calling StartService()")
                            else:
                                self.log("Service already running")
                                self.result[node.getname()]=1
                        else:
                            from win32MosdefShellServer import SERVICE_CONTINUE_PENDING
                            from win32MosdefShellServer import SERVICE_START_PENDING
                            from win32MosdefShellServer import SERVICE_RUNNING

                            success=0
                            while 1 and not success:
                                if self.state==self.HALT:
                                    break
                                time.sleep(3)
                                ret,val=node.shell.QueryServiceStatus(hService)
                                if ret==0:
                                    self.log("QueryServiceStatus failed with 0x%x"%val)
                                else:
                                    currentState=val["dwCurrentState"]
                                    if  currentState in [SERVICE_CONTINUE_PENDING,SERVICE_START_PENDING]:
                                        continue
                                    elif currentState in [SERVICE_RUNNING]:
                                        success=1
                                        self.result[node.getname()]=1
                                        self.log("Started service on node %s"%node.getname())
                                        break
                                    else:
                                        #some other status, so we need to return 0
                                        self.log("Unable to start service with code %s"%currentState)
                                        if currentState==997:
                                            self.log("Overlapped IO error found - we probably just didn't wait long enough.")
                                            self.log("We'll assume the service started.")
                                            success=1

                                        break
                            #close the handle to the service
                            node.shell.CloseServiceHandle(hService)
                    #Close the handle to the service control manager on this node
                    node.shell.CloseServiceHandle(manager)


            elif node.nodetype=="LocalNode" and os.name=="nt":
                try:
                    import win32service
                    ws=win32service
                    hSCM=ws.OpenSCManager(None, None, ws.SC_MANAGER_CONNECT)
                    hS = ws.OpenService(hSCM, self.serviceName, ws.SERVICE_START)
                    ws.StartService(hS, None)
                    ws.CloseServiceHandle(hS)
                    ws.CloseServiceHandle(hSCM)

                except:
                    self.log("Could not import win32service and start the service")

            else:
                self.log("Node of type %s not supported yet."%type)
                pass

        self.setInfo("%s - done"%(NAME))
        return 1



