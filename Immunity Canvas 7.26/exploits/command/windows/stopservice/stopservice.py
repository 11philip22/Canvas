#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell

import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator
from ExploitTypes.localcommand import LocalCommand

NAME                  = "stopservice"
DESCRIPTION           = "Stops a service on all selected nodes"
DOCUMENTATION         = {}
DOCUMENTATION["Note"] = "This module stops a service on all selected nodes. If a service is stuck, you can use the halt function to stop waiting."

VERSION               = "1.0"
GTK2_DIALOG           = "dialog.glade2"

PROPERTY              = {}
PROPERTY['TYPE']      = "Commands"
PROPERTY['SITE']      = "Local"
PROPERTY['ARCH']      = [ ["Windows"] ]


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

from win32MosdefShellServer import SERVICE_CONTINUE_PENDING
from win32MosdefShellServer import SERVICE_START_PENDING
from win32MosdefShellServer import SERVICE_RUNNING
from win32MosdefShellServer import SERVICE_STOPPED
from win32MosdefShellServer import SERVICE_STOP
from win32MosdefShellServer import SERVICE_USER_DEFINED_CONTROL
from win32MosdefShellServer import SERVICE_CONTROL_STOP
from win32MosdefShellServer import SERVICE_QUERY_STATUS

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result={}
        self.name=NAME
        self.serviceName=""

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.serviceName=self.argsDict.get("serviceName",self.serviceName)
        self.log("Stopping service: %s"%self.serviceName)

        for node in self.argsDict["passednodes"]:
            self.result[node.getname()]=0
            type=node.nodetype
            hService=0
            if "win32api" in node.capabilities:
                manager=node.shell.OpenSCManager()
                if manager==0:
                    self.log("Couldn't open the SC Manager!")
                else:
                    self.log("SCManager handle=%x"%manager)
                    access=(SERVICE_STOP|SERVICE_USER_DEFINED_CONTROL|SERVICE_QUERY_STATUS)
                    ret,error=node.shell.OpenService(manager,self.serviceName,access=access)
                    if ret==0:
                        self.log("Error opening service: %x"%error)
                    else:
                        hService=ret
                        ret,err=node.shell.ControlService(hService,SERVICE_CONTROL_STOP)
                        #non-zero on success!
                        if ret==0:
                            #failed
                            if err!=1056:
                                self.log("Error calling ControlService(): %x"%err)
                            else:
                                self.log("Service stopped")
                                self.result[node.getname()]=1
                        else:
                            #succeeded!
                            success=0
                            timesrun=0
                            while 1 and not success:
                                timesrun+=1
                                if self.state==self.HALT:
                                    break
                                time.sleep(3)
                                ret,val=node.shell.QueryServiceStatus(hService)
                                #val is a dictionary, or an int
                                self.log("QueryServiceStatus ret=%x val=%s"%(ret,str(val)))
                                if ret==0:
                                    self.log("QueryServiceStatus failed with 0x%x"%val)
                                    if val==0x5 or timesrun>5:
                                        break
                                else:
                                    currentState=val["dwCurrentState"]
                                    self.log("QueryServiceStatus suceeded. State is %x"%currentState)
                                    if  currentState in [SERVICE_CONTINUE_PENDING,SERVICE_START_PENDING]:
                                        continue
                                    elif currentState in [SERVICE_STOPPED]:
                                        success=1
                                        self.result[node.getname()]=1
                                        self.log("Stopped service %s on node %s"%(self.serviceName,node.getname()))
                                        break
                                    else:
                                        #some other status, so we need to return 0
                                        self.log("Unable to stop service with code %s"%currentState)
                                        if currentState==997:
                                            self.log("Overlapped IO error found - we probably just didn't wait long enough.")
                                            self.log("We'll assume the service started.")
                                            success=1

                                        break

                    #Close the handle to the service control manager on this node
                    node.shell.CloseServiceHandle(manager)
                    if hService:
                        #close the handle to the service
                        node.shell.CloseServiceHandle(hService)
            elif node.nodetype=="LocalNode" and os.name=="nt":
                try:
                    import win32service
                    ws=win32service
                    hSCM=ws.OpenSCManager(None, None, ws.SC_MANAGER_ALL_ACCESS)
                    hS = ws.OpenService(hSCM, self.serviceName, ws.SERVICE_ALL_ACCESS)
                    ws.ControlService(hS, SERVICE_CONTROL_STOP)
                    ws.CloseServiceHandle(hS)
                    ws.CloseServiceHandle(hSCM)

                except:
                    self.log("Could not import win32service and stop the service")

            else:
                self.log("Node of type %s not supported yet."%type)
                pass

        self.setInfo("%s - done"%(NAME))
        return 1



