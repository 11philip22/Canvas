#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import os
import sys
if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
import canvasengine

from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

NAME              = "getkey"
DESCRIPTION       = "Display a registry key from the remote host"
DOCUMENTATION     = {}
VERSION           = "1.0"

PROPERTY          = {}
PROPERTY['SITE']  = "Local"
PROPERTY['TYPE']  = "Commands"
PROPERTY['ARCH']  = [ ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name   = NAME
        self.hkey   = "HKEY_LOCAL_MACHINE"
        self.key    = "SYSTEM\\CurrentControlSet\\Control\\ProductOptions"
        self.subkey = "ProductType"

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))

        self.getarg("hkey")
        self.getarg("key")
        self.getarg("subkey")

        self.log("getkey: hkey=%s key=%s subkey=%s" % (self.hkey, self.key, self.subkey))
        
        for node in self.argsDict["passednodes"]:
            type = node.nodetype
            
            if "win32api" not in node.capabilities:
                #skip nodes we don't support...
                self.log("Node %s: %s node type not supported" % (node.getname(), type))
                continue
                
            hkey2 = node.shell.RegOpenKeyEx(self.hkey, self.key, "KEY_QUERY_VALUE")
            ret = node.shell.RegQueryValueEx(hkey2, self.subkey)
            self.log("result: %s" % prettyprint(ret[2]))
                
        self.setInfo("%s success getting key: <%s\%s\%s>" % (NAME, self.hkey, self.key, self.subkey))
        return 1

if __name__ == '__main__':
    app = theexploit()
    ret = standard_callback_commandline(app)
