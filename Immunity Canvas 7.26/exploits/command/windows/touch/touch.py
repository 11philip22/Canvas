#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell

from ExploitTypes.localcommand import LocalCommand
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator


NAME="touch"
DESCRIPTION="Change file access and modification time on selected node"
DOCUMENTATION={}
VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Windows"] ]

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result=""
        self.name=NAME
        self.filename = "."
        self.actime = self.modtime = "2005,01,25,04,05,06,01"

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.filename = self.argsDict.get("filename", self.filename)
        self.actime = self.argsDict.get("actime", self.actime)
        self.modtime = self.argsDict.get("modtime", self.modtime)
        actime = []
        modtime = []

        for each in self.actime.split(","):
            actime.append(int(each))
        for each in self.modtime.split(","):
            modtime.append(int(each))

        actime += [0, 0]
        modtime += [0,0]

        for node in self.argsDict["passednodes"]:
            type=node.nodetype
 #           if type=="UnixShellNode":
 #               #this is going to trigger snort!
 #               self.log("We just triggered snort")
 #               self.result=node.runcommand("id -a")
 #           elif "linux" in node.capabilities:
 #               uid,euid,gid,egid=node.shell.ids() #0 for success in some cases...
 #               self.result="UID=%d EUID=%d GID=%d EGID=%d"%(uid,euid,gid,egid)
 #               self.log("Result: %s"%self.result)
            if "win32api" in node.capabilities:
                self.result = node.shell.touch(self.filename, int(time.mktime(actime)), int(time.mktime(modtime)))
                self.log("Result: %s" % self.result)
            else:
                self.log("Node of type %s not supported yet."%type)
                pass

        self.setInfo("%s - done (success)"%(NAME))
        return 1



