#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2009
#http://www.immunityinc.com/CANVAS/ for more information

import os
import sys
if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

NAME                = "Create/Modify a registry key "
DESCRIPTION         = "Create/Modify a registry key "
DOCUMENTATION       = {}
DOCUMENTATION["Notes"]= """
If an existing registry subkey is specified then it will be modified, if the subkey does not exist it will be created."""
VERSION             = "1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Local"
PROPERTY['ARCH']    = [ ["Windows"] ]

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result     = 0
        self.name       = NAME

        self.hive       = None
        self.reg_key    = None
        self.reg_subkey = None
        self.reg_val    = None
        self.reg_type   = None

    def getargs(self):
        """Get the key name, value and type we want to set"""

        ##The whole registry string 'hive\\path\\key'
        #self.reg_str  = self.argsDict.get("reg_str", self.reg_str)

        ##Split the string of complete reg path into its components
        #reg_comp      = self.reg_str.split("\\")
        #self.hive     = reg_comp[0]
        #self.reg_subkey  = reg_comp[-1]
        #self.reg_key  = '\\'.join(reg_comp[1:-1])
        ##Get components seperately
        self.hive       = self.argsDict.get("hive", self.hive)
        self.reg_key    = self.argsDict.get("reg_key", self.reg_key)
        self.reg_subkey = self.argsDict.get("reg_subkey", self.reg_subkey)

        ##Value to set reg key to
        self.reg_val  = self.argsDict.get("reg_val", self.reg_val)
        ##Type of registry key
        self.reg_type = self.argsDict.get("reg_type", self.reg_type)


        return

    def run(self):

        self.setInfo("%s (in progress)" % (NAME))
        self.getargs()

        ##Check everything is set
        for v in [self.reg_key, self.reg_subkey, self.reg_type,
                  self.reg_val, self.hive]:
            if v == None or v == "":
                msg = "All variables must be set to use this module"
                self.setInfo("%s - \"%s\" (failed)" % (NAME,msg))
                self.log(msg)
                return 0


        node = self.argsDict["passednodes"][0]
        hKey = None

        for node in self.argsDict["passednodes"]:

            if "win32api" not in node.capabilities:
                ##Skip nodes we don't support...
                self.log("Node %s: %s node type not supported"%
                                                   (node.getname(),
                                                    node.nodetype))
                continue

            ##Get a handle to a registry key
            hKey = node.shell.RegOpenKeyEx(self.hive, self.reg_key,
                                           "KEY_ALL_ACCESS")

            if hKey == 0:
                msg = "Failed to open registry key"
                self.setInfo("%s - \"%s\" (failed)" % (NAME,msg))
                ret = 0
                continue

            self.log("Opened registry key: %s"%(hKey) )

            ##Set reg key to the value specified
            ret,errorcode = node.shell.RegSetValueEx( hKey,
                                                      self.reg_subkey,
                                                      self.reg_type,
                                                      self.reg_val)
            if ret == 0:
                msg = "Could not RegSetValueEx: error %s!" % errorcode
                self.setInfo("%s - \"%s\" (failed)" % (NAME,msg))
                ret = 0

            else:
                msg = "Set the registry key '%s' to '%s'"%("%s\\%s\\%s"%(self.hive, self.reg_key, self.reg_subkey), self.reg_val)
                self.setInfo("%s - \"%s\" (success)" % (NAME, msg))
                ret = 1

        if hKey == None:
            ##This means all passed nodes were not of correct type
            msg = "No nodes of win32 type passed to module"
            self.setInfo("%s - \"%s\" (failed)" % (NAME,msg))
            ret = 0

        self.log(msg)
        return ret

