#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2010
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

import struct
import re

import logging


NAME                = "get_installed_updates"
DESCRIPTION         = "Get Microsoft updates installed in the system"
DOCUMENTATION       = {}
VERSION             = "1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Local"
PROPERTY['ARCH']    = [ ["Windows"] ]

WIN60 = 0
WIN61 = 1
WIN50 = 0
WIN51 = 1
WIN52 = 2


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result             = ""
        self.supportedNodeTypes = ["win32Node", "win64Node"]
        self.name               = NAME
        self.knowledge_name     = 'installed_updates'
        self.matchkb            = lambda x: re.match('(.+?)?(KB[0-9]+)', x)
        self.extractkb          = lambda x: self.matchkb(x).group(2)

    def getargs(self):
        pass

    def filter_by_kb(self, l):
        c = {}
        t = list(set(map(self.extractkb, l)))
        for e in t:
            c[e]=0
        def is_repeated(x):
            kb = self.extractkb(x)
            if c[kb] == 1:
                return False
            else:
                c[kb] = 1
                return True
        l = filter(is_repeated, l)
        return l

    def get_updates_from_5x(self, win_5):
        '''This works by getting all the HotFixes, then check which ones are installed.
        '''
        package_installed = 1
        #get all the keys under HotFix
        hKey    = self.node.shell.RegOpenKeyEx("HKEY_LOCAL_MACHINE",
                                     "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\HotFix",
                                     "KEY_READ")
        if hKey == 0:
            return 0
        subKeys = self.node.shell.RegEnumKeyEx(hKey)
        self.node.shell.RegCloseKey(hKey)
        subKeys = filter(self.matchkb, subKeys)
        #If the update is installed we get installed = 1
        l = []
        for key in subKeys:
            hKey = self.node.shell.RegOpenKeyEx("HKEY_LOCAL_MACHINE",
                                     "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\HotFix\\"+key,
                                     "KEY_READ")
            ret,dtype,data = self.node.shell.RegQueryValueEx(hKey, "Installed")
            #if we have result and value is of type dword
            if ret != 0 and dtype == 4:
                data = struct.unpack('<L',data)[0]
                if data == package_installed:
                    l.append(key)
            self.node.shell.RegCloseKey(hKey)
        #get KB number
        self.installed_updates = list(set(map(self.extractkb, l)))
        return self.installed_updates

    def get_updates_from_6x(self, win_6):
        '''This works by getting all the Packages, then check which ones are updates(KB),
        and finally get the ones installed
        '''
        #Installed flag for packages:
        #0x70 for win6.1
        #0x08 for win6.0
        if win_6 == WIN61:
            package_installed = 0x70
        elif win_6 == WIN60:
            package_installed = 0x8
        #get all the keys under Packages
        hKey    = self.node.shell.RegOpenKeyEx("HKEY_LOCAL_MACHINE",
                                     "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\Packages",
                                     "KEY_READ")
        if hKey == 0:
            return 0
        subKeys = self.node.shell.RegEnumKeyEx(hKey)
        self.node.shell.RegCloseKey(hKey)
        #remove the ones that dont have kb
        subKeys = filter(self.matchkb, subKeys)
        #filter by kb number, some kb's have more than a package number
        subKeys = self.filter_by_kb(subKeys)
        #get CurrentState, if the patch is installed, it should be the value of package_installed
        l = []
        for key in subKeys:
            hKey = self.node.shell.RegOpenKeyEx("HKEY_LOCAL_MACHINE",
                                     "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\Packages\\"+key,
                                     "KEY_READ")
            ret,dtype,data = self.node.shell.RegQueryValueEx(hKey, "CurrentState")
            #if we have result and value is of type dword
            if ret != 0 and dtype == 4:
                data = struct.unpack('<L',data)[0]
                if data == package_installed:
                    l.append(key)
            self.node.shell.RegCloseKey(hKey)
        #get KB number
        self.installed_updates = list(set(map(self.extractkb, l)))
        return self.installed_updates

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        self.getargs()

        self.node     = self.argsDict["passednodes"][0]
        self.nodetype = self.node.nodetype

        host=self.node.get_known_host("127.0.0.1") #always exists.
        knowncontainer = host.get_knowledge(self.knowledge_name)
        if knowncontainer:
            self.installed_updates = knowncontainer.known
        else:
            #There is no easy-portable way of getting installed packages
            #so we implement one for each OS
            myos = self.node.shell.GetVersionEx()
            if myos[0]:
                myos = myos[1]
            else:
                return 0
            self.log('Getting installed updates can take a good time, be patient :)')
            if myos['Major Version'] == 6:
                if myos['Minor Version'] == 0:
                    self.get_updates_from_6x(WIN60)
                elif myos['Minor Version'] == 1:
                    self.get_updates_from_6x(WIN61)
                else:
                    logging.error("OS not supported")
                    return 0
            elif myos['Major Version'] == 5:
                if myos['Minor Version'] == 0:
                    self.get_updates_from_5x(WIN50)
                elif myos['Minor Version'] == 1:
                    self.get_updates_from_5x(WIN51)
                elif myos['Minor Version'] == 2:
                    self.get_updates_from_5x(WIN52)
                else:
                    logging.error("OS not supported")
                    return 0
            else:
                logging.error("OS not supported")
                return 0

            self.result = self.installed_updates
            host.add_knowledge(self.knowledge_name, self.result, 100)

        self.log('Installed updates: %s' % (', '.join(self.result)) )
        self.setInfo("%s - (finished)" % (NAME))
        return 1
