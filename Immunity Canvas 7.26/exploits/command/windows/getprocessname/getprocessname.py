#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

import os,getopt
import socket
from exploitutils import *

from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand
import canvasengine
import time

NAME                   = "getprocessname"
DESCRIPTION            = "Gets process name of our current process"
DOCUMENTATION          = {}
DOCUMENTATION["Notes"] = "Takes in a list of nodes, returns a list of processnames. On win32, this will actually call ps and getpid to handle it."
VERSION                = "1.0"
PROPERTY               = {}
PROPERTY['TYPE']       = "Commands"
PROPERTY['SITE']       = "Local"
PROPERTY['ARCH']       = [ ["Windows"] ]

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result = ""
        self.name   = NAME

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.result = []

        for node in self.argsDict["passednodes"]:
            type=node.nodetype
            host=node.get_known_host("127.0.0.1") #always exists.
            pname=host.get_knowledge("processname")
            if not pname:
                if "win32api" in node.capabilities:
                    pid=host.get_knowledge("PID") #returns a knowledgePrimitive object or None if not found
                    if not pid:
                        pid=node.shell.getpid()
                        host.add_knowledge("PID",pid,100,invisible=0)
                    else:
                        pid=pid.known #get the integer pid from the knowledgePrimitive type get_knowledge returns

                    #we checked for a cached pslist, and if we don't have one, we get one
                    pslist=host.get_knowledge("cachedps")
                    if pslist==None:
                        app=self.engine.getModuleExploit("ps")
                        app.link(self)
                        app.argsDict["passednodes"]=[node] #just get this node's PS, not all of them
                        app.run()
                        pslist=app.result[0]
                    #self.log("pslist=%s"%pslist)
                    ourname=None
                    for ps in pslist:
                        if dInt(ps["pid"])==dInt(pid):
                            ourname=ps["exe"]
                            break

                    if ourname==None:
                        self.log("Failed to find pid %s in the list - are we hidden by a rootkit?"%str(pid))
                        continue

                    host.add_knowledge("processname",ourname,100,invisible=0)
                    pname=ourname
                else:
                    self.log("Node of type %s not supported yet."%type)
                    return 0
            else:
                pname=str(pname.known) #was a knowledgePrimitive, convert to a string


            self.result.append(pname)
            self.log("Result for node %s: %s"%(node.getname(),pname))

        self.setInfo("%s - done (success)"%(NAME))
        return 1



