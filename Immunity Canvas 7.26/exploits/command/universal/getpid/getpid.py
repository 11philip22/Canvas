#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

import os, getopt
import socket
from exploitutils import *


from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

import canvasengine
import time

NAME                      = "getpid"
DESCRIPTION               = "Gets process id on selected node"
DOCUMENTATION             = {}
VERSION                   = "1.0"
GTK2_DIALOG               = "dialog.glade2"
PROPERTY                  = {}
PROPERTY['TYPE']          = "Commands"
PROPERTY['SITE']          = "Local"
PROPERTY['ARCH']          = [ ["Unix"], ["Windows"] ]


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result = ""
        self.name   = NAME

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.result = []

        for node in self.argsDict["passednodes"]:
            type=node.nodetype
            target=node.get_known_host("127.0.0.1") #always exists
            if type=="UnixShellNode":
                self.log("This may trigger snort")
                self.result+=[node.runcommand("id -a")]
            elif type == "linuxNode" or type == "osxNode":
                pid=node.shell.getpid() #0 for success in some cases...
                self.log("Pid: %s"%pid)
                target.add_knowledge("PID", pid, 100)
                self.result+=[pid]
            elif "win32api" in node.capabilities:
                pid=node.shell.getpid()
                target.add_knowledge("PID", pid, 100)
                self.result+=[pid]
                self.log("Pid: %s"%pid)
            else:
                self.log("Node of type %s not supported yet."%type)
                self.result+=["Unknown: %s"%type]

        self.setInfo("%s - done (success)"%(NAME))
        return 1



