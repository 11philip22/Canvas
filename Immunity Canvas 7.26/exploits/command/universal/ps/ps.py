#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys

sys.path.append(".")
sys.path.append("../../")

NAME             = "ps"
DESCRIPTION      = "Gets a listing of the processes on all selected nodes"
DOCUMENTATION    = {}
VERSION          = "1.0"
GTK2_DIALOG      = "dialog.glade2"


PROPERTY         = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Unix"], ["Windows"] ]


def printprocess(level,proc):
    ret = ""
    ret = " " * (4 * level) + "%d %s (threads=%d)" % (proc["pid"], proc["exe"], proc["cntThreads"])
    ret += "\n"
    for c in proc["children"]:
        if proc["pid"] != c["pid"]: # don't link into self
            ret += printprocess(level + 1, c)
    return ret

from ExploitTypes.localcommand import LocalCommand

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result = ""
        self.name   = NAME

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        self.result = []

        for node in self.argsDict["passednodes"]:
            host = node.get_known_host("127.0.0.1") # always exists
            if "win32api" in node.capabilities:
                ret = node.shell.doprocesslisting()
                self.result += [ret]

                pslisting = ""
                # first get the root process to all (the 0th process)
                pidlist = {}
                for r in ret:
                    pidlist[r["pid"]] = r
                    r["children"] = [] # initialize it
                #print "Set up pidlist"
                for r in ret:
                    ppid = r["ppid"]
                    if ppid in pidlist:
                        pidlist[ppid]["children"].append(r)
                    else:
                        pidlist[0]["children"].append(r)

                # ok, now we have a tree, instead of a list
                pslisting += printprocess(0, pidlist[0]) # start with system
                self.log("[ii] Process list:\n%s" % pslisting)
            elif "Unixshell" in node.capabilities:
                self.result += [node.runcommand("ps")]
            else:
                self.log("[EE] %s node type not supported" % node.nodetype)

        self.setInfo("%s - done (success: %s processes)" % (NAME, len(self.result)))
        return 1
