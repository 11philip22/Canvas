#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path:
    sys.path.append(".")

import os,getopt, socket, gzip
import re

from exploitutils import *
import canvasengine

import time
import cPickle
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

NAME             = "Memory Dump Harvest"
DESCRIPTION      = "Parses a memory dump for common pieces of information like email addresses, IP addresses, and more."
DOCUMENTATION    = {}
VERSION          = "1.0"

PROPERTY         = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Unix"], ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result=""
        self.name=NAME
        self.memory_dump             = ""
        self.memory_contents         = ""
        self.current_search_contents = ""
        self.gui_hook                = True

    def getArgs( self ):
        # Memory dump file
        self.memory_dump = self.argsDict.get( "source", self.memory_dump )

    def parse_memory_dump( self ):

        ##Is it gzipped (as given by ram_dumper) ?
        if "gz" in self.memory_dump or "gzip" in self.memory_dump:
            try:
                self.log("Trying to unzip memory dump....")
                gd = gzip.open(self.memory_dump)
                self.log("Memory dump unzipped, reading dump....")
                self.memory_contents = gd.read()
                gd.close()
                return 1
            except IOError, err:
                self.log("Error trying to unzip file: %s - %s" % (self.memory_dump, err) )

        try:
            self.log("Trying to open flat memory dump ....")
            fd = open(self.memory_dump, "rb")
            self.memory_contents = fd.read()
            fd.close()
            return 1
        except IOError, err:
            self.log("Error opening file: %s - %s" % (self.memory_dump, err) )
            return -1

        ##WTF is all this below here about ??? it was never hit in the previous broken
        ## code, summin to do with caching the expensive file read? Will who wrote this
        ## in the first place fix this rather than leaving crap all over the place......
        try:
            memory_array = cPickle.load( open( self.memory_dump,"rb"))
        except:
            self.log("Error opening file: %s" % self.memory_dump )
            return -1

        mem_joiner = ""

        for memory in memory_array:
            mem_joiner += "%s" % str(memory[1])

        self.memory_contents = mem_joiner

        # We don't want to do this everytime and you now will
        # have a fancy binary file to crack open in a hex editor
        fd = open("%s-cached" % self.memory_dump, "wb")
        fd.write( self.memory_contents )
        fd.close()

        return

    def find_ip_addresses( self ):

        pattern = r"([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])"

        matches = re.findall( pattern, self.memory_contents )

        # Clear our global search buffer
        self.current_search_contents = ""

        if matches:

            for ip in matches:

                clean_ip = str(ip).replace(",",".").replace("\'","").replace("(","").replace(")","")
                self.current_search_contents += "%s\n" % clean_ip

            return True
        else:
            return False

    def find_email_addresses( self ):

        pattern = r"[\w\-][\w\-\.]*@[\w\-][\w\-\.]+[a-zA-Z]{1,4}"

        self.current_search_contents = ""

        for m in re.finditer( pattern, self.memory_contents ):
            self.current_search_contents +=  self.memory_contents[m.start():m.end()] + "\n"

        if self.current_search_contents != "":
            return True
        else:
            return False



    def find_http( self ):

        pattern = r"HTTP\/"

        # Always clear the global search buffer first!
        self.current_search_contents = ""

        for m in re.finditer(pattern, self.memory_contents ):

            # Now let's start scanning for a CRLF which should give
            # us a good shot at finding a valid HTTP request
            match_buffer = self.memory_contents[m.start():(m.end() + 1024)]

            if "\x0d\x0a\x0d\x0a" in match_buffer:
                self.current_search_contents += match_buffer[:match_buffer.index("\x0d\x0a\x0d\x0a")] + "\n\n"

        if self.current_search_contents != "":
            return True
        else:
            return False


    def send_to_log( self, logfile ):

        try:
            fd = open( logfile, "wb" )
            fd.write( self.current_search_contents )
            fd.flush()
            fd.close()
            self.log("Saved results to: %s" % logfile)
        except:
            self.log("[*] Failed to open logfile: %s" % logfile)
            return False

        return True

    def run(self):
        self.getArgs()

        self.setInfo("%s (in progress)"%(NAME))
        node=self.argsDict["passednodes"][0]

        self.log("Opening dump file: %s" % self.memory_dump)
        if self.parse_memory_dump() != 1:
            self.setInfo("%s - failed"%(NAME))
            return 0

        harvest_log_location = self.output(ip=node.get_interesting_interface(), subdir="memory_harvest")

        # Now begin applying heuristic functions to try to do some data
        # discovery that may be useful
        if self.find_ip_addresses():
            self.log("[!] Success! Discovered possible IP addresses.")
            #self.send_to_log( "Your_Documents/MemoryDumps/%s--ip_addresses.log" % self.memory_dump.split("/")[::-1][0] )
            self.send_to_log( os.path.join( harvest_log_location, "%s--ip_addresses.log" % (self.memory_dump.split("/")[::-1][0] ) ) )

        if self.find_email_addresses():
            self.log("[!] Success! Discovered possible email addresses.")
            #self.send_to_log( "Your_Documents/MemoryDumps/%s--email_addresses.log" % self.memory_dump.split("/")[::-1][0] )
            self.send_to_log( os.path.join( harvest_log_location, "%s--email_addresses.log" % (self.memory_dump.split("/")[::-1][0] ) ) )

        if self.find_http():
            self.log("[!] Success! Discovered possible HTTP requests.")
            #self.send_to_log( "Your_Documents/MemoryDumps/%s--http_traffic.log" % self.memory_dump.split("/")[::-1][0] )
            self.send_to_log( os.path.join( harvest_log_location, "%s--http_traffic.bin" % (self.memory_dump.split("/")[::-1][0] ) ) )

        self.setInfo("%s - done"%(NAME))

        return 1

