#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator

from ExploitTypes.localcommand import LocalCommand

NAME             = "rmdir"
DESCRIPTION      = "Remove a Directory. Uses first selected node."
DOCUMENTATION    = {}
#QO44056 fixes this?
VERSION          = "1.0"
GTK2_DIALOG      = "dialog.glade2"


PROPERTY         = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Unix"], ["Windows"] ]


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result=""
        self.supportedNodeArgs=[["LocalNode","UnixShellNode","win32Node","linuxNode","win64Node"]]
        self.directory="/doesnotexist"

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        filename=self.argsDict.get("directory",self.directory)

        for node in self.argsDict["passednodes"]:
            type=node.nodetype

            if type not in self.supportedNodeArgs[0]:
                #skip nodes we don't support...
                self.log("%s node type not supported"%type)
                continue

            if type=="UnixShellNode":
                self.result=node.runcommand("rmdir %s" % filename)

            elif type in ["win32Node","linuxNode","win64Node"]:
                self.result=node.rmdir(filename)
            else:
                self.result=os.rmdir(filename)

        #     self.log("current file: %s"% self.result)
        self.setInfo("%s - done (success: %s)"%(NAME,self.result))
        return 1

