#! /usr/bin/env python



#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2004
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell

import canvasengine
from canvasengine import socket_save_list
from ExploitTypes.localcommand import LocalCommand
import time
import shellcodeGenerator


NAME             = "spawn"
DESCRIPTION      = "spawns an executable on the remote host"
DOCUMENTATION    = {}
#QO44056 fixes this?
VERSION          = "1.0"
GTK2_DIALOG      = "dialog.glade2"


PROPERTY         = {}
PROPERTY['TYPE'] = "Commands"
PROPERTY['SITE'] = "Local"
PROPERTY['ARCH'] = [ ["Unix"], ["Windows"] ]


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.result=""
        self.filename="calc.exe"
        self.name=NAME

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        filename=self.argsDict.get("filename",self.filename)
        for node in self.argsDict["passednodes"]:
            ntype=node.nodetype
            shell=node.shell
            if ntype=="UnixShellNode":
                self.result=shell.runcommand("%s&"%filename)
            elif ntype in ["linuxNode"]:
                self.result=shell.fexec(filename,[],[])
            elif ntype in ["win32Node","win64Node","PowerShellNode"]:
                self.result=shell.dospawn(filename)
            elif ntype in ["localNode"]:
                self.result=os.spawnl(filename)
            elif ntype in ["osxNode"]:
                self.result=shell.dospawn(filename)
            else:
                self.log("Node type %s not supported yet"%ntype)
        self.log("result: %s"%self.result)
        self.setInfo("%s - done (success: %s)"%(NAME,self.result))
        return 1

