#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003
#http://www.immunityinc.com/CANVAS/ for more information


#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation


NAME="smtp_mass_scan"
VERSION="1.0"
NOTES2="""
SMTP Fingerprint
  Enter a query
  Go through and get all the unique domain names from that query
  For each domain name get the MX
  Unique the MX's
  For each MX fingerprint
  Report on the results


"""

CHANGELOG="""
1.0 
Created.
"""

DEBUGNOTES="""

"""

import os
import sys
paths = (".",)
for i in paths:
    if i not in sys.path:
        sys.path.append(i)

from exploitutils import *
import time

import libs.searchAPI as searchAPI
from ExploitTypes.localcommand import LocalCommand

DOCUMENTATION          ={}
DOCUMENTATION["Notes"] = """
This module uses a web search query and then generates a list of SMTP servers from it.
These are scanned using smtp_fingerprinter. This module uses multiple threads to do the scanning 
so on XP/Vista we recommend 5 maxthreads.
"""

NAME                   = "smtp_mass_scan"
DESCRIPTION            = "Use a web search query to generate a list of SMTP servers for fingerprinting"
VERSION                = "0.1"
PROPERTY               = {}
PROPERTY['TYPE']       = "Tools"
NOTES                  = """ 
"""

from hostKnowledge import *

class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.netmask="32"
        self.autohack_state=False 
        self.query="Immunity CANVAS"
        self.name=NAME

    def run_on_host(self,target):
        """ 
        runs once on each host that is alive in the netrange 
        """
        if self.state==self.HALT:
            self.log("Not running on target %s, halted"%target.interface)
            return 0

        host=target.interface
        self.log("Running on %s"%host)

        try:
            app=self.engine.getModuleExploit("smtp_fingerprint")
            app.link(self)
            app.target=target
            ret=app.run()
            if ret:
                app.setProgress(100)
            else:
                app.setProgress(-1)
            result=app.result
        except:
            import traceback
            traceback.print_exc(file=sys.__stdout__)

    def getargs(self):
        #we don't use the target host at all - we generate a new list of target
        #hosts based on the query string Yahoo results.        
        #self.host=self.target.interface
        #self.netmask=dInt(str(self.argsDict.get("netmask",self.netmask)).replace("/",""))
        self.maxthreads=int(self.argsDict.get("maxthreads",self.maxthreads))
        self.getarg("query")

    def run(self):
        self.getargs()
        self.log("SMTP Mass Scan Query: %s"%self.query)
        self.log("Maxthreads: %d"%self.maxthreads)
        self.node=self.argsDict["passednodes"][0]
        dothreads = "threads" in self.node.capabilities
        if not dothreads:
            self.log("Warning: not using threads because select node does not support threading")
        self.setInfo("[SMTP Mass Scan] Scanning query: %s"%(self.query))
        self.setProgress(5)
        self.log("Getting domains from web search query: %s"%self.query)
        domain_list=searchAPI.getWebDomains(self.query)
        self.log("Found %d domains"%len(domain_list))
        smtp_server_list=[]
        for domain in domain_list:
            #get_mx is in exploitutils
            self.log("Found: %s" % domain)
            server=get_mx(domain)
            if server:
                smtp_server_list+=[server]
                
        self.log("Found %d smtp servers."%len(smtp_server_list))
        self.smtp_server_list=uniquelist(smtp_server_list)
        self.run_on_list_of_hosts(self.smtp_server_list, threads=dothreads)
        
        return 1

    def setVersions(self):
        self.versions={}
        self.versions[1]=("All", None)


    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)

