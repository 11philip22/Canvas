#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import os
import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")

import time

import canvasengine
from tcpexploit import tcpexploit
from exploitutils import *

import smtplib

from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email.Utils import COMMASPACE, formatdate
from email import Encoders

NAME                   = "emailsender"
DESCRIPTION            = "Sends email via SMTP"
DOCUMENTATION          = {}

VERSION                = "1.0"

PROPERTY               = {}
PROPERTY['TYPE']       = "Tools"
PROPERTY['SITE']       = "Remote"
DOCUMENTATION["Notes"] = """

You can send email to multiple recipients, use comma as a separator
(toaddr argument).

You can add multiple attachments, use ; as a separator between full paths to
files (attach_files argument). 

Do not use argument 'attachments' from command line, it expects embedded
dictionaries and is meant to be used by other modules that link us.

Use 'attach_files' instead, which is also the default for the UI dialog.

"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port         = 25
        self.host         = "localhost"
        self.shellcode    = "\xcc" * 298
        self.ssl          = 0
        self.version      = 1
        self.name         = NAME        
        
        self.attachments  = {} #none by default
        self.fromaddr     = ""
        self.toaddr       = ""
        self.subject      = "Hello!"
        self.bodytext     = ""

        # ; Separated list of filenames, mainly to be used from UI
        self.attach_files = ""


    def test(self):
        self.host = self.target.interface
        self.port = int(self.argsDict.get("port", self.port))
        
        s = self.gettcpsock()
        
        try:
            s.connect((self.host, self.port))
        except Exception:
            self.log("No connection could be established")
            return 0
        
        return 1

    def getargs(self):
        self.port  = int(self.argsDict.get("port", self.port))
        self.attachments = self.argsDict.get("attachments", self.attachments)
        
        self.getarg("fromaddr")
        self.getarg("toaddr")
        self.getarg("subject")
        self.getarg("bodytext")
        self.getarg("attach_files")
        
    def run(self):
        self.getargs()
        self.host  = self.target.interface

        if not self.toaddr:
            self.log('Did not specify a recipient, aborting..')
            return 0

        if not self.fromaddr:
            self.log('Did not specify a sender, aborting..')
            return 0

        # For multiple recipients, separate addresses by commas
        recipients = map(str.strip, self.toaddr.split(','))
        
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME, self.host, self.port))

        self.log("Sending email through %s:%d" % (self.host, self.port))

        try:
            smtp           = smtplib.SMTP(self.host, self.port)
            
            msg            = MIMEMultipart()
            msg['From']    = self.fromaddr
            msg['To']      = ','.join(recipients)
            msg['Date']    = formatdate(localtime=True)
            msg['Subject'] = self.subject

            if "<html>" in self.bodytext.lower():
                msg.attach(MIMEText(self.bodytext, 'html'))
            else:
                msg.attach(MIMEText(self.bodytext))

            if self.attach_files:
                for f in map(str.strip, self.attach_files.split(';')):
                    try:
                        data = open(f, 'rb').read()
                        filename = os.path.basename(f)
                        self.attachments[filename] = {}
                        self.attachments[filename]['data'] = data
                    except Exception, ex:
                        self.log(str(ex))

            for filename in self.attachments:
                # default to: application/octet-stream
                attachmentType = self.attachments[filename].get('type', "application/octet-stream").split('/')

                part = MIMEBase(*attachmentType)
                part.set_payload(self.attachments[filename]['data'])
                Encoders.encode_base64(part)
                part.add_header('Content-Disposition', 'attachment; filename="%s"' % filename)
                msg.attach(part)

            smtp.sendmail(self.fromaddr, recipients, msg.as_string())
            smtp.quit()
        except Exception, ex:
            self.log('Error: %s' % ex)
            return 0
        
        return 1

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION,VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
    
