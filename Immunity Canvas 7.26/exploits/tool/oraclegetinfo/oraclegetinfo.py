#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002
#http://www.immunityinc.com/CANVAS/ for more information

import sys
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")
sys.path.append("../../libs")
sys.path.append("./libs")

import os
import getopt
import socket
import timeoutsocket
import sys
import struct
import time
import array
import select

# CANVAS modules
from exploitutils import *
from tcpexploit import *
import addencoder
import win32shell
import canvasengine
import shellcodeGenerator

# TNS lib
import tnslib

# GUI info
NAME="Oracle Info Gathering"
DESCRIPTION="Oracle <= Oracle Info"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Oracle"
DOCUMENTATION["Usage"]="Run this against a suspected Oracle database to gather some information about it.\nVersion 10 does not allow you to gather a list of databasenames."

VERSION="0.3"

GTK2_DIALOG="dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Tools"


NOTES="""
Attempt to gather some information on a remote Oracle database
"""

CHANGELOG="""
"""

# GUI run exploit
runAnExploit_gtk2 = canvasengine.runAnExploit_gtk2
runExploit = canvasengine.runExploit

TNS = tnslib.TNS()
TNSCONN = tnslib.TNSCONNECT()

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.host = "vmware.local"
        self.port = 1521 #this is the only real variable
        self.done = 0
        self.version = 0
        self.dbasenames=[]   
        self.result = {}
        self.name=NAME
        return

    def connectToHost(self, t_host, t_port):
        s=self.gettcpsock()
        try:
            ret=s.connect((t_host, t_port))
        except:
            self.raiseError("Could not connect to %s:%d"% (self.host, self.port))
        if ret==-1:
            self.raiseError("Could not connect to %s:%d"% (self.host, self.port))
        return s

    def test(self):
        #just verify 1521 is listening     
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        s=self.gettcpsock()
        try:
            s.connect((self.host, self.port))
        except:
            self.log("Could not connect to Oracle TNS listener at %s:%d"% (self.host, self.port))
            return 0
        self.log("Connected to TNS listener at %s:%d"% (self.host, self.port))

        return 1


    def getDbaseNames(self,dbaseinfo):
        names = []
        #searching for "_NAME="
        #should really parse this info properly
        pos = dbaseinfo.find("_NAME=")
        while pos>0:
            dbaseinfo = dbaseinfo[(pos+6):len(dbaseinfo)]
            end = dbaseinfo.find(")")
            str1 = ("(SERVICE_NAME=%s)"% dbaseinfo[:end])
            if str1 not in names:
                names.append(str1)
            str2 = ("(SID=%s)"% dbaseinfo[:end])
            if str2 not in names:
                names.append(str2)
            pos = dbaseinfo.find("_NAME=")
        #self.log("Potential service names: %s"%names)
        return names


    def requestVersionInfo(self):
        s = self.connectToHost(self.host, self.port)
        if not s:
            return 0
        vsnreq = TNSCONN.getVersionCommand()
        TNS.sendConnectRequest(s,vsnreq) 
        TNS.recvTNSPkt(s)
        if (TNS.packet_type == TNS.TNS_TYPE_ACCEPT):
            ver_info = TNS.recvAcceptData(s,TNS.tns_data)
            vsnnum = TNS.getVSNNUM(ver_info)
            self.version = TNS.assignVersion(vsnnum)
            ver=0
            if (self.version == TNS.TNS_V7):
                ver = 7
            elif (self.version == TNS.TNS_V8):
                ver = 8
            elif (self.version == TNS.TNS_V9):
                ver = 9
            elif (self.version == TNS.TNS_V10):
                ver = 10
            elif (self.version == TNS.TNS_V11):
                ver = 11

            if ver==0:
                self.log("Version not known? Please paste to feedback@immunityinc.com")
                self.log("Version: %s" % str(self.version))

            self.log("TLS Listener version detected: %d (0x%x)" % (ver,self.version))
            ret = 1
        else:
            self.log("Version request not accepted")
            ret = 0
        s.close()
        return ret

    def requestDatabaseInfo(self):
        ret = 0
        s = self.connectToHost(self.host, self.port)
        if not s:
            return ret
        s.set_timeout(150)
        self.log("Timeout is %d"%s.get_timeout())
        tnsconn = tnslib.TNSCONNECT()
        vsnreq = tnsconn.getStatusCommand()
        TNS = tnslib.TNS()        

        TNS.sendConnectRequest(s,vsnreq) 
        TNS.recvTNSPkt(s)    
        if (TNS.packet_type == TNS.TNS_TYPE_REFUSE):    #should have received database info
            self.log("Request for database info was refused.")
            ret = 0
        elif (TNS.packet_type == TNS.TNS_TYPE_ACCEPT):    #should have received database info
            self.log("Received database info")
            ret = TNS.recvAcceptData(s,TNS.tns_data)
        else:
            self.log("Did not receive database info")
            ret = 0
        s.close()
        return ret


    def verifyDatabaseInfo(self,info):
        ret = 0
        if not info:
            return ret

        #get dbase names
        potential_names = self.getDbaseNames(info) #"SID=" and "SERVICE_NAME=" prepended to each name
        for database in potential_names:
            self.log("Checking database %s"% database)
            s = self.connectToHost(self.host, self.port)
            if not s:
                self.log("Could not establish tcp session with %s:%d"%(self.host, self.port))
                return ret
            s.set_timeout(150)
            #self.log("Timeout is %d"%s.get_timeout())
            tnsconn = tnslib.TNSCONNECT()

            vsnreq = tnsconn.getDatabaseNameConnectReq(self.host,database,self.port)
            # TNS = tnslib.TNS()        
            while 1:
                TNS.sendConnectRequest(s,vsnreq)
                TNS.recvTNSPkt(s)
                if (TNS.packet_type == TNS.TNS_TYPE_REDIRECT): #should have received redirect
                    self.log("Recvd redirect")
                    self.dbasenames.append(database)
                    ret = 1
                elif (TNS.packet_type == TNS.TNS_TYPE_RESEND): #just resend and hope for the best
                    continue
                elif (TNS.packet_type == TNS.TNS_TYPE_REFUSE): 
                    self.log("TNS Connect Request to %s was refused"%database)
                elif (TNS.packet_type == TNS.TNS_TYPE_ACCEPT):
                    self.log("TNS Connect Request to %s was accepted"%database)
                    self.dbasenames.append(database)
                    ret = 1
                else:
                    self.log("TNS Connect Request to %s received unexpected response"%(database))
                break
            s.close()
        self.log("Database names: %s"% self.dbasenames)

        return ret


    def run(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.setInfo("%s targeting %s:%d (in progress)"% (NAME, self.host, self.port))
        self.log("%s targeting %s:%d (in progress)"% (NAME, self.host, self.port))

        self.log("Requesting version info")
        self.requestVersionInfo()
        self.result["version"] = self.version

        self.log("Requesting Database Info")
        
        try:
            dbaseinfo = self.requestDatabaseInfo()
        except self.error, msg:
            self.log("Failed to request database info: %s"%msg)
            self.setInfo("Failed to request database info: %s"%msg)
            self.setProgress(-1)
            return 0
        
        if dbaseinfo:
            self.log("Raw listener/database info: %s"%dbaseinfo)

            self.log("Extracting Database Info")
            self.verifyDatabaseInfo(dbaseinfo)
            self.result["dbasenames"] = self.dbasenames

        self.log("oraclegetinfo done.")
        return 1


if __name__== '__main__':

    print "Running "+NAME+" exploit v "+VERSION
    app = theexploit()
    ret=standard_callback_commandline(app)

    if ret not in [1,0]:
        ret.interact() 
